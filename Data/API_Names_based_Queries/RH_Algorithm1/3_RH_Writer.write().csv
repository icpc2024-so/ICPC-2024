code
"public class MockupLocationProvider extends LocationProvider {      public MockupLocationProvider() {         //prepare a file or RecordStore with locations here     }      public Location getLocation(int arg0) throws LocationException,             InterruptedException {               //read data from file or RecordStore         double latitude = 321;         double longitude = 34;         float altitude = 21;         //create and return location         Location result = new GPSLocation(latitude,              longitude, altitude);                return result;     }      public int getState() {         // mockup location provider always available          return LocationProvider.AVAILABLE;     }      public void reset() {         // your code             }      public void setLocationListener(LocationListener listener,              int interval, int timeout, int maxAge) {         // your code             } }"
"DescribeInstancesRequest request = new DescribeInstancesRequest(); List&lt;String&gt; valuesT1 = new ArrayList&lt;String&gt;(); valuesT1.add(""my-keypair-name""); Filter filter = new Filter(""key-name"", valuesT1);  DescribeInstancesResult result = ec2.describeInstances(request.withFilters(filter));  List&lt;Reservation&gt; reservations = result.getReservations();  for (Reservation reservation : reservations) {     List&lt;Instance&gt; instances = reservation.getInstances();      for (Instance instance : instances) {          System.out.println(instance.getInstanceId());       } }"
"JSONObject jsonObject;                       String addre = null;                      Address addr1 = null;                     try {                         jsonObject = serverCall.getName(Double.parseDouble(latitude.getText().toString()),                                  Double.parseDouble(longitude.getText().toString()));                            addre = ((JSONArray)jsonObject.get(""results"")).getJSONObject(0).getString(""formatted_address"");                          if(""OK"".equalsIgnoreCase(jsonObject.getString(""status""))){                             Log.d(""status"",jsonObject.getString(""status""));                             addr1 = new Address(Locale.getDefault());                             for(int i=1;i&lt;((JSONArray)jsonObject.get(""results"")).length()-2;i++){                              JSONArray addrComp = ((JSONArray)jsonObject.get(""results"")).getJSONObject(i).getJSONArray(""address_components"");                             //Toast.makeText(getApplicationContext(),addrComp.toString(),Toast.LENGTH_LONG).show();                            // Log.d(""Geocoder"",addrComp.toString());                                         for(int j=0;j&lt;addrComp.length();j++){                               String neighborhood = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                                 if (neighborhood.compareTo(""neighborhood"") == 0) {                                     String neighborhood1 = ((JSONObject)addrComp.get(j)).getString(""long_name"");                                         addr1.setSubThoroughfare(neighborhood1);                              }                              String locality = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                             if (locality.compareTo(""locality"") == 0) {                                 String locality1 = ((JSONObject)addrComp.get(0)).getString(""long_name"");                                     addr1.setLocality(locality1);                             }                              String subadminArea = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                             if (locality.compareTo(""administrative_area_level_2"") == 0) {                                 String subadminArea1 = ((JSONObject)addrComp.get(j)).getString(""long_name"");                                     addr1.setSubAdminArea(subadminArea1);                             }                             String adminArea = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                             if (adminArea.compareTo(""administrative_area_level_1"") == 0) {                                 String adminArea1 = ((JSONObject)addrComp.get(j)).getString(""long_name"");                                     addr1.setAdminArea(adminArea1);                             }                              String postalcode = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                             if (postalcode.compareTo(""postal_code"") == 0) {                                 String postalcode1 = ((JSONObject)addrComp.get(j)).getString(""long_name"");                                     addr1.setPostalCode(postalcode1);                             }                             String sublocality = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                             if (sublocality.compareTo(""sublocality"") == 0) {                                 String sublocality1 = ((JSONObject)addrComp.get(j)).getString(""long_name"");                                     addr1.setSubLocality(sublocality1);                              }                             String countr = ((JSONArray)((JSONObject)addrComp.get(j)).get(""types"")).getString(0);                             if (countr.compareTo(""country"") == 0) {                                 String countr1 = ((JSONObject)addrComp.get(j)).getString(""long_name"");                                  addr1.setCountryName(countr1);                             }                              }                             }                             addr_label.setText(""Address:""+addre/*+"",""+addr1.getSubLocality()+"",""+addr1.getSubThoroughfare()+"",""+addr1.getLocality()*/);                             city.setText(""City:""+addr1.getSubAdminArea());                             state.setText(""State:""+addr1.getAdminArea());                             country.setText(""Country:""+addr1.getCountryName());                             pin.setText(""Pin:""+addr1.getPostalCode());                         }else{                             Toast.makeText(getApplicationContext(),                                      ""You may check your internet connection or latitude and longitude values"",Toast.LENGTH_LONG).show();                         }                     } catch (JSONException e) {                          Toast.makeText(getApplicationContext(),                                  e.toString(),Toast.LENGTH_LONG).show();                         e.printStackTrace();                         Log.d(""JSONException"",e.toString());                     }"
"import org.mockito.internal.creation.CglibMockMaker; import org.mockito.invocation.Invocation; import org.mockito.invocation.MockHandler; import org.mockito.listeners.InvocationListener; import org.mockito.listeners.MethodInvocationReport; import org.mockito.mock.MockCreationSettings; import org.mockito.plugins.MockMaker;  public class ValidationMockMaker implements MockMaker {     private final MockMaker delegate = new CglibMockMaker();      public ValidationMockMaker() {     }     @Override     public &lt;T&gt; T createMock(MockCreationSettings&lt;T&gt; settings, MockHandler handler) {         settings.getInvocationListeners().add(new InvocationListener() {              @Override             public void reportInvocation(MethodInvocationReport methodInvocationReport) {                 Invocation invocation = (Invocation) methodInvocationReport.getInvocation();                 validateArguments(invocation.getArguments());                 validateReturnValue(methodInvocationReport.getReturnedValue());             }         });         return delegate.createMock(settings, handler);     }      @Override     public MockHandler getHandler(Object mock) {         return delegate.getHandler(mock);     }      @Override     public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) {         delegate.resetMock(mock, newHandler, settings);     }      protected void validateArguments(Object... arguments) { //        Arrays.stream(arguments).forEach(Objects::requireNonNull);     }      private void validateReturnValue(Object result) { //        Objects.requireNonNull(result);     } }"
"public class SeasonChecker {     public enum Season {Summer, Autumn, Winter, Spring};     private List&lt;SeasonRange&gt; _seasons = new List&lt;SeasonRange&gt;();      public void DefineSeason(Season season, DateTime starting, DateTime ending)     {         starting = starting.Date;         ending = ending.Date;          if(ending.Month &lt; starting.Month)         {             // split into 2             DateTime tmp_ending = new DateTime(ending.Year, 12, 31);             DateTime tmp_starting = new DateTime(starting.Year, 1, 1);              SeasonRange r1 = new SeasonRange() { Season = season, Starting= tmp_starting, Ending = ending };             SeasonRange r2 = new SeasonRange() { Season = season, Starting= starting, Ending = tmp_ending };              this._seasons.Add(r1);             this._seasons.Add(r2);         }         else         {             SeasonRange r1 = new SeasonRange() { Season = season, Starting= starting, Ending = ending };             this._seasons.Add(r1);         }     }      public Season GetSeason(DateTime check)     {         foreach(SeasonRange range in _seasons)         {             if(range.InRange(check))                 return range.Season;         }          throw new ArgumentOutOfRangeException(""Does not fall into any season"");     }       private class SeasonRange     {         public DateTime Starting;         public DateTime Ending;         public Season Season;          public bool InRange(DateTime test)         {             if(test.Month == Starting.Month)             {                 if(test.Day &gt;= Starting.Day)                 {                     return true;                 }             }             else if(test.Month == Ending.Month)             {                 if(test.Day &lt;= Ending.Day)                 {                     return true;                 }             }             else if(test.Month &gt; Starting.Month &amp;&amp; test.Month &lt; Ending.Month)             {                 return true;             }              return false;         }      } }"
"String query = ""env.adapterName=DefaultAdapter""     + ""&amp;env.systemName=DefaultSystem""     + ""&amp;env.userId=admin""     + ""&amp;env.progId=PerlHttpTest"";     + ""&amp;"" + URLEncoder.encode(interopApiName, ""UTF-8"") + ""="" + URLEncoder.encode(apiName, ""UTF-8"")     + ""&amp;"" + URLEncoder.encode(interopApiData, ""UTF-8"") + ""="" + URLEncoder.encode(xmlData, ""UTF-8"");  URLConnection connection = new URL(""http://hostname/interop/InteropHttpServlet"").openConnection(); connection.setDoOutput(true); // Triggers POST. connection.getOutputStream().write(query.getBytes(""UTF-8""));  InputStream response = connection.getInputStream(); // ..."
"interface DistributionProvider&lt;D extends Distribution&gt; {   D create(ValueRange vr); }  class UniformDistributionProvider implements DistributionProvider&lt;UniformDistribution&gt; {   UniformDistribution create(ValueRange vr) {     return new UniformDistribution(vr);   } }  class ForwardMarkovDistributionProvider implements DistributionProvider&lt;ForwardMarkovDistribution&gt; {    private final MarkovDistribution.Parameters params;    ForwardMarkovDistributionProvider(MarkovDistribution.Parameters pParams) {     params = pParams;   }    ForwardMarkovDistribution create(ValueRange vr) {     return new ForwardMarkovDistribution(vr, params);   } }  // etc."
"public ActionErrors validate(ActionMapping mapping, HttpServletRequest request)      {           .......            if(!Validation.isValidEmailAddress(getEmailid()))                   {               errors.add(""emailid"", new ActionError(""prompt.email.error""));                   }           if(!Validation.isPhoneNumberValid(getMobile()))           {               errors.add(""mobile"", new ActionError(""prompt.contactno.error""));           }            if(!Validation.isNumeric(getPrice()))           {               errors.add(""price"", new ActionError(""prompt.price.error""));           }           return errors;     }"
