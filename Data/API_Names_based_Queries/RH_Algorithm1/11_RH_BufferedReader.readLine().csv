code
"protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {     response.setContentType(""text/plain"");     response.setHeader(""Content-Disposition"", ""attachment;filename=numbers.txt""); // Force download popup.      Connection connection = null;     Statement statement = null;     ResultSet resultSet = null;     Writer writer = response.getWriter();      try {         connection = database.getConnection();         statement = connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);         statement.setFetchSize(Integer.MIN_VALUE);         resultSet = statement.executeQuery(""SELECT number FROM phonenumbers"");          while (resultSet.next()) {             writer.write(resultSet.getString(""number""));             if (!resultSet.isLast()) {                 writer.write("","");             }         }     } catch (SQLException e) {         throw new ServletException(""Query failed!"", e);     } finally {          if (resultSet != null) try { resultSet.close; } catch (SQLException logOrIgnore) {}         if (statement != null) try { statement.close; } catch (SQLException logOrIgnore) {}         if (connection != null) try { connection.close; } catch (SQLException logOrIgnore) {}     } }"
"IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();  IMarker[] markers = root.findMarkers(IMarker.PROBLEM, false, IResource.DEPTH_ZERO);  for (int i = 0; i &lt; markers.length; i++) {   String message = (String) markers[i].getAttribute(IMarker.MESSAGE);    if (message != null &amp;&amp; message.startsWith(""this is a test"")) {     markers[i].delete();   } }  //IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot(); Map attribs = new HashMap(); for (int i = 0; i &lt; 8; i++) {   attribs.put(IMarker.SEVERITY, new Integer(IMarker.SEVERITY_ERROR));   attribs.put(IMarker.MESSAGE, ""this is a test "" + i);   attribs.put(""bogus field"", ""some text"");   MarkerUtilities.createMarker(root, attribs, IMarker.PROBLEM); }"
"Button btnDownload = (Button) findViewById(R.id.DownloadView);   Button btnApp = (Button) findViewById(R.id.AppView);    btnDownload.setOnClickListener(handler);   btnApp.setOnClickListener(handler);    View.OnClickListener handler = new View.OnClickListener(){    public void onClick(View v) {      if(v==btnDownload){              // doStuff             Intent intentMain = new Intent(CurrentActivity.this ,                                             SecondActivity.class);             CurrentActivity.this.startActivity(intentMain);             Log.i(""Content "","" Main layout "");     }      if(v==btnApp){              // doStuff             Intent intentApp = new Intent(CurrentActivity.this,                                            ThirdActivity.class);              CurrentActivity.this.startActivity(intentApp);              Log.i(""Content "","" App layout "");      }    }   };"
"private void render() {     GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT);          // Clear The Screen And The Depth Buffer      loadIdentity();     GL11.glRotatef(yspeed++,0.0f,1.0f,0.0f);     drawRect(texture, 1f, 1f, 1f);      GL11.glMatrixMode(GL11.GL_PROJECTION);     GL11.glLoadIdentity();     GL11.glOrtho(0, 640, 480, 0, -1000, 1000);     GL11.glMatrixMode(GL11.GL_MODELVIEW);     GL11.glLoadIdentity();      font2.drawString(100, 100, ""NICE LOOKING FONTS!"", Color.green);  }  public void loadIdentity(){     GL11.glMatrixMode(GL11.GL_PROJECTION); // Select The Projection Matrix     GL11.glLoadIdentity(); // Reset The Projection Matrix      // Calculate The Aspect Ratio Of The Window     GLU.gluPerspective(       45.0f,       (float) Display.getDisplayMode().getWidth() / (float) Display.getDisplayMode().getHeight(),       0.1f,       100.0f);       GL11.glMatrixMode(GL11.GL_MODELVIEW);     GL11.glLoadIdentity();     float camAngle = (float) Math.atan2(playerX, playerZ);     float radius = 5;     GLU.gluLookAt(playerX + (float)(Math.sin(camAngle) * radius), 0, playerZ + (float)(Math.cos(camAngle) * radius), 0, 0, 0, 0, 1, 0);     //GL11.glGetMatrix(); }"
"Button btnA = (Button) findViewById(R.id.button1);      btnA.setOnClickListener(new View.OnClickListener() {               public void onClick(View v) {                      // TODO Auto-generated method stub                      startActivity(new Intent (""com.emods.app1.BUTTONA""));           }          });    Button btnB = (Button) findViewById(R.id.button2);      btnB.setOnClickListener(new View.OnClickListener() {               public void onClick(View v) {                      startActivity(new Intent (""com.emods.app1.BUTTONB""));              }       });"
"final EditText userEditText = (EditText)findViewById(R.id.userEditText);  userEditText.setOnFocusChangeListener(new OnFocusChangeListener() {      @Override     public void onFocusChange(View v, boolean hasFocus) {         if(!hasFocus){             Log.i(TAG, ""userEditText lost focus"");             if(null == m_requestFocus){                 m_userName = userEditText.getText().toString();                 if(m_userName.length() &lt; 6){                     m_signUpText.setText(""Username should have at least 6 characters"");                     m_requestFocus = userEditText;                 }                 else{                     checkUserNameExists();                 }             }         }         else{             if(null != m_requestFocus &amp; m_requestFocus != userEditText){                 v.clearFocus();                 m_requestFocus.requestFocus();                 m_requestFocus = null;             }         }     } });"
"if (req.getRequestURI().equals(""/twitter"")) {     Token requestToken = service.getRequestToken();     System.out.println(""Got the Request Token!"" + requestToken.getToken());     session = request.getSession(true);     session.setAttribute(""TOKEN"", requestToken);     response.sendRedirect(service.getAuthorizationUrl(requestToken)); } else if (req.getRequestURI().equals(""/twitter/callback"")) {     String code = request.getParameter(""oauth_verifier"");     System.out.println(""Verifier :: "" + code);     System.out.println(""service.getRequestToken()"" + service.getRequestToken());     session = request.getSession(false);     Token requestToken = (Token) session.getAttribute(""TOKEN"");     System.out.println(""requestToken from Session "" + service.getRequestToken().getToken() + "" Secr"" + service.getRequestToken().getSecret());      if (code != null &amp;&amp; !code.isEmpty()) {         Verifier verifier = new Verifier(code);         Token accessToken = service.getAccessToken(requestToken, verifier);         OAuthRequest req = new OAuthRequest(Verb.GET, OAUTH_PROTECTED_URL);         service.signRequest(accessToken, req);         Response res = req.send();         response.setContentType(""text/plain"");         response.getWriter().println(res.getBody());     } }"
"public void doFilter(ServletRequest request, ServletResponse response,          FilterChain filterChain) throws IOException, ServletException {      HttpServletRequest httpReq = (HttpServletRequest)request;     String ua = httpReq.getHeader(""User-Agent"");      Pattern patternEngineIE = Pattern.compile("".*Trident/(\\d).*"");     Matcher mEngineIE = patternEngineIE.matcher(ua);      if (mEngineIE.find()) {         int versionEngineIE = Integer.parseInt(mEngineIE.group(1));         switch (versionEngineIE) {         case 4:             ua = ua.replaceAll(""MSIE 7.0"", ""MSIE 8.0"");             response.addHeader(""X-UA-Compatible"", ""IE=8"");             break;         case 5:             ua = ua.replaceAll(""MSIE 7.0"", ""MSIE 9.0"");             response.addHeader(""X-UA-Compatible"", ""IE=9"");             break;         case 6:             ua = ua.replaceAll(""MSIE 7.0"", ""MSIE 10.0"");             response.addHeader(""X-UA-Compatible"", ""IE=10"");             break;         }     }      httpReq.addHeader(""User-Agent"", ua);     filterChain.doFilter(httpReq, response); }"
"JComponent dropTargetComponent = ...; new DropTarget(dropTargetComponent , DnDConstants.ACTION_COPY,     new DropTargetListener() {          public void drop(DropTargetDropEvent dtde) {             Transferable tr = dtde.getTransferable();             if(tr.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.imageFlavor)) {                  Image image = (Image) tr.getTransferData(java.awt.datatransfer.DataFlavor.imageFlavor);                  // Do something with image             }          }           ...    }"
"import net.sf.json.JSONArray; import net.sf.json.JSONException; import net.sf.json.JSONObject; import net.sf.json.JSONSerializer; public class TestJson {     public static void parseProfilesJson(String jsonStr) {         try {             JSONArray nameArray = (JSONArray) JSONSerializer.toJSON(jsonStr);             System.out.println(nameArray.size());             for(Object js : nameArray){                 JSONObject json = (JSONObject) js;                 System.out.println(json.get(""date""));             }         } catch (JSONException e) {             e.printStackTrace();         }     }     public static void main(String[] args) {         String s = ""[{\""date\"":\""2012-04-23\"",\""activity\"":\""gym\""},{\""date\"":\""2012-04-24\"",\""activity\"":\""walking\""}]"";         parseProfilesJson(s);     } }"
"BeanInfo beanInfo = Introspector.getBeanInfo(MappingMemberWithGetterOrSetter.class, Object.class); PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {     String propertyName = propertyDescriptor.getName();     Method getter = propertyDescriptor.getReadMethod();     Method setter = propertyDescriptor.getWriteMethod();     Field field = MappingMemberWithGetterOrSetter.class                 .getDeclaredField(propertyName);     System.out.println(""Property "" + propertyName + "" field:  "" + field);     System.out.println(""Getter "" + getter);     System.out.println(""Setter "" + setter); }"
public interface Address {     String getAddress(); } class AddressImpl implements Address {     String address;     public AddressImpl(String address){         this.address = address;     }     public String getAddress() { return address; }     public void setAddress(String address) { this.address = address; } } ... public List&lt;Address&gt; getAddresses(){     List&lt;Address&gt; addressesToReturn = new ArrayList&lt;Address&gt;();     for(Address address : addresses){         addressesToReturn.add(address); //i.e. return the original object as is     }     return addressesToReturn; }
"package foo;  import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;  import java.io.IOException;  import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder; import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequestBuilder; import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse; import org.elasticsearch.action.get.GetRequestBuilder; import org.elasticsearch.action.get.GetResponse; import org.elasticsearch.action.index.IndexRequestBuilder; import org.elasticsearch.client.Client; import org.elasticsearch.client.transport.TransportClient; import org.elasticsearch.common.settings.ImmutableSettings; import org.elasticsearch.common.transport.InetSocketTransportAddress; import org.elasticsearch.common.xcontent.XContentBuilder;  public class MyTestClass {      private static final String ID_NOT_FOUND = ""&lt;ID NOT FOUND&gt;"";      private static Client getClient() {         final ImmutableSettings.Builder settings = ImmutableSettings.settingsBuilder();         TransportClient transportClient = new TransportClient(settings);         transportClient = transportClient.addTransportAddress(new InetSocketTransportAddress(""localhost"", 9300));         return transportClient;     }      public static void main(final String[] args) throws IOException, InterruptedException {          final Client client = getClient();         // Create Index and set settings and mappings         final String indexName = ""test"";         final String documentType = ""tweet"";         final String documentId = ""1"";         final String fieldName = ""foo"";         final String value = ""bar"";          final IndicesExistsResponse res = client.admin().indices().prepareExists(indexName).execute().actionGet();         if (res.isExists()) {             final DeleteIndexRequestBuilder delIdx = client.admin().indices().prepareDelete(indexName);             delIdx.execute().actionGet();         }          final CreateIndexRequestBuilder createIndexRequestBuilder = client.admin().indices().prepareCreate(indexName);          // MAPPING GOES HERE          final XContentBuilder mappingBuilder = jsonBuilder().startObject().startObject(documentType)                 .startObject(""_ttl"").field(""enabled"", ""true"").field(""default"", ""1s"").endObject().endObject()                 .endObject();         System.out.println(mappingBuilder.string());         createIndexRequestBuilder.addMapping(documentType, mappingBuilder);          // MAPPING DONE         createIndexRequestBuilder.execute().actionGet();          // Add documents         final IndexRequestBuilder indexRequestBuilder = client.prepareIndex(indexName, documentType, documentId);         // build json object         final XContentBuilder contentBuilder = jsonBuilder().startObject().prettyPrint();         contentBuilder.field(fieldName, value);          indexRequestBuilder.setSource(contentBuilder);         indexRequestBuilder.execute().actionGet();          // Get document         System.out.println(getValue(client, indexName, documentType, documentId, fieldName));          int idx = 0;         while (true) {             Thread.sleep(10000L);             idx++;             System.out.println(idx * 10 + "" seconds passed"");             final String name = getValue(client, indexName, documentType, documentId, fieldName);             if (ID_NOT_FOUND.equals(name)) {                 break;             } else {                 // Try again                 System.out.println(name);             }         }         System.out.println(""Document was garbage collected"");     }      protected static String getValue(final Client client, final String indexName, final String documentType,             final String documentId, final String fieldName) {         final GetRequestBuilder getRequestBuilder = client.prepareGet(indexName, documentType, documentId);         getRequestBuilder.setFields(new String[] { fieldName });         final GetResponse response2 = getRequestBuilder.execute().actionGet();         if (response2.isExists()) {             final String name = response2.getField(fieldName).getValue().toString();             return name;         } else {             return ID_NOT_FOUND;         }     }  }"
"if (i &lt; itemList_dump.size()) {      MyBitamp Data = itemList_dump.get(original_position_val);             // setting Values according to our algorithm                     Data.setItemCurPos(original_position_val);                     Data.setItemPosition(current_positon_val);                     Data.setrotation(rotataion_val);                  }             }             Collections.sort(itemList_dump, new Comparator&lt;MyBitamp&gt;() {                  @Override                 public int compare(MyBitamp o1, MyBitamp o2) {                     if (o1.getItemPosition() &gt; o2.getItemPosition()) {                         return 1;                     } else if (o1.getItemPosition() &lt; o2.getItemPosition()) {                         return -1;                     } else {                         return 0;                     }                 }             });"
"public static void loadMyProgram() {     while(programStillLoading) {         doSomeLoading();         double loadFraction = howCloseToDone(); // A number between 0 and 1          System.out.print(""["");         int i = 0;         for( ; i &lt; (int)(loadFraction * 20); i++)             System.out.print(""="");         for( ; i &lt; 20; i++)             System.out.print("" "");         System.out.print(""] "" + (int)(loadFraction * 100) + ""%"");          System.out.print((char)13);         //System.out.print((char)0xD); // Same as above, but in hex         //System.out.print(""\r""); // Same as above, but as the symbol     }      System.out.println(); }"
"public void test() {     EntityManager em = entityManagerFactory.createEntityManager();     PersistenceUnitUtil unitUtil =         em.getEntityManagerFactory().getPersistenceUnitUtil();      em.getTransaction().begin();     Organization org = em.find(Organization.class, 1);     em.getTransaction().commit();      Assert.assertTrue(unitUtil.isLoaded(org));     // users is a field (Set of User) defined in Organization entity     Assert.assertFalse(unitUtil.isLoaded(org, ""users""));      initializeCollection(org.getUsers());     Assert.assertTrue(unitUtil.isLoaded(org, ""users""));     for(User user : org.getUsers()) {         Assert.assertTrue(unitUtil.isLoaded(user));         Assert.assertTrue(unitUtil.isLoaded(user.getOrganization()));     } }  private void initializeCollection(Collection&lt;?&gt; collection) {     // works with Hibernate EM 3.6.1-SNAPSHOT     if(collection == null) {         return;     }     collection.iterator().hasNext(); }"
"public List&lt;Instance&gt; getMatchingInstances(Map&lt;String, String&gt; attrValues) {     Criteria crit = session.createCriteria(Instance.class, ""i"");     for(Map.Entry&lt;String, String&gt; entry : attrValues) {         String attrName = entry.getKey();         String val = entry.getValue();          // Create the subquery         DetachedCriteria valueCrit = DetachedCriteria.forClass(Value.class, ""v"");          // Join the Attribute object (left outer join)         DetachedCriteria attrCrit =            valueCrit.createCriteria(""attribute"", CriteriaSpecification.LEFT_JOIN);          // Put together the OR statement on the Attribute joined criterion.         Criterion localAttr = Restrictions.eq(""v.localAttributeName"", attrName);         Criterion globalAttr = Restrictions.eq(""name"", attrName);         attrCrit.add(Restrictions.or(localAttr, globalAttr));          // Simple column equality on the subquery criterion.         valueCrit.add(Restrictions.eq(""value"", val));          // Map the subquery back to the outer query.         valueCrit.add(Restrictions.eqProperty(""instance.id"", ""i.id""));          // Add the missing projection.         valueCrit.setProjection(Projections.property(""id""));          // Add this subquery to the outer query.         crit.add(Subqueries.exists(valueCrit));     }     return crit.list(); }"
"Enumeration&lt;?&gt; e = getServletContext().getAttributeNames(); while (e.hasMoreElements()) {     String name = (String) e.nextElement();      // Get the value of the attribute     Object value = getServletContext().getAttribute(name);      if (value instanceof Map) {         for (Map.Entry&lt;?, ?&gt; entry : ((Map&lt;?, ?&gt;)value).entrySet()) {             System.out.println(entry.getKey() + ""="" + entry.getValue());         }     } else if (value instanceof List) {         for (Object element : (List)value) {             System.out.println(element);         }     } }"
"public abstract class BaseServlet extends HttpServlet {      @Override     protected void service(HttpServletRequest request,         HttpServletResponse response) throws ServletException, IOException {         String method = request.getParameter(""_method"");         if (""form"".equals(method)) {             this.doForm(request, response);         } else {             if (""delete"".equals(method)) {                 this.doDelete(request, response);             } else {         super.service(request, response);             }         }    }     protected void doForm(HttpServletRequest request,         HttpServletResponse response) throws ServletException, IOException {         throw new UnsupportedOperationException();    }  }"
"import java.io.StringReader;  import net.sf.jsqlparser.JSQLParserException; import net.sf.jsqlparser.expression.Function; import net.sf.jsqlparser.parser.CCJSqlParserManager; import net.sf.jsqlparser.statement.select.PlainSelect; import net.sf.jsqlparser.statement.select.Select; import net.sf.jsqlparser.statement.select.SelectExpressionItem;  public class MySQLParser {     CCJSqlParserManager parserManager = new CCJSqlParserManager();      public MySQLParser() throws JSQLParserException     {         String statement = ""SELECT COUNT(*) FROM db.table1"";         PlainSelect plainSelect = (PlainSelect) ((Select) parserManager.parse(new StringReader(statement))).getSelectBody();                 System.out.format(""%s is function call? %s"",                 plainSelect.getSelectItems().get(0),                 ((Function)((SelectExpressionItem) plainSelect.getSelectItems().get(0)).getExpression()).isAllColumns());     }     public static void main(String[] args) throws JSQLParserException     {          new MySQLParser();      }  }"
"final SearchResponse response = client.prepareSearch(indexName)             .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)             .setTypes(FEED_TYPE)             .setQuery(queryString(query).field(""title"").field(""description"").field(""keywords""))             .addHighlightedField(""title"", 0, 0)             .addHighlightedField(""description"", 0, 0)             .addFields(""title"", ""description"", ""url"", ""iconUrl"", ""keywords"")             .setSize(size)             .setFrom(start)             .execute().actionGet();"
"public boolean process(Set&lt;? extends TypeElement&gt; elems, RoundEnvironment renv) {         if (renv.processingOver()) { // Write only at last round             Filer filer = processingEnv.getFiler();             Messager messager = processingEnv.getMessager();             try {                 JavaFileObject fo = filer.createSourceFile(""Gen"");                 Writer out = fo.openWriter();                 out.write(""class Gen { }"");                 out.close();                 messager.printMessage(Diagnostic.Kind.NOTE, ""File 'Gen' created"");             } catch (IOException e) {                 messager.printMessage(Diagnostic.Kind.ERROR, e.toString());             }         }         return false;     }"
while(!allRoutineComplete){             for (Routine routine : routineList) {                 if(!(routine.isBlocked()) &amp;&amp; !(routine.isFinished())) {                     routine.run();                     if(routine.isFinished()){                         completedRoutineNumber++;                     }                     if(completedRoutineNumber==routineList.size()){                     allRoutineComplete=true;                     }                 }             }             for (Routine routine : routineList) {                 routine.updateStatus();             } }
"public void startElement(String uri, String localName, String elementName, Attributes attributes) throws SAXException {      if (elementName.equalsIgnoreCase(GenericConstants.INFO)) {         this.searchRaidusBean.setServer(attributes.getValue(GenericConstants.SERVER));         this.searchRaidusBean.setFunction(attributes.getValue(GenericConstants.FUNCTION));     }     if (elementName.equalsIgnoreCase(GenericConstants.RESULT)) {         this.searchRaidusBean.setResultCode(attributes.getValue(GenericConstants.CODE));     }      if (elementName.equalsIgnoreCase(GenericConstants.ACCOUNT)) {         this.searchRaidusBean.setLoginId(attributes.getValue(GenericConstants.LOGIN));         this.searchRaidusBean.setSkyNum(attributes.getValue(GenericConstants.SKYNUM));         this.searchRaidusBean.setMaxAliases(attributes.getValue(GenericConstants.MAXALIASES));         this.searchRaidusBean.setCreationDate(attributes.getValue(GenericConstants.CREATION_DATE));         this.searchRaidusBean.setType(attributes.getValue(GenericConstants.TYPE));         this.searchRaidusBean.setStatus(attributes.getValue(GenericConstants.STATUS));         this.searchRaidusBean.setMnemonic(attributes.getValue(GenericConstants.MNEMONIC));         this.searchRaidusBean.setRateLimit(attributes.getValue(GenericConstants.RATELIMIT));     }      if (elementName.equalsIgnoreCase(GenericConstants.SETTINGS)) {          for (int index = 0; index &lt; attributes.getLength(); index++) {              String attName = attributes.getLocalName(index);             String value = attributes.getValue(index);              map.put(attName, value);          }      }      if (elementName.equalsIgnoreCase(GenericConstants.ALIASES)) {         this.tempKey = attributes.getValue(GenericConstants.MNEMONIC);     }  }"
"import javax.ws.rs.*; import javax.ws.rs.core.Response.*;  import org.jboss.resteasy.client.*; import org.jboss.resteasy.client.core.*; import org.jboss.resteasy.client.core.executors.*; import org.jboss.resteasy.mock.*; import org.jboss.resteasy.plugins.providers.*; import org.jboss.resteasy.spi.*;  public class InMemoryClientExecutorExample {     public interface SimpleClient {        @GET        @Path(""basic"")        @Produces(""text/plain"")        String getBasic();         @PUT        @Path(""basic"")        @Consumes(""text/plain"")        void putBasic(String body);         @GET        @Path(""queryParam"")        @Produces(""text/plain"")        String getQueryParam(@QueryParam(""param"")String param);         @GET        @Path(""matrixParam"")        @Produces(""text/plain"")        String getMatrixParam(@MatrixParam(""param"")String param);         @GET        @Path(""uriParam/{param}"")        @Produces(""text/plain"")        int getUriParam(@PathParam(""param"")int param);     }        public static void main(String[] args) {         RegisterBuiltin.register(ResteasyProviderFactory.getInstance());          ClientExecutor executor = new InMemoryClientExecutor() {             @Override             protected BaseClientResponse&lt;?&gt; createResponse(ClientRequest request, MockHttpResponse mockResponse) {                 try {                                         System.out.println(""Client requesting "" + request.getHttpMethod() + "" on "" + request.getUri());                 }                 catch(Exception ex) {                     ex.printStackTrace();                 }                 mockResponse.setStatus(Status.OK.getStatusCode());                 return super.createResponse(request, mockResponse);             }         };          SimpleClient client = ProxyFactory.create(SimpleClient.class, ""http://localhost:8081"", executor);         client.putBasic(""hello world"");     } }"
"object ReflectTest {   import collection.JavaConversions._   def main(args: Array[String]) {         val fooObj = instantiate(MyTestObject.getClass())     println(fooObj.foo)     val fooClass = instantiate(classOf[MyTestClass])     println(fooClass.foo)   }    def instantiate(clazz:Class[_]):Foo = {     val rm = ru.runtimeMirror(clazz.getClassLoader())     val declaredFields = clazz.getDeclaredFields().toList     val obj = declaredFields.find(field =&gt; field.getName() == ""MODULE$"") match{       case Some(modField) =&gt; modField.get(clazz)       case None =&gt; clazz.newInstance()     }     obj.asInstanceOf[Foo]   } }  trait Foo{   def foo:String }  object MyTestObject extends Foo{   def foo = ""bar"" }  class MyTestClass extends Foo{   def foo = ""baz"" }"
"public class Findfriends extends Activity {      protected static final String TAG = null;      ParseObject po;      @Override     public void onStart() {         super.onStart();         UAirship.shared().getAnalytics();      }      @Override     public void onCreate(Bundle savedInstanceState) {         // TODO Auto-generated method stub         super.onCreate(savedInstanceState);         setContentView(R.layout.findfriends);          final EditText sbar = (EditText)findViewById(R.id.PlayerSeachBar);         Button search = (Button)findViewById(R.id.Search);         Button Add = (Button)findViewById(R.id.Add);         final TextView ResultText = (TextView)findViewById(R.id.ResultTextView);         final FrameLayout ResultFrame = (FrameLayout)findViewById(R.id.ResultFrameLayout);          ResultFrame.setVisibility(View.GONE);          search.setOnClickListener(new View.OnClickListener() {              @Override             public void onClick(View v) {                 // TODO Auto-generated method stub                 final String username = sbar.getText().toString();                  final ParseQuery query = ParseUser.getQuery();                 query.whereEqualTo(""username"", username);                 query.findInBackground(new FindCallback() {                      @Override                     public void done(List&lt;ParseObject&gt; objects, ParseException e) {                         // TODO Auto-generated method stub                         try {                             ParseObject userObject = objects.get(0);                             ResultText.setText(userObject.getString(""username""));                             ResultFrame.setVisibility(View.VISIBLE);                              Toast.makeText(getApplicationContext(), ""Player Found"",                                     Toast.LENGTH_LONG).show();                         } catch (Exception e2) {                             e2.printStackTrace();                             Toast.makeText(getApplicationContext(), ""Username Not Found"",                                     Toast.LENGTH_LONG).show();                         }                      }                 });              }         });          Add.setOnClickListener(new View.OnClickListener() {              @Override             public void onClick(View v) {                 // TODO Auto-generated method stub                 String Friends = sbar.getText().toString();                 final ParseUser currentUser = ParseUser.getCurrentUser();                 if (currentUser != null) {                     {                          final ParseObject friend = new ParseObject(""Friends"");                         friend.put(""username"", Friends);                          friend.saveInBackground(new SaveCallback() {                              @Override                             public void done(ParseException e) {                                 // TODO Auto-generated method stub                                 ParseRelation relation = currentUser.getRelation(""Friends"");                                 relation.add(friend);                                 currentUser.saveInBackground();                             }                          });                          Toast.makeText(getApplicationContext(), ""Player Has Been Added"",                                 Toast.LENGTH_LONG).show();                      }                 }              }         });      }      @Override     public void onStop() {         super.onStop();      } }"
"public class RequestLogPost {    public static class PostHandler extends ContextHandler {     public PostHandler() {       setContextPath(&quot;/app&quot;);       // setAllowNullPathInfo(true); // enable to see difference in request handling     }      @Override     public void doHandle(String target, Request baseRequest, HttpServletRequest request,         HttpServletResponse response) throws IOException, ServletException {       System.out.println(request.getMethod());       response.setStatus(HttpStatus.OK_200);       baseRequest.setHandled(true);     }   }    public static void main(String[] args) throws Exception {     Server server = new Server(5555);      HandlerCollection handlers = new HandlerCollection();     handlers.addHandler(new PostHandler());     handlers.addHandler(new DefaultHandler());     handlers.addHandler(createRequestLogHandler());      server.setHandler(handlers);      server.start();     server.join();   }    private static RequestLogHandler createRequestLogHandler() {     final int RETAIN_FOREVER = 0; // see RolloverFileOutputStream, 0 == forever.     RequestLogHandler logHandler = new RequestLogHandler();      NCSARequestLog ncsaRequestLog = new AsyncNCSARequestLog(&quot;requests.log&quot;);     ncsaRequestLog.setAppend(true);     ncsaRequestLog.setExtended(true);     ncsaRequestLog.setLogTimeZone(&quot;GMT&quot;);     ncsaRequestLog.setRetainDays(RETAIN_FOREVER);     logHandler.setRequestLog(ncsaRequestLog);     return logHandler;   } }"
"public class MainActivity extends Activity  {     @Override     protected void onCreate(Bundle savedInstanceState)      {         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);         Button PressMe = (Button)findViewById(R.id.btnPressMe);         PressMe.setOnClickListener(new OnClickListener()          {              @Override              public void onClick(View v)              {                 // TODO Auto-generated method stub                   startActivity(new  Intent(MainActivity.this, PiggyBank.class));             }        }); }"
"public class MultiMapType implements UserCollectionType {  public boolean contains(Object collection, Object entity) {     return ((MultiMap) collection).containsValue(entity); }  public Iterator getElementsIterator(Object collection) {     return ((MultiMap) collection).values().iterator(); }  public Object indexOf(Object collection, Object entity) {     for (Iterator i = ((MultiMap) collection).entrySet().iterator(); i.hasNext();) {         Map.Entry entry = (Map.Entry) i.next();             Collection value = (Collection) entry.getValue();         if (value.contains(entity)) {             return entry.getKey();         }     }     return null; }  public Object instantiate() {     return new MultiHashMap(); }  public PersistentCollection instantiate(SessionImplementor session, CollectionPersister persister) throws HibernateException {     return new PersistentMultiMap(session); }  public PersistentCollection wrap(SessionImplementor session, Object collection) {     return new PersistentMultiMap(session, (MultiMap) collection); }  public Object replaceElements(Object original, Object target, CollectionPersister persister, Object owner, Map copyCache, SessionImplementor session) throws HibernateException {      MultiMap result = (MultiMap) target;     result.clear();      Iterator iter = ( (java.util.Map) original ).entrySet().iterator();     while ( iter.hasNext() ) {         java.util.Map.Entry me = (java.util.Map.Entry) iter.next();         Object key = persister.getIndexType().replace( me.getKey(), null, session, owner, copyCache );         Collection collection = (Collection) me.getValue();         for (Iterator iterator = collection.iterator(); iterator.hasNext();) {             Object value = persister.getElementType().replace( iterator.next(), null, session, owner, copyCache );             result.put(key, value);         }     }      return result; }"
