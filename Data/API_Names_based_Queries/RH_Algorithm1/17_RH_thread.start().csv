code
"import java.net.NetworkInterface;  ...  for (     final Enumeration&lt; NetworkInterface &gt; interfaces =         NetworkInterface.getNetworkInterfaces( );     interfaces.hasMoreElements( ); ) {     final NetworkInterface cur = interfaces.nextElement( );      if ( cur.isLoopback( ) )     {         continue;     }      System.out.println( ""interface "" + cur.getName( ) );      for ( final InterfaceAddress addr : cur.getInterfaceAddresses( ) )     {         final InetAddress inet_addr = addr.getAddress( );          if ( !( inet_addr instanceof Inet4Address ) )         {             continue;         }          System.out.println(             ""  address: "" + inet_addr.getHostAddress( ) +             ""/"" + addr.getNetworkPrefixLength( )         );          System.out.println(             ""  broadcast address: "" +                 addr.getBroadcast( ).getHostAddress( )         );     } }"
"SimpleDateFormat sdfgmt = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");     sdfgmt.setTimeZone(TimeZone.getTimeZone(""GMT""));      SimpleDateFormat sdfmad = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");     sdfmad.setTimeZone(TimeZone.getTimeZone(""Europe/Madrid""));      String inpt = ""2011-23-03 16:40:44"";     Date inptdate = null;     try {         inptdate = sdfgmt.parse(inpt);     } catch (ParseException e) {e.printStackTrace();}      System.out.println(""GMT:\t\t"" + sdfgmt.format(inptdate));     System.out.println(""Europe/Madrid:\t"" + sdfmad.format(inptdate));"
"for (int i = 0; i &lt; jTable1.getColumnCount(); i ++) {     TableColumn col = jTable1.getColumnModel().getColumn(i);     col.setCellEditor(new MyTableCellEditor()); }   public class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {     JComponent component = new JTextField();     public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int rowIndex, int vColIndex) {         ((JTextField)component).setText((String)value);         ((JTextField)component).setFont(new java.awt.Font(""Arial Unicode MS"", 0, 12));         return component;     } }"
"AlertDialog.Builder builder = new AlertDialog.Builder(this);         final SharedPreferences preferences = getSharedPreferences(""type_settings"", MODE_PRIVATE);          final String[] availableTypes = getResources().getStringArray(R.array.select_type_items);         final boolean[] selectedTypes = getSelectedTypes(preferences, availableTypes);          builder.setIcon(R.drawable.menu_type)                 .setTitle(R.string.list_dialog_title)                 .setMultiChoiceItems(R.array.select_type_items, selectedTypes,                         new DialogInterface.OnMultiChoiceClickListener() {                             public void onClick(DialogInterface dialog, int whichButton, boolean isChecked) {                                 selectedTypes[whichButton] = isChecked;                             }                         })                 .setPositiveButton(R.string.types_save, new DialogInterface.OnClickListener() {                     public void onClick(DialogInterface dialog, int whichButton) {                         SharedPreferences.Editor prefEditor = preferences.edit();                         saveSelectedTypes(prefEditor, availableTypes, selectedTypes);                     }                 })                 .setNegativeButton(R.string.types_cancel, new DialogInterface.OnClickListener() {                     public void onClick(DialogInterface dialog, int whichButton) {                         dialog.cancel();                     }                 })                 .create();         builder.show();"
"final JFrame frame = new JFrame(); frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); frame.setLayout(new GridBagLayout());  GridBagConstraints gbc = new GridBagConstraints(); gbc.gridx = 0; gbc.gridy = 0; gbc.fill = GridBagConstraints.BOTH; gbc.weightx = 1.0; gbc.weighty = 1.0; frame.add(Box.createGlue(), gbc);  final JTextArea textArea = new JTextArea(""SE""); textArea.setPreferredSize(new Dimension(50, 50)); textArea.setOpaque(true); textArea.setBackground(Color.RED); gbc = new GridBagConstraints(); gbc.gridx = 1; gbc.gridy = 1; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0.0; gbc.weighty = 0.0; frame.add(textArea, gbc);  frame.setSize(640, 480); frame.setVisible(true);"
"Pimped Type                            | Conversion Method   | Returned Type ================================================================================================= scala.collection.Iterator              | asJava              | java.util.Iterator scala.collection.Iterator              | asJavaEnumeration   | java.util.Enumeration scala.collection.Iterable              | asJava              | java.lang.Iterable scala.collection.Iterable              | asJavaCollection    | java.util.Collection scala.collection.mutable.Buffer        | asJava              | java.util.List scala.collection.mutable.Seq           | asJava              | java.util.List scala.collection.Seq                   | asJava              | java.util.List scala.collection.mutable.Set           | asJava              | java.util.Set scala.collection.Set                   | asJava              | java.util.Set scala.collection.mutable.Map           | asJava              | java.util.Map scala.collection.Map                   | asJava              | java.util.Map scala.collection.mutable.Map           | asJavaDictionary    | java.util.Dictionary scala.collection.mutable.ConcurrentMap | asJavaConcurrentMap | java.util.concurrent.ConcurrentMap ————————————————————————————————————————————————————————————————————————————————————————————————— java.util.Iterator                     | asScala             | scala.collection.Iterator java.util.Enumeration                  | asScala             | scala.collection.Iterator java.lang.Iterable                     | asScala             | scala.collection.Iterable java.util.Collection                   | asScala             | scala.collection.Iterable java.util.List                         | asScala             | scala.collection.mutable.Buffer java.util.Set                          | asScala             | scala.collection.mutable.Set java.util.Map                          | asScala             | scala.collection.mutable.Map java.util.concurrent.ConcurrentMap     | asScala             | scala.collection.mutable.ConcurrentMap java.util.Dictionary                   | asScala             | scala.collection.mutable.Map java.util.Properties                   | asScala             | scala.collection.mutable.Map[String, String]"
"try {// UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());     for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {         if (info.getName().equals(""Nimbus"")) {             UIManager.setLookAndFeel(info.getClassName());             UIDefaults defaults = UIManager.getLookAndFeelDefaults();             defaults.put(""Table.gridColor"", new Color (214,217,223));             defaults.put(""Table.disabled"", false);             defaults.put(""Table.showGrid"", true);             defaults.put(""Table.intercellSpacing"", new Dimension(1, 1));             break;         }     } } catch (Exception e) {     //e.printStackTrace(); }"
"package com.primavera.ws.jaxws.provider;  import javax.annotation.Resource; import javax.xml.ws.BindingType; import javax.xml.ws.Provider; import javax.xml.ws.Service; import javax.xml.ws.ServiceMode; import javax.xml.ws.WebServiceContext; import javax.xml.ws.WebServiceProvider;  @WebServiceProvider(portName=""MyPort"", serviceName=""MyService"", targetNamespace=""http://mytargetlocation"", wsdlLocation=""WEB-INF/wsdl/My.wsdl"") @ServiceMode(value = Service.Mode.MESSAGE) @BindingType(HTTPBinding.HTTP_BINDING)  public class MyProvider implements Provider&lt;Source&gt; {      @Resource     private WebServiceContext context;       public MyProvider()     {     }      @Override     public Source invoke(Source request)     {         MessageContext mc = context.getMessageContext();         HttpSession session =    ((javax.servlet.http.HttpServletRequest)mc.get(MessageContext.SERVLET_REQUEST)).getSession();         if (session == null)             throw new WebServiceException(""No HTTP Session found"");          System.out.println(""SessionID: "" + session.getId());          return request;     } }"
"class PathCellRenderer extends DefaultTableCellRenderer {     public Component getTableCellRendererComponent(                         JTable table, Object value,                         boolean isSelected, boolean hasFocus,                         int row, int column) {         JLabel c = (JLabel)super.getTableCellRendererComponent( /* params from above (table, value, isSelected, hasFocus, row, column) */ );         // This...         String pathValue = &lt;getYourPathValue&gt;; // Could be value.toString()         c.setToolTipText(pathValue);         // ...OR this probably works in your case:         c.setToolTipText(c.getText());         return c;     } }  ... pathColumn.setCellRenderer(new PathCellRenderer()); // If your path is of specific class (e.g. java.io.File) you could set the renderer for that type ..."
"NodeList LOP = odoc.getElementsByTagName(""Your_XML_Top_Element"");                  Node FPN =LOP.item(0);                 try{                 if(FPN.getNodeType() == Node.ELEMENT_NODE)                     {                      Element token = (Element)FPN;                      NodeList oNameList1 = token.getElementsByTagName(""Your_XML_Sub_Node"");                     Element firstNameElement = (Element)oNameList1.item(0);                     NodeList textNList1 = firstNameElement.getChildNodes();  }"
"String data = ""&lt;h3 class=\""pubAdTitleBlock \""&gt;&lt;a href=\""/it/pubblicazioni/libri/Che-speranza-cè-per-i-morti/1101987030/\"" title=\""Che speranza c’è per i morti?\""&gt;Che speranza c’è per i morti? (volantino N. 16)&lt;/a&gt;&lt;/h3&gt;""         + ""&lt;h3 class=\""pubAdTitleBlock \""&gt;&lt;a href=\""/it/pubblicazioni/libri/cosa-insegna-la-bibbia/È-questo-che-Dio-voleva/\"" title=\""È questo che Dio voleva?\""&gt;Cosa insegna realmente la Bibbia?&lt;/a&gt;&lt;/h3&gt;""         + ""&lt;h3 class=\""pubAdTitleBlock\""&gt;Cantiamo a Geova&lt;/h3&gt;"";  Pattern pattern = Pattern         .compile(""&lt;h3[^&gt;]*&gt;(?:&lt;a[^&gt;]*&gt;)?([^&lt;]+)(?:&lt;/a&gt;)?&lt;/h3&gt;""); Matcher matcher = pattern.matcher(data); while (matcher.find())      System.out.println(matcher.group(1));"
"import play.GlobalSettings; import play.mvc.Action; import play.mvc.Http; import play.mvc.Result;  import java.lang.reflect.Method;  public class Global extends GlobalSettings {      @Override     public Action onRequest(final Http.Request request, Method method) {         if (""GET"".equals(request.method()) &amp;&amp; ""www.example.com"".equals(request.host())) {             return new Action.Simple() {                 public Result call(Http.Context ctx) throws Throwable {                     return movedPermanently(""http://example.com"" + request.path());                 }             };         }         return super.onRequest(request, method);     } }"
"MultiSelectListPreference listPreference = new MultiSelectListPreference(context);     listPreference.setTitle(R.string.configure_category_title);     listPreference.setDialogTitle(R.string.configure_category_title);     listPreference.setSummary(R.string.configure_category_summary);     listPreference.setEntries(R.array.configure_category_array);     listPreference.setEntryValues(new CharSequence[]{             ProcessList.PREF_SERVICES + mAppWidgetId,             ProcessList.PREF_INACTIVE + mAppWidgetId,             ProcessList.PREF_INTERNAL + mAppWidgetId     });      //Create a Set&lt;String&gt; with list items that should be selected     SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);     boolean showServices = sharedPref.getBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, true);     boolean showInactive = sharedPref.getBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, true);     boolean showInternal = sharedPref.getBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, true);      String[] strings = new String[3];     int cnt = 0;     if (showServices)         strings[cnt++] = ProcessList.PREF_SERVICES + mAppWidgetId;     if (showInactive)         strings[cnt++] = ProcessList.PREF_INACTIVE + mAppWidgetId;     if (showInternal)         strings[cnt] = ProcessList.PREF_INTERNAL + mAppWidgetId;      Set&lt;String&gt; mySet = new HashSet&lt;String&gt;();     Collections.addAll(mySet, strings);      //Add the set     listPreference.setValues(mySet);      //Listen for changes, I'm not sure if this is how it's meant to work, but it does :/     listPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {         public boolean onPreferenceChange(Preference preference, Object o) {              HashSet hashSet = (HashSet) o;             Iterator stringIterator = hashSet.iterator();             boolean[] states = {false, false, false};             String prefString;              while (stringIterator.hasNext()) {                  prefString = (String) stringIterator.next();                  if (prefString == null)                     continue;                  if (prefString.compareTo(ProcessList.PREF_SERVICES + mAppWidgetId) == 0)                     states[0] = true;                 else if (prefString.compareTo(ProcessList.PREF_INACTIVE + mAppWidgetId) == 0)                     states[1] = true;                 else if (prefString.compareTo(ProcessList.PREF_INTERNAL + mAppWidgetId) == 0)                     states[2] = true;              }              PreferenceManager                     .getDefaultSharedPreferences(getActivity())                     .edit()                     .putBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, states[0])                     .putBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, states[1])                     .putBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, states[2])                     .commit();              return true;         }     });      preferenceCategory.addPreference(listPreference);"
"BasicDBObject query = new BasicDBObject();     BasicDBObject field = new BasicDBObject();      query.put(""id"", ""Product1"");     field.put(""id"", 1);     field.put(""productFeature"", 1);           field.put(""_id"", 0);      DBCursor cursor = coll.find(query, field);     while (cursor.hasNext()) {         BasicDBObject result = (BasicDBObject) cursor.next();         System.out.println(result);         ArrayList&lt;BasicDBObject&gt; features = (ArrayList&lt;BasicDBObject&gt;) result.get(""productFeature"");          for (BasicDBObject embedded : features) {             String featuresId = (String) embedded.get(""id"");              BasicDBObject query2 = new BasicDBObject();             BasicDBObject field2 = new BasicDBObject();              query2.put(""id"", featuresId);             field2.put(""id"", 1);             field2.put(""label"", 1);             field2.put(""_id"", 0);             DBCursor cursor2 = coll.find(query2, field2);              while (cursor2.hasNext()) {                 System.out.println(cursor2.next());             }         }     }"
"for (Task tempTask : TasksListAppObj.getInstance().tasksRepository.getTasksRepository())                 {                     LatLng latlng = new LatLng(tempTask.getLatitude(), tempTask.getLongtitude());                     if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_WAITING))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_blue)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_IN_PROGRESS))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_bordo)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_ON_THE_WAY))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_turkiz)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_COMPLETE))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_orange)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_FAILED))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_purpul)));                     } }"
"public static &lt;T&gt; ConcurrentMap&lt;String,Collection&lt;T&gt;&gt; reduceMap(ConcurrentMap&lt;String, ConcurrentHashMap&lt;String, Collection&lt;T&gt;&gt;&gt; map) {     ConcurrentMap&lt;String, Collection&lt;T&gt;&gt; smallerMap = new ConcurrentHashMap&lt;String, Collection&lt;T&gt;&gt;();     for (String material : map.keySet()) {         for(String genre: map.get(material).keySet()) {             if (smallerMap.get(genre) == null) {                 smallerMap.put(genre, map.get(material).get(genre));             }             else {                 Collection&lt;T&gt; stories = smallerMap.get(genre);                 for (T o : map.get(material).get(genre)) {                     if (!smallerMap.get(genre).contains(o)) {                         stories.add(o); // error here                     }                 }                 smallerMap.put(genre, stories);             }         }     }        return smallerMap; }"
"DELIVERY 'AR_ACTDETAIL_UPD' 'AR_DETAIL_UPD' MODULE TABLE FILTER 'AR_ACT' DEFINE UPDN 'UPDATE' DEFINE REFH 'UPDATE' DEFINE CIT '5000' DEFINE TDB 'TARGET' DEFINE TABLE 'AR_ACTIVITY_DETAIL' ELEMENTS '""POSTING_PERIOD_SID"",""POSTING_DATE_SID"",""ACCTG_DOC_CLSS_SID"",""CUSTOMER_BLLT_SID"",""AR_ASSET_ACCNT_SID"",""CO_CNSLDTN_SID"",""AR_BSNSS_UNT_SID"",""LOCAL_CURRENCY_AMT"",""LCL_CUR_DSCNT_AAMT"",""LCL_CUR_DSCNT_TAMMT"",""TAXABLE_AMT"",""NO_TAXABLE_AMT"",""NO_FOREIGN_TAXABLE_AMT"",""TAX_CODE"",""BEFOREINVOICE_SID"",""ACCNT_BANK_PAYMENT_SID"",""GAIN_LOSS_LOC_AMT"",""LOCAL_OPEN_AMOUNT"",""FOREIGN_OPEN_AMOUNT""' ELEDEFINE +3 IFNULL '0' ELEDEFINE +4 IFNULL '0' ELEDEFINE +5 IFNULL '0' ELEDEFINE +6 IFNULL '0'  DELIVERY 'AR_DOC_EXINS' 'AR_DOC_EINS' MODULE TABLE FILTER 'AR_DOC_EXTNSN_COLS_INS' DEFINE UPDATE_DETECTION 'UPDATE' DEFINE REFRESH 'APPEND' DEFINE COMMIT '5000' DEFINE TABLEDB 'TARGET' DEFINE TABLE 'AR_DOC_EXTNSN_COLS' ELEMENTS '""AR_ACTVSID"",""DOCUMENT_CO_CD"",""TRANSACTION_TYP_CD"",""TRANSACTION_NO"",""DOCUMENT_SUFFIX_NO"",""DOC_SFFX_EXTT_NO"",""INVOICE_MULT"",""PAYMENT_MULT"",""ADJUSTMENT_MULT"",""BAD_DEBT_MULT"",""SOURCE_INFO"",""CHG_INVC_PY_STTS_IND"",""CHG_GROUP_CURRENCY_AMT"",""CHG_GRP_CUR_DSCNT_AAMT"",""CHG_GRP_CUR_DSCNT_TAMT"",""CREATED_DT"",""CHANGED_DT"",""ACCOUNT_ID"",""FI_ACCOUNT_ID""' ELEDEFINE +2 IFNULL '{$U_DEFAULT_SHORT_CHAR}' ELEDEFINE +3 IFNULL '{$U_DEFAULT_SHORT_CHAR}'  DELIVERY 'AR_DOC_EXS_UPD' 'AR_DOC__UPD' MODULE TABLE FILTER 'AR_DOC_EXTNSN_COLS_UPD' DEFINE UPDATE_DETECTION 'UPDATE' DEFINE REFRESH 'UPDATE' DEFINE COMMIT '5000' DEFINE TABLEDB 'TARGET' DEFINE TABLE 'AR_DOC_EOLS' ELEMENTS '""DOCUMENT_CO_CD"",""TRANSACTION_TYP_CD"",""TRANSACTION_NO"",""DOCUMENT_SUFFIX_NO"",""DOC_SFFX_EXTNSN_NO"",""PAYMENT_ID"",""PAYMETED_DT"",""CHANGED_DT"",""AR_ACTVTY_DOC_SID_TMP"",""ACCOUNT_ID"",""FI_ACCOUNT_ID"",""O_GROUP_CURRENCY_AMT"",""O_GRP_CUR_DSCNT_TAMT"",""O_GRP_CUR_DSCNT_AAMT""' ELEDEFINE +1 IFNULL '{$U_DEFAULT_SHORT_CHAR}' ELEDEFINE +2 IFNULL '{$U_DEFAULT_SHORT_CHAR}' ELEDEFINE +3 IFNULL '{$U_DEFAULT_NUMBER}'  ALLOW DUPLICATES"
"PGPSignatureGenerator sGen = new PGPSignatureGenerator(new JcaPGPContentSignerBuilder(skey.getPublicKey().getAlgorithm(), PGPUtil.SHA256).setProvider(""BC""));         PGPSignatureSubpacketGenerator  spGen = new PGPSignatureSubpacketGenerator();          sGen.init(PGPSignature.CANONICAL_TEXT_DOCUMENT, prKey);         Iterator userIDs = skey.getPublicKey().getUserIDs();         if (it.hasNext()) {             spGen.setSignerUserID(false, (String)userIDs.next());             sGen.setHashedSubpackets(spGen.generate());         }          ArmoredOutputStream aos = new ArmoredOutputStream(baos);         aos.beginClearText(PGPUtil.SHA256);          sGen.update(dataBytes);         aos.write(dataBytes);          aos.endClearText();          BCPGOutputStream bOut = new BCPGOutputStream(aos);         sGen.generate().encode(bOut);          aos.flush();         aos.close();"
"IExtensionRegistry registry = Platform.getExtensionRegistry();     IExtensionPoint extensionPoint = registry             .getExtensionPoint(""myplugin.myextension"");     IConfigurationElement points[] = extensionPoint             .getConfigurationElements();     for (IConfigurationElement point : points) {         if (""myextensionFactory"".equals(point.getName())) {             Object impl = point.createExecutableExtension(""class"");             if (impl instanceof IMyExtension) {                 ((IMyExtension) impl).foo();             }         }     } }"
"int[][] map = {     {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  };"
"static Assembly^ MyResolveEventHandler( Object^ sender, ResolveEventArgs^ args ) {     //Retrieve the list of referenced assemblies in an array of AssemblyName.     Assembly^ MyAssembly;     Assembly^ objExecutingAssemblies;     String^ strTempAssmbPath = """";      objExecutingAssemblies = Assembly::GetExecutingAssembly();     array&lt;AssemblyName ^&gt;^ arrReferencedAssmbNames = objExecutingAssemblies-&gt;GetReferencedAssemblies();      //Loop through the array of referenced assembly names.     for each (AssemblyName^ strAssmbName in arrReferencedAssmbNames)     {         //Check for the assembly names that have raised the ""AssemblyResolve"" event.         if (strAssmbName-&gt;FullName-&gt;Substring(0, strAssmbName-&gt;FullName-&gt;IndexOf("","")) == args-&gt;Name-&gt;Substring(0, args-&gt;Name-&gt;IndexOf("","")))         {             //Build the path of the assembly from where it has to be loaded.                             strTempAssmbPath = pathBase + args-&gt;Name-&gt;Substring(0, args-&gt;Name-&gt;IndexOf("","")) + "".dll"";             break;         }      }     //Load the assembly from the specified path.                         MyAssembly = Assembly::LoadFrom(strTempAssmbPath);      //Return the loaded assembly.     return MyAssembly; }"
"Pattern singleLinecommentsPattern = Pattern.compile(""\\/\\/.*""); Matcher matcher = singleLinecommentsPattern.matcher(content);  while (matcher.find()) {     document.setCharacterAttributes(matcher.start(),        matcher.end() - matcher.start(), textPane.getStyle(""red""), true); }  Pattern multipleLinecommentsPattern = Pattern.compile(""\\/\\*.*?\\*\\/"",                         Pattern.DOTALL); matcher = multipleLinecommentsPattern.matcher(content);  while (matcher.find()) {     document.setCharacterAttributes(matcher.start(),        matcher.end() - matcher.start(), textPane.getStyle(""red""), true); }"
"public ScheduledFuture&lt;?&gt; executeTaskWithDelay(String name,        final Runnable runnable, Period delay, boolean isDaemon) {   final ScheduledExecutorService executorService =           Executors.newSingleThreadScheduledExecutor(new DefaultThreadFactory(       name, isDaemon));   ScheduledFuture&lt;?&gt; future =  executorService.schedule(runnable,          delay.toStandardDuration().getMillis(), TimeUnit.MILLISECONDS);    executorService.schedule(new Runnable() {       @Override       public void run() {         executorService.shutdown();       }}, delay.toStandardDuration().getMillis(), TimeUnit.MILLISECONDS);    return future; }"
while(!allRoutineComplete){             for (Routine routine : routineList) {                 if(!(routine.isBlocked()) &amp;&amp; !(routine.isFinished())) {                     routine.run();                     if(routine.isFinished()){                         completedRoutineNumber++;                     }                     if(completedRoutineNumber==routineList.size()){                     allRoutineComplete=true;                     }                 }             }             for (Routine routine : routineList) {                 routine.updateStatus();             } }
"public class BarExample {     public static void main(String arg[]) throws IOException {         DefaultCategoryDataset dataSet = new DefaultCategoryDataset();         dataSet.setValue(2, Integer.valueOf(1), Integer.valueOf(5));         dataSet.setValue(7, Integer.valueOf(1), Integer.valueOf(10));         dataSet.setValue(4, Integer.valueOf(1), Integer.valueOf(15));         dataSet.setValue(9, Integer.valueOf(1), Integer.valueOf(20));         dataSet.setValue(6, Integer.valueOf(1), Integer.valueOf(25));         JFreeChart chart = ChartFactory.createBarChart                 (""Chart"", ""Number of Days"", ""Number of ECR"", dataSet,                         PlotOrientation.VERTICAL, false, true, false);         CategoryPlot plot = chart.getCategoryPlot();         // Reduce margin between bars         plot.getDomainAxis().setCategoryMargin(0.0);         // Reduce left and right margin         plot.getDomainAxis().setLowerMargin(0.0);         plot.getDomainAxis().setUpperMargin(0.0);         FileOutputStream outputStream = new FileOutputStream(                 new File(""chart.png""));         ChartUtilities.writeChartAsPNG(outputStream, chart, 1024, 768);     } }"
"import javafx.application.Application; import javafx.scene.Scene; import javafx.scene.layout.StackPane; import javafx.stage.Stage;  public class MainClass extends Application{   @Override public void start(Stage stage) throws Exception{     stage.setTitle(""Hi"");      StackPane layout = new StackPane();     layout.getStylesheets().add(""mainClass.css"");     layout.getStyleClass().add(""main-class"");      Scene scene = new Scene(layout, 600, 250);     scene.getStylesheets().add(       getClass().getResource(""mainClass.css"").toExternalForm()     );     stage.setScene(scene);     stage.setResizable(false);     stage.centerOnScreen();     stage.show();   }    public static void main(String[] args) { launch(args); } }"
"import javafx.application.Application; import static javafx.application.Application.launch; import javafx.scene.Scene; import javafx.scene.web.WebView; import javafx.stage.Stage;  public class WebViewAjax extends Application {   public static void main(String[] args) { launch(args); }   @Override public void start(Stage stage) {     WebView webView = new WebView();     webView.getEngine().load(""http://www.jquerysample.com/#BasicAJAX"");      final Scene scene = new Scene(webView);     stage.setScene(scene);     stage.show();   } }"
"WebView wv = (WebView) v.findViewById(R.id.webview);     wv.getSettings().setSupportZoom(true);     wv.getSettings().setBuiltInZoomControls(true);     wv.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);     WebSettings settings = wv.getSettings();             settings.setUseWideViewPort(true);     settings.setJavaScriptEnabled(true);     settings.setSupportMultipleWindows(true);     settings.setJavaScriptCanOpenWindowsAutomatically(true);     settings.setLoadsImagesAutomatically(true);     settings.setLightTouchEnabled(true);     settings.setDomStorageEnabled(true);     settings.setLoadWithOverviewMode(true);     wv.loadUrl(""http://www.google.com"");"
"public static String[] mySplit(String str, String regex) {     Vector&lt;String&gt; result = new Vector&lt;String&gt;;     int start = 0;     int pos = str.indexOf(regex);     while (pos&gt;=start) {         if (pos&gt;start) {             result.add(str.substring(start,pos));         }         start = pos + regex.length();         result.add(regex);         pos = str.indexOf(regex,start);      }     if (start&lt;str.length()) {         result.add(str.substring(start));     }     String[] array = result.toArray(new String[0]);     return array; }"
package application;  import javafx.application.Application; import javafx.event.EventHandler; import javafx.scene.Scene; import javafx.scene.input.KeyCode; import javafx.scene.input.KeyEvent; import javafx.scene.web.HTMLEditor; import javafx.stage.Stage;  public class Main extends Application {   @Override   public void start(Stage primaryStage)   {     try     {       final HTMLEditor editor = new HTMLEditor();       Scene scene = new Scene(editor);       primaryStage.setScene(scene);        editor.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;()       {         @Override         public void handle(KeyEvent event)         {           if (isValidEvent(event))           {             System.out.println(editor.getHtmlText());           }         }          private boolean isValidEvent(KeyEvent event)         {           return !isSelectAllEvent(event)               &amp;&amp; ((isPasteEvent(event)) || isCharacterKeyReleased(event));         }          private boolean isSelectAllEvent(KeyEvent event)         {           return event.isShortcutDown() &amp;&amp; event.getCode() == KeyCode.A;         }          private boolean isPasteEvent(KeyEvent event)         {           return event.isShortcutDown() &amp;&amp; event.getCode() == KeyCode.V;         }          private boolean isCharacterKeyReleased(KeyEvent event)         {           // Make custom changes here..           switch (event.getCode())           {             case ALT:             case COMMAND:             case CONTROL:             case SHIFT:               return false;             default:               return true;           }         }       });        primaryStage.show();     }     catch (Exception e)     {       e.printStackTrace();     }   }    public static void main(String[] args)   {     launch(args);   } }
