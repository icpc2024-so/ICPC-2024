code
"public class ConnectionProxy {      public ConnectionProxy(Object anObject) {         super(anObject);     }      @Override     public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                       Object result = method.invoke(target, args);         String methodName = method.getName();          if (methodName.equals(""createStatement"")) {             result = ProxyBuilder.createProxy(result, new StatementProxy(result));         }          return result;     } }"
"Class&lt;?&gt; handlerCl = Class.forName(""sun.misc.SignalHandler"");         Class&lt;?&gt; signalCl = Class.forName(""sun.misc.Signal"");          Constructor signalCtor = signalCl.getConstructor(String.class);         Method signalHandle = signalCl.getMethod(""handle"", signalCl, handlerCl);          // Create a proxy class that implements SignalHandler         Class&lt;?&gt; proxyClass = Proxy.getProxyClass(signalCl.getClassLoader(),             handlerCl);          // This is used by the instance of proxyClass to dispatch method calls         InvocationHandler invHandler = new InvocationHandler()         {             public Object invoke(Object proxy,                 Method method, Object[] args) throws Throwable             {                 // proxy is the SignalHandler's ""this"" rederence                 // method will be the handle(Signal) method                 // args[0] will be an instance of Signal                 // If you're using this object for multiple signals, you'll                 // you'll need to use the ""getName"" method to determine which                 // signal you have caught.                 return null;             }         };          // Get the constructor and create an instance of proxyClass         Constructor&lt;?&gt; proxyCtor = proxyClass.getConstructor(InvocationHandler.class);         Object handler = proxyCtor.newInstance(invHandler);          // Create the signal and call Signal.handle to bind handler to signal         Object signal = signalCtor.newInstance(""TERM"");         signalHandle.invoke(null, signal, handler);"
"import java.lang.reflect.Proxy;  public static &lt;I&gt; I restrictToInterface(final I instance, Class&lt;I&gt; publicInterface) {     Object proxy = Proxy.newProxyInstance(         publicInterface.getClassLoader(),          new Class&lt;?&gt;[] {publicInterface},          new InvocationHandler() {             @Override             public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {                 return method.invoke(instance, args);             }         }     );     return publicInterface.cast(proxy); }"
"String proxyUser = """"; String proxyPassword = """"; String proxyAddress = """"; int proxyPort = 8080; InetSocketAddress sa = new InetSocketAddress(proxyAddress, proxyPort); Proxy proxy = new Proxy(Proxy.Type.HTTP, sa); URLConnection conn = url.openConnection(proxy); sun.misc.BASE64Encoder encoder = new sun.misc.BASE64Encoder(); String encodedUserPwd = encoder.encode((proxyUser + "":"" + proxyPassword).getBytes()); conn.setRequestProperty(""Accept-Charset"", ""UTF-8""); conn.setRequestProperty(""Proxy-Authorization"", ""Basic "" + encodedUserPwd);"
"public class YourModule extends AbstractModule {     protected void configure() {       Multibinder&lt;Vehicle&gt; multibinder          = Multibinder.newSetBinder(binder(), Vehicle.class);       multibinder.addBinding().to(Buick.class);       multibinder.addBinding().to(Chevy.class);       multibinder.addBinding().to(Ferrari.class);    }  }   public class YourInterestingClass {    private final Set&lt;Vehicle&gt; vehicles;     @Inject    public YourInterestingClass(Set&lt;Vehicles&gt; vehicles){      this.vehicles = vehicles;    }     public void doSomethingWithVehicles(){      for(Vehicle vehicle: vehicles){        // do something      }    }  }"
"import org.apache.log4j.Logger; import org.springframework.context.ApplicationListener; import org.springframework.security.authentication.event.AuthenticationFailureBadCredentialsEvent; import org.springframework.stereotype.Component;  @Component public class MyApplicationListener implements ApplicationListener&lt;AuthenticationFailureBadCredentialsEvent&gt; {     private static final Logger LOG = Logger.getLogger(MyApplicationListener.class);      @Override     public void onApplicationEvent(AuthenticationFailureBadCredentialsEvent event) {         Object userName = event.getAuthentication().getPrincipal();         Object credentials = event.getAuthentication().getCredentials();         LOG.debug(""Failed login using USERNAME ["" + userName + ""]"");         LOG.debug(""Failed login using PASSWORD ["" + credentials + ""]"");     } }"
"MyService myService = new MyService();         myPort = myService.getMyServiceHttpSoap11Endpoint();         // See http://cxf.apache.org/docs/transformationfeature.html         Client client = ClientProxy.getClient(myPort);          Map&lt;String, String&gt; outTransformMap = Collections.singletonMap(                 ""{http://myNamespace}*"",                 ""{http://myNamespace}*"");         org.apache.cxf.interceptor.transform.TransformOutInterceptor transformOutInterceptor =                 new org.apache.cxf.interceptor.transform.TransformOutInterceptor();         transformOutInterceptor.setOutTransformElements(outTransformMap);             client.getOutInterceptors().add(transformOutInterceptor);"
"Criteria cr = session.createCriteria(Vehicle.class);  // Create the criteria on desired class cr.createAlis(""makeModel"", ""makeModel"")   .createAlias(""makeModel.make"", ""make"")   .createAlias(""makeModel.model"", ""model"");  // Creating aliases makes a join on those tables  if (makeValue != null){     cr.add(Restrictions.eq(""make.make"", makeValue))  // If you have a makeValue passed, filter by it } if (makeModel != null){     cr.add(Restrictions.eq(""model.modelName"", modelValue));  // If you have a makeModel passed, filter by it }  return cr.list();    // Return the list"
"package com.officedrop.uploader;  import java.io.File; import java.net.URL;  import org.apache.http.HttpHost; import org.apache.http.HttpResponse; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.mime.HttpMultipartMode; import org.apache.http.entity.mime.MultipartEntity; import org.apache.http.entity.mime.content.FileBody; import org.apache.http.impl.client.DefaultHttpClient;  public class SampleUploader {      public static void main(String[] args) throws Exception {          DefaultHttpClient httpclient = new DefaultHttpClient();         String basePath = ""http://localhost/"";          URL url = new URL( basePath );          HttpHost targetHost = new HttpHost( url.getHost(), url.getPort(), url.getProtocol() );            HttpPost httpost = new HttpPost( String.format( ""%s%s"", basePath, ""ze/api/documents.xml""));          MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);          entity.addPart(""file_1"", new FileBody( new File( ""path-to-file.pdf"" ) , ""file.pdf"", ""application/pdf"", null));         entity.addPart(""uploaded_data_1"", new FileBody( new File( ""path-to-file.json"" ) , ""file.json"", ""application/json"", null));              httpost.setEntity(entity);          HttpResponse response = httpclient.execute( targetHost, httpost);      }  }"
"public static String getUrl(HttpServletRequest req) {     String scheme = req.getScheme();             // http     String serverName = req.getServerName();     // hostname.com     int serverPort = req.getServerPort();        // 80     String contextPath = req.getContextPath();   // /mywebapp     String servletPath = req.getServletPath();   // /servlet/MyServlet     String pathInfo = req.getPathInfo();         // /a/b;c=123     String queryString = req.getQueryString();          // d=789      // Reconstruct original requesting URL     String url = scheme+""://""+serverName+"":""+serverPort+contextPath+servletPath;     if (pathInfo != null) {         url += pathInfo;     }     if (queryString != null) {         url += ""?""+queryString;     }     return url; }"
desc accident  Name                           Null     Type                                                                                                                                                                                           -------------------------------------------------- ID                                      NUMBER                                                                                                                                                                                         ACC_NAME                                VARCHAR2(4000)                                                                                                                                                                                 ACC_DESC                                VARCHAR2(4000)
interface Renderable {    void render(); }  interface RenderDelegator {    Renderable getRenderable();    void setRenderable(Renderable renderable); }  abstract class Vehicle implements RenderDelegator {    private Renderable renderable;     @Override    public Renderable getRenderable() {       return renderable;    }     @Override    public void setRenderable(Renderable renderable) {       this.renderable = renderable;    }     public abstract void drive(); }  class Car extends Vehicle {    @Override    public void drive() {       // TODO finish!    }  }
"package models; import com.avaje.ebean.config.ServerConfig;      import com.avaje.ebean.event.ServerConfigStartup;      import com.avaje.ebean.config.EncryptKey;        import com.avaje.ebean.config.EncryptKeyManager;   public class CustomServerConfigStartup implements ServerConfigStartup {       @Override      public void onStart(ServerConfig serverConfig) {                serverConfig.setEncryptKeyManager(new BasicEncryptKeyManager());          }      }   class BasicEncryptKeyManager implements EncryptKeyManager{    @Override   public EncryptKey getEncryptKey(String tableName, String columnName) {             return new CustomEncryptKey(tableName, columnName);       }    @Override   public void initialise() {       //Do nothing (yet)  }   }   class CustomEncryptKey implements EncryptKey{      private String tableName;     private String columnName;     public CustomEncryptKey(String tableName, String columnName){       this.tableName = tableName;       this.columnName = columnName;    }   @Override   public String getStringValue() {              return play.Configuration.root().getString(""application.secret"") + ""::"" + this.tableName + ""::"" + this.columnName;        }      }"
"properties.put(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA,          ""org.ops4j.pax.url.mvn,org.apache.felix.scr;uses:=\""org.osgi.framework,"" +         ""org.osgi.service.component\"";version=\""1.7\"","" +         ""org.apache.felix.scr.component;status=provisional;mandatory:=status;"" +         ""uses:=\""org.osgi.service.component\"";version=\""1.0\"","" +         ""org.osgi.service.component;uses:=\""org.osgi.framework\"";version=\""1.2\"""");  //Which you pass to the FrameworkFactory ...  ServiceLoader&lt;FrameworkFactory&gt; loader = ServiceLoader.load(FrameworkFactory.class); Iterator&lt;FrameworkFactory&gt; iterator = loader.iterator(); Framework framework = iterator.next().newFramework(properties); framework.start();"
"public class CustomAdapter extends ArrayAdapter&lt;Integer&gt; {      Activity context;         ArrayList&lt;Integer&gt; objects;       public CustomAdapter(Activity context,  ArrayList&lt;Integer&gt; objects) {       super(context, R.layout.row, objects);       this.context = context;       this.objects = objects;      }       @Override      public View getView(int position, View convertView, ViewGroup parent) {        if (convertView == null) {        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        convertView = inflater.inflate(R.layout.row, parent, false);         }         ImageView i = (ImageView) convertView.findViewById(R.id.icon);       i.setBackgroundResource(objects.get(position));        TextView t = (TextView) convertView.findViewById(R.id.title);       t.setText(""title"");        return convertView;       }      }"
"public class RwdServlet extends HttpServlet {     private ExecutorService loader;      @Override     public void init() throws ServletException {         super.init();         loader = Executors.newCachedThreadPool();//or use some other executor, google about difference between them     }     @Override     protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {         Task t=createTask(req); //assume that task implements Runnable or Callable         loader.submit(t); // submit a task to executor after this line your task will start execution in another thread     }     @Override     public void destroy() {         loader.shutdown();//this will destroy executor service but before that it will wait until all already submitted tasks will be executed      } }"
"import java.lang.reflect.{Method, InvocationHandler, Proxy}  object ProxyTesting {    class ProxyInvocationHandler extends InvocationHandler {     def invoke(proxy: scala.AnyRef, method: Method, args: Array[AnyRef]): AnyRef = {       println(""Hello Stackoverflow when invoking method with name \""%s\"""".format(method.getName))       proxy     }   }    trait Iface {     def doNothing()   }    def main(args: Array[String]) {     val handler = new ProxyInvocationHandler      val impl = Proxy.newProxyInstance(       classOf[Iface].getClassLoader,       Array(classOf[Iface]),       handler     ).asInstanceOf[Iface]      impl.doNothing()   }  }"
"package com.mycompany.demo;  import javax.xml.namespace.QName; import javax.xml.ws.Service;  public class Client {   public static void main(String args[]) {     QName serviceName = new QName(""http://org.apache.cxf"", ""stockQuoteReporter"");     Service s = Service.create(serviceName);      QName portName = new QName(""http://org.apache.cxf"", ""stockQuoteReporterPort"");     Dispatch&lt;DOMSource&gt; dispatch = s.createDispatch(portName,                                                   DOMSource.class,                                                   Service.Mode.PAYLOAD);     ...   } }"
"import java.io.IOException;  import org.apache.http.HttpResponse; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.StringEntity; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClientBuilder; import org.apache.http.util.EntityUtils;  public class Gson {      public static void main(String[] args) {     }      public HttpResponse http(String url, String body) {          try (CloseableHttpClient httpClient = HttpClientBuilder.create().build()) {             HttpPost request = new HttpPost(url);             StringEntity params = new StringEntity(body);             request.addHeader(""content-type"", ""application/json"");             request.setEntity(params);             HttpResponse result = httpClient.execute(request);             String json = EntityUtils.toString(result.getEntity(), ""UTF-8"");              com.google.gson.Gson gson = new com.google.gson.Gson();             Response respuesta = gson.fromJson(json, Response.class);              System.out.println(respuesta.getExample());             System.out.println(respuesta.getFr());          } catch (IOException ex) {         }         return null;     }      public class Response{          private String example;         private String fr;          public String getExample() {             return example;         }         public void setExample(String example) {             this.example = example;         }         public String getFr() {             return fr;         }         public void setFr(String fr) {             this.fr = fr;         }     } }"
"private static Pointer getWindowPointer(Stage stage) {     try {         TKStage tkStage = stage.impl_getPeer();         Method getPlatformWindow = tkStage.getClass().getDeclaredMethod(""getPlatformWindow"" );         getPlatformWindow.setAccessible(true);         Object platformWindow = getPlatformWindow.invoke(tkStage);         Method getNativeHandle = platformWindow.getClass().getMethod( ""getNativeHandle"" );         getNativeHandle.setAccessible(true);         Object nativeHandle = getNativeHandle.invoke(platformWindow);         return new Pointer((Long) nativeHandle);     } catch (Throwable e) {         System.err.println(""Error getting Window Pointer"");         return null;     } }"
"import org.apache.http.HttpEntity; import org.apache.http.HttpResponse; import org.apache.http.client.HttpClient; import org.apache.http.client.methods.HttpGet; import org.apache.http.impl.client.HttpClients; import org.apache.http.ssl.SSLContexts; import org.apache.http.util.EntityUtils; import org.junit.Test;  import javax.net.ssl.SSLContext; import java.io.InputStream; import java.security.KeyStore;  import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertNotNull;  public class MyClientCertTest {      private static final String KEYSTOREPATH = ""/clientkeystore.jks""; // or .p12     private static final String KEYSTOREPASS = ""keystorepass"";     private static final String KEYPASS = ""keypass"";      KeyStore readStore() throws Exception {         try (InputStream keyStoreStream = this.getClass().getResourceAsStream(KEYSTOREPATH)) {             KeyStore keyStore = KeyStore.getInstance(""JKS""); // or ""PKCS12""             keyStore.load(keyStoreStream, KEYSTOREPASS.toCharArray());             return keyStore;         }     }     @Test     public void readKeyStore() throws Exception {         assertNotNull(readStore());     }     @Test     public void performClientRequest() throws Exception {         SSLContext sslContext = SSLContexts.custom()                 .loadKeyMaterial(readStore(), KEYPASS.toCharArray()) // use null as second param if you don't have a separate key password                 .build();          HttpClient httpClient = HttpClients.custom().setSSLContext(sslContext).build();         HttpResponse response = httpClient.execute(new HttpGet(""https://slsh.iki.fi/client-certificate/protected/""));         assertEquals(200, response.getStatusLine().getStatusCode());         HttpEntity entity = response.getEntity();          System.out.println(""----------------------------------------"");         System.out.println(response.getStatusLine());         EntityUtils.consume(entity);     } }"
class Car {     private int manufactureYear;     private Color color;     private int numCylinders;      public int getManufactureYear() { return manufactureYear; }     public void setManufactureYear(int manufactureYear) { this.manufactureYear = manufactureYear; }      public Color getColor() { return color; }     public void setColor(Color color) { this.color = color; }      public int getNumCylinders() { return numCylinders; }     public void setNumCylinders(int numCylinders) { this.numCylinders = numCylinders; } }
"ConfigureForm form = new ConfigureForm(FormType.submit); form.setPersistentItems(false); form.setDeliverPayloads(true); form.setAccessModel(AccessModel.open);  PubSubManager manager        = new PubSubManager(connection, ""pubsub.communitivity.com""); Node myNode = manager.createNode(""http://jabber.org/protocol/geoloc"", form);  StringBuilder body = new StringBuilder(); //ws for readability body.append(""&lt;geoloc xmlns='http://jabber.org/protocol/geoloc' xml:lang='en'&gt;""); body.append(""   &lt;country&gt;Italy&lt;/country&gt;""); body.append(""   &lt;lat&gt;45.44&lt;/lat&gt;""); body.append(""   &lt;locality&gt;Venice&lt;/locality&gt;""); body.append(""   &lt;lon&gt;12.33&lt;/lon&gt;""); body.append(""   &lt;accuracy&gt;20&lt;/accuracy&gt;""); body.append(""&lt;/geoloc&gt;"");  SimplePayload payload = new SimplePayload(                               ""geoloc"",                               ""http://jabber.org/protocol/geoloc"",                                body.toString()); String itemId = ""zz234""; Item&lt;SimplePayload&gt; item = new Item&lt;SimplePayload&gt;(itemId, payload);  // Required to recieve the events being published myNode.addItemEventListener(myEventHandler);  // Publish item myNode.publish(item);"
"import org.springframework.stereotype.Controller; import org.springframework.validation.BindingResult; import org.springframework.web.bind.WebDataBinder; ... import javax.validation.Valid;  @Controller public class RegistrationController {     @InitBinder     protected void initBinder(WebDataBinder binder)      {         binder.setMessageCodesResolver(new MessageCodesResolver());         binder.setValidator(new RegistrationValidator());     }      @RequestMapping(value=""/userRegistration.html"", method = RequestMethod.POST)     public String processRegistrationForm(@Valid Registration registration, BindingResult result, HttpServletRequest request)  {          if(result.hasErrors())          {             return ""registration""; // the name of the view          }           ...     } }"
"public class MyUserDetailsService implements UserDetailsService{      private EntityManager entityManager;     @PersistenceContext     public void setEntityManager(EntityManager newEm){         this.entityManager = newEm;     }      public UserDetails loadUserByUsername(String username){          // assuming that you have a User class that implements UserDetails         return entityManager.createQuery(""from User where username = :username"", User.class)                             .setParameter(""username"", username)                             .getSingleResult();      } }"
"import java.io.*;  class Vehicle {     private String vehicleNo;     private String model;     private String manufacturer;     private String color;      public void setNo(String vehicleNo) {         this.vehicleNo = vehicleNo;     }      public String getNo() {         return vehicleNo;     }      public void setModel(String model) {         this.model = model;     }      public String getModel() {         return model;     }      public void setManufacturer(String manufacturer) {         this.manufacturer = manufacturer;     }      public String getManufacturer() {         return manufacturer;     }      public void setColor(String color)     {         this.color = color;     }      public String getColor() {         return color;     }  }  class Truck extends Vehicle {     private double loadingCapacity;      public void setLoad(double loadingCapacity) {         this.loadingCapacity = loadingCapacity;     }      public double getLoad() {         return this.loadingCapacity;     }  }  public class VehicleInfo {      private static void updateColorAndCapacity(BufferedReader br, Truck truck)         throws IOException     {         System.out.print(""Color: "");         String col = br.readLine();         truck.setColor(col);          while (true)         {             System.out.print(""Enter Loading Capacity (maximum 100tons):"");             String value = br.readLine();             value = value.trim();             try {                 int load = Integer.parseInt(value);                 truck.setLoad(load);                 return;             } catch (NumberFormatException e) {                 /// do it once again                 continue;             }         }     }      public static void main(String[] args)          throws IOException {          Truck truck = new Truck();          BufferedReader br = new BufferedReader(new InputStreamReader(System.in));          System.out.print(""Vehicle No: "");         String no = br.readLine();         truck.setNo(no);          System.out.print(""Model: "");         String model = br.readLine();         truck.setModel(model);          System.out.print(""Manufacturer: "");         String man = br.readLine();         truck.setManufacturer(man);          updateColorAndCapacity(br, truck);          int loop_option = 0;                 do {             System.out.println();             System.out.println(""----Vehicle Information----"");             System.out.println();             System.out.println(""Vehicle No: "" + truck.getNo());             System.out.println(""Model: "" + truck.getModel());             System.out.println(""Manufacturer: "" + truck.getManufacturer());             System.out.println(""Color: "" + truck.getColor());             System.out.println(""Loading Capacity: "" + truck.getLoad());             System.out.println();             System.out.println("" if U want to update color and loading capacity press 1 and to exit press 2 .."");              loop_option = Integer.parseInt(br.readLine());              if (loop_option == 1) {                 updateColorAndCapacity(br, truck);             }          } while (loop_option == 1);     } }"
"import org.apache.http.protocol.HTTP; import org.jsoup.*; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.select.Elements;  public class start extends Activity {      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);        try {         Document doc = Jsoup.connect(URL).get();         Log.i(""DOC"", doc.toString().toString());     Elements elementsHtml = doc.getElementById(id);         for(Element element: elementsHtml)         {             Log.i(""ELEMENTI"",URLDecoder.decode(element.text(), HTTP.UTF_8));         }      } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }"
"public List&lt;Car&gt; load(int first, int pageSize, String sortField, SortOrder sortOrder, Map&lt;String,String&gt; filters) {           List&lt;Car&gt; data = new ArrayList&lt;Car&gt;();            //filter           for(Car car : datasource) {               boolean match = true;                for(Iterator&lt;String&gt; it = filters.keySet().iterator(); it.hasNext();) {                   try {                       String filterProperty = it.next();                       String filterValue = filters.get(filterProperty);                       String fieldValue = String.valueOf(car.getClass().getField(filterProperty).get(car));    ..."
"import java.io.BufferedReader; import java.io.InputStreamReader; import java.net.URI;  import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.FSDataInputStream; import org.apache.hadoop.fs.Path; import org.apache.hadoop.hdfs.DistributedFileSystem;  DistributedFileSystem fileSystem = new DistributedFileSystem(); Configuration conf = new Configuration(); fileSystem.initialize(new URI(""hdfs://namenode-host:54310""), conf); FSDataInputStream input = fileSystem.open(new Path(""/path/to/file.csv"")); System.out.println((new BufferedReader(new InputStreamReader(input))).readLine());"
"try{       String url = ""jdbc:mysql://localhost:3306/adv"";          Connection conn = DriverManager.getConnection(url,""root"",""sa"");          Statement st = conn.createStatement();         String query = ""SELECT CustomerNo, FName, FROM roominfo WHERE FName LIKE '%"" + jTextField2.getText() + ""%'"";       rs = st.executeQuery(query);       jTable2.setModel(DbUtils.resultSetToTableModel(rs));       conn.close();  }      catch (Exception e) {          JOptionPane.showMessageDialog(null,""Got an exception!"");         System.err.println(e.getMessage());      }"
