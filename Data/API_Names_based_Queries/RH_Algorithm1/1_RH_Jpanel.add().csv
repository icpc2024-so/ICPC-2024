code
"public void popupMenuWillBecomeVisible(PopupMenuEvent e) {     JComboBox box = (JComboBox) e.getSource();     Object comp = box.getUI().getAccessibleChild(box, 0);     if (!(comp instanceof JPopupMenu)) return;     JComponent scrollPane = (JComponent) ((JPopupMenu) comp).getComponent(0);     Dimension size = new Dimension();     size.width = box.getPreferredSize().width;     size.height = scrollPane.getPreferredSize().height;     scrollPane.setPreferredSize(size);     //  following line for Tiger     // scrollPane.setMaximumSize(size); }"
"{     ""entry"": ""132456"",     ""product"":      {         ""item"": ""123456"",         ""prompts"":          [             {                 ""promptId"": ""1"",                 ""promptNumber"": ""109"",                 ""promptType"": 4,                 ""promptTypeDesc"": ""desc1"",                 ""validations"":                 [                     {                         ""minLen"": 10,                         ""maxLen"": 10,                         ""required"": true                      }                  ]              }          ]      } }"
"DescribeInstancesRequest dis = new DescribeInstancesRequest();    dis.setInstanceIds(instancesList); DescribeInstancesResult disresult = ec2.describeInstances(dis); List&lt;Reservation&gt; list = disresult.getReservations();  System.out.println(""-------------- status of instances -------------""); for (Reservation res : list) {     List &lt;Instance&gt; instancelist = res.getInstances();      for (Instance instance : instancelist) {         System.out.println(""Instance Status : "" + instance.getState().getName());         List &lt;Tag&gt; t1 = instance.getTags();         for (Tag teg : t1) {             System.out.println(""Instance Name : ""+ teg.getValue());         }     }        System.out.println(""------------------------------------------------""); }"
"DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();         dbf.setNamespaceAware(true);         DocumentBuilder db = dbf.newDocumentBuilder();         InputStream is = post.getResponseBodyAsStream();         Document doc = db.parse(is);         DOMSource ds = new DOMSource(doc);         JAXBContext responseContext = JAXBContext.newInstance(SearchEnrolledFundingResponse.class);         Unmarshaller u = responseContext.createUnmarshaller();         JAXBElement&lt;SearchEnrolledFundingResponse&gt; jaxbResponse = (JAXBElement&lt;SearchEnrolledFundingResponse&gt;) u.unmarshal(ds, SearchEnrolledFundingResponse.class);         SearchEnrolledFundingResponse searchResponse = jaxbResponse.getValue();"
"public class MainActivity extends TabActivity {  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);      //setContentView(R.layout.activity_main);      TabHost mTabHost = getTabHost();      mTabHost.addTab(mTabHost.newTabSpec(""first"").setIndicator(""First"").setContent(new Intent(this  ,FirstActivity.class )));     mTabHost.addTab(mTabHost.newTabSpec(""second"").setIndicator(""Second"").setContent(new Intent(this , SecondActivity.class )));     mTabHost.setCurrentTab(0);   } }"
"public JPanel createOscPanel(final Osc o)  {    JPanel cbPanel = new JPanel();     final String[] comboItems = {""Sine"", ""Custom"", ""FSaw"", ""FSquare""};    JComboBox cb = new JComboBox(comboItems);    cbPanel.add(cb);      cb.addActionListener(new ActionListener(){        public void actionPerformed(ActionEvent e) {            JComboBox cb = (JComboBox)e.getSource();            int value = cb.getSelectedIndex();            o.setWaveType();            System.out.println(value);        }      });   return cbPanel;   }"
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();     DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();     Document doc = dBuilder.parse(""yourDocumentName"");     doc.getDocumentElement().normalize();     NodeList nlList = doc.getElementsByTagName(""input"");     for (int indx= 0; indx &lt; nList.getLength(); indx++) {        Element eElement = (Element) nList.item(indx);        if(eElement.getAttribute(""name"").equals(""EnterName"")){               System.out.println(""EnterName: "" + eElement.getNodeValue());        }     }      NodeList nlList1 = doc.getElementsByTagName(""select"");     for (int indx= 0; indx &lt; nList1.getLength(); indx++) {        Element eElement = (Element) nList1.item(indx);        if(eElement.getAttribute(""name"").equals(""SelectOptions"")){               System.out.println(""SelectOptions: "" + eElement.getNodeValue());        }     }"
FocusAdapter selectAllFocusAdapter = new FocusAdapter() {   public void focusGained(FocusEvent e) {     final JTextComponent tComponent = (JTextComponent) e.getSource();     SwingUtilities.invokeLater(new Runnable() {        @Override       public void run() {         tComponent.selectAll();       }     });     tComponent.selectAll();   } };  myJTextField.addFocusListener(selectAllFocusAdapter); otherJTextField.addFocusListener(selectAllFocusAdapter); myTextArea.addFocusListener(selectAllFocusAdapter);
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"JPanel pnl = new JPanel();     GroupLayout l = new GroupLayout(pnl);     pnl.setLayout(l);      JButton b1 = new JButton(""1"");     JButton b2 = new JButton(""2"");     JButton b3 = new JButton(""3"");      l.setHorizontalGroup(             l.createSequentialGroup()                 .addComponent(b1)                 .addGroup(l.createParallelGroup()                     .addComponent(b2)                     .addComponent(b3)));      l.setVerticalGroup(             l.createParallelGroup()                 .addComponent(b1)                 .addGroup(l.createSequentialGroup()                     .addComponent(b2)                     .addComponent(b3)));      JFrame f = new JFrame(""test"");     f.setContentPane(pnl);     f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     f.setSize(1024, 768);     f.setVisible(true);"
"JPanel innerSelectPanel = new JPanel(new GridLayout(0, 1, 0, 5));     // innerSelectPanel.setPreferredSize(new Dimension(50, 0));     innerSelectPanel.add(selectAllButton);     innerSelectPanel.add(selectButton);     innerSelectPanel.add(deselectButton);     innerSelectPanel.add(deselectAllButton);     innerSelectPanel.setOpaque(false);     innerSelectPanel.setBorder(BorderFactory.createEmptyBorder(0, 2, 0, 2));     selectButtonsPanel.setLayout(new BoxLayout(selectButtonsPanel, BoxLayout.PAGE_AXIS));     selectButtonsPanel.add(Box.createVerticalGlue());     selectButtonsPanel.add(innerSelectPanel);     selectButtonsPanel.add(Box.createVerticalGlue());"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"final SvnOperationFactory svnOperationFactory = new SvnOperationFactory();     try {         final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();         final SvnDiffGenerator diffGenerator = new SvnDiffGenerator();         diffGenerator.setBasePath(new File(""""));          final SvnDiff diff = svnOperationFactory.createDiff();         diff.setSources(SvnTarget.fromURL(url1, svnRevision1), SvnTarget.fromURL(url2, svnRevision1));         diff.setDiffGenerator(diffGenerator);         diff.setOutput(byteArrayOutputStream);         diff.run();     } finally {         svnOperationFactory.dispose();     }"
"var   PM: JPackageManager;   mainIntent: JIntent;   LaunchIntent: JIntent;   pkgAppsList: JList;   ri: JResolveInfo;   iter: JIterator;   midlist := TStringList; begin   PM := SharedActivityContext.getPackageManager;   mainIntent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_MAIN, nil);   mainIntent.addCategory(TJIntent.JavaClass.CATEGORY_LAUNCHER);   pkgAppsList := PM.queryIntentActivities(mainIntent, 0);   midlist := TStringList;   iter := pkgAppsList.iterator;   while iter.hasNext do   begin     ri := TJResolveInfo.Wrap((iter.next as ILocalObject).GetObjectID);     mIdList.Add(ri.activityInfo.applicationInfo.packageName);   end;   LaunchIntent := PM.getLaunchIntentForPackage(mIdList[2]);   SharedActivityContext.startActivity( LaunchIntent ) end;"
"Criteria criteria = hibernetSession.createCriteria(WishList.class); criteria.createAlias(""item"", ""itemAlias"") .setProjection(Projections.projectionList() .add(Projections.property(""id""),""id"") .add(Projections.property(""itemAlias.id""),""itemAlias.id"") .add(Projections.property(""itemAlias.productCategory""),""itemAlias.productCategory"") .add(Projections.property(""itemAlias.productName""),""itemAlias.productName"") .add(Projections.groupProperty(""itemAlias.productName""))) .setResultTransformer(Transformers.aliasToBean(WishList.class)); List&lt;WishList&gt; itemList = criteria.list();"
"JSONObject object = new JSONObject(); object.put(""name"", ""sample""); JSONArray array = new JSONArray();  JSONObject arrayElementOne = new JSONObject(); arrayElementOne.put(""setId"", 1); JSONArray arrayElementOneArray = new JSONArray();  JSONObject arrayElementOneArrayElementOne = new JSONObject(); arrayElementOneArrayElementOne.put(""name"", ""ABC""); arrayElementOneArrayElementOne.put(""type"", ""STRING"");  JSONObject arrayElementOneArrayElementTwo = new JSONObject(); arrayElementOneArrayElementTwo.put(""name"", ""XYZ""); arrayElementOneArrayElementTwo.put(""type"", ""STRING"");  arrayElementOneArray.put(arrayElementOneArrayElementOne); arrayElementOneArray.put(arrayElementOneArrayElementTwo);  arrayElementOne.put(""setDef"", arrayElementOneArray); array.put(arrayElementOne); object.put(""def"", array);"
"NSMutableArray *arrFixedData=[[NSMutableArray alloc]initWithObjects:@""DCS"",@""DCT"",@""DCU"",@""DAG"",@""DAI"",@""DAJ"",@""DAK"",@""DCG"",@""DAQ"",@""DCA"",@""DCB"",@""DCD"",@""DCF"",@""DCH"",@""DBA"",@""DBB"",@""DBC"",@""DBD"",@""DAU"",@""DCE"",@""DAY"",@""ZWA"",@""ZWB"",@""ZWC"",@""ZWD"",@""ZWE"",@""ZWF"", nil];     NSMutableArray *arrDriverData=[[NSMutableArray alloc]initWithObjects:@""Customer Family Name"",@""Customer Given Name"",@""Name Suffix"",@""Street Address 1"",@""City"",@""Jurisdction Code"",@""Postal Code"",@""Country Identification"",@""Customer Id Number"",@""Class"",@""Restrictions"",@""Endorsements"",@""Document Discriminator"",@""Vehicle Code"",@""Expiration Date"",@""Date Of Birth"",@""Sex"",@""Issue Date"",@""Height"",@""Weight"",@""Eye Color"",@""Control Number"",@""Endorsements"",@""Transaction Types"",@""Under 18 Until"",@""Under 21 Until"",@""Revision Date"", nil];       NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];     for (int i=0; i&lt;[arrFixedData count]; i++)     {         NSRange range = [message  rangeOfString: [arrFixedData objectAtIndex:i] options: NSCaseInsensitiveSearch];         NSLog(@""found: %@"", (range.location != NSNotFound) ? @""Yes"" : @""No"");         if (range.location != NSNotFound)         {             NSString *temp=[message substringFromIndex:range.location+range.length];              NSRange end = [temp rangeOfString:@""\n""];             if (end.location != NSNotFound)             {                 temp = [temp substringToIndex:end.location];                 temp =[temp stringByReplacingOccurrencesOfString:@""\n"" withString:@""""];                 temp=[temp stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];              }             NSLog(@""temp data : %@"",temp);             [dict setObject:temp forKey:[arrDriverData objectAtIndex:i]];         }     }      NSLog(@""Dictionary : %@"",dict);"
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"final ContentAdapter ca = moz.getChromeAdapter().getContentAdapter();  nsIURIContentListener mycl = new nsIURIContentListener() {     public boolean onStartURIOpen(nsIURI aURI) {         System.out.println(aURI.getHost() + aURI.getPath());         return true;     }     public boolean doContent(String aContentType, boolean aIsContentPreferred, nsIRequest aRequest, nsIStreamListener[] aContentHandler) {          System.out.println(""1"");         return ca.doContent(aContentType, aIsContentPreferred, aRequest, aContentHandler);      }     public boolean isPreferred(String aContentType, String[] aDesiredContentType) {          System.out.println(""2"");         return ca.isPreferred(aContentType, aDesiredContentType);      }     public boolean canHandleContent(String aContentType, boolean aIsContentPreferred, String[] aDesiredContentType) {          System.out.println(""3"");         return ca.canHandleContent(aContentType, aIsContentPreferred, aDesiredContentType);      }     public nsISupports getLoadCookie() {          System.out.println(""4"");         return ca.getLoadCookie();      }     public void setLoadCookie(nsISupports aLoadCookie) {          System.out.println(""5"");         ca.setLoadCookie(aLoadCookie);      }     public nsIURIContentListener getParentContentListener() {          System.out.println(""6"");         return ca.getParentContentListener();      }     public void setParentContentListener(nsIURIContentListener aParentContentListener) {          System.out.println(""7"");         ca.setParentContentListener(aParentContentListener);      }     public nsISupports queryInterface(String uuid) {          System.out.println(""8"");         return ca.queryInterface(uuid);      }  };   moz.getChromeAdapter().getWebBrowser().setParentURIContentListener(mycl);"
"net.sf.json.JSONObject obj = new net.sf.json.JSONObject(); obj.put(&quot;jsonStringValue&quot;,&quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;); obj.put(&quot;quotedJsonStringValue&quot;,&quot;\'{\&quot;hello\&quot;:\&quot;world\&quot;}\'&quot;); obj.put(&quot;naturalStringValue&quot;, &quot;\&quot;hello world\&quot;&quot;); System.out.println(obj.toString()); System.out.println(obj.getString(&quot;jsonStringValue&quot;)); System.out.println(obj.getString(&quot;quotedJsonStringValue&quot;)); System.out.println(obj.getString(&quot;naturalStringValue&quot;));"
"JFrame frame = new JFrame();     frame.setSize(400, 400);     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);      final JTabbedPane pane = new JTabbedPane();      JPanel jPanel = new JPanel();     JButton button = new JButton(""Blink tab"");     jPanel.add(button);     pane.addTab(""adsad"", jPanel);      JPanel jPanel1 = new JPanel();     jPanel1.add(new JLabel(""hi""));     pane.addTab(""werqr"", jPanel1);      final Color defaultBackColor = pane.getBackgroundAt(1); // default background color of tab     final Color defaultForeColor = pane.getForegroundAt(1); // default foreground color of tab      button.addActionListener(new ActionListener() {         @Override         public void actionPerformed(ActionEvent e) {             Timer timer = new Timer(500, new ActionListener() {                 boolean blinkFlag = false;                 @Override                 public void actionPerformed(ActionEvent e) {                     blink(blinkFlag);                     blinkFlag = !blinkFlag;                 }             });             timer.start();         }         private void blink(boolean blinkFlag) {             if (blinkFlag) {                 pane.setForegroundAt(1, Color.green);                 pane.setBackgroundAt(1, Color.orange);             } else {                 pane.setForegroundAt(1, defaultForeColor);                 pane.setBackgroundAt(1, defaultBackColor);             }             pane.repaint();         }     });      frame.add(pane);     frame.setVisible(true);"
"SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator(); JceKeyAgreeRecipientInfoGenerator rig = new JceKeyAgreeRecipientInfoGenerator(CMSAlgorithm.ECDH_SHA1KDF, senderPrivateKey, senderPublicKey, CMSAlgorithm.AES128_WRAP); rig.setProvider(BouncyCastleProvider.PROVIDER_NAME); rig.addRecipient(recipientX509Certificate); gen.addRecipientInfoGenerator(rig);  MimeBodyPart msg = new MimeBodyPart(); msg.setText(&quot;This is a secret message&quot;);  MimeBodyPart mp = gen.generate(msg, new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(&quot;BC&quot;).build());  Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null);  String to = &quot;bob@example.com&quot;;  Address fromUser = new InternetAddress(&quot;alice@example.com&quot;); Address toUser = new InternetAddress(to);  MimeMessage body = new MimeMessage(session); body.setFrom(fromUser); body.setRecipient(Message.RecipientType.TO, toUser); body.setSubject(&quot;example encrypted message&quot;); body.setContent(mp.getContent(), mp.getContentType()); body.saveChanges();  body.writeTo(new FileOutputStream(&quot;/tmp/encrypted.msg&quot;));"
"Model model = ...      model.addLiteral (subject, predicate, 10);     model.addLiteral (subject, predicate, 0.5);     model.addLiteral (subject, predicate, (float)0.5);     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(20));     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(0.99));     model.addLiteral (subject, predicate, true);     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""2012-03-11"", XSDDatatype.XSDdate));     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""P2Y"", XSDDatatype.XSDduration));"
public List&lt;Task&gt; getTaskDue(){          List&lt;Task&gt; temp = new ArrayList&lt;Task&gt;();      for(int u = 0; u &lt; unitCollection.size(); u++){         Unit unit = unitCollection.get(u);          for (int a = 0; a &lt; unit.getAssessmentCollection().size(); a++){             AssessmentItem assessment = unit.getAssessmentCollection().get(a);              for (int t = 0; t &lt; assessment.getTasks().size(); t++){                 Task task = assessment.getTasks().get(t);                  if (task.getDueDate().compareTo(assessment.getDueDate()) &lt;= 0){                      temp.add(task);                 }                }            }        }        return temp; }
"AbstractSVNCommand.registerCommand(new SVNStatusCommand());  final ByteArrayOutputStream bos = new ByteArrayOutputStream(); final PrintStream stream = new PrintStream(bos);  final SVNCommandLine commandLine = new SVNCommandLine(); commandLine.init(new String[] {""status"", ""d:/svntest/small.svn17""});  final SVNCommandEnvironment env = new SVNCommandEnvironment(""mySvn"", stream, stream, System.in); env.init(commandLine); env.initClientManager();  final SVNStatusCommand svnStatusCall = new SVNStatusCommand(); svnStatusCall.init(env); svnStatusCall.run(); stream.flush(); System.out.println(new String(bos.toByteArray()));"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"ShapeDrawable sd1 = new ShapeDrawable(new RectShape());                         sd1.getPaint().setColor(CommonUtilities.color);                         sd1.getPaint().setStyle(Style.STROKE);                         sd1.getPaint().setStrokeWidth(CommonUtilities.stroke);                         sd1.setPadding(15, 10, 15, 10);                          sd1.getPaint().setPathEffect(                                 new CornerPathEffect(CommonUtilities.corner));                         ln_back.setBackgroundDrawable(sd1);"
"levelChoice = FXCollections.observableArrayList(""Bla"", ""Blo"");  levelColumn.setCellValueFactory(     new PropertyValueFactory&lt;ClassesProperty, String&gt;(""level"") ); levelColumn.setCellFactory(ComboBoxTableCell.forTableColumn(levelChoice)); levelColumn.setOnEditCommit(     new EventHandler&lt;CellEditEvent&lt;ClassesProperty, String&gt;&gt;() {         @Override         public void handle(CellEditEvent&lt;ClassesProperty, String&gt; t) {             ((ClassesProperty) t.getTableView().getItems().get(t.getTablePosition().getRow())).setLevel(t.getNewValue());         };     } );"
"BufferedImage image = ImageIO.read(new File(path)); JPEGImageEncoder jpegEncoder = JPEGCodec.createJPEGEncoder(new FileOutputStream(new File(path))); JPEGEncodeParam jpegEncodeParam = jpegEncoder.getDefaultJPEGEncodeParam(image); jpegEncodeParam.setDensityUnit(JPEGEncodeParam.DENSITY_UNIT_DOTS_INCH); jpegEncoder.setJPEGEncodeParam(jpegEncodeParam); jpegEncodeParam.setQuality(0.75f, false); jpegEncodeParam.setXDensity(300); jpegEncodeParam.setYDensity(300); jpegEncoder.encode(image, jpegEncodeParam); image.flush();"
