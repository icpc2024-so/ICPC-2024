code
"public static Class&lt;?&gt; bundleClassForName(Bundle bundle, String name) throws ClassNotFoundException {     int length = name.length();     if (length &gt; 0 &amp;&amp; name.charAt(0) == '[') {         int pos = 1;         while (pos &lt; length &amp;&amp; name.charAt(pos) == '[') {             pos++;         }          if (pos &lt; name.length()) {             if (name.charAt(pos) != 'L') {                 return Class.forName(name);             }              if (name.charAt(length - 1) == ';') {                 String componentName = name.substring(pos + 1, length - 1);                 Class&lt;?&gt; klass = bundle.loadClass(componentName);                 ClassLoader loader = klass.getClassLoader();                 return Class.forName(name, false, loader);             }         }     }      return bundle.loadClass(name); }"
"public static Element getElementByAttributeValue(Node rootElement, String attributeValue) {      if (rootElement != null &amp;&amp; rootElement.hasChildNodes()) {         NodeList nodeList = rootElement.getChildNodes();          for (int i = 0; i &lt; nodeList.getLength(); i++) {             Node subNode = nodeList.item(i);              if (subNode.hasAttributes()) {                 NamedNodeMap nnm = subNode.getAttributes();                  for (int j = 0; j &lt; nnm.getLength(); j++) {                     Node attrNode = nnm.item(j);                      if (attrNode.getNodeType == Node.ATTRIBUTE_NODE) {                         Attr attribute = (Attr) attrNode;                          if (attributeValue.equals(attribute.getValue()) {                             return (Element)subNode;                         } else {                             return getElementByAttributeValue(subNode, attributeValue);                         }                     }                 }                            }         }     }      return null; }"
"JNIEXPORT jobject JNICALL Java_com_rmsdk_wrapper_RMServices_getBookmarkNew(     JNIEnv *env, jobject thiso) {    jclass cls = g_jniEnv-&gt;FindClass(""br/com/iba/model/Annotation"");     jobject obj = g_jniEnv-&gt;AllocObject(cls);     jmethodID meth1 = g_jniEnv-&gt;GetMethodID(cls, ""setBookmark1"", ""(Ljava/lang/String;)V"");    jmethodID meth2 = g_jniEnv-&gt;GetMethodID(cls, ""setPage"", ""(I)V"");     jstring jAssetName = g_jniEnv-&gt;NewStringUTF(""Bookmark qualquer"");     g_jniEnv-&gt;CallObjectMethod(obj, meth1, jAssetName);    g_jniEnv-&gt;CallObjectMethod(obj, meth2, 2);     return obj; };"
"import com.thoughtworks.xstream.XStream; import com.thoughtworks.xstream.annotations.XStreamAlias; import com.thoughtworks.xstream.annotations.XStreamConverter; import com.thoughtworks.xstream.converters.extended.ToAttributedValueConverter;  @XStreamAlias(""response"") @XStreamConverter(value=ToAttributedValueConverter.class, strings={""response""}) public class ClientGenericResponse {      String response;      @XStreamAlias(""type"")     String status;      ClientID client_id;      public String getResponse() {         return response;     }      public void setResponse(String response) {         this.response = response;     }      public String getStatus() {         return status;     }      public void setStatus(String status) {         this.status = status;     }      public ClientID getClient_id() {         return client_id;     }      public void setClient_id(ClientID clientId) {         client_id = clientId;     }      public static void main(String[] args) {          XStream xstream = new XStream();          xstream.processAnnotations(ClientGenericResponse.class);          // Send request (this retrieves the xml above)          String xmlResponse = Utility.sendRequest(xml, true);          ClientGenericResponse response = (ClientGenericResponse)xstream.fromXML(xmlResponse);     } }"
"var jsonObjArr = [];  var itr:java.util.Iterator = recordMap.keySet().iterator(); while (itr.hasNext()) {     var record = recordMap.get(itr.next());    var jsonObj:com.ibm.commons.util.io.json.JsonJavaObject =            new com.ibm.commons.util.io.json.JsonJavaObject();      jsonObj.putJsonProperty(""fieldName1"", record.getFieldName1());     jsonObj.putJsonProperty(""fieldName2"", record.getFieldName2());     jsonObj.putJsonProperty(""fieldName3"", record.getFieldName3());     jsonObj.putJsonProperty(""fieldName4"", record.getFieldName4());     jsonObj.putJsonProperty(""fieldName5"", record.getFieldName5());     jsonObj.putJsonProperty(""fieldName6"", record.getFieldName6());      jsonObjArr.push(com.ibm.commons.util.io.json.JsonGenerator         .toJson(com.ibm.commons.util.io.json.JsonJavaFactory.instanceEx, empr));  };  var jsonString = ""{"" +     ""count:"" + @Text(jsonObjArr.length) + "","" +     ""employees:"" + ""["" + jsonObjArr.join("","") + ""]"" +  ""}"";  return jsonString;"
"public class MainActivity extends TabActivity {  @Override public void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);      //setContentView(R.layout.activity_main);      TabHost mTabHost = getTabHost();      mTabHost.addTab(mTabHost.newTabSpec(""first"").setIndicator(""First"").setContent(new Intent(this  ,FirstActivity.class )));     mTabHost.addTab(mTabHost.newTabSpec(""second"").setIndicator(""Second"").setContent(new Intent(this , SecondActivity.class )));     mTabHost.setCurrentTab(0);   } }"
"Ranker ranker = new Ranker(); InfoGainAttributeEval ig = new InfoGainAttributeEval(); Instances instances = SamplesManager.asWekaInstances(trainSet); ig.buildEvaluator(instances); firstAttributes = ranker.search(ig,instances); candidates = Arrays.copyOfRange(firstAttributes, 0, FIRST_SIZE_REDUCTION); instances = reduceDimenstions(instances, candidates) PrincipalComponents pca = new PrincipalComponents(); pca.setVarianceCovered(var); ranker = new Ranker(); ranker.setNumToSelect(numFeatures); selection = new AttributeSelection(); selection.setEvaluator(pca); selection.setSearch(ranker); selection.SelectAttributes(instances ); instances = selection.reduceDimensionality(wekaInstances);"
"InputStream is = new FileInputStream(""test.xml"");     XMLInputFactory inputFactory = XMLInputFactory.newInstance();     XMLEventReader eventReader = inputFactory.createXMLEventReader(is, ""utf-8"");     Stack&lt;StartElement&gt; stack = new Stack&lt;StartElement&gt;();     while (eventReader.hasNext()) {         try {             XMLEvent event = eventReader.nextEvent();             if (event.isStartElement()) {                 StartElement startElement = event.asStartElement();                 System.out.println(""processing element: "" + startElement.getName().getLocalPart());                 stack.push(startElement);             }             if(event.isEndElement()){                 stack.pop();             }         }catch(XMLStreamException e){              System.out.println(""error in line: "" +e.getLocation().getLineNumber());             StartElement se = stack.pop();             System.out.println(""non-closed tag:"" + se.getName().getLocalPart() + "" "" + se.getLocation().getLineNumber());              throw e;         }     }"
"List&lt;ListenableFuture&lt;A&gt;&gt; individuals = newArrayList(); for (int i = 0; i &lt; knownSize; i++) {   final int index = i;   individuals.add(transform(input, new Function&lt;List&lt;A&gt;, A&gt;() {     @Override     public A apply(List&lt;A&gt; values) {       return values.get(index);     }   })); }  List&lt;ListenableFuture&lt;B&gt;&gt; result = newArrayList(); for (ListenableFuture&lt;A&gt; original : individuals) {   result.add(transform(original, function, executor)); } return result;"
"btnPlus = new JButton(""+"");         btnPlus.addActionListener(new ActionListener() {             public void actionPerformed(ActionEvent arg0) {                 String nums = textField.getText();                  if (nums.matches(""[0-9]+"") &amp;&amp; nums.length() == 10) {                      char[] charArray = nums.toCharArray();                     int sum = 0;                      for (int i = 0; i &lt; charArray.length; i++) {                         sum += Character.getNumericValue(charArray[i]);                     }                     label_1.setText(Integer.toString(sum));                 }             }"
"for (int k=0; k&lt;fillsList.getLength();k++){//donem voltes als fills de list.     Node fillList = fillsList.item(k);     if (fillList instanceof Element) {         Element elementList = (Element) fillList;         if(elementList.getNodeType() == Element.ELEMENT_NODE) {             if (elementList.getNodeName().equals(""filter"")){                System.out.println(""Filter!!!"");             } else if (elementList.getNodeName().equals(""option"")){                System.out.println(""item!!!"");             }         }     } }"
TableRowSorter&lt;TableModel&gt; sorter =     new DefaultTableRowSorter&lt;TableModel&gt;(this.getModel())  {     public int convertRowIndexToModel(int index)     {         int maxRow = super.getViewRowCount();         if (index &gt;= maxRow)             return index;         return super.convertRowIndexToModel(index);     }      public int convertRowIndexToView(int index)      {         int maxRow = super.getModelRowCount();         if (index &gt; maxRow)             return index;         return super.convertRowIndexToView(index);     }      public int getViewRowCount()      {         return super.getViewRowCount() + 1;     } };  myTable.setRowSorter(sorter);
"HttpClient createClient() {     HttpParams params = new BasicHttpParams();     params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);     params.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, HTTP.DEFAULT_CONTENT_CHARSET);     params.setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true);     params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 30 * 1000);     params.setParameter(CoreConnectionPNames.SO_TIMEOUT, 30 * 1000);      SchemeRegistry schReg = new SchemeRegistry();     schReg.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));     schReg.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));     ClientConnectionManager conMgr = new ThreadSafeClientConnManager(params, schReg);      return new DefaultHttpClient(conMgr, params); }"
"watchListBtn.setOnClickListener(new OnClickListener() {          public void onClick(View v) {             Intent intent = new Intent(DetailProductDescription.this, LoginForm.class); intent.putExtra(""from"",""watch"");             startActivity(intent);         }     });  wishListBtn.setOnClickListener(new OnClickListener() {          public void onClick(View v) {             Intent intent = new Intent(DetailProductDescription.this, LoginForm.class); intent.putExtra(""from"",""wish"");             startActivity(intent);         }     });"
"Repository myRepository = new HTTPRepository(serverURL, repositoryId);    myRepository.initialize();  RepositoryConnection con = myRepository.getConnection();  ValueFactory f = myRepository.getValueFactory();  i = 0;  j = 1000000;      try {   con.begin(); // start the transaction   while(i &lt; j) {       URI event    = f.createURI(ontologyIRI + ""event""+i);       URI hasTimeStamp    = f.createURI(ontologyIRI + ""hasTimeStamp"");       Literal timestamp   = f.createLiteral(fields.get(0));       con.add(event, hasTimeStamp, timestamp);       i++;    }   con.commit(); // finish the transaction: commit all our adds in one go. } finally {   // always close the connection when you're done with it.    con.close(); }"
"void resursivelyCombine(List&lt;List&lt;Boolean&gt;&gt; result, List&lt;Boolean&gt; current, List&lt;Boolean&gt; in1, List&lt;Boolean&gt; in2, int index) {     if (index == in1.size()) {         result.add(current);     } else {         if (in1.get(index).equals(in2.get(index))) {            current.add(in1.get(index));            recursivelyCombine(result, current, in1, in2, index+1);         } else {            List&lt;Boolean&gt; temp = new ArrayList&lt;&gt;(current);            temp.add(Boolean.TRUE);            recursivelyCombine(result, temp, in1, in2, index+1);             temp = new ArrayList&lt;&gt;(current);            temp.add(Boolean.FALSE);            recursivelyCombine(result, temp, in1, in2, index+1);         }     } }"
"public class ArrayDeque {     public static void main(String[] args) {         ArrayDeque t = new ArrayDeque ();         t.insertAtFirst(""1"");         t.insertAtFirst(""2"");         t.insertAtFirst(""3"");         t.insertAtFirst(""4"");         t.insertAtFirst(""5"");         t.insertAtFirst(""6"");         t.insertAtFirst(""7"");         t.insertAtFirst(""8"");         t.insertAtFirst(""9"");         t.insertAtFirst(""10"");         t.insertAtFirst(""11"");         t.insertAtFirst(""12"");         t.insertAtFirst(""13"");         t.insertAtFirst(""14"");          System.out.println(""After first--""+t.toString());         t.insertAtLast(""1"");         t.insertAtLast(""2"");         t.insertAtLast(""3"");         t.insertAtLast(""4"");         t.insertAtLast(""5"");         t.insertAtLast(""6"");         t.insertAtLast(""7"");         t.insertAtLast(""8"");         t.insertAtLast(""9"");         t.insertAtLast(""10"");         t.insertAtLast(""11"");         t.insertAtLast(""12"");         t.insertAtLast(""13"");         t.insertAtLast(""14"");         System.out.println(""After last--""+t.toString());     }     private static final int INIT_CAPACITY = 5;                   private int NEW_CAPACITY;     private int ARRAY_SIZE;     private Object[] arr;                                  public TestClass(){          arr = new Object[ INIT_CAPACITY ];          NEW_CAPACITY = INIT_CAPACITY;         ARRAY_SIZE = 0;     }          public void insertAtFirst(Object item){          if(ARRAY_SIZE == 0)         {             arr[0] = item;             ARRAY_SIZE++;         }         else if(ARRAY_SIZE+1 &lt; arr.length)         {             Object[] tmp = new Object[NEW_CAPACITY];              for(int i = 1; i &lt; arr.length; ++i)                 tmp[i] = (String)arr[i-1];              arr = tmp;             arr[0] = item;             ARRAY_SIZE++;         }         else if(ARRAY_SIZE+1 &gt;= arr.length)         {             NEW_CAPACITY = NEW_CAPACITY+INIT_CAPACITY;             Object[] tmp = new Object[NEW_CAPACITY];              for(int i = 1; i &lt; arr.length; ++i)                 tmp[i] = (String)arr[i-1];              arr = tmp;             arr[0] = item;             ARRAY_SIZE++;         }     }       public void insertAtLast(Object item){          if(ARRAY_SIZE == 0)         {             arr[0] = item;             ARRAY_SIZE++;         }         else if(ARRAY_SIZE+1 &lt; arr.length)         {              arr[ARRAY_SIZE] = item;             ARRAY_SIZE++;         }         else if(ARRAY_SIZE+1 &gt;= arr.length)         {             NEW_CAPACITY = NEW_CAPACITY+INIT_CAPACITY;             Object[] tmp = new Object[NEW_CAPACITY];              for(int i = 0; i &lt; arr.length; ++i)                 tmp[i] = (String)arr[i];              arr = tmp;              arr[ARRAY_SIZE] = item;             ARRAY_SIZE++;         }     }       public int size(){          return ARRAY_SIZE;           }          public boolean isEmpty(){          return (ARRAY_SIZE == 0);      }          public String toString(){          String s = """";         for(int i = 0; i &lt; arr.length; ++i)             s += arr[i] + ""\t"";         return s;     }    }"
"NSMutableArray *arrFixedData=[[NSMutableArray alloc]initWithObjects:@""DCS"",@""DCT"",@""DCU"",@""DAG"",@""DAI"",@""DAJ"",@""DAK"",@""DCG"",@""DAQ"",@""DCA"",@""DCB"",@""DCD"",@""DCF"",@""DCH"",@""DBA"",@""DBB"",@""DBC"",@""DBD"",@""DAU"",@""DCE"",@""DAY"",@""ZWA"",@""ZWB"",@""ZWC"",@""ZWD"",@""ZWE"",@""ZWF"", nil];     NSMutableArray *arrDriverData=[[NSMutableArray alloc]initWithObjects:@""Customer Family Name"",@""Customer Given Name"",@""Name Suffix"",@""Street Address 1"",@""City"",@""Jurisdction Code"",@""Postal Code"",@""Country Identification"",@""Customer Id Number"",@""Class"",@""Restrictions"",@""Endorsements"",@""Document Discriminator"",@""Vehicle Code"",@""Expiration Date"",@""Date Of Birth"",@""Sex"",@""Issue Date"",@""Height"",@""Weight"",@""Eye Color"",@""Control Number"",@""Endorsements"",@""Transaction Types"",@""Under 18 Until"",@""Under 21 Until"",@""Revision Date"", nil];       NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];     for (int i=0; i&lt;[arrFixedData count]; i++)     {         NSRange range = [message  rangeOfString: [arrFixedData objectAtIndex:i] options: NSCaseInsensitiveSearch];         NSLog(@""found: %@"", (range.location != NSNotFound) ? @""Yes"" : @""No"");         if (range.location != NSNotFound)         {             NSString *temp=[message substringFromIndex:range.location+range.length];              NSRange end = [temp rangeOfString:@""\n""];             if (end.location != NSNotFound)             {                 temp = [temp substringToIndex:end.location];                 temp =[temp stringByReplacingOccurrencesOfString:@""\n"" withString:@""""];                 temp=[temp stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];              }             NSLog(@""temp data : %@"",temp);             [dict setObject:temp forKey:[arrDriverData objectAtIndex:i]];         }     }      NSLog(@""Dictionary : %@"",dict);"
"public ArrayList&lt;MyObject&gt; convertArrayCollection(ArrayCollection array){         ArrayList&lt;MyObject&gt; myObjectArray = new ArrayList();         ASTranslator ast = new ASTranslator();         MyObject myObject;         ASObject aso;          for (int i=0;i&lt; array.size(); i++){             myObject = new MyObject();             aso = new ASObject();              aso = (ASObject) array.get(i);             aso.setType(""com.myPackage.MyObject"");             myObject = (MyObject) ast.convert(aso, MyObject.class);             myObjectArray.add(myObject);         }         return myObjectArray;     }"
"ArrayList entryList = loadEntries(entries);     int[] colIndx = new int[entryList.size()];     ResultSetMetaData rsmd = rs.getMetaData();     int numberOfColumns = rsmd.getColumnCount();     for (int i = 0; i &lt; entryList.size(); i++){        Entry e = (Entry) entryList.get(i);        for (int j = 1; j &lt;= numberOfColumns; j++){           if(rsmd.getColumnName(j).equalsIgnoreCase(e.getColumn()))               colIndx[i] = j;        }     }     try{         while (rs.next()){             for (int i = 0; i &lt; colIndx.length ; i++){                 System.out.println(""Column Values[""+colIndx[i]+""] : ""+rs.getString(colIndx[i]));             }         }     }"
"public List&lt;Transaction&gt; findTransactions(Long accountId) {          CriteriaBuilder builder = entityManager.getCriteriaBuilder();         CriteriaQuery&lt;Transaction&gt; query = builder.createQuery(Transaction.class);         Root&lt;Transaction&gt; _transaction = query.from(Transaction.class);          Path&lt;Account&gt; _account = _transaction.get(Transaction_.account);         Path&lt;Long&gt; _accountId = _account.get(Account_.id);          query.where(builder.equal(_accountId, accountId));         return entityManager.createQuery(query).getResultList();     }"
"final ContentAdapter ca = moz.getChromeAdapter().getContentAdapter();  nsIURIContentListener mycl = new nsIURIContentListener() {     public boolean onStartURIOpen(nsIURI aURI) {         System.out.println(aURI.getHost() + aURI.getPath());         return true;     }     public boolean doContent(String aContentType, boolean aIsContentPreferred, nsIRequest aRequest, nsIStreamListener[] aContentHandler) {          System.out.println(""1"");         return ca.doContent(aContentType, aIsContentPreferred, aRequest, aContentHandler);      }     public boolean isPreferred(String aContentType, String[] aDesiredContentType) {          System.out.println(""2"");         return ca.isPreferred(aContentType, aDesiredContentType);      }     public boolean canHandleContent(String aContentType, boolean aIsContentPreferred, String[] aDesiredContentType) {          System.out.println(""3"");         return ca.canHandleContent(aContentType, aIsContentPreferred, aDesiredContentType);      }     public nsISupports getLoadCookie() {          System.out.println(""4"");         return ca.getLoadCookie();      }     public void setLoadCookie(nsISupports aLoadCookie) {          System.out.println(""5"");         ca.setLoadCookie(aLoadCookie);      }     public nsIURIContentListener getParentContentListener() {          System.out.println(""6"");         return ca.getParentContentListener();      }     public void setParentContentListener(nsIURIContentListener aParentContentListener) {          System.out.println(""7"");         ca.setParentContentListener(aParentContentListener);      }     public nsISupports queryInterface(String uuid) {          System.out.println(""8"");         return ca.queryInterface(uuid);      }  };   moz.getChromeAdapter().getWebBrowser().setParentURIContentListener(mycl);"
"net.sf.json.JSONObject obj = new net.sf.json.JSONObject(); obj.put(&quot;jsonStringValue&quot;,&quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;); obj.put(&quot;quotedJsonStringValue&quot;,&quot;\'{\&quot;hello\&quot;:\&quot;world\&quot;}\'&quot;); obj.put(&quot;naturalStringValue&quot;, &quot;\&quot;hello world\&quot;&quot;); System.out.println(obj.toString()); System.out.println(obj.getString(&quot;jsonStringValue&quot;)); System.out.println(obj.getString(&quot;quotedJsonStringValue&quot;)); System.out.println(obj.getString(&quot;naturalStringValue&quot;));"
"String newtype_mod=""""; String newcontent_mod="""";  if ((object.has(""message"")))  {      JSONObject message = object.getJSONObject(""message"");      newtype_mod = object.getJSONObject(""message"")                         .getString(""type"");      newcontent_mod = object.getJSONObject(""message"")                      .getString(""content"");      objSample = new GetSetMethod();      objSample.setnewcontent_mod(newcontent_mod);              objSample.setnewtype_mod(newtype_mod);      Log.v(""##""+newcontent_mod,""V ""+newtype_mod); }"
"import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.QueryParam;  import junit.framework.Assert;  import org.jboss.resteasy.annotations.Form; import org.jboss.resteasy.core.Dispatcher; import org.jboss.resteasy.mock.MockDispatcherFactory; import org.jboss.resteasy.mock.MockHttpRequest; import org.jboss.resteasy.mock.MockHttpResponse; import org.junit.Test;  public class TestCase {     @Path(""/"")     public static class Service {          @Path("""")         @GET         public String get(@Form ValueObject vo){             return vo.getParam();         }     }      public static class ValueObject {         @QueryParam(""myparam"")         private String param;          public String getParam() {             return param;         }     }      @Test     public void test() throws Exception {         Dispatcher dispatcher = MockDispatcherFactory.createDispatcher();         dispatcher.getRegistry().addSingletonResource(new Service());          MockHttpRequest request = MockHttpRequest.get(""/?myparam=somevalue"");         MockHttpResponse response = new MockHttpResponse();          dispatcher.invoke(request, response);          Assert.assertEquals(""somevalue"", response.getContentAsString());     } }"
"model.read(...); StmtIterator si = model.listStatements(         model.getResource(""required property uri""), RDFS.range, (RDFNode) null); while (si.hasNext()) {     Statement stmt = si.next();     Resource range = stmt.getObject().asResource();     // get restrictions collection     Resource nextNode = range.getPropertyResourceValue(OWL2.withRestrictions);     for (;;) {         Resource restr = nextNode.getPropertyResourceValue(RDF.first);         if (restr == null)             break;          StmtIterator pi = restr.listProperties();         while (pi.hasNext()) {             Statement restrStmt = pi.next();             Property restrType = restrStmt.getPredicate();             Literal value = restrStmt.getObject().asLiteral();             // print type and value for each restriction             System.out.println(restrType + "" = "" + value);         }         // go to the next element of collection         nextNode = nextNode.getPropertyResourceValue(RDF.rest);     } }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"import org.jfree.chart.ChartFactory; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.plot.PlotOrientation; import org.jfree.chart.plot.XYPlot; import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer; import org.jfree.data.xy.XYSeries; import org.jfree.data.xy.XYSeriesCollection; import org.jfree.ui.ApplicationFrame;  import javax.swing.*; import java.awt.*;  public class IccGraph extends ApplicationFrame {  public IccGraph(String title){     super(title);     JPanel chartPanel = createPanel();     chartPanel.setPreferredSize(new Dimension(450, 400));     setContentPane(chartPanel);  }  private double probability(double x, double b){     double top = Math.exp(x-b);     double prob = top/(1+top);     return prob; }  public XYSeriesCollection createData(){     XYSeriesCollection dataset = new XYSeriesCollection();     XYSeries series1 = new XYSeries(""Wide Points"");     XYSeries series2 = new XYSeries(""Close Points"");     XYSeries series3 = new XYSeries(""Very Close Points"");      double maxValue = 4.0;     double value = -4.0;     double prob = 0.0;      //create series where x-axis values use increments of .5     //will produce graph with dashes as expected     while(value&lt;maxValue){         prob = probability(value, -1.0);         series1.add(value, prob);         value += .5;     }      //create series where x-axis values use increments of .1     //will produce line with some dashes     value = -4.0;     while(value&lt;maxValue){         prob = probability(value, 0.0);         series2.add(value, prob);         value += .1;     }      //create series where x-axis values use increments of .01     //will produce straight lines in graph     value = -4.0;     while(value&lt;maxValue){         prob = probability(value, 1.0);         series3.add(value, prob);         value += .01;     }      dataset.addSeries(series1);     dataset.addSeries(series2);     dataset.addSeries(series3);      return dataset; }  public JPanel createPanel(){     JFreeChart chart = createChart(createData());     ChartPanel panel = new ChartPanel(chart);     return panel; }  public JFreeChart createChart(XYSeriesCollection dataset){     JFreeChart chart = ChartFactory.createXYLineChart(                 """",            // chart title                 ""Theta"",       // x axis label                 ""Probability"", // y axis label                 dataset,       // data                 PlotOrientation.VERTICAL,                 true,          // include legend                 true,          // tooltips                 false          // urls         );      XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer(){         @Override         public Stroke getItemStroke(int row, int col){             Stroke dash1 = new BasicStroke(1.0f,                         BasicStroke.CAP_SQUARE,                         BasicStroke.JOIN_MITER,                         10.0f,                         new float[] {10.0f,5.0f},                         0.0f);             return dash1;         }     };     renderer.setBaseShapesFilled(false);     renderer.setDrawOutlines(false);     renderer.setDrawSeriesLineAsPath(true);//this line is the solution      XYPlot plot = (XYPlot)chart.getPlot();     plot.setRenderer(renderer);      return chart; }  public static void main(String[] args) {     IccGraph graph = new IccGraph(""Line Dash Problem"");     graph.pack();     graph.setVisible(true); }   }"
"public void findItems() { ItemView view = new ItemView(10); view.getOrderBy().add(ItemSchema.DateTimeReceived, SortDirection.Ascending); view.setPropertySet(new PropertySet(BasePropertySet.IdOnly, ItemSchema.Subject,         ItemSchema.DateTimeReceived));   FindItemsResults&lt;Item&gt; findResults = service.findItems(WellKnownFolderName.Inbox, new SearchFilter.SearchFilterCollection( LogicalOperator.Or, new SearchFilter.ContainsSubstring(ItemSchema.Subject, ""EWS""),  new SearchFilter.ContainsSubstring(ItemSchema.Subject, ""API"")),view);  System.out.println(""Total number of items found: "" + findResults.getTotalCount());  for (Item item : findResults)     {             System.out.println(item.getSubject());             System.out.println(item.getBody());             // Do something with the item.     } }"
"public class MultiMapType implements UserCollectionType {  public boolean contains(Object collection, Object entity) {     return ((MultiMap) collection).containsValue(entity); }  public Iterator getElementsIterator(Object collection) {     return ((MultiMap) collection).values().iterator(); }  public Object indexOf(Object collection, Object entity) {     for (Iterator i = ((MultiMap) collection).entrySet().iterator(); i.hasNext();) {         Map.Entry entry = (Map.Entry) i.next();             Collection value = (Collection) entry.getValue();         if (value.contains(entity)) {             return entry.getKey();         }     }     return null; }  public Object instantiate() {     return new MultiHashMap(); }  public PersistentCollection instantiate(SessionImplementor session, CollectionPersister persister) throws HibernateException {     return new PersistentMultiMap(session); }  public PersistentCollection wrap(SessionImplementor session, Object collection) {     return new PersistentMultiMap(session, (MultiMap) collection); }  public Object replaceElements(Object original, Object target, CollectionPersister persister, Object owner, Map copyCache, SessionImplementor session) throws HibernateException {      MultiMap result = (MultiMap) target;     result.clear();      Iterator iter = ( (java.util.Map) original ).entrySet().iterator();     while ( iter.hasNext() ) {         java.util.Map.Entry me = (java.util.Map.Entry) iter.next();         Object key = persister.getIndexType().replace( me.getKey(), null, session, owner, copyCache );         Collection collection = (Collection) me.getValue();         for (Iterator iterator = collection.iterator(); iterator.hasNext();) {             Object value = persister.getElementType().replace( iterator.next(), null, session, owner, copyCache );             result.put(key, value);         }     }      return result; }"
