code
Code
"UIManager.LookAndFeelInfo[] lookAndFeelInfos = UIManager.getInstalledLookAndFeels();     for (int i = 0; i &lt; lookAndFeelInfos.length; i++) {         UIManager.LookAndFeelInfo lookAndFeelInfo = lookAndFeelInfos[i];          //         // Get the name of the look and feel         //         String name = lookAndFeelInfo.getName();         System.out.println(""name = "" + name);          //         // Get the implementation class for the look and feel         //         String className = lookAndFeelInfo.getClassName();         System.out.println(""className = "" + className);     }"
"public static Set&lt;Set&lt;Integer&gt;&gt; powerSet(Set&lt;Integer&gt; originalSet) {         Set&lt;Set&lt;Integer&gt;&gt; sets = new HashSet&lt;Set&lt;Integer&gt;&gt;();         if (originalSet.isEmpty()) {             sets.add(new HashSet&lt;Integer&gt;());             return sets;         }         List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(originalSet);         Integer head = list.get(0);         Set&lt;Integer&gt; rest = new HashSet&lt;Integer&gt;(list.subList(1, list.size()));         for (Set&lt;Integer&gt; set : powerSet(rest)) {             Set&lt;Integer&gt; newSet = new HashSet&lt;Integer&gt;();             newSet.add(head);             newSet.addAll(set);             sets.add(newSet);             sets.add(set);         }         return sets;     }"
"public class NL extends Activity {         public void onCreate(Bundle savedInstanceState) {             super.onCreate(savedInstanceState);             setContentView(R.layout.main);           Button b1=(Button)findViewById(R.id.Button01);           Button b2=(Button)findViewById(R.id.Button02);           b1.setOnClickListener(new View.OnClickListener() {              public void onClick(View v) {                 Intent myintent2 = new Intent(NL.this,Button1.class);                 startActivity(myintent2);              }         });           b2.setOnClickListener(new View.OnClickListener() {                  public void onClick(View v) {                     Intent myintent2 = new Intent(NL.this,Button2.class);                     startActivity(myintent2);                  }             });      } }"
"public class SimpleViz implements EntryPoint {               public void onModuleLoad() {                 // Create a callback to be called when the visualization API                 // has been loaded.                 Runnable onLoadCallback = new Runnable() {                   public void run() {                     Panel panel = RootPanel.get();                      MotionChart chart = new MotionChart(createTable(), createOptions());                      panel.add(chart);                   }                 };                 VisualizationUtils.loadVisualizationApi(onLoadCallback, MotionChart.PACKAGE);               }                private Options createOptions() {                 Options options = Options.create();                 options.setWidth(600);                 options.setHeight(300);                 options.setTitle(""My Motion Chart"");                  //  Passing JSON state with escaped double quotes to options class.                  options.setState(""{\""orderedByY\"":false,\""showTrails\"":true,\""dimensions\"":{\""iconDimensions\"":[\""dim0\""]},\""yAxisOption\"":\""3\"",\""xZoomedIn\"":false,\""time\"":\""1988-04-16\"",\""yZoomedIn\"":false,\""xAxisOption\"":\""2\"",\""yZoomedDataMin\"":150,\""yZoomedDataMax\"":617,\""xZoomedDataMin\"":300,\""uniColorForNonSelected\"":false,\""xLambda\"":1,\""playDuration\"":15000,\""yLambda\"":1,\""duration\"":{\""timeUnit\"":\""D\"",\""multiplier\"":1},\""iconType\"":\""BUBBLE\"",\""iconKeySettings\"":[{\""trailStart\"":\""1988\"",\""key\"":{\""dim0\"":\""Apples\""}},{\""trailStart\"":\""1988\"",\""key\"":{\""dim0\"":\""Oranges\""}},{\""trailStart\"":\""1988\"",\""key\"":{\""dim0\"":\""Bananas\""}}],\""colorOption\"":\""2\"",\""xZoomedDataMax\"":1200,\""nonSelectedAlpha\"":0.4,\""orderedByX\"":false,\""sizeOption\"":\""_UNISIZE\""}"");                 return options;               }                private AbstractDataTable createTable() {                 DataTable data = DataTable.create();                     data.addColumn('string', 'Fruit');                     data.addColumn('date', 'Date');                     data.addColumn('number', 'Sales');                     data.addColumn('number', 'Expenses');                     data.addColumn('string', 'Location');                 data.addColumn(ColumnType.STRING, ""Fruit"");                 data.addColumn(ColumnType.DATE, ""Date"");                 data.addColumn(ColumnType.NUMBER, ""Sales"");                 data.addColumn(ColumnType.NUMBER, ""Expenses"");                 data.addColumn(ColumnType.STRING, ""Location"");                 data.addRows(6);                  data.setValue(0, 0, ""Apples"");                 data.setValue(0, 1, new Date (1988,0,1));                 data.setValue(0, 2, 1000);                 data.setValue(0, 3, 300);                 data.setValue(0, 4, ""East"");                  data.setValue(1, 0, ""Oranges"");                 data.setValue(1, 1, new Date (1988,0,1));                 data.setValue(1, 2, 1150);                 data.setValue(1, 3, 200);                 data.setValue(1, 4, ""West"");                  data.setValue(2, 0, ""Bananas"");                 data.setValue(2, 1, new Date (1988,0,1));                 data.setValue(2, 2, 300);                 data.setValue(2, 3, 250);                 data.setValue(2, 4, ""West"");                  data.setValue(3, 0, ""Apples"");                 data.setValue(3, 1, new Date (1989,6,1));                 data.setValue(3, 2, 1200);                 data.setValue(3, 3, 400);                 data.setValue(3, 4, ""East"");                  data.setValue(4, 0, ""Oranges"");                 data.setValue(4, 1, new Date (1989,6,1));                 data.setValue(4, 2, 750);                 data.setValue(4, 3, 150);                 data.setValue(4, 4, ""West"");                  data.setValue(5, 0, ""Bananas"");                 data.setValue(5, 1, new Date (1989,6,1));                 data.setValue(5, 2, 788);                 data.setValue(5, 3, 617);                 data.setValue(5, 4, ""West"");                 return data;      } }"
"Button next = (Button) findViewById(R.id.goto1);     next.setOnClickListener(new View.OnClickListener() {         public void onClick(View view) {             Intent intent = new Intent();             setResult(RESULT_OK, intent);       Button next = (Button) findViewById(R.id.goto3);     next.setOnClickListener(new View.OnClickListener() {        public void onClick(View view) {            Intent myIntent = new Intent(view.getContext(), Screen3.class);             startActivityForResult(myIntent, 0);             finish();         }        });     }   });"
"contentPane.setLayout(new GridBagLayout());     ((GridBagLayout)contentPane.getLayout()).columnWidths = new int[] {0, 0, 0, 0};     ((GridBagLayout)contentPane.getLayout()).rowHeights = new int[] {0, 0, 10, 0, 0, 0};     ((GridBagLayout)contentPane.getLayout()).columnWeights = new double[] {1.0, 0.0, 1.0, 1.0E-4};     ((GridBagLayout)contentPane.getLayout()).rowWeights = new double[] {1.0, 0.0, 0.0, 0.0, 1.0, 1.0E-4};      //---- leftBtn ----     leftBtn.setText(""left Button"");     contentPane.add(leftBtn, new GridBagConstraints(0, 0, 1, 5, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));      //---- rightBtn ----     rightBtn.setText(""right Button"");     contentPane.add(rightBtn, new GridBagConstraints(2, 0, 1, 5, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));      //---- addBtn ----     addBtn.setText(""add Button"");     contentPane.add(addBtn, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));      //---- remBtn ----     remBtn.setText(""rem Button"");     contentPane.add(remBtn, new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));"
"public class MyFocusPanel extends DockLayoutPanel {       private FocusPanel f1 = new FocusPanel();       private FocusPanel f2 = new FocusPanel();       private FocusPanel f3= new FocusPanel();       private FocusPanel f4 = new FocusPanel();        public MyFocusPanel ()       {            super(Unit.PX);            f1.addClickHandler ( new ClickHandler()             {                public void OnClick()                {                      onFocusPanelClick();                }            });            f2.addClickHandler ( new ClickHandler()             {                public void OnClick()                {                      onFocusPanelClick();                }            });            f3.addClickHandler ( new ClickHandler()             {                public void OnClick()                {                      onFocusPanelClick();                }            });            f4.addClickHandler ( new ClickHandler()             {                public void OnClick()                {                      onFocusPanelClick();                }            });             addNorth( f1, 5.0 );            addWest( f2, 5.0 );            addEast( f3, 5.0 );            addWest( f4, 5.0 ); }"
"import javassist.CannotCompileException; import javassist.ClassPool; import javassist.CtClass; import javassist.NotFoundException;  static Class&lt;? extends DefinitionBasedMigrator&gt; createClass( String fullName )         throws NotFoundException, CannotCompileException {     ClassPool pool = ClassPool.getDefault();      // Create the class.     CtClass subClass = pool.makeClass( fullName );     final CtClass superClass = pool.get( DefinitionBasedMigrator.class.getName() );     subClass.setSuperclass( superClass );     subClass.setModifiers( Modifier.PUBLIC );      // Add a constructor which will call super( ... );     CtClass[] params = new CtClass[]{         pool.get( MigratorDefinition.class.getName() ),         pool.get( GlobalConfiguration.class.getName())      };     final CtConstructor ctor = CtNewConstructor.make( params, null, CtNewConstructor.PASS_PARAMS, null, null, subClass );     subClass.addConstructor( ctor );      return subClass.toClass(); }"
"try {         String insertTableSQL = ""INSERT INTO DBUSER""+ ""fcltyName,CommunicationOral,Communicationwritten,Leadership,AnalyticalAbilities,Interpersonalskills,DecisionMakingSkills,SelfConfidence,Creativity,Punctualityregularity,GeneralAwareness,Commitment,HardWork) VALUES""+ ""(?,?,?,?,?,?,?,?,?,?,?,?,?)"";          dbConnection = getDBConnection();         preparedStatement = dbConnection.prepareStatement(insertTableSQL);          preparedStatement.setStringt(1, fcltyName);         preparedStatement.setInt(2, 0);         preparedStatement.setInt(3, 0);         preparedStatement.setInt(4,0);         preparedStatement.setInt(5, 0);         preparedStatement.setInt(6, 0);         preparedStatement.setInt(7,0);         preparedStatement.setInt(8, 0);         preparedStatement.setInt(9, 0);         preparedStatement.setInt(10,0);         preparedStatement.setInt(11, 0);         preparedStatement.setInt(12, 0);         preparedStatement.setInt(13,0);          // execute insert SQL stetement         preparedStatement.executeUpdate();}'"
"public static class ApplicationContextProvider implements ApplicationContextAware {     private static ApplicationContext applicationContext;      public static ApplicationContext getApplicationContext() {         return applicationContext;     }      public void setApplicationContext (ApplicationContext applicationContext) {         this.applicationContext = applicationContext;         Environment env = applicationContext.getEnvironment();         System.out.println(env.getProperty(""db.user"")); // access them      } }"
private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {    double AText = ParseDouble(angleAField.getText());    double BText = ParseDouble(angleBField.getText());    double CText = ParseDouble(angleCField.getText());    double aText = ParseDouble(sideaField.getText());    double bText = ParseDouble(sidebField.getText());    double cText = ParseDouble(sidecField.getText());  // other code here same }  double ParseDouble(String strNumber) {    if (strNumber != null &amp;&amp; strNumber.length() &gt; 0) {        try {           return Double.parseDouble(strNumber);        } catch(Exception e) {           return -1;   // or some value to mark this field is wrong. or make a function validates field first ...        }    }    else return 0; }
"Stream&lt;Class&lt;?&gt;&gt; stream = Stream.of(ArrayList.class);  Map&lt;Class&lt;?&gt;, List&lt;Class&lt;?&gt;&gt;&gt; map = stream.collect(     Collectors.toMap(         Class::getSuperclass,         Collections::singletonList,         (List&lt;Class&lt;?&gt;&gt; oldList, List&lt;Class&lt;?&gt;&gt; newEl) -&gt; {         List&lt;Class&lt;?&gt;&gt; newList = new ArrayList&lt;&gt;(oldList.size() + 1);         newList.addAll(oldList);         newList.addAll(newEl);         return newList;         }));"
"int[] myIntArray = new int[3]; int[] myIntArray = {1, 2, 3}; int[] myIntArray = new int[]{1, 2, 3};  // Since Java 8. Doc of IntStream: https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html  int [] myIntArray = IntStream.range(0, 100).toArray(); // From 0 to 99 int [] myIntArray = IntStream.rangeClosed(0, 100).toArray(); // From 0 to 100 int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).toArray(); // The order is preserved. int [] myIntArray = IntStream.of(12,25,36,85,28,96,47).sorted().toArray(); // Sort"
"System.setProperty(""weblogic.security.SSL.ignoreHostnameVerification"",""true"");         System.setProperty(""java.protocol.handler.pkgs"", ""weblogic.net"");         System.setProperty(""weblogic.security.TrustKeyStore"",""CustomTrust"");         System.setProperty(""weblogic.security.CustomTrustKeyStoreFileName"", ""&lt;keystorelocation&gt;"");         System.setProperty(""weblogic.security.CustomTrustKeyStorePassPhrase"",""&lt;keystorepassword&gt;"");          System.setProperty(""weblogic.security.CustomTrustKeyStoreType"",""JKS"");"
oneValueEnum_testValues         1.328 oneValueEnum_testList           1.687 oneValueEnum_testEnumSet        0.578  TwoValuesEnum_testValues        1.360 TwoValuesEnum_testList          1.906 TwoValuesEnum_testEnumSet       0.797  ThreeValuesEnum_testValues      1.343 ThreeValuesEnum_testList        2.141 ThreeValuesEnum_testEnumSet     1.000  FourValuesEnum_testValues       1.375 FourValuesEnum_testList         2.359 FourValuesEnum_testEnumSet      1.219  TenValuesEnum_testValues        1.453 TenValuesEnum_testList          3.531 TenValuesEnum_testEnumSet       2.485  TwentyValuesEnum_testValues     1.656 TwentyValuesEnum_testList       5.578 TwentyValuesEnum_testEnumSet    4.750  FortyValuesEnum_testValues      2.016 FortyValuesEnum_testList        9.703 FortyValuesEnum_testEnumSet     9.266
"SSLcontext sslContext = SSLContext.getDefault();  KeyStore trustSt = KeyStore.getInstance(""BKS""); TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); InputStream trustStoreStream = this.getResources().openRawResource(R.raw.truststore); trustSt.load(trustStoreStream, ""&lt;yourpassword&gt;"".toCharArray()); trustManagerFactory.init(trustStre);  KeyStore keyStore = KeyStore.getInstance(""BKS""); KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); InputStream keyStoreStream = this.getResources().openRawResource(R.raw.keystore); keyStore.load(keyStoreStream, ""&lt;yourpassword&gt;"".toCharArray()); keyManagerFactory.init(keyStore, ""&lt;yourpassword&gt;"".toCharArray());  sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);"
"final RoadUser roadUser0 = context.mock(RoadUser.class, ""roadUser0""); final RoadUser roadUser1 = context.mock(RoadUser.class, ""roadUser1""); final RoadUser roadUser2 = context.mock(RoadUser.class, ""roadUser2"");  final RoadUserCreator roadUserCreator0 = context.mock(RoadUserCreator.class, ""roadUserCreator0""); final RoadUserCreator roadUserCreator1 = context.mock(RoadUserCreator.class, ""roadUserCreator1"");  final RoadUserCreationDaemon daemon = new RoadUserCreationDaemon(null); daemon.addRoadUserCreator(roadUserCreator0); daemon.addRoadUserCreator(roadUserCreator1);          context.checking(new Expectations() {{     oneOf(roadUserCreator0).create(); will(returnValue(roadUsers(roadUser0, roadUser1)));     oneOf(roadUserCreator1).create(); will(returnValue(roadUsers(roadUser2))); }});  assertThat(daemon.createRoadUsers(), contains(roadUser0, roadUser1, roadUser2));"
public List&lt;Task&gt; getTaskDue(){          List&lt;Task&gt; temp = new ArrayList&lt;Task&gt;();      for(int u = 0; u &lt; unitCollection.size(); u++){         Unit unit = unitCollection.get(u);          for (int a = 0; a &lt; unit.getAssessmentCollection().size(); a++){             AssessmentItem assessment = unit.getAssessmentCollection().get(a);              for (int t = 0; t &lt; assessment.getTasks().size(); t++){                 Task task = assessment.getTasks().get(t);                  if (task.getDueDate().compareTo(assessment.getDueDate()) &lt;= 0){                      temp.add(task);                 }                }            }        }        return temp; }
"Preference prefereces=findPreference(""test"");         prefereces.setOnPreferenceClickListener (new Preference.OnPreferenceClickListener(){             public boolean onPreferenceClick(Preference preference){                 Intent intent = new Intent();                 intent.setType(""image/*"");                 intent.setAction(Intent.ACTION_GET_CONTENT);                 int PICK_IMAGE = 1;                 startActivityForResult(Intent.createChooser(intent, ""Select Picture""), PICK_IMAGE);                 return true;             }         });"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"private static final LatLng NEBOUND = new LatLng(47.671781, -117.393352); private static final LatLng SWBOUND = new LatLng(47.661283, -117.411052); private static final LatLngBounds MAPBOUNDARY = new LatLngBounds(SWBOUND, NEBOUND); private LatLng lastCenter = new LatLng(47.667454, -117.402309); GoogleMap guMap; private Handler mHandler;  private void checkBoundaries(){     LatLng tempCenter = guMap.getCameraPosition().target;     LatLngBounds visibleBounds = guMap.getProjection().getVisibleRegion().latLngBounds;     if(!MAPBOUNDARY.contains(visibleBounds.northeast) || !MAPBOUNDARY.contains(visibleBounds.southwest)){         guMap.moveCamera(CameraUpdateFactory.newLatLng(lastCenter));     }     else         lastCenter = tempCenter; }  private void setUpHandler(){     mHandler = new Handler(){             public void handleMessage(Message msg){                 checkBoundaries();                 sendEmptyMessageDelayed(0, 5);             }         }; }"
"public static BufferedImage replaceInsideBufferedImage(BufferedImage containingImage, BufferedImage toBeReplaced, BufferedImage replaceWithThis) {     BufferedImage returnImage = deepCopyImage(containingImage);     for (int x = 0; x+toBeReplaced.getWidth() &lt; containingImage.getWidth(); x++) {         for (int y = 0; y+toBeReplaced.getHeight() &lt; containingImage.getHeight(); y++) {             BufferedImage subImg = containingImage.getSubimage(x, y, toBeReplaced.getWidth(), toBeReplaced.getHeight());             if (imageEquals(subImg,toBeReplaced)) {                 for (int sx = 0; sx &lt; replaceWithThis.getWidth(); sx++) {                     for (int sy = 0; sy &lt; replaceWithThis.getHeight(); sy++) {                         returnImage.setRGB(x+sx, y+sy, replaceWithThis.getRGB(sx, sy));                     }                 }             }         }     }     return returnImage; }"
"WebView wv = (WebView) v.findViewById(R.id.webview);     wv.getSettings().setSupportZoom(true);     wv.getSettings().setBuiltInZoomControls(true);     wv.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);     WebSettings settings = wv.getSettings();             settings.setUseWideViewPort(true);     settings.setJavaScriptEnabled(true);     settings.setSupportMultipleWindows(true);     settings.setJavaScriptCanOpenWindowsAutomatically(true);     settings.setLoadsImagesAutomatically(true);     settings.setLightTouchEnabled(true);     settings.setDomStorageEnabled(true);     settings.setLoadWithOverviewMode(true);     wv.loadUrl(""http://www.google.com"");"
"public class ServiceActivity extends Activity {     Button play;     int button_status=1;     @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.main);         play=(Button)findViewById(R.id.button1);          play.setOnClickListener(new OnClickListener() {                      @Override             public void onClick(View arg0) {                 // TODO Auto-generated method stub                 if(button_status == 1)//play the service                 {                 button_status=0;                 Intent i=new Intent(ServiceActivity.this,Playing.class);                 startService(i);                 }                 else//stop the service                 {                 button_status=1;                 Intent i=new Intent(ServiceActivity.this,Playing.class);                 stopService(i);                  }          });      }   }"
"protected IResourceInfo getResourceInfo(ITranslationUnit translationUnit, ICProjectDescription prjDescription) {      ICProject cProject = translationUnit.getCProject();     if (cProject != null) {         ICConfigurationDescription cfgDescription = prjDescription.getActiveConfiguration();         IConfiguration configuration = ManagedBuildManager.getConfigurationForDescription(cfgDescription);         IPath projectPath = translationUnit.getResource().getProjectRelativePath();          IResourceInfo ri = configuration.getResourceInfo(projectPath, true);          if (ri == null) {              ri = configuration.createFileInfo(projectPath);         }          return ri;     }      return null; }"
"class SameDirectionPathEvaluator implements PathEvaluator&lt;Direction&gt; {     public Evaluation evaluate(Path path, BranchState&lt;Direction&gt; state) {       if (path.length()==0) {          return Evaluation.EXCLUDE_AND_CONTINUE;       } else if (path.length()==1) {          state.setState(getDirectionOfLastRelationship(path));          return Evaluation.INCLUDE_AND_CONTINUE;       } else {          if (state.getState().equals(getDirectionOfLastRelationship(path)) {             return Evaluation.INCLUDE_AND_CONTINUE;          } else {             return Evaluation.EXCLUDE_AND_PRUNE;          }       }    }     private Direction getDirectionOfLastRelationship(Path path) {       assert path.length() &gt; 0;       Direction direction = Direction.INCOMING       if (path.endNode().equals(path.lastRelationship().getEndNode()) {         direction = Direction.OUTGOING;       }       return direction;    }  }"
"ShapeDrawable sd1 = new ShapeDrawable(new RectShape());                         sd1.getPaint().setColor(CommonUtilities.color);                         sd1.getPaint().setStyle(Style.STROKE);                         sd1.getPaint().setStrokeWidth(CommonUtilities.stroke);                         sd1.setPadding(15, 10, 15, 10);                          sd1.getPaint().setPathEffect(                                 new CornerPathEffect(CommonUtilities.corner));                         ln_back.setBackgroundDrawable(sd1);"
"class RegistrationPanel  {     private StartFrame startFrame;     public RegistrationPanel(StartFrame startFrame)      {         this.startFrame = startFrame;     }      // Called e.g. when a button was clicked on this panel     void passBackInformationToStartFrame()      {         startFrame.setInfo(this.getInfo());     } }   class StartFrame ... {     ...     private void setCardLayout()      {                cardPanel.setLayout(cardLayout);          // Remove:          //cardPanel.add(new RegistrationPanel(), ""registration"");          // Add:          cardPanel.add(new RegistrationPanel(this), ""registration"");          ....     } }"
"package com.example.mongo;  import com.mongodb.BasicDBObject; import com.mongodb.MongoClient; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import de.flapdoodle.embed.mongo.MongodExecutable; import de.flapdoodle.embed.mongo.MongodProcess; import de.flapdoodle.embed.mongo.MongodStarter; import de.flapdoodle.embed.mongo.config.IMongodConfig; import de.flapdoodle.embed.mongo.config.MongodConfigBuilder; import de.flapdoodle.embed.mongo.config.Net; import de.flapdoodle.embed.mongo.distribution.Version; import de.flapdoodle.embed.process.runtime.Network; import java.util.Date; import org.junit.After; import static org.junit.Assert.*; import org.junit.Before; import org.junit.Test;  public class EmbeddedMongoTest {     private static final String DATABASE_NAME = ""embedded"";      private MongodExecutable mongodExe;     private MongodProcess mongod;     private MongoClient mongo;      @Before     public void beforeEach() throws Exception {         MongodStarter starter = MongodStarter.getDefaultInstance();         String bindIp = ""localhost"";         int port = 12345;         IMongodConfig mongodConfig = new MongodConfigBuilder()         .version(Version.Main.PRODUCTION)         .net(new Net(bindIp, port, Network.localhostIsIPv6()))         .build();         this.mongodExe = starter.prepare(mongodConfig);         this.mongod = mongodExe.start();         this.mongo = new MongoClient(bindIp, port);     }      @After     public void afterEach() throws Exception {         if (this.mongod != null) {             this.mongod.stop();             this.mongodExe.stop();         }     }      @Test     public void shouldCreateNewObjectInEmbeddedMongoDb() {         // given         MongoDatabase db = mongo.getDatabase(DATABASE_NAME);         db.createCollection(""testCollection"");         MongoCollection&lt;BasicDBObject&gt; col = db.getCollection(""testCollection"", BasicDBObject.class);          // when         col.insertOne(new BasicDBObject(""testDoc"", new Date()));          // then         assertEquals(1L, col.countDocuments());     }  }"
