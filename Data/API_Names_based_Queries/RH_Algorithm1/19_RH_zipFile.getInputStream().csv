code
".gwt-TabBar { } .gwt-TabBar .gwt-TabBarFirst {  width: 5px; /* first tab distance from the left */ } .gwt-TabBar .gwt-TabBarRest { } .gwt-TabBar .gwt-TabBarItem {  margin-left: 6px;  padding: 3px 6px 3px 6px;  cursor: pointer;  cursor: hand;  color: black;  font-weight: bold;  text-align: center;  background: #d0e4f6; } .gwt-TabBar .gwt-TabBarItem-selected {  cursor: default;  background: #92c1f0; } .gwt-TabBar .gwt-TabBarItem-disabled {  cursor: default;  color: #999999; } .gwt-TabPanel { } .gwt-TabPanelBottom {  border-color: #92c1f0;  border-style: solid;  border-width: 3px 2px 2px;  overflow: hidden;  padding: 6px; }  .gwt-DecoratedTabBar { } .gwt-DecoratedTabBar .gwt-TabBarFirst {  width: 5px; /* first tab distance from the left */ } .gwt-DecoratedTabBar .gwt-TabBarRest { } .gwt-DecoratedTabBar .gwt-TabBarItem {  border-collapse: collapse;  margin-left: 6px; } .gwt-DecoratedTabBar .tabTopCenter {  padding: 0px;  background: #d0e4f6; } .gwt-DecoratedTabBar .tabTopLeft, .gwt-DecoratedTabBar .tabTopRight {  padding: 0px;  zoom: 1; } .gwt-DecoratedTabBar .tabTopLeftInner, .gwt-DecoratedTabBar .tabTopRightInner {  width: 6px;  height: 6px; } .gwt-DecoratedTabBar .tabTopLeft {  background: url(images/corner.png) no-repeat 0px -55px;  -background: url(images/corner_ie6.png) no-repeat 0px -55px; } .gwt-DecoratedTabBar .tabTopRight {  background: url(images/corner.png) no-repeat -6px -55px;  -background: url(images/corner_ie6.png) no-repeat -6px -55px; } * html .gwt-DecoratedTabBar .tabTopLeftInner, * html .gwt-DecoratedTabBar .tabTopRightInner {  width: 6px;  height: 6px;  overflow: hidden; } .gwt-DecoratedTabBar .tabMiddleLeft, .gwt-DecoratedTabBar .tabMiddleRight {  width: 6px;  padding: 0px;  background: #d0e4f6; } .gwt-DecoratedTabBar .tabMiddleLeftInner, .gwt-DecoratedTabBar .tabMiddleRightInner {  width: 1px;  height: 1px; } .gwt-DecoratedTabBar .tabMiddleCenter {  padding: 0px 4px 2px 4px;  cursor: pointer;  cursor: hand;  color: black;  font-weight: bold;  text-align: center;  background: #d0e4f6; } .gwt-DecoratedTabBar .gwt-TabBarItem-selected .tabTopCenter {  background: #92c1f0; } .gwt-DecoratedTabBar .gwt-TabBarItem-selected .tabTopLeft {  background-position: 0px -61px; } .gwt-DecoratedTabBar .gwt-TabBarItem-selected .tabTopRight {  background-position: -6px -61px; } .gwt-DecoratedTabBar .gwt-TabBarItem-selected .tabMiddleLeft, .gwt-DecoratedTabBar .gwt-TabBarItem-selected .tabMiddleRight {  background: #92c1f0; } .gwt-DecoratedTabBar .gwt-TabBarItem-selected .tabMiddleCenter {  cursor: default;  background: #92c1f0; } .gwt-DecoratedTabBar .gwt-TabBarItem-disabled .tabMiddleCenter {  cursor: default;  color: #999999; }"
"class VocalInteger {      private int value;     private final Object lock = new Object();     Set&lt;VocalIntegerListener&gt; listeners; // assume interface exists - it's easy       public VocalInteger() {         this(0);     }      public VocalInteger(int value) {         this.value = value;         listeners = new HashSet&lt;VocalIntegerListener&gt;();     }      public int getValue() {         return value;     }      public void setValue(int value) {         synchronized(lock) {             int oldValue = this.value;             this.value = value;             for(VocalIntegerListener listener : listeners) {                 listener.fireChangedEvent(oldvalue, value); // assume exists             }         }     }      public void registerListener(VocalIntegerListener listener) {         synchronized(lock) {             listeners.add(listener);         }     } }"
"class JsonEntity {      private List&lt;Movie&gt; movies;      public List&lt;Movie&gt; getMovies() {         return movies;     }      public void setMovies(List&lt;Movie&gt; movies) {         this.movies = movies;     }      @Override     public String toString() {         return ""JsonEntity [movies="" + movies + ""]"";     } }  class Movie {      private String title;     private Profile in_wanted;      public String getTitle() {         return title;     }      public void setTitle(String title) {         this.title = title;     }      public Profile getIn_wanted() {         return in_wanted;     }      public void setIn_wanted(Profile in_wanted) {         this.in_wanted = in_wanted;     }      @Override     public String toString() {         return ""Movie [title="" + title + "", in_wanted="" + in_wanted + ""]"";     } }  class Profile {      private boolean value;      public boolean isValue() {         return value;     }      public void setValue(boolean value) {         this.value = value;     }      @Override     public String toString() {         return String.valueOf(value);     } }"
"for(int ptCnt=0; ptCnt &lt; productTypeNL.getLength(); ptCnt++) {     Node productTypeNode = productTypeNL.item(ptCnt);     if(productTypeNode.hasChildNodes()){         NodeList childProductTypeNL = productTypeNode.getChildNodes();         System.out.print(""Product Types are: "");         for (int cptCnt=0; cptCnt &lt; childProductTypeNL.getLength(); cptCnt++) {             productTypeBean = new ProductType();             productTypeBean.setmProductType (                             childProductTypeNL.item(cptCnt).getTextContent());             System.out.print(productTypeBean.getmProductType() + "", "");             ProductTypeAL.add(productTypeBean);         }     }     productBean.setmProductTypes(ProductTypeAL); }"
"private ListView lv = (ListView) findViewById(R.id.your_list_view_id);  List&lt;String&gt; your_array_list = new ArrayList&lt;String&gt;(); String path = Environment.getExternalStorageDirectory().toString()+""/Church Application/"";  File f = new File(path); File[] files = f.listFiles(); for (File inFile : files) {     if (inFile.isDirectory()) {         // in here, you can add directory names into an ArrayList and populate your ListView.         your_array_list.add(inFile.getName());     } }   ArrayAdapter&lt;String&gt; arrayAdapter = new ArrayAdapter&lt;String&gt;(                  this,                   android.R.layout.simple_list_item_1,                  your_array_list );           lv.setAdapter(arrayAdapter);"
