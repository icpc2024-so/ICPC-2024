code
"WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE); Method[] wmMethods = wifi.getClass().getDeclaredMethods(); for(Method method: wmMethods){   if(method.getName().equals(""setWifiApEnabled"")){     WifiConfiguration netConfig = new WifiConfiguration();     netConfig.SSID = ""\""PROVAAP\"""";     netConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);     netConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);     netConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);     netConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.WPA_PSK);    netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);     netConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);     netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.CCMP);     netConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.TKIP);        try {       method.invoke(wifi, netConfig,true);     } catch (IllegalArgumentException e) {       e.printStackTrace();     } catch (IllegalAccessException e) {       e.printStackTrace();     } catch (InvocationTargetException e) {       e.printStackTrace();     }   } }"
"Session session = null; Transaction txn = null; try {       SessionFactory sessionFactory =          new Configuration().configure().buildSessionFactory();     session = sessionFactory.openSession();       txn = session.beginTransaction();     Course course = new Course();       course.setDescription(""Description"");     course.setName(""NAME"");     course.setUrl(""http://www.url.com"");      session.save(course);      txn.commit();  } catch (Exception e) {      System.out.println(e.getMessage()); } finally {     if (!txn.wasCommitted()) {         txn.rollback();     }      session.flush();       session.close();    }"
"SSLContext ssl = SSLContext.getInstance(""TLS"");  KeyManagerFactory keyFactory = KeyManagerFactory                    .getInstance(KeyManagerFactory.getDefaultAlgorithm()); KeyStore store = KeyStore.getInstance(""JKS"");  store.load(new FileInputStream(keystoreFile),keyPass.toCharArray());  keyFactory.init(store, keyPass.toCharArray());   TrustManagerFactory trustFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  trustFactory.init(store);  ssl.init(keyFactory.getKeyManagers(), trustFactory.getTrustManagers(), new SecureRandom());  HttpsConfigurator configurator = new HttpsConfigurator(ssl);  HttpsServer httpsServer = HttpsServer.create(new InetSocketAddress(hostname, port), port);  httpsServer.setHttpsConfigurator(configurator);  HttpContext httpContext = httpsServer.createContext(uri);  httpsServer.start();  endpoint.publish(httpContext);"
"package cs236369.proxy.types;  import java.util.regex.Matcher; import java.util.regex.Pattern;  public enum HttpPatterns {     RESPONSE_CODE(""^HTTP/1\\.1 (\\d+) .*$""),     CACHE_CONTROL(""^Cache-Control: (\\w+)$""),     HOST(""^Host: (\\w+)$""),     REQUEST_HEADER(""(GET|POST) ([^\\s]+) ([^\\s]+)$""),     ACCEPT_ENCODING(""^Accept-Encoding: .*$""),     CONTENT_ENCODING(""^Content-Encoding: ([^\\s]+)$"");      private final Pattern pattern;      HttpPatterns(String regex) {         pattern = Pattern.compile(regex);     }      public boolean matches(String expression) {         return pattern.matcher(expression).matches();     }      public Object process(String expression) {         Matcher matcher = pattern.matcher(expression);         if (!matcher.matches()) {             throw new RuntimeException(""Called `process`, but the expression doesn't match. Call `matches` first."");         }          if (this == RESPONSE_CODE) {             return Integer.parseInt(matcher.group(1));         } else if (this == CACHE_CONTROL) {             return CacheControl.parseString(matcher.group(1));         } else if (this == HOST) {             return matcher.group(1);         } else if (this == REQUEST_HEADER) {             return new RequestHeader(RequestType.parseString(matcher.group(1)), matcher.group(2), matcher.group(3));         } else if (this == CONTENT_ENCODING) {             return ContentEncoding.parseString(matcher.group(1));         } else { //never happens             return null;         }     }   }"
"Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH); intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,         RecognizerIntent.LANGUAGE_MODEL_FREE_FORM); intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE,         ""com.domain.app"");  SpeechRecognizer recognizer = SpeechRecognizer         .createSpeechRecognizer(this.getApplicationContext()); RecognitionListener listener = new RecognitionListener() {     @Override     public void onResults(Bundle results) {         ArrayList&lt;String&gt; voiceResults = results                 .getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);         if (voiceResults == null) {             System.out.println(""No voice results"");         } else {             System.out.println(""Printing matches: "");             for (String match : voiceResults) {                 System.out.println(match);             }         }     }      @Override     public void onReadyForSpeech(Bundle params) {         System.out.println(""Ready for speech"");     }      /**      *  ERROR_NETWORK_TIMEOUT = 1;      *  ERROR_NETWORK = 2;      *  ERROR_AUDIO = 3;      *  ERROR_SERVER = 4;      *  ERROR_CLIENT = 5;      *  ERROR_SPEECH_TIMEOUT = 6;      *  ERROR_NO_MATCH = 7;      *  ERROR_RECOGNIZER_BUSY = 8;      *  ERROR_INSUFFICIENT_PERMISSIONS = 9;      *      * @param error code is defined in SpeechRecognizer      */     @Override     public void onError(int error) {         System.err.println(""Error listening for speech: "" + error);     }      @Override     public void onBeginningOfSpeech() {         System.out.println(""Speech starting"");     }      @Override     public void onBufferReceived(byte[] buffer) {         // TODO Auto-generated method stub      }      @Override     public void onEndOfSpeech() {         // TODO Auto-generated method stub      }      @Override     public void onEvent(int eventType, Bundle params) {         // TODO Auto-generated method stub      }      @Override     public void onPartialResults(Bundle partialResults) {         // TODO Auto-generated method stub      }      @Override     public void onRmsChanged(float rmsdB) {         // TODO Auto-generated method stub      } }; recognizer.setRecognitionListener(listener); recognizer.startListening(intent);"
"public final class ExcelDocumentConverter { public static XSSFWorkbook convertWorkbookHSSFToXSSF(HSSFWorkbook source) {     XSSFWorkbook retVal = new XSSFWorkbook();     for (int i = 0; i &lt; source.getNumberOfSheets(); i++) {         XSSFSheet xssfSheet = retVal.createSheet();         HSSFSheet hssfsheet = source.getSheetAt(i);         copySheets(hssfsheet, xssfSheet);     }     return retVal; }  public static void copySheets(HSSFSheet source, XSSFSheet destination) {     copySheets(source, destination, true); }  /**  * @param destination  *            the sheet to create from the copy.  * @param the  *            sheet to copy.  * @param copyStyle  *            true copy the style.  */ public static void copySheets(HSSFSheet source, XSSFSheet destination, boolean copyStyle) {     int maxColumnNum = 0;     Map&lt;Integer, HSSFCellStyle&gt; styleMap = (copyStyle) ? new HashMap&lt;Integer, HSSFCellStyle&gt;() : null;     for (int i = source.getFirstRowNum(); i &lt;= source.getLastRowNum(); i++) {         HSSFRow srcRow = source.getRow(i);         XSSFRow destRow = destination.createRow(i);         if (srcRow != null) {             copyRow(source, destination, srcRow, destRow, styleMap);             if (srcRow.getLastCellNum() &gt; maxColumnNum) {                 maxColumnNum = srcRow.getLastCellNum();             }         }     }     for (int i = 0; i &lt;= maxColumnNum; i++) {         destination.setColumnWidth(i, source.getColumnWidth(i));     } }  /**  * @param srcSheet  *            the sheet to copy.  * @param destSheet  *            the sheet to create.  * @param srcRow  *            the row to copy.  * @param destRow  *            the row to create.  * @param styleMap  *            -  */ public static void copyRow(HSSFSheet srcSheet, XSSFSheet destSheet, HSSFRow srcRow, XSSFRow destRow,         Map&lt;Integer, HSSFCellStyle&gt; styleMap) {     // manage a list of merged zone in order to not insert two times a     // merged zone     Set&lt;CellRangeAddressWrapper&gt; mergedRegions = new TreeSet&lt;CellRangeAddressWrapper&gt;();     destRow.setHeight(srcRow.getHeight());     // pour chaque row     for (int j = srcRow.getFirstCellNum(); j &lt;= srcRow.getLastCellNum(); j++) {         HSSFCell oldCell = srcRow.getCell(j); // ancienne cell         XSSFCell newCell = destRow.getCell(j); // new cell         if (oldCell != null) {             if (newCell == null) {                 newCell = destRow.createCell(j);             }             // copy chaque cell             copyCell(oldCell, newCell, styleMap);             // copy les informations de fusion entre les cellules             // System.out.println(""row num: "" + srcRow.getRowNum() +             // "" , col: "" + (short)oldCell.getColumnIndex());             CellRangeAddress mergedRegion = getMergedRegion(srcSheet, srcRow.getRowNum(),                     (short) oldCell.getColumnIndex());              if (mergedRegion != null) {                 // System.out.println(""Selected merged region: "" +                 // mergedRegion.toString());                 CellRangeAddress newMergedRegion = new CellRangeAddress(mergedRegion.getFirstRow(),                         mergedRegion.getLastRow(), mergedRegion.getFirstColumn(), mergedRegion.getLastColumn());                 // System.out.println(""New merged region: "" +                 // newMergedRegion.toString());                 CellRangeAddressWrapper wrapper = new CellRangeAddressWrapper(newMergedRegion);                 if (isNewMergedRegion(wrapper, mergedRegions)) {                     mergedRegions.add(wrapper);                     destSheet.addMergedRegion(wrapper.range);                 }             }         }     }  }  /**  * @param oldCell  * @param newCell  * @param styleMap  */ public static void copyCell(HSSFCell oldCell, XSSFCell newCell, Map&lt;Integer, HSSFCellStyle&gt; styleMap) {     if (styleMap != null) {         int stHashCode = oldCell.getCellStyle().hashCode();         HSSFCellStyle sourceCellStyle = styleMap.get(stHashCode);         XSSFCellStyle destnCellStyle = newCell.getCellStyle();         if (sourceCellStyle == null) {             sourceCellStyle = oldCell.getSheet().getWorkbook().createCellStyle();         }         destnCellStyle.cloneStyleFrom(oldCell.getCellStyle());         styleMap.put(stHashCode, sourceCellStyle);         newCell.setCellStyle(destnCellStyle);     }     switch (oldCell.getCellType()) {     case HSSFCell.CELL_TYPE_STRING:         newCell.setCellValue(oldCell.getStringCellValue());         break;     case HSSFCell.CELL_TYPE_NUMERIC:         newCell.setCellValue(oldCell.getNumericCellValue());         break;     case HSSFCell.CELL_TYPE_BLANK:         newCell.setCellType(HSSFCell.CELL_TYPE_BLANK);         break;     case HSSFCell.CELL_TYPE_BOOLEAN:         newCell.setCellValue(oldCell.getBooleanCellValue());         break;     case HSSFCell.CELL_TYPE_ERROR:         newCell.setCellErrorValue(oldCell.getErrorCellValue());         break;     case HSSFCell.CELL_TYPE_FORMULA:         newCell.setCellFormula(oldCell.getCellFormula());         break;     default:         break;     }  }  /**  * Récupère les informations de fusion des cellules dans la sheet source  * pour les appliquer à la sheet destination... Récupère toutes les zones  * merged dans la sheet source et regarde pour chacune d'elle si elle se  * trouve dans la current row que nous traitons. Si oui, retourne l'objet  * CellRangeAddress.  *   * @param sheet  *            the sheet containing the data.  * @param rowNum  *            the num of the row to copy.  * @param cellNum  *            the num of the cell to copy.  * @return the CellRangeAddress created.  */ public static CellRangeAddress getMergedRegion(HSSFSheet sheet, int rowNum, short cellNum) {     for (int i = 0; i &lt; sheet.getNumMergedRegions(); i++) {         CellRangeAddress merged = sheet.getMergedRegion(i);         if (merged.isInRange(rowNum, cellNum)) {             return merged;         }     }     return null; }  /**  * Check that the merged region has been created in the destination sheet.  *   * @param newMergedRegion  *            the merged region to copy or not in the destination sheet.  * @param mergedRegions  *            the list containing all the merged region.  * @return true if the merged region is already in the list or not.  */ private static boolean isNewMergedRegion(CellRangeAddressWrapper newMergedRegion,         Set&lt;CellRangeAddressWrapper&gt; mergedRegions) {     return !mergedRegions.contains(newMergedRegion); } }"
"final JFrame frame = new JFrame(); frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE); frame.setLayout(new GridBagLayout());  GridBagConstraints gbc = new GridBagConstraints(); gbc.gridx = 0; gbc.gridy = 0; gbc.fill = GridBagConstraints.BOTH; gbc.weightx = 1.0; gbc.weighty = 1.0; frame.add(Box.createGlue(), gbc);  final JTextArea textArea = new JTextArea(""SE""); textArea.setPreferredSize(new Dimension(50, 50)); textArea.setOpaque(true); textArea.setBackground(Color.RED); gbc = new GridBagConstraints(); gbc.gridx = 1; gbc.gridy = 1; gbc.fill = GridBagConstraints.NONE; gbc.weightx = 0.0; gbc.weighty = 0.0; frame.add(textArea, gbc);  frame.setSize(640, 480); frame.setVisible(true);"
"public static CopySoap getPort(String username, String password)  {      Copy service = new Copy();     CopySoap port = service.getCopySoap();      BindingProvider bp = (BindingProvider) port;      bp.getRequestContext().put(BindingProvider.USERNAME_PROPERTY, username);     bp.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, password);     bp.getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY,              ""https://my.site.com/sites/mysite/_vti_bin/copy.asmx"");       return port; }     public static void createDocument(CopySoap port) {     String url = ""https://my.site.com/sites/mysite/Shared Documents/Temp Folder/test.txt"";     String sourceUrl = ""C:\\CopyFile\\READ-ME.txt"";           DestinationUrlCollection urls = new DestinationUrlCollection();     urls.getString().add(url);      byte[] content = IoUtil.getBytes(new File(sourceUrl));      FieldInformation titleInfo = new FieldInformation ();     titleInfo.setDisplayName(""Title"");     titleInfo.setType(FieldType.TEXT);     titleInfo.setValue(""Test Doc"");      FieldInformationCollection infos = new FieldInformationCollection ();     infos.getFieldInformation().add(titleInfo);      CopyResultCollection results = new CopyResultCollection ();      Holder&lt;CopyResultCollection&gt; resultHolder = new Holder&lt;CopyResultCollection&gt;(results);            Holder&lt;Long&gt; longHolder = new Holder&lt;Long&gt;(new Long(-1));             port.copyIntoItems(sourceUrl, urls, infos, content, longHolder, resultHolder);  }"
"private Cache&lt;Integer,Object&gt; cache = CacheBuilder.newBuilder().SomeConfig.build(); private Multimap&lt;Integer,Object&gt; multimap = HashMultimap&lt;Integer, Object&gt;.create(); private AtomicInteger atomicid = new AtomicInteger(0);  public void putInMultimap(int id, Object obj) {    int mapid = atomicid.addAndGet(1);    cache.put(mapid,obj);    multimap.put(id,mapid); } public List&lt;Object&gt; getFromMultimap(int id) {    Set&lt;Integer&gt; mapids = multimap.get(id);    List&lt;Object&gt; list = new ArrayList&lt;Object&gt;();    for (int i : mapids) {       list.add(cache.getIfPresent(i));    }    return list; }"
"ReportClientDocument clientDoc = new ReportClientDocument(); .... DatabaseController dbController=clientDoc.getDatabaseController(); IConnectionInfo ConnInfo = dbController.getConnectionInfos(null).getConnectionInfo(0); com.crystaldecisions.sdk.occa.report.lib.PropertyBag boPropertyBag1 = new com.crystaldecisions.sdk.occa.report.lib.PropertyBag(); // Set the properties for the connection boPropertyBag1.put(""JDBC Connection String"", connString); boPropertyBag1.put(""Database Class Name"", dbClassName); boPropertyBag1.put(""Connection URL"", connString); boPropertyBag1.put(""Server"", serverHost); .... // Assign the properties to the connection info ConnInfo.setAttributes(boPropertyBag1); // Set the DB Username and Pwd ConnInfo.setUserName(usrName); ConnInfo.setPassword(pwd);"
"public boolean onCreateOptionsMenu(Menu menu) {             if (getSupportActionBar().getSelectedNavigationIndex() == 1) {                 menu.add(""Share"")                 .setIcon(android.R.drawable.ic_menu_share)                 .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);             }             if (getSupportActionBar().getSelectedNavigationIndex() == 0)) {                 menu.add(""Settings"")             .setIcon(android.R.drawable.ic_menu_manage)                 .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT);                   }              return true;         }"
"ObjectMetadata metadata = new ObjectMetadata(); metadata.setContentType(mpf.getContentType());  String key = Util.getLoginUserName() + ""/""         + mpf.getOriginalFilename(); metadata.setContentLength(mpf.getSize()); PutObjectRequest putObjectRequest = new PutObjectRequest(                 Constants.S3_BUCKET_NAME, key, mpf.getInputStream(),                 metadata)         .withStorageClass(StorageClass.ReducedRedundancy);  putObjectRequest.setProgressListener(new ProgressListener() {         @Override         public void progressChanged(ProgressEvent progressEvent) {             System.out.println(progressEvent                     .getBytesTransfered()                     + ""&gt;&gt; Number of byte transfered ""                     + new Date());             progressEvent.getBytesTransfered();             double totalByteRead = request                     .getSession().getAttribute(                                                     Constants.TOTAL_BYTE_READ) != null ? (Double) request                                             .getSession().getAttribute(Constants.TOTAL_BYTE_READ) : 0;              totalByteRead += progressEvent.getBytesTransfered();             request.getSession().setAttribute(Constants.TOTAL_BYTE_READ, totalByteRead);             System.out.println(""total Byte read ""+ totalByteRead);              request.getSession().setAttribute(Constants.TOTAL_PROGRESS, (totalByteRead/size)*100);         System.out.println(""percentage completed &gt;&gt;&gt;""+ (totalByteRead/size)*100);            if (progressEvent.getEventCode() == ProgressEvent.COMPLETED_EVENT_CODE) {             System.out.println(""completed  ******"");         }     } }); s3Client.putObject(putObjectRequest);"
"Toolkit.getDefaultToolkit().getSystemClipboard().addFlavorListener(     new FlavorListener() {      @Override      public void flavorsChanged(FlavorEvent e) {          Display.getDefault().asyncExec(new Runnable(){             public void run(){               // do things on the UI thread               String result = """";               Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();               Transferable contents = clipboard.getContents(null);               ...             }          }      });"
"textArea.addEventFilter(KeyEvent.KEY_PRESSED, new EventHandler&lt;KeyEvent&gt;() {         @Override         public void handle(KeyEvent event) {             if (event.getCode() == KeyCode.TAB) {                 SkinBase skin = (SkinBase) textArea.getSkin();                 if (skin.getBehavior() instanceof TextAreaBehavior) {                     TextAreaBehavior behavior = (TextAreaBehavior) skin.getBehavior();                     if (event.isControlDown()) {                         behavior.callAction(""InsertTab"");                     } else {                         behavior.callAction(""TraverseNext"");                     }                     event.consume();                 }              }         }     });"
"private JDialog dialog;  private String inputValue;  String showPromptDialog(Frame parent) {     dialog = new JDialog(parent, true);     dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);      // [add components to dialog here]      firstButton.setAction(new ButtonAction(""Button 1"",  ""first""));     secondButton.setAction(new ButtonAction(""Button 2"", ""second""));     thirdButton.setAction(new ButtonAction(""Button 3"",  ""third""));     fourthButton.setAction(new ButtonAction(""Button 4"", ""fourth""));     fifthButton.setAction(new ButtonAction(""Button 5"",  ""fifth""));     sixthButton.setAction(new ButtonAction(""Button 6"",  ""sixth""));      dialog.pack();     dialog.setLocationRelativeTo(parent);      inputValue = null;     dialog.setVisible(true);      return inputValue; }  private class ButtonAction extends AbstractAction {     private static final long serialVersionUID = 1;      ButtonAction(String text,                  String actionCommand) {         super(text);         putValue(ACTION_COMMAND_KEY, actionCommand);     }      public void actionPerformed(ActionEvent event) {         inputValue = event.getActionCommand();         dialog.dispose();     } }"
"public class YourAdapter extends ArrayAdapter&lt;String&gt; {   private final Context context;   // blahblahblah   private final TextView mYourTextView;   public YourAdapter(Context context, String[] values, TextView btnUpdate) {      super(context, R.layout.rowlayout, values);      this.context = context;      this.values = values;      mYourTextView = btnUpdate;  }   ....   @Override     public void onClick(View v) {         Toast.makeText(_c, ""clicked quick add ""+p, Toast.LENGTH_SHORT).show();         //mYourTextView.setTag(1);         //mYourTextView.setText(btnUpdate.getTag().toString());         mYourTextView.setText(""b"");     }"
"ActiveXComponent wmi = new ActiveXComponent(""WbemScripting.SWbemLocator"");            Variant variantParameters[] = new Variant[4];   variantParameters[0] = new Variant(_IPADDRESS);   variantParameters[1] = new Variant(""root\\cimv2"");   variantParameters[2] = new Variant(""username"");   variantParameters[3] = new Variant(""password"");        ActiveXComponent axWMI; try {     Variant conRet = wmi.invoke(""ConnectServer"", variantParameters);             axWMI = new ActiveXComponent(conRet.toDispatch()); }catch(ComFailException e) {     axWMI = null; } if (axWMI == null)     return false;"
"public class Warehouse {     private List&lt;InventoryItem&gt; inventory = new ArrayList&lt;InventoryItem&gt;();      public void addItem(InventoryItem i)          inventory.add(i);     }      public static void main(String [] args) {         // create a Warehouse instance         Warehouse warehouse = new Warehouse();         // create an InventoryItem instance          InventoryItem i = new InventoryItem(sku, itemName, price, stock);         // add the InventoryItem to the Warehouse         warehouse.addItem(i);         } }"
"Public class MediaPlayerDemo_Video extends Activity implements TextureView.SurfaceTextureListener {    private MediaPlayer mMediaPlayer;   private TextureView mPreview;   @Override  public void onCreate(Bundle icicle) {        super.onCreate(icicle);        mPreview = new TextureView(this);       mPreview.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));       mPreview.setSurfaceTextureListener(this);        extras = getIntent().getExtras();        setContentView(mPreview);  }   @Override  public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {  Surface s = new Surface(surface);   try {        mMediaPlayer= new MediaPlayer();        mMediaPlayer.setDataSource(""http://daily3gp.com/vids/747.3gp"");        mMediaPlayer.setSurface(s);        mMediaPlayer.prepare();        mMediaPlayer.setOnBufferingUpdateListener(this);        mMediaPlayer.setOnCompletionListener(this);        mMediaPlayer.setOnPreparedListener(this);        mMediaPlayer.setOnVideoSizeChangedListener(this);        mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);        mMediaPlayer.start();       } catch (IllegalArgumentException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (SecurityException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IllegalStateException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }    }"
"logger.debug(""Configure port for SSL"");         String command = ""create-http-listener"";         ParameterMap params = new ParameterMap();         params.add(""listeneraddress"", ""0.0.0.0"");         params.add(""listenerport"", ""443"");         params.add(""defaultvs"", ""server"");         params.add(""securityenabled"", ""true"");         params.add(""enabled"", ""true"");         params.add(""DEFAULT"", ""http-listener2"");         CommandRunner runner = server.getHabitat().getComponent(CommandRunner.class);         ActionReport report = server.getHabitat().getComponent(ActionReport.class);         runner.getCommandInvocation(command, report).parameters(params).execute();"
"try {      String shopName = jComboBox1.getSelectedItem().toString();     String actionCode = jComboBox2.getSelectedItem().toString();      HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();     map.put(""storeName"", shopName);     map.put(""actionCode"", actionCode);      URL reportFileURL = getClass().getResource(""../ireps/AccessCounter.jrxml"");     File reportFile = new File(reportFileURL.toURI());     JasperDesign jasperDesign = JRXmlLoader.load(reportFile);     JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);     JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);      JasperViewer jv = new JasperViewer(jasperPrint);     JDialog viewer = new JDialog(this, ""Batch Report"", true);     viewer.setBounds(jv.getBounds());     viewer.getContentPane().add(jv.getContentPane());     viewer.setResizable(true);     viewer.setIconImage(jv.getIconImage());     viewer.setVisible(true);  } catch (JRException exc) {    System.out.println(exc.getMessage()); } catch (URISyntaxException exs) {    System.out.println(exs.getMessage()); }"
"Properties props = new Properties(); props.setProperty(""mail.transport.protocol"", ""smtp""); props.setProperty(""mail.smtp.host"", ""out.alice.it""); props.setProperty(""mail.smtp.auth"", ""true""); final PasswordAuthentication auth = new PasswordAuthentication(smtpUser, stmpPassword); Session mailSession = Session.getDefaultInstance(props, new Authenticator() {     @Override     protected PasswordAuthentication getPasswordAuthentication() { return auth; } }); MimeMessage message = ....; // compose the message Transport.send(message);"
"MultiKeyMap multiKeyMap = new MultiKeyMap();  multiKeyMap.put(""Key 1A"",""Key 1B"",""Value 1""); multiKeyMap.put(""Key 2A"",""Key 2B"",""Value 2""); multiKeyMap.put(""Key 3A"",""Key 3B"",""Value 3"");  MapIterator it = multiKeyMap.mapIterator();  while (it.hasNext()) {     it.next();      MultiKey mk = (MultiKey) it.getKey();      // Option 1     System.out.println(mk.getKey(0));     System.out.println(mk.getKey(1));      // Option 2     for (Object subkey : mk.getKeys())       System.out.println(subkey);      System.out.println(it.getValue()); }"
"public class ShareButtonActivity extends Activity {      // SocialAuth Component     SocialAuthAdapter adapter;      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.main);          // Welcome Message         TextView textview = (TextView)findViewById(R.id.text);         textview.setText(""Title"");          //Create Your Own Share Button         Button share = (Button)findViewById(R.id.sharebutton);         share.setText(""Share"");         share.setTextColor(Color.WHITE);         share.setBackgroundResource(R.drawable.button_gradient);          // Add it to Library         adapter = new SocialAuthAdapter(new ResponseListener());          // Add providers          adapter.addProvider(Provider.TWITTER, R.drawable.twitter);         //before that import library which is given by socialauth in link given below         adapter.enable(share);      }       /**      * Listens Response from Library      *       */      private final class ResponseListener implements DialogListener      {         public void onComplete(Bundle values) {              // Variable to receive message status              Log.d(""ShareButton"" , ""Authentication Successful"");              // Get name of provider after authentication             String providerName = values.getString(SocialAuthAdapter.PROVIDER);             Log.d(""ShareButton"", ""Provider Name = "" + providerName);              adapter.updateStatus(""your message|link"" + System.currentTimeMillis());             Toast.makeText(ShareButtonActivity.this, ""Message posted on "" + providerName, Toast.LENGTH_SHORT).show();                  }           public void onError(SocialAuthError error) {              Log.d(""ShareButton"" , ""Authentication Error"");          }           public void onCancel() {              Log.d(""ShareButton"" , ""Authentication Cancelled"");          }       }  }"
"Validator validator = Validation.buildDefaultValidatorFactory().getValidator(); Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(myCar);  if (constraintViolations.size() &gt; 0) {     Set&lt;String&gt; violationMessages = new HashSet&lt;String&gt;();      for (ConstraintViolation&lt;T&gt; constraintViolation : constraintViolations) {         violationMessages.add(constraintViolation.getPropertyPath() + "": "" + constraintViolation.getMessage());     }      throw new RuntimeException(""Car is not valid:\n"" + StringUtils.join(violationMessages, ""\n"")); }"
"public class SOAPServlet extends CXFNonSpringServlet {      private static final long serialVersionUID = 1L;     private Map&lt;String, Object&gt; endpoints;       public SOAPServlet(){         endpoints = new HashMap&lt;String, Object&gt;();     }      @Override     public void loadBus(ServletConfig servletConfig) {         super.loadBus(servletConfig);                  // You could add the endpoint publish codes here         Bus bus = getBus();         BusFactory.setDefaultBus(bus);         Set s = endpoints.entrySet();         Iterator p = s.iterator();         while(p.hasNext()){             Map.Entry m = (Map.Entry)p.next();             String address = (String)m.getKey();             Object impl = (Object)m.getValue();             System.out.println(""Publishing "" + address);             Endpoint.publish(address, impl);         }     }     public void publish(String address, Object impl){         endpoints.put(address, impl);     } }"
"public class Proxy {     public static void main(String[] args) throws IOException {         ServerSocket serverSocket = new ServerSocket(1230); // proxy port         Socket socket = serverSocket.accept();         Socket relay = new Socket(&quot;localhost&quot;, 1234); // server address         new ProxyThread(relay.getInputStream(), socket.getOutputStream()).start();         new ProxyThread(socket.getInputStream(), relay.getOutputStream()).start();     } }  class ProxyThread extends Thread {     private InputStream inputStream;     private OutputStream outputStream;      ProxyThread(InputStream inputStream, OutputStream outputStream) {         this.inputStream = inputStream;         this.outputStream = outputStream;     }      public void run() {         try {             int i;             while ((i = inputStream.read()) != -1) {                 outputStream.write(i);             }         } catch (IOException e) {             e.printStackTrace();         }     } }"
"public static &lt;T&gt; T connectEJB(String jndi) throws NamingException {     Properties clientProperties = new Properties();     clientProperties.put(""remote.connectionprovider.create.options.org.xnio.Options.SSL_ENABLED"", ""false"");     clientProperties.put(""remote.connections"", ""default"");     clientProperties.put(""remote.connection.default.port"", myPort);     clientProperties.put(""remote.connection.default.host"", myHost);     clientProperties.put(""remote.connection.default.username"", myUser);     clientProperties.put(""remote.connection.default.password"", myPassword);     clientProperties.put(""remote.connection.default.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS"", ""false"");      EJBClientConfiguration ejbClientConfiguration = new PropertiesBasedEJBClientConfiguration(clientProperties);     ContextSelector&lt;EJBClientContext&gt; contextSelector = new ConfigBasedEJBClientContextSelector(ejbClientConfiguration);     EJBClientContext.setSelector(contextSelector);      Properties properties = new Properties();     properties.put(Context.URL_PKG_PREFIXES, ""org.jboss.ejb.client.naming"");     Context context = new InitialContext(properties);     return (T) context.lookup(jndi); }"
"CloseableHttpClient client = HttpClients.custom()         .setServiceUnavailableRetryStrategy(new ServiceUnavailableRetryStrategy() {             @Override             public boolean retryRequest(                     final HttpResponse response, final int executionCount, final HttpContext context) {                 int statusCode = response.getStatusLine().getStatusCode();                 return statusCode == 403 &amp;&amp; executionCount &lt; 5;             }              @Override             public long getRetryInterval() {                 return 0;             }         })         .build();"
"HttpClient client = new DefaultHttpClient();             HttpConnectionParams.setConnectionTimeout(client.getParams(), 60000);             HttpResponse response;      try     {              JSONObject j = new JSONObject();             j.put(""UserName"", ""hiqmaali"");             j.put(""Password"", ""qwerty"");         Messages.onLowmemory();         HttpPost post = new HttpPost(HOST_URL);          StringEntity stringEntity = new StringEntity(j.toString(), ""UTF-8"");         post.setEntity(stringEntity);          response = client.execute(post);"
