code
"File file = null;     FileInputStream fis = null;     HWPFDocument document = null;     Range commentRange = null;     try {         file = new File(fileName);         fis = new FileInputStream(file);         document = new HWPFDocument(fis);         commentRange = document.getCommentsRange();         int numComments = commentRange.numParagraphs();         for (int i = 0; i &lt; numComments; i++) {             String comments = commentRange.getParagraph(i).text();             comments = comments.replaceAll(""\\cM?\r?\n"", """").trim();             if (!comments.equals("""")) {                 System.out.println(""comment :-  "" + comments);             }         }     } catch (Exception e) {         e.printStackTrace();     }"
"public static String escape(String text) {      if(text == null) {         return null;     }      int numChars = text.length();     char ch;     StringBuffer sb = new StringBuffer();     for(int i = 0; i &lt; numChars; i++) {         ch = text.charAt(i);          switch(ch) {             case '\\':  { sb.append(""\\\\""); break; }             case '\r':  { sb.append(""\\r""); break; }             case '\b':  { sb.append(""\\b""); break; }             case '\t':  { sb.append(""\\t""); break; }             case '\n':  { sb.append(""\\n""); break; }             case '\f':  { sb.append(""\\f""); break; }             default: {                 sb.append(ch);                 break;             }         }     }     return sb.toString(); }"
"public static String bbcode(String text) {         String html = text;          Map&lt;String,String&gt; bbMap = new HashMap&lt;String , String&gt;();          bbMap.put(""(\r\n|\r|\n|\n\r)"", ""&lt;br/&gt;"");         bbMap.put(""\\[b\\](.+?)\\[/b\\]"", ""&lt;strong&gt;$1&lt;/strong&gt;"");         bbMap.put(""\\[i\\](.+?)\\[/i\\]"", ""&lt;span style='font-style:italic;'&gt;$1&lt;/span&gt;"");         bbMap.put(""\\[u\\](.+?)\\[/u\\]"", ""&lt;span style='text-decoration:underline;'&gt;$1&lt;/span&gt;"");         bbMap.put(""\\[h1\\](.+?)\\[/h1\\]"", ""&lt;h1&gt;$1&lt;/h1&gt;"");         bbMap.put(""\\[h2\\](.+?)\\[/h2\\]"", ""&lt;h2&gt;$1&lt;/h2&gt;"");         bbMap.put(""\\[h3\\](.+?)\\[/h3\\]"", ""&lt;h3&gt;$1&lt;/h3&gt;"");         bbMap.put(""\\[h4\\](.+?)\\[/h4\\]"", ""&lt;h4&gt;$1&lt;/h4&gt;"");         bbMap.put(""\\[h5\\](.+?)\\[/h5\\]"", ""&lt;h5&gt;$1&lt;/h5&gt;"");         bbMap.put(""\\[h6\\](.+?)\\[/h6\\]"", ""&lt;h6&gt;$1&lt;/h6&gt;"");         bbMap.put(""\\[quote\\](.+?)\\[/quote\\]"", ""&lt;blockquote&gt;$1&lt;/blockquote&gt;"");         bbMap.put(""\\[p\\](.+?)\\[/p\\]"", ""&lt;p&gt;$1&lt;/p&gt;"");         bbMap.put(""\\[p=(.+?),(.+?)\\](.+?)\\[/p\\]"", ""&lt;p style='text-indent:$1px;line-height:$2%;'&gt;$3&lt;/p&gt;"");         bbMap.put(""\\[center\\](.+?)\\[/center\\]"", ""&lt;div align='center'&gt;$1"");         bbMap.put(""\\[align=(.+?)\\](.+?)\\[/align\\]"", ""&lt;div align='$1'&gt;$2"");         bbMap.put(""\\[color=(.+?)\\](.+?)\\[/color\\]"", ""&lt;span style='color:$1;'&gt;$2&lt;/span&gt;"");         bbMap.put(""\\[size=(.+?)\\](.+?)\\[/size\\]"", ""&lt;span style='font-size:$1;'&gt;$2&lt;/span&gt;"");         bbMap.put(""\\[img\\](.+?)\\[/img\\]"", ""&lt;img src='$1' /&gt;"");         bbMap.put(""\\[img=(.+?),(.+?)\\](.+?)\\[/img\\]"", ""&lt;img width='$1' height='$2' src='$3' /&gt;"");         bbMap.put(""\\[email\\](.+?)\\[/email\\]"", ""&lt;a href='mailto:$1'&gt;$1&lt;/a&gt;"");         bbMap.put(""\\[email=(.+?)\\](.+?)\\[/email\\]"", ""&lt;a href='mailto:$1'&gt;$2&lt;/a&gt;"");         bbMap.put(""\\[url\\](.+?)\\[/url\\]"", ""&lt;a href='$1'&gt;$1&lt;/a&gt;"");         bbMap.put(""\\[url=(.+?)\\](.+?)\\[/url\\]"", ""&lt;a href='$1'&gt;$2&lt;/a&gt;"");         bbMap.put(""\\[youtube\\](.+?)\\[/youtube\\]"", ""&lt;object width='640' height='380'&gt;&lt;param name='movie' value='http://www.youtube.com/v/$1'&gt;&lt;/param&gt;&lt;embed src='http://www.youtube.com/v/$1' type='application/x-shockwave-flash' width='640' height='380'&gt;&lt;/embed&gt;&lt;/object&gt;"");         bbMap.put(""\\[video\\](.+?)\\[/video\\]"", ""&lt;video src='$1' /&gt;"");          for (Map.Entry entry: bbMap.entrySet()) {             html = html.replaceAll(entry.getKey().toString(), entry.getValue().toString());         }          return html;     }"
"final String html =     ""&lt;div dir=\""ltr\""&gt;hello my friend&lt;span&gt;ECHO&lt;/span&gt;&lt;br&gt;how are you ?"" +     ""&lt;br&gt;&lt;br&gt;&lt;div class=\""gmail_quote\""&gt;On Mon, Feb 14, 2011 at 10:45 AM,"" +     "" My Friend &lt;span dir=\""ltr\""&gt;&amp;lt;&lt;a href=\""mailto:notifications@mydo"" +     ""main.com\""&gt;notifications@mydomain.com&lt;/a&gt;&amp;gt;&lt;/span&gt; wrote:&lt;br&gt;&lt;bloc"" +     ""kquote class=\""gmail_quote\"" style=\""margin: 0pt 0pt 0pt 0.8ex; bord"" +     ""er-left: 1px solid rgb(204, 204, 204); padding-left: 1ex;\""&gt; ""; final Pattern tagPattern = Pattern.compile(""&lt;([^\\s&gt;/]+).*?&gt;""); final Matcher matcher = tagPattern.matcher(html); final StringBuffer sb = new StringBuffer(html.length()); while(matcher.find()){     matcher         .appendReplacement(sb, matcher.group(1).equalsIgnoreCase(""br"")             ? matcher.group()             : "" ""); } matcher.appendTail(sb);  final String parsedText = sb.toString(); System.out.println(parsedText);"
"try {     FileInputStream fstream = new FileInputStream(""input.txt"");     BufferedReader br = new BufferedReader(new InputStreamReader(fstream));     String strLine;              int lineNumber = 0;     double [] a = null;     double [] b = null;     // Read File Line By Line     while ((strLine = br.readLine()) != null) {         lineNumber++;         if( lineNumber == 4 ){             a = getDoubleArray(strLine);         }else if( lineNumber == 5 ){             b = getDoubleArray(strLine);         }                    }     // Close the input stream     in.close();     //print the contents of a     for(int i = 0; i &lt; a.length; i++){         System.out.println(""a[""+i+""] = ""+a[i]);     }            } catch (Exception e) {// Catch exception if any     System.err.println(""Error: "" + e.getMessage()); }"
"BufferedImage img = &lt;your image&gt;     for( int i = 0; i &lt; img.getWidth( ); i++ )         for( int j = 0; j &lt; img.getHeight( ); j++ ) {             // get argb from pixel             int coli = img.getRGB( i, j );             int a = coli &gt;&gt; 24 &amp; 0xFF;             int r = coli &gt;&gt; 16 &amp; 0xFF;             int g = coli &gt;&gt; 8 &amp; 0xFF;             int b = coli &amp; 0xFF;             coli &amp;= ~0xFFFFFFFF;             // do what you want with a, r, g and b, in your case :             a = 0xFF;             // save argb             coli |= a &lt;&lt; 24;             coli |= r &lt;&lt; 16;             coli |= g &lt;&lt; 8;             coli |= b &lt;&lt; 0;             img.setRGB( i, j, coli );         }     }"
"HWPFDocumentCore wordDocument = WordToHtmlUtils.loadDoc(new FileInputStream(""D:\\temp\\seo\\1.doc""));      WordToHtmlConverter wordToHtmlConverter = new WordToHtmlConverter(             DocumentBuilderFactory.newInstance().newDocumentBuilder()                     .newDocument());     wordToHtmlConverter.processDocument(wordDocument);     Document htmlDocument = wordToHtmlConverter.getDocument();     ByteArrayOutputStream out = new ByteArrayOutputStream();     DOMSource domSource = new DOMSource(htmlDocument);     StreamResult streamResult = new StreamResult(out);      TransformerFactory tf = TransformerFactory.newInstance();     Transformer serializer = tf.newTransformer();     serializer.setOutputProperty(OutputKeys.ENCODING, ""UTF-8"");     serializer.setOutputProperty(OutputKeys.INDENT, ""yes"");     serializer.setOutputProperty(OutputKeys.METHOD, ""html"");     serializer.transform(domSource, streamResult);     out.close();      String result = new String(out.toByteArray());     System.out.println(result);"
"public static int mode(int[][] arr) {     List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();     for (int i = 0; i &lt; arr.length; i++) {         // tiny change 1: proper dimensions         for (int j = 0; j &lt; arr[i].length; j++) {              // tiny change 2: actually store the values             list.add(arr[i][j]);          }     }      // now you need to find a mode in the list.      // tiny change 3, if you definitely need an array     int[] vector = new int[list.size()];     for (int i = 0; i &lt; vector.length; i++) {         vector[i] = list.get(i);     } }"
"public void run()       {          String line;          try              {             while(true)                {                         line = input.readLine();                 if(""EXIT"".equals(line))                 {                     output.println(""Closing Connection  . . . Goodbye"");                     clients.remove(this);                     users.remove(name);                     break;                 }                 else if(name.equals(line))                 {                     output.println(""OK"");                 }                 else                 {                     // Seems to me just adding this else part will do the trick for point one.                     boradcast(name,line); // method  of outer class - send messages to all                 }             }// end of while          } // try          catch(Exception e)           {            System.out.println(e.getMessage());          }     }"
"public static void main(String[] args) throws InterruptedException {     String[] ganzeZeile = new String[27];     List&lt;String&gt; filter = new ArrayList&lt;String&gt;();      ganzeZeile[26] = ""Ich gebe der Dozentin/dem Dozenten die Gesamtnote."";     for (int i = 0; i &lt; 11; i++) {         filter.add("""");     }     filter.add(""dem Dozenten die Gesamtnote"");      System.out.println(ganzeZeile[26]);     System.out.println(filter.get(11));     System.out.println(ganzeZeile[26].contains(filter.get(11))); //prints true }"
"public void run() {         String line;         try {             while (true) {                 line = input.readLine();                 if (line.equals(""!end"")) {                      // Blah                 } else if(line.equals(""!getusers"")){                     getOnlineUsers();                     break;    &lt;&lt; This breaks your read loop                 }                 broadcast(name, line); // method  of outer class - send messages to all             } // end of while         } // try         catch (Exception ex) {             System.out.println(ex.getMessage());         }     } // end of run()"
"private void drawStringMiddleOfPanel(String string, Graphics g) {             String message2 = string;             int stringWidth = 0;             int stringAccent = 0;             int xCoordinate = 0;             int yCoordinate = 0;             // get the FontMetrics for the current font             FontMetrics fm = g.getFontMetrics();           /** display new message */             /** Centering the text */             // find the center location to display             stringWidth = fm.stringWidth(message2);             stringAccent = fm.getAscent();             // get the position of the leftmost character in the baseline             xCoordinate = getWidth() / 2 - stringWidth / 2;             yCoordinate = getHeight() / 2 + stringAccent / 2;              // draw String             g.drawString(message2, xCoordinate, yCoordinate);             currentMessage = message2;  // alternate message         }"
"FontFactory factory = FontFactory.getInstance(); Font[] fonts = factory.loadFonts( ... ); // pulls every TTF out of TTC ArrayList&lt;PDTrueTypeFont&gt; pdf_fonts = new ArrayList&lt;PDTrueTypeFont&gt;(); for( Font f : fonts ){    // sfntly writes each font to a TTF stream    ByteArrayOutputStream out = ByteArrayOutputStream();    factory.serializeFont(f, out);     // PDFBox reads the stream and embeds the font    ByteArrayInputStream ttf_font_stream = ByteArrayInputStream(out.toByteArray());    pdf_fonts.add(PDTrueTypeFont.loadTTF(document, ttf_font_stream)); }"
"public static void main(String[] args)  {     Scanner in = new Scanner(System.in);      int row = 0, col = 0;      System.out.println(""row:""); row = in.nextInt(); System.out.print(""column:""); col = in.nextInt();      for (int i = 0; i &lt; row; i++) {          for (int j = 0; j &lt; col; j++) {              System.out.print("" - "");         }         System.out.print(""\n"");              for (int j = 0; j &lt; col; j++) {              System.out.print(""| |"");         }         System.out.print(""\n"");              for (int j = 0; j &lt; col; j++) {              System.out.print("" - "");         }         System.out.print(""\n"");          } }"
"private void unzipImage(String zipFile, String extractFolder) {              try {                 CreateDir();                 int BUFFER = 4096;                 File file = new File(zipFile);                  ZipFile zip = new ZipFile(file);                 String newPath = extractFolder;                  new File(newPath).mkdir();                 Enumeration zipFileEntries = zip.entries();                  // Process each entry                 while (zipFileEntries.hasMoreElements()) {                     // grab a zip file entry                      ZipEntry entry = (ZipEntry) zipFileEntries.nextElement();                     String currentEntry = entry.getName();                      currentEntry = currentEntry.replace('\\', '/');                     File destFile = new File(newPath, currentEntry);                     // destFile = new File(newPath, destFile.getName());                     File destinationParent = destFile.getParentFile();                      // create the parent directory structure if needed                     destinationParent.mkdirs();                      if (!entry.isDirectory()) {                         BufferedInputStream is = new BufferedInputStream(                                 zip.getInputStream(entry));                         int currentByte;                         // establish buffer for writing file                         byte data[] = new byte[BUFFER];                          // write the current file to disk                         FileOutputStream fos = new FileOutputStream(destFile);                         BufferedOutputStream dest = new BufferedOutputStream(fos,                                 BUFFER);                          // read and write until last byte is encountered                         while ((currentByte = is.read(data, 0, BUFFER)) != -1) {                             dest.write(data, 0, currentByte);                         }                         dest.flush();                         dest.close();                         is.close();                     }                     zip.close();                 }             } catch (Exception e) {                 Log.e(""ERROR: "", """" + e.getMessage());             }          }"
"PngReader pngr = new PngReader(origFile); PngWriter pngw = new PngWriter(destFile, pngr.imgInfo, true); // instruct the writer to copy all ancillary chunks from source pngw.copyChunksFrom(pngr.getChunksList(), ChunkCopyBehaviour.COPY_ALL); // add a new textual chunk (can also be done after writing the rows) pngw.getMetadata().setText(""my key"", ""my val""); // copy all rows for (int row = 0; row &lt; pngr.imgInfo.rows; row++) {   IImageLine l1 = pngr.readRow();   pngw.writeRow(l1); } pngr.end();  pngw.end();"
"Scanner s = new Scanner(new File(""text""));     Pattern p = Pattern.compile(""^(\\d+) (\\d+) (\\d+)$"", Pattern.MULTILINE);     while(s.hasNextLine()){         if(s.findInLine(p)!=null){                             //just printing the result. you can do needful here.             MatchResult result = s.match();             System.out.println(""full line:"" + result.group(0));             System.out.println(""individuals"");             for (int i=1; i&lt;=result.groupCount(); i++)                  System.out.println(result.group(i));          }          s.nextLine();     }"
"public static void main(String[] args) {     String phrase = ""From the torrent, or the fountain, From the red cliff of the mountain"";     //or whatever method of getting the individual words you want.     //I just chose StringTokenizer (obviously)     StringTokenizer st = new StringTokenizer(phrase, "" ,"");     TreeSet&lt;String&gt; ts = new TreeSet&lt;&gt;(new Comparator&lt;String&gt;() {          @Override         public int compare(String s1, String s2) {             int retVal = Integer.compare(s1.length(), s2.length());             if(retVal == 0){                 retVal = s1.compareTo(s2);             }             return retVal;         }     });     while(st.hasMoreTokens()){         ts.add(st.nextToken());     }     for(String s : ts.descendingSet()){         System.out.println(s + "" "" + s.length());     } }"
"private int getIntFromPixel(int[] pixel)  {     int r = pixel[0];     int g = pixel[1];     int b = pixel[2];      return (r &lt;&lt; 16) | (g &lt;&lt; 8) | b; }  // Returns the sub array with upper-left corner at [start_i][start_j] with // width sub_w and height sub_h. public int[][] getSubArray(int[][][] pixelArray, int start_i, int start_j                                , int sub_w, int sub_h) {            int[][] subArray = new int[sub_w][sub_h];      for (int i = 0; i &lt; sub_w; i++) {         for (int j = 0; j &lt; sub_h ; j++) {             subArray[i][j] = getIntFromPixel(pixelArray[start_i + i][start_j + j]);         }     }      return subArray; }"
"PrintWriter writer = new PrintWriter(new BufferedOutputStream(new FileOutputStream(""data.xml"")));  while(rs.next()){     i++;     writer.print(""\n\t&lt;row&gt;"");     writer.print(""\n\t\t&lt;ID&gt;"" + Util.transformToHTML(rs.getInt(""id"")) + ""&lt;/ID&gt;"");     writer.print(""\n\t\t&lt;JED_ID&gt;"" + Util.transformToHTML(rs.getInt(""jed_id"")) + ""&lt;/JED_ID&gt;"");     writer.print(""\n\t\t&lt;IME_PJ&gt;"" + Util.transformToHTML(rs.getString(""ime_pj"")) + ""&lt;/IME_PJ&gt;"");     //...      writer.print(""\n\t&lt;/row&gt;""); }  writer.close();"
"String filePath = &quot;image.pgm&quot;; fileInputStream = new FileInputStream(filePath); Scanner scan = new Scanner(fileInputStream); // Discard the magic number scan.nextLine(); // Discard the comment line scan.nextLine(); // Read pic width, height and max value int picWidth = scan.nextInt(); int picHeight = scan.nextInt(); int maxvalue = scan.nextInt();  fileInputStream.close();               // Now parse the file as binary data  fileInputStream = new FileInputStream(filePath);  DataInputStream dis = new DataInputStream(fileInputStream);    // look for 4 lines (i.e.: the header) and discard them  int numnewlines = 4;  while (numnewlines &gt; 0) {      char c;      do {          c = (char)(dis.readUnsignedByte());      } while (c != '\n');      numnewlines--;  }   // read the image data  int[][] data2D = new int[picHeight][picWidth];  for (int row = 0; row &lt; picHeight; row++) {      for (int col = 0; col &lt; picWidth; col++) {          data2D[row][col] = dis.readUnsignedByte();          System.out.print(data2D[row][col] + &quot; &quot;);      }      System.out.println();  }"
"String hex = ""75546f7272656e745c436f6d706c657465645c6e667375635f6f73745f62795f6d757374616e675c50656e64756c756d2d392c303030204d696c65732e6d7033006d7033006d7033004472756d202620426173730050656e64756c756d00496e2053696c69636f00496e2053696c69636f2a3b2a0050656e64756c756d0050656e64756c756d496e2053696c69636f303038004472756d2026204261737350656e64756c756d496e2053696c69636f30303800392c303030204d696c6573203c4d757374616e673e50656e64756c756d496e2053696c69636f3030380050656e64756c756d50656e64756c756d496e2053696c69636f303038004d50330000""; StringBuilder output = new StringBuilder(); for (int i = 0; i &lt; hex.length(); i+=2) {     String str = hex.substring(i, i+2);     output.append((char)Integer.parseInt(str, 16)); } System.out.println(output);"
"Process lsProcess = Runtime.getRuntime().exec(""ls""); BufferedReader lsOutput = new BufferedReader(new InputStreamReader(lsProcess.getInputStream())); Process grepProcess = Runtime.getRuntime().exec(""grep build.xml""); BufferedWriter grepInput = new BufferedWriter(new OutputStreamWriter(grepProcess.getOutputStream()));  String line; // read each line from ls until there are no more while ((line = lsOutput.readLine()) != null) {     // and send them to grep     grepInput.write(line);     grepInput.newLine(); }  // send end-of-file signal to grep so it will terminate itself grepInput.close();"
"g.setColor(Color.RED);         int scrollBottom = scroll.getInsets().bottom;         int lowerBorderTop = height - scrollBottom;         g.drawLine(x, height - scrollBottom - 1, width - 10,  height - scrollBottom - 1);         g.drawRect(x + 1,  height - scrollBottom, width - 10, 10);         Color oldColor = null;         Component cellRendererComponent = null;         int columnWidths = x ;//- scroll.getViewport().getViewRect().x;         for (int column = 0; column &lt; table.getColumnCount(); column++)         {             TableCellRenderer cellRenderer = table.getCellRenderer(0, column);             cellRendererComponent = cellRenderer.getTableCellRendererComponent(table,                      getFooterValueAt(column), false, false, 0, column);             if (oldColor == null)             {                 oldColor = cellRendererComponent.getBackground();             }             int columnWidth = table.getColumnModel().getColumn(column).getWidth();             cellRendererComponent.setForeground(Color.BLACK);             cellRendererComponent.setBackground(COLORS[column % COLORS.length]);             cellRendererPane.paintComponent(g, cellRendererComponent, scroll, columnWidths,                    lowerBorderTop , columnWidth, table.getRowHeight(), false);             columnWidths += columnWidth;         }         if (cellRendererComponent != null)         {             cellRendererComponent.setBackground(oldColor);         }"
"public JMenuItem createMenuItemWithListener(String text,                                              char mnemonic,                                              ActionListener action) {     JMenuItem result = new JMenuItem(text);     result.setMnemonic(mnemonic);     result.addActionListener(action);     return result; }  public JMenuItem createMenuItemWithAction(char mnemonic,                                            Action action) {     JMenuItem result = new JMenuItem(action);     result.setMnemonic(mnemonic);     return result; }"
"JTextPane textPane = new JTextPane();     JButton button = new JButton(""Button"");          button.setAlignmentY(0.85f);      HTMLEditorKit kit = new HTMLEditorKit();     HTMLDocument doc = new HTMLDocument();     textPane.setEditorKit(kit);     textPane.setDocument(doc);      try {         kit.insertHTML(doc, doc.getLength(), ""&lt;p color='#FF0000'&gt;Cool!"", 0, 0, HTML.Tag.P);         kit.insertHTML(doc, doc.getLength(), ""&lt;p&gt;&lt;/p&gt;"", 0, 0, null);     } catch (BadLocationException ex) {     } catch (IOException ex) {     }"
"public static String formatString(String text){      StringBuilder json = new StringBuilder();     String indentString = """";      for (int i = 0; i &lt; text.length(); i++) {         char letter = text.charAt(i);         switch (letter) {             case '{':             case '[':                 json.append(""\n"" + indentString + letter + ""\n"");                 indentString = indentString + ""\t"";                 json.append(indentString);                 break;             case '}':             case ']':                 indentString = indentString.replaceFirst(""\t"", """");                 json.append(""\n"" + indentString + letter);                 break;             case ',':                 json.append(letter + ""\n"" + indentString);                 break;              default:                 json.append(letter);                 break;         }     }      return json.toString(); }"
"Intent intent = new Intent(); intent.setAction(Intent.ACTION_SEND_MULTIPLE); intent.putExtra(Intent.EXTRA_SUBJECT, ""Here are some files.""); intent.setType(""image/jpeg""); /* This example is sharing jpeg images. */  ArrayList&lt;Uri&gt; files = new ArrayList&lt;Uri&gt;();  for(String path : filesToSend /* List of the files you want to send */) {     File file = new File(path);     Uri uri = Uri.fromFile(file);     files.add(uri); }  intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, files); startActivity(intent);"
"File file = new File(""C:\\Users\\Aaron\\Documents\\MinecraftForge\\forge\\mcp"");     for(File s : file.listFiles())     {         if(s.getName().equals(""recompile.bat""))         {             DefaultExecutor executor = new DefaultExecutor();             executor.setWorkingDirectory(file);             CommandLine commandLine = new CommandLine(s.getAbsolutePath());              try          {             executor.execute(commandLine);         } catch (ExecuteException e)         {             e.printStackTrace();         } catch (IOException e)         {             e.printStackTrace();         }     } }"
"String str = ""{"" +              ""    \""gb\"": ["" +              ""        {"" +              ""            \""omrid\"": \""gis-n\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-s\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-c\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-h\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-g\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""hes\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 2"" +              ""        }"" +              ""    ]"" +              ""}"";      JSONObject jsonObject = new JSONObject(str);      JSONArray gb = jsonObject.getJSONArray(""gb"");      for (int j = 0; j &lt; gb.length(); j++) {         JSONObject element = gb.getJSONObject(j);          int status = element.getInt(""status"");         int grupp = element.getInt(""grupp"");         String omrid = element.getString(""omrid"");          System.out.println(""status="" + status + ""; grupp="" + grupp + ""; omrid="" + omrid);  //create togglebutton here     }"
