code
"public final class Thing implements Serializable {   private static final long serialVersionUID = 1L;   private static final Thing[] INSTANCES = new Thing[2];   private static int NEXT_ORDINAL = 0;    public static final Thing INSTANCE0 = new Thing(       ""whatever0"");   public static final Thing INSTANCE1 = new Thing(       ""whatever1"");    private transient final String someState;    public String someMethod() {     return someState;   }    private final int ordinal;    private Thing(String someState) {     this.someState = someState;     ordinal = NEXT_ORDINAL++;     INSTANCES[ordinal] = this;   }    private Object writeReplace() {     return new ThingProxy(this);   }    private void readObject(ObjectInputStream stream)       throws InvalidObjectException {     throw new InvalidObjectException(""Proxy required"");   }    private static class ThingProxy implements Serializable {     private static final long serialVersionUID = 1L;     private final int ordinal;      private ThingProxy(Thing t) {       ordinal = t.ordinal;     }      private Object readResolve()         throws ObjectStreamException {       return INSTANCES[ordinal];     }    }  }"
"public class DataBaseHelper extends SQLiteOpenHelper{ private Context mycontext;  private String DB_PATH = ""/data/data/gr.peos/databases/""; //private String DB_PATH = mycontext.getApplicationContext().getPackageName()+""/databases/""; private static String DB_NAME = ""BLib.sqlite"";//the extension may be .sqlite or .db public SQLiteDatabase myDataBase; /*private String DB_PATH = ""/data/data/""                             + mycontext.getApplicationContext().getPackageName()                             + ""/databases/"";*/  public DataBaseHelper(Context context) throws IOException  {     super(context,DB_NAME,null,1);     this.mycontext=context;     boolean dbexist = checkdatabase();     if(dbexist)     {         //System.out.println(""Database exists"");         opendatabase();      }     else     {         System.out.println(""Database doesn't exist"");     createdatabase();     }  }  public void createdatabase() throws IOException{     boolean dbexist = checkdatabase();     if(dbexist)     {         //System.out.println("" Database exists."");     }     else{         this.getReadableDatabase();     try{             copydatabase();         }         catch(IOException e){             throw new Error(""Error copying database"");         }     } } private boolean checkdatabase() {     //SQLiteDatabase checkdb = null;     boolean checkdb = false;     try{         String myPath = DB_PATH + DB_NAME;         File dbfile = new File(myPath);         //checkdb = SQLiteDatabase.openDatabase(myPath,null,SQLiteDatabase.OPEN_READWRITE);         checkdb = dbfile.exists();     }     catch(SQLiteException e){         System.out.println(""Database doesn't exist"");     }      return checkdb; } private void copydatabase() throws IOException {      //Open your local db as the input stream     InputStream myinput = mycontext.getAssets().open(DB_NAME);      // Path to the just created empty db     String outfilename = DB_PATH + DB_NAME;      //Open the empty db as the output stream     OutputStream myoutput = new FileOutputStream(""/data/data/gr.peos/databases/BLib.sqlite"");      // transfer byte to inputfile to outputfile     byte[] buffer = new byte[1024];     int length;     while ((length = myinput.read(buffer))&gt;0)     {         myoutput.write(buffer,0,length);     }      //Close the streams     myoutput.flush();     myoutput.close();     myinput.close();  }  public void opendatabase() throws SQLException {     //Open the database     String mypath = DB_PATH + DB_NAME;     myDataBase = SQLiteDatabase.openDatabase(mypath, null, SQLiteDatabase.OPEN_READWRITE);  }    public synchronized void close(){     if(myDataBase != null){         myDataBase.close();     }     super.close(); }"
"public class BusinessEntity implements Serializable {     //for simplicity, here just the important part     private String s;      @ManyToOne(fetch= FetchType.LAZY )     private ImportantEntity anotherEntity;      private String anotherEntityName;      @Override     public boolean equals( Object obj )     {         if(BusinessEntity.class.isAssignableFrom(obj.getClasS())){            BusinessEntity other =  (BusinessEntity)obj;          return other.anotherEntityName.                 equals(this.anotherEntityName) &amp;&amp;                  other.s.equals(this.s);          }        return true;     }     public void setAnotherEntity(ImportantEntity ie){         anotherEntityName= ie.getName();         anotherEntity = ie;     } }"
"static abstract class Item&lt;I extends Item&lt;I, T&gt;, T extends ItemTemplate&lt;I, T&gt;&gt; {     T template; } static abstract class ItemTemplate&lt;I extends Item&lt;I, T&gt;, T extends ItemTemplate&lt;I, T&gt;&gt; {     abstract I createItem(); }  // JPA Domain Objects: static class Armor extends Item&lt;Armor, ArmorTemplate&gt; {} static class ArmorTemplate extends ItemTemplate&lt;Armor, ArmorTemplate&gt; {     public final int hitpoints;      public ArmorTemplate(int hitpoints) {         this.hitpoints = hitpoints;     }      @Override     Armor createItem() {         return new Armor();     } }  // This POJO can be CDI managed static class ItemDao {     // @Inject public EntityManager em;      public &lt;I extends Item&lt;I, T&gt;, T extends ItemTemplate&lt;I, T&gt;&gt;      List&lt;I&gt; createItemsFromTemplates(List&lt;T&gt; templates) {         List&lt;I&gt; result = new ArrayList&lt;I&gt;();         for (T template : templates) {             I item = template.createItem();             item.template = template;             // em.persist(item);             result.add(item);         }         return result;     } }  public static void main(String[] args) {     List&lt;ArmorTemplate&gt; armorTemplates = Arrays.asList(             new ArmorTemplate(100), new ArmorTemplate(80));      List&lt;Armor&gt; armorItems = new ItemDao().createItemsFromTemplates(armorTemplates);      for (Armor armor : armorItems) {         System.out.println(armor.template.hitpoints);     } }"
"xpath.setNamespaceContext(new NamespaceContext()     {         @Override         public String getNamespaceURI(final String prefix)         {             if(prefix.equals(""wadl""))                 return ""http://research.sun.com/wadl/2006/10"";             else                 return null;         }          @Override         public String getPrefix(final String namespaceURI)         {             throw new UnsupportedOperationException();         }          @Override         public Iterator getPrefixes(final String namespaceURI)         {             throw new UnsupportedOperationException();         }     });     XPathExpression expression = xpath.compile(""/wadl:application/wadl:resources/wadl:resource/@path"");"
"File f = new File ( ""world.shp"" );     ShapefileDataStore dataStore = new ShapefileDataStore ( f.toURI ().toURL () );     FeatureSource&lt;SimpleFeatureType, SimpleFeature&gt; featureSource =          dataStore.getFeatureSource ();     String geomAttrName = featureSource.getSchema ()         .getGeometryDescriptor ().getLocalName ();      ResourceInfo resourceInfo = featureSource.getInfo ();     CoordinateReferenceSystem crs = resourceInfo.getCRS ();     Hints hints = GeoTools.getDefaultHints ();     hints.put ( Hints.JTS_SRID, 4326 );     hints.put ( Hints.CRS, crs );      FilterFactory2 ff = CommonFactoryFinder.getFilterFactory2 ( hints );     GeometryFactory gf = JTSFactoryFinder.getGeometryFactory ( hints );      Coordinate land = new Coordinate ( -122.0087, 47.54650 );     Point pointLand = gf.createPoint ( land );     Coordinate water = new Coordinate ( 0, 0 );     Point pointWater = gf.createPoint ( water );      Intersects filter = ff.intersects ( ff.property ( geomAttrName ),          ff.literal ( pointLand ) );     FeatureCollection&lt;SimpleFeatureType, SimpleFeature&gt; features = featureSource             .getFeatures ( filter );      filter = ff.intersects ( ff.property ( geomAttrName ),          ff.literal ( pointWater ) );     features = featureSource.getFeatures ( filter );"
"public virtual ICriteria BuildCriteria(ICriteria criteria) {     foreach (SheCriterion criterion in this.SheCriterions)     {         criteria.Add(criterion.BuildCriterion());     }      return criteria; }  public virtual ICriterion BuildCriterion() {     if (OperatorKey == ""OR"")     {         return new Disjunction()             .Add(Left.BuildCriterion())             .Add(right.BuildCriterion());     }     else     {         return new Conjunction()             .Add(Left.BuildCriterion())             .Add(right.BuildCriterion());     } }"
for(int i = 0; i&lt;usednum.length; i++) {            while(usednum[i]==0) {               randNum = rand.nextInt(numbers.length-min+1)+min;               for(int f = 0; f&lt;usednum.length; f++) {                  if(usednum[f] == randNum) {                     break;                  } //if                                                                                                                                                          else if (usednum[f] == 0) {                     usednum[i] = randNum;                  }               }            }         }
"fbo = GL30.glGenFramebuffers(); GL30.glBindFramebuffer(GL30.GL_FRAMEBUFFER, fbo);  rbo = GL30.glGenRenderbuffers(); GL30.glBindRenderbuffer(GL30.GL_RENDERBUFFER, rbo); GL30.glRenderbufferStorage(GL30.GL_RENDERBUFFER, GL11.GL_RGBA8, 640, 480); GL30.glFramebufferRenderbuffer(GL30.GL_FRAMEBUFFER, GL30.GL_COLOR_ATTACHMENT0, GL30.GL_RENDERBUFFER, rbo);  assert(GL30.glCheckFramebufferStatus(GL30.GL_FRAMEBUFFER) == GL30.GL_FRAMEBUFFER_COMPLETE);  GL30.glBindFramebuffer(GL30.GL_DRAW_FRAMEBUFFER, fbo); GL20.glDrawBuffers(GL30.GL_COLOR_ATTACHMENT0); GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);  drawScene(); //draw here"
rr:       00000000 00000000 00000000 10101010 rr&lt;&lt;16:   00000000 10101010 00000000 00000000  gg:       00000000 00000000 00000000 11110000 gg&lt;&lt;8:    00000000 00000000 11110000 00000000  bb:       00000000 00000000 00000000 00001111  value = rr &lt;&lt; 16 | gg &lt;&lt; 8 | bb   rr&lt;&lt;16:   00000000 10101010 00000000 00000000 gg&lt;&lt;8:    00000000 00000000 11110000 00000000 bb:       00000000 00000000 00000000 00001111  value:    00000000 10101010 11110000 00001111                       ^        ^        ^                       rr       gg       bb
"package com.mycompany;  import com.sun.jersey.api.model.AbstractMethod; import com.sun.jersey.api.model.AbstractResource; import com.sun.jersey.api.model.AbstractResourceMethod; import com.sun.jersey.api.model.Parameter; import com.sun.jersey.server.wadl.WadlGenerator; import com.sun.research.ws.wadl.Application; import com.sun.research.ws.wadl.Method; import com.sun.research.ws.wadl.ObjectFactory; import com.sun.research.ws.wadl.Option; import com.sun.research.ws.wadl.Param; import com.sun.research.ws.wadl.RepresentationType; import com.sun.research.ws.wadl.Request; import com.sun.research.ws.wadl.Resource; import com.sun.research.ws.wadl.Resources; import com.sun.research.ws.wadl.Response;  import javax.ws.rs.core.MediaType;  public class OptionsWadlGenerator implements WadlGenerator {      private WadlGenerator _delegate;      private ObjectFactory objectFactory = new ObjectFactory();      @Override     public Param createParam(AbstractResource r, AbstractMethod m, Parameter p) {         Param param = _delegate.createParam(r, m, p);         if(((Parameter)p).getParameterClass().isEnum()){             Object[] values = p.getParameterClass().getEnumConstants();             for(Object enumItem:values){                 Option option = objectFactory.createOption();                 option.setValue(((Enum)enumItem).name());                 param.getOption().add(option);             }         }         return param;     }      @Override     public void setWadlGeneratorDelegate(WadlGenerator delegate) {         this._delegate = delegate;     }      @Override     public Application createApplication() {         return _delegate.createApplication();     }      ... all other methods also simply call the _delegate equivalent method     }"
"import java.text.NumberFormat; import java.util.Comparator; import java.util.Currency; import java.util.Locale; import java.util.SortedMap; import java.util.TreeMap;  public class CurrencyExample {     public static void main(String[] args)      {          Utils.getCurrencySymbol( Currency.getInstance(Locale.US).getCurrencyCode());          Utils.getCurrencySymbol(Currency.getInstance(Locale.JAPAN).getCurrencyCode());          Utils.getCurrencySymbol(Currency.getInstance(Locale.UK).getCurrencyCode());          Utils.getCurrencySymbol(""INR"");     } }  class Utils{       public static SortedMap&lt;Currency, Locale&gt; currencyLocaleMap;       static {           currencyLocaleMap = new TreeMap&lt;Currency, Locale&gt;(new Comparator&lt;Currency&gt;() {             public int compare(Currency c1, Currency c2){                 return c1.getCurrencyCode().compareTo(c2.getCurrencyCode());             }         });         for (Locale locale : Locale.getAvailableLocales()) {              try {                  Currency currency = Currency.getInstance(locale);              currencyLocaleMap.put(currency, locale);              }catch (Exception e){          }         }     }      public static String getCurrencySymbol(String currencyCode) {         Currency currency = Currency.getInstance(currencyCode);         System.out.println( currencyCode+ "":-"" + currency.getSymbol(currencyLocaleMap.get(currency)));         return currency.getSymbol(currencyLocaleMap.get(currency));     } }"
"Resource childResource = resourceResolver.getResource(child.getPath()); Node childNode = childResource.adaptTo(Node.class); Node jcrContent = childNode.getNode(""jcr:content""); NodeIterator childrenNodes = jcrContent.getNodes();  while(childrenNodes.hasNext()){     Node next = childrenNodes.nextNode();     String resourceType = next.getProperty(""sling:resourceType"").getString();     if(resourceType.equals(""foundation/components/parsys"")){         %&gt;&lt;cq:include path=""&lt;%= next.getPath() %&gt;"" resourceType=""foundation/components/parsys"" /&gt;&lt;%         break;     } }"
"public String getNeighborhoodId(Coordinates c){     GeometryFactory geometryFactory = new GeometryFactory();     String utm = converter.latLon2UTM(c.getLat(), c.getLng());     Coordinate coords = new Coordinate(Double.valueOf(utm.split("" "")[2]),Double.valueOf(utm.split("" "")[3]));     Geometry point = geometryFactory.createPoint(coords);     for(Feature f : neighborhoods){         MultiPolygon m = (MultiPolygon) f.getProperty(""geometry"").getValue();         if(m.contains(point)){             return f.getProperty(""neighborhoodId"").getValue().toString();         }     }     return """"; }"
Iterator&lt;ArrayList&lt;Integer&gt;&gt; outer = chains.iterator (); while (outer.hasNext ()) {     ArrayList&lt;Integer&gt; outerChain = outer.next();     Iterator&lt;ArrayList&lt;Integer&gt;&gt; inner = chains.iterator ();     while (inner.hasNext ()) {         ArrayList&lt;Integer&gt; innerChain = inner.next();         if (outerChain.get(0).equals(innerChain.get(innerChain.size() - 1))) {             outerChain.remove(0);             innerChain.addAll(outerChain);             outer.remove();             break;         }     } }
"for (Task tempTask : TasksListAppObj.getInstance().tasksRepository.getTasksRepository())                 {                     LatLng latlng = new LatLng(tempTask.getLatitude(), tempTask.getLongtitude());                     if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_WAITING))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_blue)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_IN_PROGRESS))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_bordo)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_ON_THE_WAY))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_turkiz)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_COMPLETE))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_orange)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_FAILED))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_purpul)));                     } }"
"for(int ptCnt=0; ptCnt &lt; productTypeNL.getLength(); ptCnt++) {     Node productTypeNode = productTypeNL.item(ptCnt);     if(productTypeNode.hasChildNodes()){         NodeList childProductTypeNL = productTypeNode.getChildNodes();         System.out.print(""Product Types are: "");         for (int cptCnt=0; cptCnt &lt; childProductTypeNL.getLength(); cptCnt++) {             productTypeBean = new ProductType();             productTypeBean.setmProductType (                             childProductTypeNL.item(cptCnt).getTextContent());             System.out.print(productTypeBean.getmProductType() + "", "");             ProductTypeAL.add(productTypeBean);         }     }     productBean.setmProductTypes(ProductTypeAL); }"
"Name name = template.getName(""personal_business_name"");         AreaReference aref = new AreaReference(name.getRefersToFormula());         CellReference ref = aref.getFirstCell();         Row r = sheet.getRow(ref.getRow());         Cell c;         if (r != null) {         c = r.getCell(ref.getCol());         c.setCellValue(buyers.get(transactions.get(transactionNo-1).getBuyerId()-1).getSurname_organization() + "", "" + buyers.get(transactions.get(transactionNo-1).getBuyerId()-1).getFirstname());         }"
"boolean addHeaderElements = true; if (Util.getPortalRequestContext() != null &amp;&amp; Util.getPortalRequestContext().getExtraMarkupHeaders() != null) {     for (Element markupHeaderElement : Util.getPortalRequestContext().getExtraMarkupHeaders())     {         if (markupHeaderElement.getTagName().equalsIgnoreCase(""meta"") &amp;&amp;             markupHeaderElement.getAttribute(""name"") != null &amp;&amp;             markupHeaderElement.getAttribute(""name"").equalsIgnoreCase(""project-name""))         {             addHeaderElements = false;             break;         }     } }"
"class DottedCells implements PdfPTableEvent {     @Override     public void tableLayout(PdfPTable table, float[][] widths,         float[] heights, int headerRows, int rowStart,         PdfContentByte[] canvases) {         PdfContentByte canvas = canvases[PdfPTable.LINECANVAS];         canvas.setLineDash(3f, 3f);         float llx = widths[0][0];         float urx = widths[0][widths[0].length -1];         for (int i = 0; i &lt; heights.length; i++) {             canvas.moveTo(llx, heights[i]);             canvas.lineTo(urx, heights[i]);         }         for (int i = 0; i &lt; widths.length; i++) {             for (int j = 0; j &lt; widths[i].length; j++) {                 canvas.moveTo(widths[i][j], heights[i]);                 canvas.lineTo(widths[i][j], heights[i+1]);             }         }         canvas.stroke();     } }"
"if(i == 0) ... //if i = 0 this will work and skip the following else-if statements else if(i == 1) ...//if i not equal to 0 and if i = 1 this will work and skip the following else-if statement else if(i == 2) ...// if i not equal to 0 or 1 and if i = 2 the statement will execute   if(i == 0) ...//if i = 0 this will work and check the following conditions also if(i == 1) ...//regardless of the i == 0 check, this if condition is checked if(i == 2) ...//regardless of the i == 0 and i == 1 check, this if condition is checked"
"DrawPageElement drawPageElement = slide.getOdfElement(); DrawFrameElement drawFrame = OdfElement.findFirstChildNode(DrawFrameElement.class, drawPageElement); DrawImageElement image = drawFrame.newDrawImageElement(); OdfPackage mOdfPackage = odp.getPackage(); String imageRef = ""/some/path/to/chart.png"";  String packagePath = odp.getDocumentPath() + OdfPackage.OdfFile.IMAGE_DIRECTORY.getPath() + ""/"" + someMethodToCreateRandomString();  mOdfPackage.insert(new URI(imageRef), packagePath, OdfFileEntry.getMediaTypeString(imageRef)); packagePath = packagePath.replaceFirst(odp.getDocumentPath(), """"); URI uri = new URI(AnyURI.encodePath(packagePath).toString()); image.setXlinkHrefAttribute(AnyURI.decodePath(uri.toString())); image.setXlinkActuateAttribute(""onLoad""); image.setXlinkShowAttribute(""embed""); image.setXlinkTypeAttribute(""simple"");"
"int[][] map = {     {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  };"
"package forum10972195;  public class EnumBean {      int ordinal;     String name;      public EnumBean() {      }      public EnumBean(int ordinal, String name) {         this.ordinal = ordinal;         this.name = name;     }      public int getOrdinal() {         return ordinal;     }      public void setOrdinal(int ordinal) {         this.ordinal = ordinal;     }      public String getName() {         return name;     }      public void setName(String name) {         this.name = name;     } }"
"package forum11417620;  import javax.xml.bind.annotation.*; import org.eclipse.persistence.oxm.annotations.XmlPath;  @XmlRootElement(name=""Person"") @XmlAccessorType(XmlAccessType.FIELD) public class Person {      @XmlElement(name=""FirstName"")     private String firstName;      @XmlElement(name=""LastName"")     private String lastName;      @XmlElement(name=""Occupation"")     private String occupation;      @XmlPath(""Gender/@tc"")     private String genderTC;      @XmlPath(""Gender/text()"")     private String gender;      @XmlElement(name=""BirthDate"")     private String birthDate;      @XmlElement(name=""Age"")     private int age;  }"
"public static List&lt;Product&gt; getCartList() {      JSONObject responseDetailsJson = new JSONObject();     JSONArray jsonArray = new JSONArray();      List&lt;Product&gt; cartList = new Vector&lt;Product&gt;(cartMap.keySet().size());     for(Product p : cartMap.keySet()) {         cartList.add(p);         JSONObject formDetailsJson = new JSONObject();         formDetailsJson.put(""id"", ""1"");         formDetailsJson.put(""name"", ""name1"");        jsonArray.add(formDetailsJson);     }     responseDetailsJson.put(""forms"", jsonArray);//Here you can see the data in json format      return cartList;  }"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"public static void main(String[] args) throws IOException {      int i, j;      for (i = 1; i &lt; 6; ++i) {         for (j = 1; j &lt; i + 1; ++j) {             System.out.print(i);         }     }      System.out.println();      for (i = 1; i &lt; 6; i++) {         if (i % 2 == 1) {             for (j = 1; j &lt; i + 1; ++j){             System.out.print(""+"");             }         } else {             for (j = 1; j &lt; i + 1; ++j){                 System.out.print(""*"");             }         }     }      System.out.println();      for (i = 2; i &lt; 8; i++) {         if (i % 3 == 1) {             for (j = 1; j &lt;= i; ++j){                 System.out.print(""+"");             }         } else if (i % 3 == 2) {             for (j = 1; j &lt;= i; ++j){                 System.out.print(""-"");             }         } else {             for (j = 1; j &lt;= i; ++j){                 System.out.print(""*"");             }         }     } }"
"this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     this.setPreferredSize(new Dimension(1080, 720));      this.setLayout(new GridBagLayout());     GridBagConstraints constraints;      JLabel a = new JLabel();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 0;     constraints.gridy = 0;     constraints.weightx=0.25;     constraints.insets = new Insets(4,4,4,4);     this.add(a,constraints);      JLabel b = new JLabel();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 1;     constraints.gridy = 0;     constraints.weightx=0.25;     this.add(b,constraints);      JLabel c = new JLabel();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 2;     constraints.gridy = 0;     constraints.weightx=0.5;     constraints.insets = new Insets(4,4,4,4);     this.add(c,constraints);      JLabel d = new JLabel();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 3;     constraints.gridy = 0;     constraints.weightx=0;     this.add(d,constraints);      JLabel p1 = new JLabel(""Project - 1"");     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 0;     constraints.gridy = 0;     constraints.gridwidth=2;     constraints.insets = new Insets(4,4,4,4);     this.add(p1,constraints);      JLabel p2 = new JLabel(""Project - 2"");     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 2;     constraints.gridy = 0;     constraints.gridwidth=2;     constraints.insets = new Insets(4,4,4,4);     this.add(p2,constraints);       JScrollPane projectScrollPane = new JScrollPane();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 0;     constraints.gridy = 1;     constraints.gridwidth = 2;     constraints.weighty=1;     constraints.insets = new Insets(4,4,4,4);     this.add(projectScrollPane,constraints);      JScrollPane fieldScrollPane = new JScrollPane();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 2;     constraints.gridy = 1;     constraints.gridwidth = 2;     constraints.insets = new Insets(4,4,4,4);     fieldScrollPane.setPreferredSize(new Dimension(540, 240));     this.add(fieldScrollPane,constraints);      JTextField searchTextField = new JTextField();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.HORIZONTAL;     constraints.gridx = 0;     constraints.gridy = 2;     constraints.gridwidth = 3;     constraints.insets = new Insets(4,4,4,4);     searchTextField.setPreferredSize(new Dimension(1000,30));     this.add(searchTextField,constraints);     JButton searchButton = new JButton(""Search"");     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.NONE;     constraints.anchor = GridBagConstraints.LINE_END;     constraints.gridx = 3;     constraints.gridy = 2;     constraints.insets = new Insets(4,4,4,4);     searchButton.setSize(new Dimension(80,30));     this.add(searchButton,constraints);      JScrollPane imageScrollPane = new JScrollPane();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 0;     constraints.gridy = 3;     constraints.insets = new Insets(4,4,4,4);     constraints.weighty=1;     this.add(imageScrollPane,constraints);      JScrollPane imagePane = new JScrollPane();     constraints = new GridBagConstraints();     constraints.fill = GridBagConstraints.BOTH;     constraints.gridx = 1;     constraints.gridy = 3;     constraints.gridwidth = 3;     constraints.weighty=1;     constraints.insets = new Insets(4,4,4,4);     this.add(imagePane,constraints);      this.pack();"
"package com.example.mongo;  import com.mongodb.BasicDBObject; import com.mongodb.MongoClient; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import de.flapdoodle.embed.mongo.MongodExecutable; import de.flapdoodle.embed.mongo.MongodProcess; import de.flapdoodle.embed.mongo.MongodStarter; import de.flapdoodle.embed.mongo.config.IMongodConfig; import de.flapdoodle.embed.mongo.config.MongodConfigBuilder; import de.flapdoodle.embed.mongo.config.Net; import de.flapdoodle.embed.mongo.distribution.Version; import de.flapdoodle.embed.process.runtime.Network; import java.util.Date; import org.junit.After; import static org.junit.Assert.*; import org.junit.Before; import org.junit.Test;  public class EmbeddedMongoTest {     private static final String DATABASE_NAME = ""embedded"";      private MongodExecutable mongodExe;     private MongodProcess mongod;     private MongoClient mongo;      @Before     public void beforeEach() throws Exception {         MongodStarter starter = MongodStarter.getDefaultInstance();         String bindIp = ""localhost"";         int port = 12345;         IMongodConfig mongodConfig = new MongodConfigBuilder()         .version(Version.Main.PRODUCTION)         .net(new Net(bindIp, port, Network.localhostIsIPv6()))         .build();         this.mongodExe = starter.prepare(mongodConfig);         this.mongod = mongodExe.start();         this.mongo = new MongoClient(bindIp, port);     }      @After     public void afterEach() throws Exception {         if (this.mongod != null) {             this.mongod.stop();             this.mongodExe.stop();         }     }      @Test     public void shouldCreateNewObjectInEmbeddedMongoDb() {         // given         MongoDatabase db = mongo.getDatabase(DATABASE_NAME);         db.createCollection(""testCollection"");         MongoCollection&lt;BasicDBObject&gt; col = db.getCollection(""testCollection"", BasicDBObject.class);          // when         col.insertOne(new BasicDBObject(""testDoc"", new Date()));          // then         assertEquals(1L, col.countDocuments());     }  }"
