code
"TableCellRenderer tableCellRenderer = new DefaultTableCellRenderer() {      SimpleDateFormat f = new SimpleDateFormat(""MM/dd/yy"");      public Component getTableCellRendererComponent(JTable table,             Object value, boolean isSelected, boolean hasFocus,             int row, int column) {         if( value instanceof Date) {             value = f.format(value);         }         return super.getTableCellRendererComponent(table, value, isSelected,                 hasFocus, row, column);     } };  table.getColumnModel().getColumn(0).setCellRenderer(tableCellRenderer);"
"List&lt;string&gt; termSet = fieldQuery.getTermSet(fieldName);         VectorHighlightMapper tfv = new VectorHighlightMapper(termSet);             reader.GetTermFreqVector(docId, fieldName, tfv);  // &lt;-- look at this line          string[] terms = tfv.GetTerms();         foreach (String term in terms)         {             if (!termSet.Contains(term)) continue;             int index = tfv.IndexOf(term);             TermVectorOffsetInfo[] tvois = tfv.GetOffsets(index);             if (tvois == null) return; // just return to make null snippets             int[] poss = tfv.GetTermPositions(index);             if (poss == null) return; // just return to make null snippets             for (int i = 0; i &lt; tvois.Length; i++)                 termList.AddLast(new TermInfo(term, tvois[i].GetStartOffset(), tvois[i].GetEndOffset(), poss[i]));"
"String cronAttribute = taskElement.getAttribute(""cron""); if (StringUtils.hasText(cronAttribute)) {     cronTaskMap.put(runnableBeanRef, cronAttribute); } else {     String fixedDelayAttribute = taskElement.getAttribute(""fixed-delay"");     if (StringUtils.hasText(fixedDelayAttribute)) {         fixedDelayTaskMap.put(runnableBeanRef, fixedDelayAttribute);     }     else {         String fixedRateAttribute = taskElement.getAttribute(""fixed-rate"");         if (!StringUtils.hasText(fixedRateAttribute)) {             parserContext.getReaderContext().error(                     ""One of 'cron', 'fixed-delay', or 'fixed-rate' is required"",                     taskElement);             // Continue with the possible next task element             continue;         }         fixedRateTaskMap.put(runnableBeanRef, fixedRateAttribute);     } }"
"for (int i = 0; i &lt; jTable1.getColumnCount(); i ++) {     TableColumn col = jTable1.getColumnModel().getColumn(i);     col.setCellEditor(new MyTableCellEditor()); }   public class MyTableCellEditor extends AbstractCellEditor implements TableCellEditor {     JComponent component = new JTextField();     public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int rowIndex, int vColIndex) {         ((JTextField)component).setText((String)value);         ((JTextField)component).setFont(new java.awt.Font(""Arial Unicode MS"", 0, 12));         return component;     } }"
"VariableElement parameterElement; ProcessingEnvironment processingEnv;  TypeMirror parameterType = parameterElement.asType(); Types typeUtils = processingEnv.getTypeUtils(); TypeElement typeElement = (TypeElement) typeUtils.asElement(parameterType); Elements elementUtils = processingEnv.getElementUtils() List&lt;? extends Element&gt; elementMembers = elementUtils.getAllMembers(typeElement); List&lt;ExecutableElement&gt; elementMethods = ElementFilter.methodsIn(elementMembers); for(ExecutableElement methodElement : elementMethods) {     if (methodElement.getParameters().size()==0 &amp;&amp; methodElement.getSimpleName().toString().startsWith(""get"")) {       // do something     } }"
FocusAdapter selectAllFocusAdapter = new FocusAdapter() {   public void focusGained(FocusEvent e) {     final JTextComponent tComponent = (JTextComponent) e.getSource();     SwingUtilities.invokeLater(new Runnable() {        @Override       public void run() {         tComponent.selectAll();       }     });     tComponent.selectAll();   } };  myJTextField.addFocusListener(selectAllFocusAdapter); otherJTextField.addFocusListener(selectAllFocusAdapter); myTextArea.addFocusListener(selectAllFocusAdapter);
"MultiSelectListPreference listPreference = new MultiSelectListPreference(context);     listPreference.setTitle(R.string.configure_category_title);     listPreference.setDialogTitle(R.string.configure_category_title);     listPreference.setSummary(R.string.configure_category_summary);     listPreference.setEntries(R.array.configure_category_array);     listPreference.setEntryValues(new CharSequence[]{             ProcessList.PREF_SERVICES + mAppWidgetId,             ProcessList.PREF_INACTIVE + mAppWidgetId,             ProcessList.PREF_INTERNAL + mAppWidgetId     });      //Create a Set&lt;String&gt; with list items that should be selected     SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);     boolean showServices = sharedPref.getBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, true);     boolean showInactive = sharedPref.getBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, true);     boolean showInternal = sharedPref.getBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, true);      String[] strings = new String[3];     int cnt = 0;     if (showServices)         strings[cnt++] = ProcessList.PREF_SERVICES + mAppWidgetId;     if (showInactive)         strings[cnt++] = ProcessList.PREF_INACTIVE + mAppWidgetId;     if (showInternal)         strings[cnt] = ProcessList.PREF_INTERNAL + mAppWidgetId;      Set&lt;String&gt; mySet = new HashSet&lt;String&gt;();     Collections.addAll(mySet, strings);      //Add the set     listPreference.setValues(mySet);      //Listen for changes, I'm not sure if this is how it's meant to work, but it does :/     listPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {         public boolean onPreferenceChange(Preference preference, Object o) {              HashSet hashSet = (HashSet) o;             Iterator stringIterator = hashSet.iterator();             boolean[] states = {false, false, false};             String prefString;              while (stringIterator.hasNext()) {                  prefString = (String) stringIterator.next();                  if (prefString == null)                     continue;                  if (prefString.compareTo(ProcessList.PREF_SERVICES + mAppWidgetId) == 0)                     states[0] = true;                 else if (prefString.compareTo(ProcessList.PREF_INACTIVE + mAppWidgetId) == 0)                     states[1] = true;                 else if (prefString.compareTo(ProcessList.PREF_INTERNAL + mAppWidgetId) == 0)                     states[2] = true;              }              PreferenceManager                     .getDefaultSharedPreferences(getActivity())                     .edit()                     .putBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, states[0])                     .putBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, states[1])                     .putBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, states[2])                     .commit();              return true;         }     });      preferenceCategory.addPreference(listPreference);"
"JComponent dropTargetComponent = ...; new DropTarget(dropTargetComponent , DnDConstants.ACTION_COPY,     new DropTargetListener() {          public void drop(DropTargetDropEvent dtde) {             Transferable tr = dtde.getTransferable();             if(tr.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.imageFlavor)) {                  Image image = (Image) tr.getTransferData(java.awt.datatransfer.DataFlavor.imageFlavor);                  // Do something with image             }          }           ...    }"
"public static JSONObject readJsonFromUrl(String url) throws IOException, JSONException {      HttpUriRequest request = new HttpGet(url);     request.addHeader(""Accept-Encoding"", ""gzip"");     HttpClient httpClient = new DefaultHttpClient();     HttpResponse response = httpClient.execute(request);      InputStream instream = response.getEntity().getContent();     org.apache.http.Header contentEncoding = response.getFirstHeader(""Content-Encoding"");      JSONObject json = null;     if (contentEncoding != null &amp;&amp; contentEncoding.getValue().equalsIgnoreCase(""gzip"")) {         BufferedReader rd = new BufferedReader(new InputStreamReader(new GZIPInputStream(instream)));         String jsonText = readAll(rd);           if (jsonText.contains(""&lt;/div&gt;"")) {               json = new JSONObject(jsonText.split(""&lt;/div&gt;"")[1]);           } else {               json = new JSONObject(jsonText);           }     }     return json; }"
"public class MainActivity extends Activity {    @Override   protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      dbmView = (TextView) findViewById(R.id.textView_dBm);   }    @Override   protected void onStart() {     super.onStart();     IntentFilter intentFilter = new IntentFilter(""com.example.broadcasts.DBM_UPDATE"");     registerReceiver(receiver, intentFilter);   }    @Override   protected void onStop() {     unregisterReceiver(receiver);     super.onStop();   }    private TextView dbmView;    private BroadcastReceiver receiver = new BroadcastReceiver() {     @Override     public void onReceive(Context context, Intent intent) {         dbmView.setText(intent.getStringExtra(""dbm""));     }   }  }"
"if (outputFileCache.exists())         {             connection.setAllowUserInteraction(true);             connection.setRequestProperty(""Range"", ""bytes="" + outputFileCache.length() + ""-"");         }          connection.setConnectTimeout(14000);         connection.setReadTimeout(20000);         connection.connect();          if (connection.getResponseCode() / 100 != 2)             throw new Exception(""Invalid response code!"");         else         {             String connectionField = connection.getHeaderField(""content-range"");              if (connectionField != null)             {                 String[] connectionRanges = connectionField.substring(""bytes="".length()).split(""-"");                 downloadedSize = Long.valueOf(connectionRanges[0]);             }              if (connectionField == null &amp;&amp; outputFileCache.exists())                 outputFileCache.delete();              fileLength = connection.getContentLength() + downloadedSize;             input = new BufferedInputStream(connection.getInputStream());             output = new RandomAccessFile(outputFileCache, ""rw"");             output.seek(downloadedSize);              byte data[] = new byte[1024];             int count = 0;             int __progress = 0;              while ((count = input.read(data, 0, 1024)) != -1                      &amp;&amp; __progress != 100)              {                 downloadedSize += count;                 output.write(data, 0, count);                 __progress = (int) ((downloadedSize * 100) / fileLength);             }              output.close();             input.close();        }"
"mAdapter.setViewBinder(new ViewBinder() {         public boolean setViewValue(View aView, Cursor aCursor, int aColumnIndex) {              //Modification of the icon to display in the list             if (aColumnIndex == aCursor.getColumnIndex(DatabaseHandler.RATE_EMOTION)) {                 int emotionID = aCursor.getInt(aColumnIndex);                 Drawable emotionDrawable = resources.getDrawable(R.drawable.ic_unknown_rate);                  //if emotion is set                 if(emotionID &gt; 0){                     String emotionDrawablePath = ""ic_smi"" + emotionID;                               int emotionDrawableID = resources.getIdentifier(emotionDrawablePath,""drawable"", getPackageName());                     //if a drawable is found                     if(emotionDrawableID &gt; 0){                         emotionDrawable = resources.getDrawable(emotionDrawableID);                     }                 }                  ImageView emotionImage = (ImageView) aView;                                  emotionImage.setImageDrawable(emotionDrawable);                 return true;             }              return false;         }     });"
"class MyPagerAdapter extends FragmentPagerAdapter {         public List&lt;String&gt; fragmentsA;           public MyPagerAdapter(FragmentManager fm) {             super(fm);             fragmentsA = fragments;         }          @Override         public Fragment getItem(int position) {             //return MyFragment.newInstance();             return Fragment.instantiate(context, fragmentsA.get(position));          }          @Override         public CharSequence getPageTitle(int position) {             //return CONTENT[position % CONTENT.length].toUpperCase();             return mEntries.get(position % CONTENT.length).toUpperCase();         }          @Override         public int getCount() {            // return CONTENT.length;             return mEntries.size();         }          @Override         public int getItemPosition(Object object) {             return POSITION_NONE;         }     }"
"package org.hibernate.envers.test.integration.basic;  import org.hibernate.Session; import org.hibernate.action.spi.AfterTransactionCompletionProcess; import org.hibernate.action.spi.BeforeTransactionCompletionProcess; import org.hibernate.engine.spi.SessionImplementor; import org.hibernate.envers.internal.tools.MutableInteger; import org.hibernate.envers.test.BaseEnversFunctionalTestCase; import org.hibernate.envers.test.entities.StrTestEntity; import org.hibernate.event.service.spi.EventListenerRegistry; import org.hibernate.event.spi.EventType; import org.hibernate.event.spi.PostInsertEvent; import org.hibernate.event.spi.PostInsertEventListener; import org.hibernate.persister.entity.EntityPersister;  import org.junit.Assert; import org.junit.Test;  import org.hibernate.testing.TestForIssue;  /**  * @author Lukasz Antoniak (lukasz dot antoniak at gmail dot com)  */ public class RegisterUserEventListenersTest extends BaseEnversFunctionalTestCase {     @Override     protected Class&lt;?&gt;[] getAnnotatedClasses() {         return new Class&lt;?&gt;[] {StrTestEntity.class};     }      @Test     @TestForIssue(jiraKey = ""HHH-7478"")     public void testTransactionProcessSynchronization() {         final EventListenerRegistry registry = sessionFactory().getServiceRegistry()                 .getService( EventListenerRegistry.class );         final CountingPostInsertTransactionBoundaryListener listener = new CountingPostInsertTransactionBoundaryListener();          registry.getEventListenerGroup( EventType.POST_INSERT ).appendListener( listener );          Session session = openSession();         session.getTransaction().begin();         StrTestEntity entity = new StrTestEntity( ""str1"" );         session.save( entity );         session.getTransaction().commit();         session.close();          // Post insert listener invoked three times - before/after insertion of original data,         // revision entity and audit row.         Assert.assertEquals( 3, listener.getBeforeCount() );         Assert.assertEquals( 3, listener.getAfterCount() );     }      private static class CountingPostInsertTransactionBoundaryListener implements PostInsertEventListener {         private final MutableInteger beforeCounter = new MutableInteger();         private final MutableInteger afterCounter = new MutableInteger();          @Override         public void onPostInsert(PostInsertEvent event) {             event.getSession().getActionQueue().registerProcess(                     new BeforeTransactionCompletionProcess() {                         @Override                         public void doBeforeTransactionCompletion(SessionImplementor session) {                             beforeCounter.increase();                         }                     }             );             event.getSession().getActionQueue().registerProcess(                     new AfterTransactionCompletionProcess() {                         @Override                         public void doAfterTransactionCompletion(boolean success, SessionImplementor session) {                             afterCounter.increase();                         }                     }             );         }          @Override         public boolean requiresPostCommitHanding(EntityPersister persister) {             return true;         }          public int getBeforeCount() {             return beforeCounter.get();         }          public int getAfterCount() {             return afterCounter.get();         }     } }"
"List&lt;String&gt; options = new ArrayList&lt;String&gt;(); options.add(""Option 1""); options.add(""Option 2""); options.add(""Option 3"");  ListBox combo = new ListBox(); SelectElement selectElm = combo.getElement().cast(); OptGroupElement groupElement =Document.get().createOptGroupElement(); groupElement.setLabel(""category 1"");  for (String option : options)  {     OptionElement optElement = Document.get().createOptionElement();     optElement.setInnerText(option.getName());     groupElement.appendChild(optElement); }  selectElm.appendChild(groupElement);"
"Spinner1.setOnItemSelectedListener(new OnItemSelectedListener() {     @Override     public void onItemSelected(AdapterView&lt;?&gt; arg0, View arg1, int arg2, long arg3) {         // TODO Auto-generated method stub          String selectedValue = arg0.getSelectedItem().toString();         if(selectedValue.equalsIgnoreCase(Red_Line))         {             ArrayAdapter&lt;String&gt; firstAdapter = new ArrayAdapter&lt;String (StationList.this,R.array.Red_Line);             Spinner2.setAdapter(firstAdapter);//         }          if(selectedValue.equalsIgnoreCase(Blue_Line))         {             ArrayAdapter&lt;String&gt; firstAdapter = new ArrayAdapter&lt;String (StationList.this,R.array.Blue_Line);              Spinner2.setAdapter(firstAdapter);         }     } });"
"query.from(catalog) .innerJoin(qe).on(catalog.id.eq(qe.itemId)) .innerJoin(enterprise).on(enterprise.id.eq(qe.enterpriseId)) .leftJoin(catalogPerson).on(catalogPerson.catalogId.eq(catalog.id)) .where(catalog.deletionDate.isNull(), qe.enterpriseId.eq(org)) .orderBy(catalog.creationDate.desc()) .limit(limit) .offset(offset) .groupBy(catalog.id) .list(Projections.constructor(Catalog.class,                             catalog.id,                             catalog.name,                             catalog.code,                             catalogPerson.count()));"
int flags = PackageManager.GET_ACTIVITIES             | PackageManager.GET_CONFIGURATIONS             | PackageManager.GET_DISABLED_COMPONENTS             | PackageManager.GET_GIDS | PackageManager.GET_INSTRUMENTATION             | PackageManager.GET_INTENT_FILTERS             | PackageManager.GET_PERMISSIONS | PackageManager.GET_PROVIDERS             | PackageManager.GET_RECEIVERS | PackageManager.GET_SERVICES             | PackageManager.GET_SIGNATURES;     PackageManager packageManager = getPackageManager();     List&lt;PackageInfo&gt; installedPackages = packageManager             .getInstalledPackages(flags);     for (PackageInfo packageInfo : installedPackages) {         ServiceInfo[] services = packageInfo.services;         PermissionInfo[] permissions = packageInfo.permissions;     }
"CompletableFuture&lt;Rep&gt; result = new CompletableFuture&lt;&gt;();     CompletableFuture.runAsync(() -&gt; {          transporter.write(req);         try {             Rep rep = responseQueue.take();             result.complete(rep);         } catch (InterruptedException e) {             result.completeExceptionally(e);             Thread.currentThread().interrupt();         } catch (Exception e) {             result.completeExceptionally(e);         }      }, executorService);     return result;"
"DiffFormatter formatter = new DiffFormatter( System.out ); formatter.setRepository( git.getRepository() ); AbstractTreeIterator commitTreeIterator = prepareTreeParser( git.getRepository(),  Constants.HEAD ); FileTreeIterator workTreeIterator = new FileTreeIterator( git.getRepository() ); List&lt;DiffEntry&gt; diffEntries = formatter.scan( commitTreeIterator, workTreeIterator );  for( DiffEntry entry : diffEntries ) {   System.out.println( ""Entry: "" + entry + "", from: "" + entry.getOldId() + "", to: "" + entry.getNewId() );   formatter.format( entry ); }"
"Connection conn = ...;   Statement stmt = conn.createStatement();   ResultSet rs = stmt.executeQuery     (&quot;select account_id, name from customers&quot;);   Iterator rows = (new ResultSetDynaClass(rs)).iterator();   while (rows.hasNext()) {     DynaBean row = (DynaBean) rows.next();     System.out.println(&quot;Account number is &quot; +                        row.get(&quot;account_id&quot;) +                        &quot; and name is &quot; + row.get(&quot;name&quot;));   }   rs.close();   stmt.close();"
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
"final ContentAdapter ca = moz.getChromeAdapter().getContentAdapter();  nsIURIContentListener mycl = new nsIURIContentListener() {     public boolean onStartURIOpen(nsIURI aURI) {         System.out.println(aURI.getHost() + aURI.getPath());         return true;     }     public boolean doContent(String aContentType, boolean aIsContentPreferred, nsIRequest aRequest, nsIStreamListener[] aContentHandler) {          System.out.println(""1"");         return ca.doContent(aContentType, aIsContentPreferred, aRequest, aContentHandler);      }     public boolean isPreferred(String aContentType, String[] aDesiredContentType) {          System.out.println(""2"");         return ca.isPreferred(aContentType, aDesiredContentType);      }     public boolean canHandleContent(String aContentType, boolean aIsContentPreferred, String[] aDesiredContentType) {          System.out.println(""3"");         return ca.canHandleContent(aContentType, aIsContentPreferred, aDesiredContentType);      }     public nsISupports getLoadCookie() {          System.out.println(""4"");         return ca.getLoadCookie();      }     public void setLoadCookie(nsISupports aLoadCookie) {          System.out.println(""5"");         ca.setLoadCookie(aLoadCookie);      }     public nsIURIContentListener getParentContentListener() {          System.out.println(""6"");         return ca.getParentContentListener();      }     public void setParentContentListener(nsIURIContentListener aParentContentListener) {          System.out.println(""7"");         ca.setParentContentListener(aParentContentListener);      }     public nsISupports queryInterface(String uuid) {          System.out.println(""8"");         return ca.queryInterface(uuid);      }  };   moz.getChromeAdapter().getWebBrowser().setParentURIContentListener(mycl);"
"SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator(); JceKeyAgreeRecipientInfoGenerator rig = new JceKeyAgreeRecipientInfoGenerator(CMSAlgorithm.ECDH_SHA1KDF, senderPrivateKey, senderPublicKey, CMSAlgorithm.AES128_WRAP); rig.setProvider(BouncyCastleProvider.PROVIDER_NAME); rig.addRecipient(recipientX509Certificate); gen.addRecipientInfoGenerator(rig);  MimeBodyPart msg = new MimeBodyPart(); msg.setText(&quot;This is a secret message&quot;);  MimeBodyPart mp = gen.generate(msg, new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(&quot;BC&quot;).build());  Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null);  String to = &quot;bob@example.com&quot;;  Address fromUser = new InternetAddress(&quot;alice@example.com&quot;); Address toUser = new InternetAddress(to);  MimeMessage body = new MimeMessage(session); body.setFrom(fromUser); body.setRecipient(Message.RecipientType.TO, toUser); body.setSubject(&quot;example encrypted message&quot;); body.setContent(mp.getContent(), mp.getContentType()); body.saveChanges();  body.writeTo(new FileOutputStream(&quot;/tmp/encrypted.msg&quot;));"
"def parseFile (fileHandle):     while (currentLine = fileHandle.getNextLine()) != EOF:         if currentLine.beginsWith (""DurationOfRun:""):             processDurationOfRun (currentLine[14:])          elsif currentLine.beginsWith (""ThreadSize:""):             processThreadSize (currentLine[11:])          elsif currentLine.beginsWith (""ExistingRange:""):             processExistingRange (currentLine[14:])          elsif currentLine.beginsWith (""NewRange:""):             processNewRange (currentLine[9:])          elsif currentLine.beginsWith (""Percentage:""):             processPercentage (currentLine[11:])          else             raise error"
"public class GsonOptionalDeserializer&lt;T&gt; implements JsonSerializer&lt;Optional&lt;T&gt;&gt;, JsonDeserializer&lt;Optional&lt;T&gt;&gt; {      @Override     public Optional&lt;T&gt; deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)             throws JsonParseException {         final JsonArray asJsonArray = json.getAsJsonArray();         final JsonElement jsonElement = asJsonArray.get(0);         final T value = context.deserialize(jsonElement, ((ParameterizedType) typeOfT).getActualTypeArguments()[0]);         return Optional.fromNullable(value);     }      @Override     public JsonElement serialize(Optional&lt;T&gt; src, Type typeOfSrc, JsonSerializationContext context) {         final JsonElement element = context.serialize(src.orNull());         final JsonArray result = new JsonArray();         result.add(element);         return result;     } }"
"public static Result feedComments(String feedUrl) {   return async(     WS.url(feedUrl).get().flatMap(       new Function&lt;WS.Response, Promise&lt;Result&gt;&gt;() {         public Promise&lt;Result&gt; apply(WS.Response response) {           return WS.url(response.asJson().findPath(""commentsUrl"").get().map(             new Function&lt;WS.Response, Result&gt;() {               public Result apply(WS.Response response) {                 return ok(""Number of comments: "" + response.asJson().findPath(""count""));               }             }           );         }       }     )   ); }"
"public Object instantiateItem(View collection, int position) { LayoutInflater inflater = (LayoutInflater)collection.getContext().getSystemService              (Context.LAYOUT_INFLATER_SERVICE);     View layout = inflater.inflate(R.layout.custom_pager, null);      layout.findViewById(R.id.caption);   ImageView view = new ImageView(activity);                           view.setPadding(5, 25, 5, 5);     view.setScaleType(ScaleType.FIT_START);     view.setBackgroundColor(Color.RED);     ((ViewPager) collection).addView(view, 0);     return view;   }"
"WebView wv = (WebView) v.findViewById(R.id.webview);     wv.getSettings().setSupportZoom(true);     wv.getSettings().setBuiltInZoomControls(true);     wv.getSettings().setJavaScriptCanOpenWindowsAutomatically(true);     WebSettings settings = wv.getSettings();             settings.setUseWideViewPort(true);     settings.setJavaScriptEnabled(true);     settings.setSupportMultipleWindows(true);     settings.setJavaScriptCanOpenWindowsAutomatically(true);     settings.setLoadsImagesAutomatically(true);     settings.setLightTouchEnabled(true);     settings.setDomStorageEnabled(true);     settings.setLoadWithOverviewMode(true);     wv.loadUrl(""http://www.google.com"");"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
