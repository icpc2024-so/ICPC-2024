code
"=== Tuple.java === package com.stackoverflow.tuple;  /**  * Tuple are immutable objects.  Tuples should contain only immutable objects or  * objects that won't be modified while part of a tuple.  */ public interface Tuple {      public TupleType getType();     public int size();     public &lt;T&gt; T getNthValue(int i);  }   === TupleType.java === package com.stackoverflow.tuple;  /**  * Represents a type of tuple.  Used to define a type of tuple and then  * create tuples of that type.  */ public interface TupleType {      public int size();      public Class&lt;?&gt; getNthType(int i);      /**      * Tuple are immutable objects.  Tuples should contain only immutable objects or      * objects that won't be modified while part of a tuple.      *      * @param values      * @return Tuple with the given values      * @throws IllegalArgumentException if the wrong # of arguments or incompatible tuple values are provided      */     public Tuple createTuple(Object... values);      public class DefaultFactory {         public static TupleType create(final Class&lt;?&gt;... types) {             return new TupleTypeImpl(types);         }     }  }   === TupleImpl.java (not visible outside package) === package com.stackoverflow.tuple;  import java.util.Arrays;  class TupleImpl implements Tuple {      private final TupleType type;     private final Object[] values;      TupleImpl(TupleType type, Object[] values) {         this.type = type;         if (values == null || values.length == 0) {             this.values = new Object[0];         } else {             this.values = new Object[values.length];             System.arraycopy(values, 0, this.values, 0, values.length);         }     }      @Override     public TupleType getType() {         return type;     }      @Override     public int size() {         return values.length;     }      @SuppressWarnings(""unchecked"")     @Override     public &lt;T&gt; T getNthValue(int i) {         return (T) values[i];     }      @Override     public boolean equals(Object object) {         if (object == null)   return false;         if (this == object)   return true;          if (! (object instanceof Tuple))   return false;          final Tuple other = (Tuple) object;         if (other.size() != size())   return false;          final int size = size();         for (int i = 0; i &lt; size; i++) {             final Object thisNthValue = getNthValue(i);             final Object otherNthValue = other.getNthValue(i);             if ((thisNthValue == null &amp;&amp; otherNthValue != null) ||                     (thisNthValue != null &amp;&amp; ! thisNthValue.equals(otherNthValue))) {                 return false;             }         }          return true;     }      @Override     public int hashCode() {         int hash = 17;         for (Object value : values) {             if (value != null) {                 hash = hash * 37 + value.hashCode();             }         }         return hash;     }      @Override     public String toString() {         return Arrays.toString(values);     } }   === TupleTypeImpl.java (not visible outside package) === package com.stackoverflow.tuple;  class TupleTypeImpl implements TupleType {      final Class&lt;?&gt;[] types;      TupleTypeImpl(Class&lt;?&gt;[] types) {         this.types = (types != null ? types : new Class&lt;?&gt;[0]);     }      public int size() {         return types.length;     }      //WRONG     //public &lt;T&gt; Class&lt;T&gt; getNthType(int i)      //RIGHT - thanks Emil     public Class&lt;?&gt; getNthType(int i) {         return types[i];     }      public Tuple createTuple(Object... values) {         if ((values == null &amp;&amp; types.length == 0) ||                 (values != null &amp;&amp; values.length != types.length)) {             throw new IllegalArgumentException(                     ""Expected ""+types.length+"" values, not ""+                     (values == null ? ""(null)"" : values.length) + "" values"");         }          if (values != null) {             for (int i = 0; i &lt; types.length; i++) {                 final Class&lt;?&gt; nthType = types[i];                 final Object nthValue = values[i];                 if (nthValue != null &amp;&amp; ! nthType.isAssignableFrom(nthValue.getClass())) {                     throw new IllegalArgumentException(                             ""Expected value #""+i+"" ('""+                             nthValue+""') of new Tuple to be ""+                             nthType+"", not "" +                             (nthValue != null ? nthValue.getClass() : ""(null type)""));                 }             }         }          return new TupleImpl(this, values);     } }   === TupleExample.java === package com.stackoverflow.tupleexample;  import com.stackoverflow.tuple.Tuple; import com.stackoverflow.tuple.TupleType;  public class TupleExample {      public static void main(String[] args) {          // This code probably should be part of a suite of unit tests         // instead of part of this a sample program          final TupleType tripletTupleType =             TupleType.DefaultFactory.create(                     Number.class,                     String.class,                     Character.class);          final Tuple t1 = tripletTupleType.createTuple(1, ""one"", 'a');         final Tuple t2 = tripletTupleType.createTuple(2l, ""two"", 'b');         final Tuple t3 = tripletTupleType.createTuple(3f, ""three"", 'c');         final Tuple tnull = tripletTupleType.createTuple(null, ""(null)"", null);         System.out.println(""t1 = "" + t1);         System.out.println(""t2 = "" + t2);         System.out.println(""t3 = "" + t3);         System.out.println(""tnull = "" + tnull);          final TupleType emptyTupleType =             TupleType.DefaultFactory.create();          final Tuple tempty = emptyTupleType.createTuple();         System.out.println(""\ntempty = "" + tempty);          // Should cause an error         System.out.println(""\nCreating tuple with wrong types: "");         try {             final Tuple terror = tripletTupleType.createTuple(1, 2, 3);             System.out.println(""Creating this tuple should have failed: ""+terror);         } catch (IllegalArgumentException ex) {             ex.printStackTrace(System.out);         }          // Should cause an error         System.out.println(""\nCreating tuple with wrong # of arguments: "");         try {             final Tuple terror = emptyTupleType.createTuple(1);             System.out.println(""Creating this tuple should have failed: ""+terror);         } catch (IllegalArgumentException ex) {             ex.printStackTrace(System.out);         }          // Should cause an error         System.out.println(""\nGetting value as wrong type: "");         try {             final Tuple t9 = tripletTupleType.createTuple(9, ""nine"", 'i');             final String verror = t9.getNthValue(0);             System.out.println(""Getting this value should have failed: ""+verror);         } catch (ClassCastException ex) {             ex.printStackTrace(System.out);         }      }  }  === Sample Run === t1 = [1, one, a] t2 = [2, two, b] t3 = [3.0, three, c] tnull = [null, (null), null]  tempty = []  Creating tuple with wrong types:  java.lang.IllegalArgumentException: Expected value #1 ('2') of new Tuple to be class java.lang.String, not class java.lang.Integer     at com.stackoverflow.tuple.TupleTypeImpl.createTuple(TupleTypeImpl.java:32)     at com.stackoverflow.tupleexample.TupleExample.main(TupleExample.java:37)  Creating tuple with wrong # of arguments:  java.lang.IllegalArgumentException: Expected 0 values, not 1 values     at com.stackoverflow.tuple.TupleTypeImpl.createTuple(TupleTypeImpl.java:22)     at com.stackoverflow.tupleexample.TupleExample.main(TupleExample.java:46)  Getting value as wrong type:  java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String     at com.stackoverflow.tupleexample.TupleExample.main(TupleExample.java:58)"
"ComboBox accountStatusChoice = new ComboBox();  accountStatusChoice.setCaption(MessageResource.getLocalizedString(""caption.accountStatus"")); accountStatusChoice.setRequired(true); accountStatusChoice.setRequiredError(MessageResource.getLocalizedString(""error.required.accountStatus"")); accountStatusChoice.setImmediate(true);  for (AccountStatus accountStatus : AccountStatus.values()) {     accountStatusChoice.addItem(accountStatus);     accountStatusChoice.setItemCaption(accountStatus, MessageResource.getLocalizedString(accountStatus.name())); }  return accountStatusChoice;"
"URI lUri = new URI(getString(R.string.url)); //get url from strings  // XML node keys final String KEY_ITEM = ""plan""; // parent node final String KEY_NAME = ""agent""; final String KEY_DATE = ""date""; final String KEY_SHIFT = ""shift""; final String KEY_LINE = ""line"";  XMLhandler parser = new XMLhandler();  // Prepares the request HttpClient lHttpClient = new DefaultHttpClient(); HttpGet lHttpGet = new HttpGet(); lHttpGet.setURI(lUri); lHttpGet.addHeader(BasicScheme.authenticate(new UsernamePasswordCredentials(""user"", ""pass""), ""UTF-8"", false));  // Sends the request and read the response HttpResponse lHttpResponse = lHttpClient.execute(lHttpGet); InputStream lInputStream = lHttpResponse.getEntity().getContent();  DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance(); DocumentBuilder builder = factory.newDocumentBuilder(); Document dom = builder.parse(lInputStream);  Element root = dom.getDocumentElement(); NodeList nl = root.getElementsByTagName(KEY_ITEM);  // pass data to another function... for (int i = 0; i &lt; nl.getLength(); i++) {    Element e = (Element) nl.item(i);    String name = parser.getValue(e, KEY_NAME);    String date = parser.getValue(e, KEY_DATE);    String shift = parser.getValue(e, KEY_SHIFT);    String line = parser.getValue(e, KEY_LINE);    db.createList(name, date, shift, line); }"
"Field elementField = xmlReader.getClass().getDeclaredField(""theNewElement""); elementField.setAccessible(true); Object element = elementField.get(xmlReader); Field attsField = element.getClass().getDeclaredField(""theAtts""); attsField.setAccessible(true); Object atts = attsField.get(element); Field dataField = atts.getClass().getDeclaredField(""data""); dataField.setAccessible(true); String[] data = (String[])dataField.get(atts); Field lengthField = atts.getClass().getDeclaredField(""length""); lengthField.setAccessible(true); int len = (Integer)lengthField.get(atts);  String myAttributeA = null; String myAttributeB = null;  for(int i = 0; i &lt; len; i++) {     if(""attrA"".equals(data[i * 5 + 1])) {         myAttributeA = data[i * 5 + 4];     } else if(""attrB"".equals(data[i * 5 + 1])) {         myAttributeB = data[i * 5 + 4];     } }"
"BufferedReader inFromUser = new BufferedReader( new InputStreamReader(System.in));   Socket clientSocket = new Socket(""localhost"", 3333); //3333 is the port on which the    server is listening    DataOutputStream outToConsumer = new DataOutputStream(clientSocket.getOutputStream()); BufferedReader inFromConsumer = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));   //Only if consumer sends something in reply sentence = inFromUser.readLine();    outToServer.writeBytes(sentence + '\n'); modifiedSentence = inFromConsumer.readLine();"
begin invocation of recursive with i = 4     begin invocation of recursive with i = 3         begin invocation of recursive with i = 2             begin invocation of recursive with i = 1                 print 1                 return 1             invocation ends with return value 1             j = 2 * 1             print j             return j         invocation ends with return value 2         j = 3 * 2         print j         return j     invocation ends with return value 6     j = 4 * 6     print j     return j invocation ends with return value 24
"int numObject = jsonArray.length(); JSONArray repackArray = new JSONArray(); for(int i = 0; i &lt; numObject; i++){     JSONObject nested = jsonArray.getJsonObject(i);      //get values you need     String email = nested.getString(""email"");     String language = nested.getString(""language"");     String name = nested.getString(""name"");      //add values to new object     JSONObject repack = new JSONObject();     repack.put(""email"", email);     repack.put(""language"", language);     repack.name(""name"", name);      //add to new array      repackArray.put(repack);  }"
"public class Data {     private String componentType, text;     private int column, row, width, height, weightX, weightY;      public Data(String componentType, int column, int row, int width, int height                 ,int weightX, int weightY, String text) {          this.componentType = componentType;         this.column = column;         this.row = row;         this.width = width;         this.height = height;         this.weightX = weightX;         this.weightY = weightY;         this.text = text;    }     // getters and setters here }"
"public void onReceive(Object message) throws Exception {      if (message.equals(""start"")) {         child.tell(""fetch something for me!"", getSelf());         getContext().setReceiveTimeout(Duration.create(""1 second""));     }      else if (message.equals(""child's response"")) {         getContext().setReceiveTimeout(Duration.Undefined()); //turn off receive timeout         // handle a response from a child here     }      else if (message instanceof ReceiveTimeout) {         getContext().setReceiveTimeout(Duration.Undefined()); //turn off receive timeout         // handle situation where I did not get a response in time     }  }"
"String text = ""Question : how to search for a particular word in a "" +         ""text file containing texts of words and return its "" +         ""frequency or occurrences ?"";  String word = ""a"";  int totalCount = 0; int wordCount = 0; Scanner s = new Scanner(text); while (s.hasNext()) {     totalCount++;     if (s.next().equals(word)) wordCount++; }  System.out.println(""Word count:  "" + wordCount); System.out.println(""Total count: "" + totalCount); System.out.printf(""Frequency:   %.2f"", (double) wordCount / totalCount);"
"class MyClass {     public static void main(String[] args) {         MyClass myClass = new MyClass();          int[][] sampleArray = {{11, 12, 13, 14, 15, 16},                 {17, 18, 19, 20, 21, 22},                 {23, 24, 25, 26, 27, 28},                 {29, 30, 31, 32, 33, 34},         };          myClass.removeEdges(sampleArray);     }       public int[][] removeEdges(int[][] arrayToTrim){         int[][] newArray = new int[arrayToTrim.length-2][arrayToTrim[0].length-2];         print2DArray(arrayToTrim);         for(int i=1;i&lt;arrayToTrim.length-1;i++){             for(int j=1;j&lt;arrayToTrim[0].length-1;j++){                 newArray[i-1][j-1] = arrayToTrim[i][j];             }         }         System.out.println();         print2DArray(newArray);         return newArray;     }      private void print2DArray(int[][] anArray){         for(int i=0;i&lt;anArray.length;i++){             System.out.println();             for(int j=0;j&lt;anArray[0].length;j++){                 System.out.print(anArray[i][j]+"" "");             }         }     } }"
"public static void main(String [] args) {      String bootStrapUrl = ""tcp://localhost:6666"";     String storeName = ""test"";      int maxThreads = 300;     ClientConfig clientConfig = new ClientConfig();     clientConfig.setMaxThreads(maxThreads);     clientConfig.setMaxConnectionsPerNode(maxThreads);     clientConfig.setConnectionTimeout(500, TimeUnit.MILLISECONDS);     clientConfig.setBootstrapUrls(bootStrapUrl);      StoreClientFactory factory = new SocketStoreClientFactory(clientConfig);     StoreClient&lt;String, String&gt; client = factory.getStoreClient(storeName);      int nodeId = 0;     List&lt;Integer&gt; partitionList = new ArrayList&lt;Integer&gt;();     partitionList.add(0);     partitionList.add(1);     AdminClient adminClient = new AdminClient(bootStrapUrl, new AdminClientConfig());     Iterator&lt;ByteArray&gt; iterator = adminClient.fetchKeys(nodeId, storeName, partitionList, null);      String key = null;     String value = null;     while (iterator.hasNext()) {         key = new String(iterator.next().get());         value = client.getValue(key);         System.out.println(""Key-Value-Pair::"" + key + "":"" + value);     }  }"
"Process lsProcess = Runtime.getRuntime().exec(""ls""); BufferedReader lsOutput = new BufferedReader(new InputStreamReader(lsProcess.getInputStream())); Process grepProcess = Runtime.getRuntime().exec(""grep build.xml""); BufferedWriter grepInput = new BufferedWriter(new OutputStreamWriter(grepProcess.getOutputStream()));  String line; // read each line from ls until there are no more while ((line = lsOutput.readLine()) != null) {     // and send them to grep     grepInput.write(line);     grepInput.newLine(); }  // send end-of-file signal to grep so it will terminate itself grepInput.close();"
"NodeList applicationIDNodes = getElementsByTagName(""ApplicationID""); for (int i = 0; i &lt; applicationIDNodes.length; i++) {    Node applicationIDNode = applciationIdNodes.getItem(i);    NodeList applicationIdChildren = applicationIdNode.getChildren();     String vendorId = applicationIdChildren.getItem(0).getAttribute(""value"").value();    String authAppliId = applicationIdChildren.getItem(1).getAttribute(""value"").value();    String actApplID = applicationIdChildren.getItem(2).getAttribute(""value"").value();     // do whathever you want with vendorId, authAppliId, actApplID        }"
import java.util.List; import bo.ICustomerBo; import dao.ICustomerDao; import model.Customer; import org.springframework.transaction.annotation.Transactional;  @Transactional(readOnly = true) public class CustomerBoImpl implements ICustomerBo{      ICustomerDao customerDaoImpl;        public ICustomerDao getCustomerDaoImpl() {         return customerDaoImpl;     }      public void setCustomerDaoImpl(ICustomerDao customerDaoImpl) {         this.customerDaoImpl = customerDaoImpl;     }  @Transactional(readOnly = false) @Override     public void addCustomer(Customer customer){          getCustomerDaoImpl().addCustomer(customer);      }  @Transactional(readOnly = false) @Override     public void updateCustomer(Customer customer){         getCustomerDaoImpl().updateCustomer(customer);     }  @Transactional(readOnly = false) @Override     public void deleteCustomer(Customer customer){         getCustomerDaoImpl().deleteCustomer(customer);     }  @Override     public List&lt;Customer&gt; findAllCustomer(){          return getCustomerDaoImpl().findAllCustomer();     } }
"try{    connection.setAutoCommit(false)     //get organisation id first    String nextOrgIdSql = ""select orgSeq.nextval from someVirtualTable"" //depends on database    ResultSet orgIdRs = statement.executeQuery( nextOrgIdSql)    int orgId = -1    if( orgIdRs.next())           orgId = orgIdRs.getInt(1)     //create organisation first    String orgSql =        ""Insert into ORGANISATION (ORGID, ...) values (""+ orgId + "",...)""     //create activities    for( Activity activity : organisation.getActivityList()){       String nextActvIdSql = ""select activitySeq.nextval from someVirtualTable""       ResultSet actvIdRs = statement.executeQuery( nextActvIdSql)       int actvId = -1       if( actIdRs.next())              actvId = actvIdRs.getInt(1)        statement.execute(         ""Insert INTO ACTIVITY (ACTVID, ORGID) values (""+actvId+"",""+orgId+"")""    }     connection.commit()  }catch(SQLException e){   connection.rollback() }"
"String setLastName  =  ""document.getElementsByName('lastName')[0].value='"" + lastName + ""';"";     String setName =  ""document.getElementsByName('firstName')[0].value='"" + name + ""'"";     String setDateBirth = ""document.getElementsByName('birthdate')[0].value='"" + datebirth + ""';"";     String setPhone = ""document.getElementsByName('phone')[0].value='"" + phone + ""';"";     String setEmail = ""document.getElementsByName('email')[0].value='"" + email + ""';"";     String setPassport = ""document.getElementsByName('passport')[0].value='"" + passport + ""';"";     Button button = new Button(""Fill the form"");      button.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent actionEvent) {             webEngine.executeScript(setLastName);             webEngine.executeScript(setName);             webEngine.executeScript(setDateBirth);             webEngine.executeScript(setPhone);             webEngine.executeScript(setEmail);             webEngine.executeScript(setPassport);         }     });"
