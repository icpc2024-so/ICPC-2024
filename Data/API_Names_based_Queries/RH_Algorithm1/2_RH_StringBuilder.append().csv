code
"public enum AgeRange {     A18TO23 (""18-23""),     A24TO29 (""24-29""),     A30TO35(""30-35"");      private String value;      AgeRange(String value){         this.value = value;     }      public String toString(){         return value;     }      public static AgeRange getByValue(String value){         for (final AgeRange element : EnumSet.allOf(AgeRange.class)) {             if (element.toString().equals(value)) {                 return element;             }         }         return null;     } }"
"String url = ""http://example.com/upload""; String charset = ""UTF-8""; String param = ""value""; File textFile = new File(""/path/to/file.txt""); File binaryFile = new File(""/path/to/file.bin""); String boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value. String CRLF = ""\r\n""; // Line separator required by multipart/form-data.  URLConnection connection = new URL(url).openConnection(); connection.setDoOutput(true); connection.setRequestProperty(""Content-Type"", ""multipart/form-data; boundary="" + boundary);  try (     OutputStream output = connection.getOutputStream();     PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true); ) {     // Send normal param.     writer.append(""--"" + boundary).append(CRLF);     writer.append(""Content-Disposition: form-data; name=\""param\"""").append(CRLF);     writer.append(""Content-Type: text/plain; charset="" + charset).append(CRLF);     writer.append(CRLF).append(param).append(CRLF).flush();      // Send text file.     writer.append(""--"" + boundary).append(CRLF);     writer.append(""Content-Disposition: form-data; name=\""textFile\""; filename=\"""" + textFile.getName() + ""\"""").append(CRLF);     writer.append(""Content-Type: text/plain; charset="" + charset).append(CRLF); // Text file itself must be saved in this charset!     writer.append(CRLF).flush();     Files.copy(textFile.toPath(), output);     output.flush(); // Important before continuing with writer!     writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.      // Send binary file.     writer.append(""--"" + boundary).append(CRLF);     writer.append(""Content-Disposition: form-data; name=\""binaryFile\""; filename=\"""" + binaryFile.getName() + ""\"""").append(CRLF);     writer.append(""Content-Type: "" + URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);     writer.append(""Content-Transfer-Encoding: binary"").append(CRLF);     writer.append(CRLF).flush();     Files.copy(binaryFile.toPath(), output);     output.flush(); // Important before continuing with writer!     writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.      // End of multipart/form-data.     writer.append(""--"" + boundary + ""--"").append(CRLF).flush(); }  // Request is lazily fired whenever you need to obtain information about response. int responseCode = ((HttpURLConnection) connection).getResponseCode(); System.out.println(responseCode); // Should be 200"
"ByteArrayOutputStream baos = new ByteArrayOutputStream();     ZipOutputStream zip = new ZipOutputStream(baos);      .... populate ZipOutputStream      String filename = ""out.zip"";     // the response variable is just a standard HttpServletResponse     response.setHeader(""Content-Disposition"",""attachment; filename=\"""" + filename + ""\"""");     response.setContentType(""application/zip"");      try{                     response.getOutputStream().write(baos.toByteArray());         response.flushBuffer();     }     catch (IOException e){         e.printStackTrace();             }     finally{         baos.close();     }"
"HttpURLConnection connection = (HttpURLConnection) url.openConnection();     if(ISSUE_DOWNLOAD_STATUS.intValue()==ECMConstant.ECM_DOWNLOADING){         File file=new File(DESTINATION_PATH);         if(file.exists()){              downloaded = (int) file.length();              connection.setRequestProperty(""Range"", ""bytes=""+(file.length())+""-"");         }     }else{         connection.setRequestProperty(""Range"", ""bytes="" + downloaded + ""-"");     }     connection.setDoInput(true);     connection.setDoOutput(true);     progressBar.setMax(connection.getContentLength());      in = new BufferedInputStream(connection.getInputStream());      fos=(downloaded==0)? new FileOutputStream(DESTINATION_PATH): new FileOutputStream(DESTINATION_PATH,true);      bout = new BufferedOutputStream(fos, 1024);     byte[] data = new byte[1024];     int x = 0;     while ((x = in.read(data, 0, 1024)) &gt;= 0) {         bout.write(data, 0, x);          downloaded += x;          progressBar.setProgress(downloaded);     }"
"response.setContentType(""application/force-download""); response.setContentLength((int)f.length());         //response.setContentLength(-1); response.setHeader(""Content-Transfer-Encoding"", ""binary""); response.setHeader(""Content-Disposition"",""attachment; filename=\"""" + ""xxx\"""");//fileName); ... ... File f= new File(fileName);  InputStream in = new FileInputStream(f); BufferedInputStream bin = new BufferedInputStream(in); DataInputStream din = new DataInputStream(bin);  while(din.available() &gt; 0){     out.print(din.readLine());     out.print(""\n""); }"
"public class Spinner implements IsWidget, SpinnerPresenter{     interface View{         Widget asWidget();         void stepUp(int step);         void stepDown(int step);         void setValue(int value);         void setPixelSize(int width,int height);     }        View view;     int value;       public Spinner() {         view = new SpinnerImpl(this);         view.setValue(0);     }        public int getValue() {         return value;     }        public void setValue(int value) {         if (value == this.value)             return;         this.value = value;         view.setValue(value);     }     public void setPixelSize(int width, int height){         view.setPixelSize(width,height);     }     @Override     public void downButtonClicked() {         value--;         view.stepDown(1);     }     @Override     public void upButtonClicked() {         value++;         view.stepUp(1);     }     @Override     public Widget asWidget() {         return view.asWidget();     } }"
"String input = ""Lorem ipsum dolor sit amet, consectetur adipisicing #{key1}. "" +    ""Proin nibh augue, suscipit a, scelerisque #{key1},"" +     ""lacinia in, mi. Cras vel #{key2}. Etiam pellentesque aliquet tellus."" +     "" Phasellus pharetra nulla ac diam. Quisque semper #{key3} at risus.""; StringBuffer result = new StringBuffer();  Pattern p = Pattern.compile( ""#\\{([\\w\\.]+)\\}"" ); Matcher m = p.matcher( input );  while( m.find() ) {         //extract the message for key = m.group( 1 ) here   //i'll just mark the found keys    m.appendReplacement( result,  ""##"" + m.group( 1 ) + ""##"" );       } m.appendTail( result );  System.out.println(result); //output: ... consectetur adipisicing ##key1## ...  etc."
"if (configloaded)    return; File cfile = new File(""oxconfig.properties""); try {   if (cfile.createNewFile()) {     try {       FileOutputStream cout = new FileOutputStream(cfile);       props.setProperty(""names"", ""oxguy3, Player"");       props.setProperty(""cloak_url"", ""http://..."");       ...       cout.flush();     } finally {       cout.close();     }   } else {     FileInputStream cin = new FileInputStream(cfile);     try {       props.load(cin);     } finally {       cin.close();     }   }   configloaded=true; } catch(IOException ex) {   e.printStackTrace(); }"
"String instanceId = ""Your-InstanceId""; AmazonAutoScalingClient amazonAutoScalingClient = new AmazonAutoScalingClient(new BasicAWSCredentials(accessKey, secretKey)); DescribeAutoScalingGroupsResult describeAutoScalingGroupsResult = amazonAutoScalingClient.describeAutoScalingGroups(); for(AutoScalingGroup autoScalingGroup : describeAutoScalingGroupsResult.getAutoScalingGroups()) {     for(Instance instance : autoScalingGroup.getInstances()) {         if(instance.getInstanceId().equals(instanceId)) {             return autoScalingGroup.getAutoScalingGroupName();         }     } }"
"private static final int POW10[] = {1, 10, 100, 1000, 10000, 100000, 1000000};   public static String format(double val, int precision) {      StringBuilder sb = new StringBuilder();      if (val &lt; 0) {          sb.append('-');          val = -val;      }      int exp = POW10[precision];      long lval = (long)(val * exp + 0.5);      sb.append(lval / exp).append('.');      long fval = lval % exp;      for (int p = precision - 1; p &gt; 0 &amp;&amp; fval &lt; POW10[p]; p--) {          sb.append('0');      }      sb.append(fval);      return sb.toString();  }"
"boolean isMultipart = ServletFileUpload.isMultipartContent(request);  if (isMultipart) {     FileItemFactory factory = new DiskFileItemFactory();     ServletFileUpload upload = new ServletFileUpload(factory);      try {         List items = upload.parseRequest(request);         Iterator iterator = items.iterator();         while (iterator.hasNext()) {             FileItem item = (FileItem) iterator.next();              if (!item.isFormField()) {                 String fileName = item.getName();                  String root = getServletContext().getRealPath(""/"");                 File path = new File(root + ""/uploads"");                 if (!path.exists()) {                     boolean status = path.mkdirs();                 }                  File uploadedFile = new File(path + ""/"" + fileName);                 System.out.println(uploadedFile.getAbsolutePath());                 item.write(uploadedFile);             }         }     } catch (FileUploadException e) {         e.printStackTrace();     } catch (Exception e) {         e.printStackTrace();     } }"
"String s = ""This is the work (my real job) which is great, and (also some stuff"";       ArrayList&lt;String&gt; words = new ArrayList&lt;String&gt;();      Scanner sentence = new Scanner(s);      boolean inParen = false;      StringBuilder inParenWord = new StringBuilder();      while(sentence.hasNext()) {         String word = sentence.next();         if(inParen) {            inParenWord.append("" "");            inParenWord.append(word);             if(word.endsWith("")"")) {               words.add(inParenWord.toString());               inParenWord = new StringBuilder();               inParen = false;            }         }         else {            if(word.startsWith(""("")) {               inParen = true;               inParenWord.append(word);            }            else {               words.add(word);            }         }      }       if(inParenWord.length()&gt;0) {         words.add(inParenWord.toString());      }        for(String word : words) {         System.out.println(word);      }"
"String readBuff = buff.readLine();                 String section = """";                 while (readBuff != null){                     if (section.equals(""source_files {"") &amp;&amp; !readBuff.equals(""}"")){                         sourceFiles.add(readBuff);                     } else if (section.equals(""clone_pairs {"") &amp;&amp; !readBuff.equals(""}"")){                         clonePairs.add(readBuff);                     } else if (readBuff.equals(""source_files {"") || readBuff.equals(""clone_pairs {"")) {                         section = readBuff;                     } else if (readBuff.equals(""}"")) {                         section = """";                     }                      readBuff = buff.readLine();                 }"
"public class MainActivity1 extends Activity {      String[] wordlist = new String[] { ""a"", ""b"", ""c"" };      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);          ListView list = new ListView(this);         list.setAdapter(new MyAdapter(this, wordlist));          setContentView(list);     }      private class MyAdapter extends ArrayAdapter&lt;String&gt; {          public MyAdapter(Context context, String[] strings) {             super(context, -1, -1, strings);         }          @Override         public View getView(int position, View convertView, ViewGroup parent) {              LinearLayout listLayout = new LinearLayout(MainActivity1.this);             listLayout.setLayoutParams(new AbsListView.LayoutParams(                     AbsListView.LayoutParams.WRAP_CONTENT,                     AbsListView.LayoutParams.WRAP_CONTENT));             listLayout.setId(5000);              TextView listText = new TextView(MainActivity1.this);             listText.setId(5001);              listLayout.addView(listText);          listText.setText(super.getItem(position));              return listLayout;         }     } }"
public class MainActivity extends Activity {      private CustomAdapter adapter;      @Override     public void onCreate(Bundle savedInstanceState) {         // TODO Auto-generated method stub         super.onCreate(savedInstanceState);         setContentView(R.layout.activity_main);           ListView lv = (ListView) findViewById(R.id.listView1);         adapter = new CustomAdapter(this);         lv.setAdapter(adapter);          Button btnAdd_category = (Button) findViewById(R.id.recordAddCategory);         btnAdd_category.setOnClickListener(new OnClickListener() {              @Override             public void onClick(View v) {                 adapter.addRow();             }         });     }
"JSONObject jsonObject = new JSONObject(""Your JSON STRING HERE"");  JSONArray  jsonArray =jsonObject.getJSONArray(""item"");   for (int i = 0; i &lt; jsonArray.length(); i++) {     JSONObject jsonObjectitem=                            jsonArray.getJSONObject(i);                                                                                // get title or link here      String strtitle=jsonObjectitem.getString(""title"");       //....get other values in same way      // get media:content json object   JSONObject jsonObjectmediacontent =                         jsonObjectitem.getJSONObject(""media:content"");     // get url,medium,...       String strurl=jsonObjectmediacontent.getString(""-url"");       //....get other values in same way                                     }"
"private JDialog dialog;  private String inputValue;  String showPromptDialog(Frame parent) {     dialog = new JDialog(parent, true);     dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);      // [add components to dialog here]      firstButton.setAction(new ButtonAction(""Button 1"",  ""first""));     secondButton.setAction(new ButtonAction(""Button 2"", ""second""));     thirdButton.setAction(new ButtonAction(""Button 3"",  ""third""));     fourthButton.setAction(new ButtonAction(""Button 4"", ""fourth""));     fifthButton.setAction(new ButtonAction(""Button 5"",  ""fifth""));     sixthButton.setAction(new ButtonAction(""Button 6"",  ""sixth""));      dialog.pack();     dialog.setLocationRelativeTo(parent);      inputValue = null;     dialog.setVisible(true);      return inputValue; }  private class ButtonAction extends AbstractAction {     private static final long serialVersionUID = 1;      ButtonAction(String text,                  String actionCommand) {         super(text);         putValue(ACTION_COMMAND_KEY, actionCommand);     }      public void actionPerformed(ActionEvent event) {         inputValue = event.getActionCommand();         dialog.dispose();     } }"
"public static String post(String url,String[] args) throws UnsupportedEncodingException {         HttpClient httpClient = new DefaultHttpClient();         HttpContext localContext = new BasicHttpContext();         HttpPost httpPost = new HttpPost(url);          FileBody bin = new FileBody(new File(args[0]));//""/sdcard/DCIM/cam.jpg""));//         long size = bin.getContentLength();          MultipartEntity reqEntity = new MultipartEntity();         reqEntity.addPart(""image1"", bin);         String content = ""-"";         try {              httpPost.setEntity(reqEntity);                 HttpResponse response = httpClient.execute(httpPost, localContext);                 HttpEntity ent = response.getEntity();                 InputStream st = ent.getContent();                 StringWriter writer = new StringWriter();                 IOUtils.copy(st, writer);                 content = writer.toString();                          } catch (IOException e) {                                return ""false"";         }         return content;     }"
"public JPanel loginLayer(){     JPanel masterPane = new JPanel(new GridBagLayout);      JPanel centerPane = new JPanel();     centerPane.setLayout(new BoxLayout(centerPane, BoxLayout.Y_AXIS));      JLabel label = new JLabel(""Swing is overly"");     label.setAlignmentX(Component.CENTER_ALIGNMENT);     centerPane.add(label);     JButton button = new JButton(""complicated"");     button.setAlignmentX(Component.CENTER_ALIGNMENT);     centerPane.add(button);     JTextField textField = new JTextField(10);     centerPane.add(textField);      masterPane.add(centerPane);      // Add additional borders to providing padding around the center pane     // as you need      return masterPane; }"
"ITDConnection QCConnection = ClassFactory.createTDConnection(); QCConnection.initConnection(""http://nceqcwebp1/qcbin"", ""E_TRAVEL"", """"); QCConnection.connectProject(""ETVNRE"", ""vigupta"", ""Amadeus!!""); ITestSetTreeManager treeManager = QCConnection.testSetTreeManager().queryInterface(ITestSetTreeManager.class); ITestSetFolder baseFolder = treeManager.root().queryInterface(ITestSetFolder.class); baseFolder.addNode(""Automatic Test Creation""); ITestSetFolder testSetFolder = treeManager.nodeById(baseFolder.findChildNode(""Automatic Test Creation"").nodeID()).queryInterface(ITestSetFolder.class);  ITestSetFactory factory = testSetFolder.testSetFactory().queryInterface(ITestSetFactory.class); ITestSet testSet = factory.addItem(new Variant(Variant.Type.VT_NULL)).queryInterface(ITestSet.class); testSet.name(""Automatic Test Set""); testSet.status(""Open"");  testSet.field(""CY_USER_04"", ""no schema used""); testSet.field(""CY_USER_07"", ""Non-regression""); testSet.post(); testSet.unLockObject();"
"try {     DefaultHttpClient httpclient = new DefaultHttpClient();     File f = new File(filename);      HttpPost httpost = new HttpPost(""http://myremotehost:8080/upload/upload"");     MultipartEntity entity = new MultipartEntity();     entity.addPart(""myIdentifier"", new StringBody(""somevalue""));     entity.addPart(""myFile"", new FileBody(f));     httpost.setEntity(entity);      HttpResponse response;      response = httpclient.execute(httpost);      Log.d(""httpPost"", ""Login form get: "" + response.getStatusLine());      if (entity != null) {         entity.consumeContent();     }     success = true; } catch (Exception ex) {     Log.d(""FormReviewer"", ""Upload failed: "" + ex.getMessage() +         "" Stacktrace: "" + ex.getStackTrace());     success = false; } finally {      mDebugHandler.post(mFinishUpload); }"
"StringValue sv = new StringValue() {       @Override       public String getString(Object value) {           if (value instanceof MyObject) {               return .... // use MyObject properties to build a suitable rep           }           return TO_STRING.getString(value);       }     } list.setCellRenderer(new DefaultListRenderer(sv)); // a bit of beauty: same rep is re-usable in other collection components table.setCellRenderer(MyObject.class, new DefaultTableRenderer(sv); comboBox.setRenderer(list.getCellRenderer()); tree.setTreeCellRenderer(new DefaultTreeRenderer(sv));"
"net.sf.json.JSONObject obj = new net.sf.json.JSONObject(); obj.put(&quot;jsonStringValue&quot;,&quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;); obj.put(&quot;quotedJsonStringValue&quot;,&quot;\'{\&quot;hello\&quot;:\&quot;world\&quot;}\'&quot;); obj.put(&quot;naturalStringValue&quot;, &quot;\&quot;hello world\&quot;&quot;); System.out.println(obj.toString()); System.out.println(obj.getString(&quot;jsonStringValue&quot;)); System.out.println(obj.getString(&quot;quotedJsonStringValue&quot;)); System.out.println(obj.getString(&quot;naturalStringValue&quot;));"
"JScrollPane scroller = new JScrollPane(mainPane); scroller.setPreferredSize(new Dimension(200,200)); // ... etc scroller.getVerticalScrollBar().setUI(new BasicScrollBarUI()     {            @Override         protected JButton createDecreaseButton(int orientation) {             return createZeroButton();         }          @Override             protected JButton createIncreaseButton(int orientation) {             return createZeroButton();         }          private JButton createZeroButton() {             JButton jbutton = new JButton();             jbutton.setPreferredSize(new Dimension(0, 0));             jbutton.setMinimumSize(new Dimension(0, 0));             jbutton.setMaximumSize(new Dimension(0, 0));             return jbutton;         }     });"
"if (file.isDirectory()) {     String[] contents = file.list();     StringBuilder sb = new StringBuilder();     for (String name: contents) {         sb.Append(name);         sb.Append(""\n"");     }      HttpResponse response = new DefaultHttpResponse(HTTP_1_1, OK);     response.setContent(ChannelBuffers.copiedBuffer(sb.toString(), CharsetUtil.UTF_8));     response.setHeader(CONTENT_TYPE, ""text/plain; charset=UTF-8"");      if (isKeepAlive(request)) {         response.setHeader(CONTENT_LENGTH, response.getContent().readableBytes());         response.setHeader(CONNECTION, HttpHeaders.Values.KEEP_ALIVE);     }      ChannelFuture future = e.getChannel().write(response);     if (!(isKeepAlive(request)) {         future.addListener(ChannelFutureListener.CLOSE);     }      return; }"
"private HttpClient createHttpClient() {     HttpParams params = new BasicHttpParams();     HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);     HttpProtocolParams.setContentCharset(params, HTTP.DEFAULT_CONTENT_CHARSET);     HttpProtocolParams.setUseExpectContinue(params, true);      SchemeRegistry schReg = new SchemeRegistry();     schReg.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));     schReg.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));     ClientConnectionManager conMgr = new ThreadSafeClientConnManager(params, schReg);      return new DefaultHttpClient(conMgr, params); }"
"public String convertStringToHex(String str){    char[] chars = str.toCharArray();    StringBuffer hex = new StringBuffer();   for(int i = 0; i &lt; chars.length; i++){     hex.append(Integer.toHexString((int)chars[i]));   }    return hex.toString(); }  public String convertHexToString(String hex){    StringBuilder sb = new StringBuilder();   StringBuilder temp = new StringBuilder();    //49204c6f7665204a617661 split into two characters 49, 20, 4c...   for( int i=0; i&lt;hex.length()-1; i+=2 ){        //grab the hex in pairs       String output = hex.substring(i, (i + 2));       //convert hex to decimal       int decimal = Integer.parseInt(output, 16);       //convert the decimal to character       sb.append((char)decimal);        temp.append(decimal);   }   System.out.println(""Decimal : "" + temp.toString());    return sb.toString(); }"
Bundle extras = intent.getExtras(); DownloadManager.Query q = new DownloadManager.Query(); q.setFilterById(extras.getLong(DownloadManager.EXTRA_DOWNLOAD_ID)); Cursor c = YOUR_DM.query(q);  if (c.moveToFirst()) {     int status = c.getInt(c.getColumnIndex(DownloadManager.COLUMN_STATUS));     if (status == DownloadManager.STATUS_SUCCESSFUL) {         // process download         title = c.getString(c.getColumnIndex(DownloadManager.COLUMN_TITLE));         // get other required data by changing the constant passed to getColumnIndex     } }
String url=getUrl();     JSONObject jsonObject = new JSONObject();     StringBuilder stringBuilder=new StringBuilder();     try      {         HttpGet httpGet = new HttpGet(url);         HttpClient client = new DefaultHttpClient();         HttpResponse response = client.execute(httpGet);         HttpEntity entity = response.getEntity();         InputStream stream = entity.getContent();         int b;         while ((b = stream.read()) != -1) {             stringBuilder.append((char) b);         }          jsonObject = new JSONObject(stringBuilder.toString());      } catch (JSONException e) {         e.printStackTrace();     } catch (ClientProtocolException e) {     } catch (IOException e) {    }
"public class MainMenu {     private CardLayout layout;     private Frame frame;      public MainMenu(final Frame frame) {          this.frame = frame;          this.layout = (CardLayout)frame.getLayout();           JButton buttonSingle = new JButton(""Single"");               buttonSingle.setAlignmentX(Component.CENTER_ALIGNMENT);          buttonSingle.addActionListener(new ActionListener(){              @Override              public void actionPerformed(ActionEvent e) {                  layout.show(frame, ""single"");              }          });     } }"
