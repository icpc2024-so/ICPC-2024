code
"ImageView imageView = new ImageView(this); imageView.setImageResource(R.drawable.beerbottle);  RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.RelativeLayout01); RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(     RelativeLayout.LayoutParams.WRAP_CONTENT,     RelativeLayout.LayoutParams.WRAP_CONTENT ); layoutParams.addRule(RelativeLayout.BELOW, R.id.ButtonRecalculate); layoutParams.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);  relativeLayout.addView(imageView, layoutParams);"
"String urlParameters  = ""param1=a&amp;param2=b&amp;param3=c""; byte[] postData       = urlParameters.getBytes( StandardCharsets.UTF_8 ); int    postDataLength = postData.length; String request        = ""http://example.com/index.php""; URL    url            = new URL( request ); HttpURLConnection conn= (HttpURLConnection) url.openConnection();            conn.setDoOutput( true ); conn.setInstanceFollowRedirects( false ); conn.setRequestMethod( ""POST"" ); conn.setRequestProperty( ""Content-Type"", ""application/x-www-form-urlencoded"");  conn.setRequestProperty( ""charset"", ""utf-8""); conn.setRequestProperty( ""Content-Length"", Integer.toString( postDataLength )); conn.setUseCaches( false ); try( DataOutputStream wr = new DataOutputStream( conn.getOutputStream())) {    wr.write( postData ); }"
"List&lt;Element&gt; thingsToBeAdd = new ArrayList&lt;Element&gt;(); for(Iterator&lt;Element&gt; it = mElements.iterator(); it.hasNext();) {     Element element = it.next();     if(...) {           //irrelevant stuff..         if(element.cFlag){             // mElements.add(new Element(""crack"",getResources(), (int)touchX,(int)touchY));             thingsToBeAdd.add(new Element(""crack"",getResources(), (int)touchX,(int)touchY));             element.cFlag = false;         }                } } mElements.addAll(thingsToBeAdd );"
"public void onTouchEvent(MotionEvent event) {     int ptrId = -1;     int action = event.getAction();     switch (action &amp; MotionEvent.ACTION_MASK)     {         case MotionEvent.ACTION_DOWN:             down(event.getPointerId(0), (int)event.getX(), (int)event.getY());         break;         case MotionEvent.ACTION_UP:             up(event.getPointerId(0));         break;         case MotionEvent.ACTION_POINTER_DOWN:             ptrId = action &gt;&gt; MotionEvent.ACTION_POINTER_ID_SHIFT;             int ptrIdx = event.findPointerIndex(ptrId);             down(ptrId, (int)event.getX(ptrIdx), (int)event.getY(ptrIdx));         break;         case MotionEvent.ACTION_POINTER_UP:             ptrId = action &gt;&gt; MotionEvent.ACTION_POINTER_ID_SHIFT;             up(ptrId);         break;         case MotionEvent.ACTION_MOVE:             for(int i = 0; i &lt; event.getPointerCount(); ++i)                 if(event.getPointerId(i) == inputPad.id())                 {                     inputPad.position(event.getX(inputPad.id()));                     player.velocity(inputPad.delta());                     player.stand();                     if(enemy != null) {                         Fighter.collide(player, enemy);                         enemy.update();                     }                     player.update();                     break;                 }         break;     } }"
"public static X509Certificate sign(PKCS10CertificationRequest inputCSR, PrivateKey caPrivate, KeyPair pair)         throws InvalidKeyException, NoSuchAlgorithmException,         NoSuchProviderException, SignatureException, IOException,         OperatorCreationException, CertificateException {         AlgorithmIdentifier sigAlgId = new DefaultSignatureAlgorithmIdentifierFinder()             .find(""SHA1withRSA"");     AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder()             .find(sigAlgId);      AsymmetricKeyParameter foo = PrivateKeyFactory.createKey(caPrivate             .getEncoded());     SubjectPublicKeyInfo keyInfo = SubjectPublicKeyInfo.getInstance(pair             .getPublic().getEncoded());      PKCS10CertificationRequestHolder pk10Holder = new PKCS10CertificationRequestHolder(inputCSR);     //in newer version of BC such as 1.51, this is      //PKCS10CertificationRequest pk10Holder = new PKCS10CertificationRequest(inputCSR);      X509v3CertificateBuilder myCertificateGenerator = new X509v3CertificateBuilder(             new X500Name(""CN=issuer""), new BigInteger(""1""), new Date(                     System.currentTimeMillis()), new Date(                     System.currentTimeMillis() + 30 * 365 * 24 * 60 * 60                             * 1000), pk10Holder.getSubject(), keyInfo);      ContentSigner sigGen = new BcRSAContentSignerBuilder(sigAlgId, digAlgId)             .build(foo);              X509CertificateHolder holder = myCertificateGenerator.build(sigGen);     X509CertificateStructure eeX509CertificateStructure = holder.toASN1Structure();      //in newer version of BC such as 1.51, this is      //org.spongycastle.asn1.x509.Certificate eeX509CertificateStructure = holder.toASN1Structure();       CertificateFactory cf = CertificateFactory.getInstance(""X.509"", ""BC"");      // Read Certificate     InputStream is1 = new ByteArrayInputStream(eeX509CertificateStructure.getEncoded());     X509Certificate theCert = (X509Certificate) cf.generateCertificate(is1);     is1.close();     return theCert;     //return null; }"
"public class ObservableBlockingQueue&lt;E&gt; extends LinkedBlockingQueue&lt;E&gt; {      private ISaturatedPoolObserver observer;      private int capacity;      public ObservableBlockingQueue(ISaturatedPoolObserver observer,          int capacity) {          super(capacity);          this.observer = observer;          this.capacity = capacity;     }     @Override     public boolean offer(E o) {         boolean offered = super.offer(o);         if (!offered) {             observer.onSaturated();         }         return offered;     }     @Override     public boolean offer(E o, long timeout, TimeUnit unit) throws InterruptedException {         boolean offered = super.offer(o, timeout, unit);         if (!offered) {             observer.onSaturated();         }         return offered;     }     @Override     public E poll() {         E e = super.poll();         if (e != null) {              checkUnsaturated();         }         return e;     }     @Override     public E poll(long timeout, TimeUnit unit) throws InterruptedException {         E e = super.poll(timeout, unit);         if (e != null) {              checkUnsaturated();         }         return e;     }     @Override     public E take() throws InterruptedException {         E e = super.take();         checkUnsaturated();         return e;     }     @Override     public boolean remove(E e) throws InterruptedException {         boolean removed = super.remove(e);         if (removed) {             checkUnsaturated();         }         return removed;     }     private void checkUnsaturated() {         if (super.size() * 100 / capacity &lt; UNSATURATED_PERCENTAGE) {             observer.onUnsaturated();         }     } }"
"boolean dragEnabled = table.getDragEnabled();              if (!dragEnabled &amp;&amp; !isFileList &amp;&amp; table.editCellAt(pressedRow, pressedCol, e)) {                 setDispatchComponent(e);                 repostEvent(e);             }              CellEditor editor = table.getCellEditor();             if (dragEnabled || editor == null || editor.shouldSelectCell(e)) {                 table.changeSelection(pressedRow, pressedCol,                          BasicGraphicsUtils.isMenuShortcutKeyDown(e),                          e.isShiftDown());             }"
private LinearLayout myLayout;  protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.something);      myLayout = (LinearLayout) findViewById(R.id.my_layout);     createBtns( loadFirstCategory() ); }  private void createBtns(Category c) {     List&lt;Category&gt; c_list = c.getCategoryList();     for (int i=0; i&lt;c_list.size(); i++)     {         Button btn = new Button(this);         btn.setText( c_list.get(i).getName() );         myLayout.addView(btn);          btn.setOnClickListener(new OnClickListener() {             public void onClick()             {                 myLayout.removeAll();                 createBtns( c_list.get(i) );             }         });     } }
"private static JFreeChart createClusteredChart(String title, String categoryAxisLabel, String valueAxisLabel, IntervalXYDataset dataset) {    NumberAxis domainAxis = new NumberAxis(categoryAxisLabel);   domainAxis.setAutoRangeIncludesZero(false);    ValueAxis valueAxis = new NumberAxis(valueAxisLabel);    XYBarRenderer renderer = new ClusteredXYBarRenderer();    XYPlot plot = new XYPlot(dataset, domainAxis, valueAxis, renderer);   plot.setOrientation(PlotOrientation.VERTICAL);    JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, plot, true);    return chart; }"
"enum ValiantHeroWithPrincessSavingTendencies {   SUPERMARIO(Quotes.TYPICAL_QUOTE_FROM_MARIO),   ZELDA(Quotes.TYPICAL_QUOTE_FROM_ZELDA);    private String aPreparedQuotePurportedToBeSpontaneousAlmostImpulsive;    public String getQuoteUnderStressfulCircumstances() {     return aPreparedQuotePurportedToBeSpontaneousAlmostImpulsive;   }    private ValiantHeroWithPrincessSavingTendencies(String quote) {     aPreparedQuotePurportedToBeSpontaneousAlmostImpulsive = quote;   }    private static class Quotes {     private static final String TYPICAL_QUOTE_FROM_ZELDA = ""Have at ya!"";     private static final String TYPICAL_QUOTE_FROM_MARIO = ""We, wagliu'!"";   } }"
"ExtendedPropertyDefinition propDef_PidLidEmail1DisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8080, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1AddressType = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8082, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1EmailAddress = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8083, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalDisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8084, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalEntryId = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8085, MapiPropertyType.Binary);  ExchangeService mailbox = new ExchangeService(ExchangeVersion.Exchange2007_SP1); mailbox.setUrl(new URL(""https://remote.domain.com/EWS/exchange.asmx"").toURI()); ExchangeCredentials credentials = new WebCredentials(""user.name"", ""pw"", ""domain""); mailbox.setCredentials(credentials);  String FIRST = ""First""; String LAST = ""Last""; String FIRST_LAST = FIRST + "" "" + LAST; // ""First Last"" String EMAIL = ""first.last@email.com""; String DISPLAY_NAME = FIRST + "" "" + LAST + "" ("" + EMAIL + "")""; // ""First Last (first.last@email.com)""  Contact c = new Contact(mailbox); c.setGivenName(FIRST); c.setSurname(LAST); c.setFileAs(FIRST_LAST);  // don't use this //    c.getEmailAddresses().setEmailAddress(EmailAddressKey.EmailAddress1, new EmailAddress(EMAIL));  // Address book Name (seem to trigger the whole address book functionality) c.setSubject(FIRST_LAST); // Address book email address c.setExtendedProperty(propDef_PidLidEmail1OriginalDisplayName, EMAIL); // contact and address book display name c.setExtendedProperty(propDef_PidLidEmail1DisplayName, DISPLAY_NAME);  c.setExtendedProperty(propDef_PidLidEmail1AddressType, ""SMTP""); // constant c.setExtendedProperty(propDef_PidLidEmail1EmailAddress, EMAIL);  // not needed after all, exchange sets this automatically //    c.setExtendedProperty(propDef_PidLidEmail1OriginalEntryId, ???);  c.save(WellKnownFolderName.Contacts);  for(Item item : mailbox.findItems(WellKnownFolderName.Contacts, new ItemView(1000))) {   Contact result = (Contact) item;    PropertySet propertySet = new PropertySet(BasePropertySet.FirstClassProperties);   propertySet.add(propDef_PidLidEmail1AddressType);   propertySet.add(propDef_PidLidEmail1EmailAddress);   propertySet.add(propDef_PidLidEmail1OriginalDisplayName);   propertySet.add(propDef_PidLidEmail1DisplayName);   propertySet.add(propDef_PidLidEmail1OriginalEntryId);    result = Contact.bind(mailbox, result.getId(), propertySet);    LOGGER.info(""count: "" + result.getExtendedProperties().getCount());    for(ExtendedProperty p : result.getExtendedProperties())   {     LOGGER.info(p.toString());   } }"
TableRowSorter&lt;TableModel&gt; sorter =     new DefaultTableRowSorter&lt;TableModel&gt;(this.getModel())  {     public int convertRowIndexToModel(int index)     {         int maxRow = super.getViewRowCount();         if (index &gt;= maxRow)             return index;         return super.convertRowIndexToModel(index);     }      public int convertRowIndexToView(int index)      {         int maxRow = super.getModelRowCount();         if (index &gt; maxRow)             return index;         return super.convertRowIndexToView(index);     }      public int getViewRowCount()      {         return super.getViewRowCount() + 1;     } };  myTable.setRowSorter(sorter);
"public class KundenwertCellFactory implements Callback&lt;TableColumn&lt;ProfilZuordnungTableRowModel, Double&gt;, TableCell&lt;ProfilZuordnungTableRowModel, Double&gt;&gt; {      public TableCell&lt;ProfilZuordnungTableRowModel, Double&gt; call(TableColumn&lt;ProfilZuordnungTableRowModel, Double&gt; param) {         TableCell&lt;ProfilZuordnungTableRowModel, Double&gt; cell = new TableCell&lt;ProfilZuordnungTableRowModel, Double&gt;() {              @Override             public void updateItem(final Double item, boolean empty) {                 if (item != null) {                     setText(item.toString()); // you can format your value here                 }             }         };         return cell;     } }"
"public static void SaveInPreference(Context mContext, String key, String objString) {     SharedPreferences.Editor editor = mContext.getSharedPreferences(mContext.getString(R.string.app_name),             Context.MODE_PRIVATE).edit();     editor.putString(key, objString);     editor.commit(); }  public static String getPrefString(Context mContext, final String key, final String defaultStr) {     SharedPreferences pref = mContext.getSharedPreferences(mContext.getString(R.string.app_name),             Context.MODE_PRIVATE);     return pref.getString(key, defaultStr); }"
cfgButton.addActionListener(new ActionListener() {     @Override     public void actionPerfomed(ActionEvent e) {         // do the stuff related to cfgButton here     } };  newButton.addActionListener(new ActionListener() {     @Override     public void actionPerfomed(ActionEvent e) {         // do the stuff related to newButton here     } };  exitButton.addActionListener(new ActionListener() {     @Override     public void actionPerfomed(ActionEvent e) {         // do the stuff related to exitButton here     } };
"IExtensionRegistry registry = Platform.getExtensionRegistry();     IExtensionPoint extensionPoint = registry             .getExtensionPoint(""myplugin.myextension"");     IConfigurationElement points[] = extensionPoint             .getConfigurationElements();     for (IConfigurationElement point : points) {         if (""myextensionFactory"".equals(point.getName())) {             Object impl = point.createExecutableExtension(""class"");             if (impl instanceof IMyExtension) {                 ((IMyExtension) impl).foo();             }         }     } }"
"listView.setOnItemClickListener(new OnItemClickListener() {             @Override             public void onItemClick(AdapterView&lt;?&gt; arg0, View view, int position,long id) {                                  TextView txtView=(TextView)view.findViewById(R.id.txt_view);                 String fname=txtView.getText().toString().toLowerCase();                                  int resID=getResources().getIdentifier(fname, ""raw"", getPackageName());                                MediaPlayer mediaPlayer=MediaPlayer.create(this,resID);                     mediaPlayer.start();             }         });"
"private static List&lt;InetAddress&gt; getIpAddress() {   try {     List&lt;InetAddress&gt; result = new ArrayList&lt;InetAddress&gt;();      Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces();     while (interfaces.hasMoreElements()) {       NetworkInterface intf = interfaces.nextElement();       Enumeration&lt;InetAddress&gt; addresses = intf.getInetAddresses();       while (addresses.hasMoreElements()) {         InetAddress address = addresses.nextElement();         if (!address.isLoopbackAddress() &amp;&amp; !address.isLinkLocalAddress()) {           result.add(address);         }       }     }     return result;   } catch (SocketException ex) {     Log.e(TAG, ""Failed to list network interfaces."", ex);     return null;   } }"
"public String[] listOperations(String filename) throws FileNotFoundException, SAXException, IOException, ParserConfigurationException {   Document d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new FileInputStream(filename));   NodeList elements = d.getElementsByTagName(""operation"");   ArrayList&lt;String&gt; operations = new ArrayList&lt;String&gt;();   for (int i = 0; i &lt; elements.getLength(); i++) {     operations.add(elements.item(i).getAttributes().getNamedItem(""name"").getNodeValue());   }   return operations.toArray(new String[operations.size()]); }"
Proto  Local Address          Foreign Address        State  TCP    MYHOST:8080           MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:9090           MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:3389           MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:7717           MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:51114          MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:netbios-ssn    MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:netbios-ssn    MYHOST.mydomain.co.in:0  LISTENING  TCP    MYHOST:2573           hj-lyncfe.mydomain.co.in:5061  ESTABLISHED  TCP    MYHOST:2591           mail.mydomain.co.in:8502  ESTABLISHED  TCP    MYHOST:2593           mail.mydomain.co.in:8502  ESTABLISHED
public class BulkSMSContactsDataModel extends ListDataModel&lt;BulkSMSContacts&gt; implements SelectableDataModel&lt;BulkSMSContacts&gt; {      public BulkSMSContactsDataModel() {   }    public BulkSMSContactsDataModel(List&lt;BulkSMSContacts&gt; data) {       super(data);   }    @Override   public BulkSMSContacts getRowData(String rowKey) {             List&lt;BulkSMSContacts&gt; contacts = (List&lt;BulkSMSContacts&gt;) new yourDao.getListOfBulkSMSContacts(); //yourDAO :BulkSMSContactsSelector i guess     for(BulkSMSContacts c : contacts) {           if(String.valueOf(c.getContactId()).equals(rowKey))               return c;       }        return null;   }    @Override   public Object getRowKey(BulkSMSContacts obj) {       return String.valueOf(obj.getContactId());   }
"StringSerializer stringSerializer = StringSerializer.get(); BytesArraySerializer bas = BytesArraySerializer.get();   IndexedSlicesQuery&lt;String, String, byte[]&gt; indexedSlicesQuery =              HFactory.createIndexedSlicesQuery(""your keyspace"", stringSerializer, stringSerializer, bas);  indexedSlicesQuery.setColumnFamily(""ClientHeaders""); indexedSlicesQuery.setColumnNames(""UUID"",""Cliend_id"",""IP"",""Country"",""Date""); indexedSlicesQuery.addEqualsExpression(""Client_id"", stringSerializer.toBytes(""123""));  QueryResult&lt;OrderedRows&lt;String, String, byte[]&gt;&gt; result = indexedSlicesQuery.execute();"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"Multimap&lt;String, String&gt; myMultimap = ArrayListMultimap.create();    // Adding some key/value    myMultimap.put(""STATUS1"", ""somePDF"");   myMultimap.put(""STATUS1"", ""someDOC"");   myMultimap.put(""STATUS1"", ""someXCL"");      myMultimap.put(""STATUS2"",""someFormat"");    // Getting the size   int size = myMultimap.size();   System.out.println(size);  // 4    // Getting values   Collection&lt;string&gt; stats1 = myMultimap.get(""STATUS1"");   System.out.println(stats1); // [somePDF, someDOC, someXCL]"
"private List&lt;HandlerMethodArgumentResolver&gt; getDefaultArgumentResolvers() {         List&lt;HandlerMethodArgumentResolver&gt; resolvers = new ArrayList&lt;HandlerMethodArgumentResolver&gt;();      // Annotation-based argument resolution     resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));     resolvers.add(new RequestParamMapMethodArgumentResolver());     resolvers.add(new PathVariableMethodArgumentResolver());     resolvers.add(new ServletModelAttributeMethodProcessor(false));     resolvers.add(new RequestResponseBodyMethodProcessor(getMessageConverters()));     resolvers.add(new RequestPartMethodArgumentResolver(getMessageConverters()));     resolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));     resolvers.add(new RequestHeaderMapMethodArgumentResolver());     resolvers.add(new ServletCookieValueMethodArgumentResolver(getBeanFactory()));     resolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));      // Type-based argument resolution     resolvers.add(new ServletRequestMethodArgumentResolver());     resolvers.add(new ServletResponseMethodArgumentResolver());     resolvers.add(new HttpEntityMethodProcessor(getMessageConverters()));     resolvers.add(new RedirectAttributesMethodArgumentResolver());     resolvers.add(new ModelMethodProcessor());     resolvers.add(new MapMethodProcessor());     resolvers.add(new ErrorsMethodArgumentResolver());     resolvers.add(new SessionStatusMethodArgumentResolver());     resolvers.add(new UriComponentsBuilderMethodArgumentResolver());      // Custom arguments     if (getCustomArgumentResolvers() != null) {         resolvers.addAll(getCustomArgumentResolvers());     }      // Catch-all     resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));     resolvers.add(new ServletModelAttributeMethodProcessor(true));      return resolvers; }"
"static KeyPair demo(InputStream pub, InputStream pvt) throws IOException, GeneralSecurityException {     KeyFactory f = KeyFactory.getInstance(""RSA"");      RSAPublicKeySpec pubspec = decodeRSAPublicSSH(readAllBase64Bytes(pub));     RSAPrivateCrtKeySpec pvtspec = decodeRSAPrivatePKCS1(readAllBase64Bytes(pvt));      return new KeyPair(f.generatePublic(pubspec), f.generatePrivate(pvtspec)); }  static RSAPublicKeySpec decodeOpenSSH(byte[] input) {     String[] fields = new String(input, StandardCharsets.US_ASCII).split("" "");     if ((fields.length &lt; 2) || (!fields[0].equals(""ssh-rsa""))) throw new IllegalArgumentException(""Unsupported type"");     byte[] std = Base64.getDecoder().decode(fields[1]);     return decodeRSAPublicSSH(std); }  static RSAPublicKeySpec decodeRSAPublicSSH(byte[] encoded) {     ByteBuffer input = ByteBuffer.wrap(encoded);     String type = string(input);     if (!""ssh-rsa"".equals(type)) throw new IllegalArgumentException(""Unsupported type"");     BigInteger exp = sshint(input);     BigInteger mod = sshint(input);     if (input.hasRemaining()) throw new IllegalArgumentException(""Excess data"");     return new RSAPublicKeySpec(mod, exp); }  static RSAPrivateCrtKeySpec decodeRSAPrivatePKCS1(byte[] encoded) {     ByteBuffer input = ByteBuffer.wrap(encoded);     if (der(input, 0x30) != input.remaining()) throw new IllegalArgumentException(""Excess data"");     if (!BigInteger.ZERO.equals(derint(input))) throw new IllegalArgumentException(""Unsupported version"");     BigInteger n = derint(input);     BigInteger e = derint(input);     BigInteger d = derint(input);     BigInteger p = derint(input);     BigInteger q = derint(input);     BigInteger ep = derint(input);     BigInteger eq = derint(input);     BigInteger c = derint(input);     return new RSAPrivateCrtKeySpec(n, e, d, p, q, ep, eq, c); }  private static String string(ByteBuffer buf) {     return new String(lenval(buf), Charset.forName(""US-ASCII"")); }  private static BigInteger sshint(ByteBuffer buf) {     return new BigInteger(+1, lenval(buf)); }  private static byte[] lenval(ByteBuffer buf) {     byte[] copy = new byte[buf.getInt()];     buf.get(copy);     return copy; }  private static BigInteger derint(ByteBuffer input) {     int len = der(input, 0x02);     byte[] value = new byte[len];     input.get(value);     return new BigInteger(+1, value); }  private static int der(ByteBuffer input, int exp) {     int tag = input.get() &amp; 0xFF;     if (tag != exp) throw new IllegalArgumentException(""Unexpected tag"");     int n = input.get() &amp; 0xFF;     if (n &lt; 128) return n;     n &amp;= 0x7F;     if ((n &lt; 1) || (n &gt; 2)) throw new IllegalArgumentException(""Invalid length"");     int len = 0;     while (n-- &gt; 0) {         len &lt;&lt;= 8;         len |= input.get() &amp; 0xFF;     }     return len; }  private static byte[] readAllBase64Bytes(InputStream input) throws IOException {     ByteArrayOutputStream output = new ByteArrayOutputStream();     BufferedReader r = new BufferedReader(new InputStreamReader(input, StandardCharsets.US_ASCII));     Decoder decoder = Base64.getDecoder();     while (true) {         String line = r.readLine();         if (line == null) break;         if (line.startsWith(""-----"")) continue;         output.write(decoder.decode(line));     }     return output.toByteArray(); }"
"Bitmap source = BitmapFactory.decodeResource(this.getResources(), R.drawable.ic_launcher);  Bitmap target = RotateMyBitmap(source, 120.0f);  final ArrayList&lt;OverlayItem&gt; items = new ArrayList&lt;OverlayItem&gt;(); OverlayItem marker = new OverlayItem(""markerTitle"", ""markerDescription"", new GeoPoint(52.033954,1.210179)); marker.setMarkerHotspot(OverlayItem.HotspotPlace.TOP_CENTER); items.add(marker);  Drawable newMarker = new BitmapDrawable(getResources(), target);  //Drawable newMarker = this.getResources().getDrawable(R.drawable.maincar); DefaultResourceProxyImpl resProxyImp = new DefaultResourceProxyImpl(getApplicationContext()); ItemizedIconOverlay markersOverlay = new ItemizedIconOverlay&lt;OverlayItem&gt;(items, newMarker, null, resProxyImp); mapView.getOverlays().add(markersOverlay);"
private static int mapNewModifiers(int modifiers) {     if ((modifiers &amp; InputEvent.SHIFT_DOWN_MASK) != 0) {         modifiers |= InputEvent.SHIFT_MASK;     }     if ((modifiers &amp; InputEvent.ALT_DOWN_MASK) != 0) {         modifiers |= InputEvent.ALT_MASK;     }     if ((modifiers &amp; InputEvent.ALT_GRAPH_DOWN_MASK) != 0) {         modifiers |= InputEvent.ALT_GRAPH_MASK;     }     if ((modifiers &amp; InputEvent.CTRL_DOWN_MASK) != 0) {         modifiers |= InputEvent.CTRL_MASK;     }     if ((modifiers &amp; InputEvent.META_DOWN_MASK) != 0) {         modifiers |= InputEvent.META_MASK;     }      return modifiers; }
"public void BoundaryFill(int initialX, int initialY, Color bColor, Color fColor){     Stack&lt;Point&gt; points = new Stack&lt;&gt;();     points.add(new Point(initialX, initialY));      while(!points.isEmpty()) {         Point currentPoint = points.pop();         int x = currentPoint.x;         int y = currentPoint.y;          int current = bI.getRGB(x, y);         if((current != bColor.getRGB()) &amp;&amp; (current != fColor.getRGB())){             //bI.setRGB(x, y, fColor.getRGB());             bI.setRGB(x, y, fColor.getRGB());              repaint();              points.push(new Point(x+1, y));             points.push(new Point(x-1, y));             points.push(new Point(x, y+1));             points.push(new Point(x, y-1));         }     } }"
"public void moveFile(String fileName, String bucket, String newFilename, String contentType) throws IOException {     byte[] bytes = loadFile(bucket, fileName);     ByteArrayInputStream in = new ByteArrayInputStream(bytes);     saveToGcs(bucket, fileName, in, contentType); }  public byte[] loadFile(String bucket, String fileName) throws IOException {     GcsFilename gcsFileName = new GcsFilename(bucket, fileName);     GcsInputChannel readChannel = gcsService.openReadChannel(gcsFileName, 0);     InputStream in = Channels.newInputStream(readChannel);     return IOUtils.toByteArray(in); }  private void saveToGcs(String bucket, String filename, InputStream inputStream, String mimeType) throws IOException {     GcsFilename gcsFilename = new GcsFilename(bucket, filename);     GcsFileOptions options = new GcsFileOptions.Builder().mimeType(mimeType).acl(""public-read"").build();     GcsOutputChannel writeChannel = gcsService.createOrReplace(gcsFilename, options);     BufferedOutputStream outputStream = new BufferedOutputStream(Channels.newOutputStream(writeChannel));     IOUtils.copy(inputStream, outputStream);     outputStream.close();     writeChannel.close(); }"
