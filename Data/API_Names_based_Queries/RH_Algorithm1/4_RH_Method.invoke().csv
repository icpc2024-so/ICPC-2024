code
"public &lt;S&gt; Iterable&lt;S&gt; load(Class&lt;S&gt; ifc) throws Exception {   ClassLoader ldr = Thread.currentThread().getContextClassLoader();   Enumeration&lt;URL&gt; e = ldr.getResources(""META-INF/services/"" + ifc.getName());   Collection&lt;S&gt; services = new ArrayList&lt;S&gt;();   while (e.hasMoreElements()) {     URL url = e.nextElement();     InputStream is = url.openStream();     try {       BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));       while (true) {         String line = r.readLine();         if (line == null)           break;         int comment = line.indexOf('#');         if (comment &gt;= 0)           line = line.substring(0, comment);         String name = line.trim();         if (name.length() == 0)           continue;         Class&lt;?&gt; clz = Class.forName(name, true, ldr);         Class&lt;? extends S&gt; impl = clz.asSubclass(ifc);         Constructor&lt;? extends S&gt; ctor = impl.getConstructor();         S svc = ctor.newInstance();         services.add(svc);       }     }     finally {       is.close();     }   }   return services; }"
"public void popupMenuWillBecomeVisible(PopupMenuEvent e) {     JComboBox box = (JComboBox) e.getSource();     Object comp = box.getUI().getAccessibleChild(box, 0);     if (!(comp instanceof JPopupMenu)) return;     JComponent scrollPane = (JComponent) ((JPopupMenu) comp).getComponent(0);     Dimension size = new Dimension();     size.width = box.getPreferredSize().width;     size.height = scrollPane.getPreferredSize().height;     scrollPane.setPreferredSize(size);     //  following line for Tiger     // scrollPane.setMaximumSize(size); }"
[...] &lt;build&gt;   &lt;plugin&gt;     &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;     &lt;artifactId&gt;maven-site-plugin&lt;/artifactId&gt;     &lt;version&gt;3.0-beta-2&lt;/version&gt;     &lt;configuration&gt;       &lt;reportPlugins&gt;         &lt;plugin&gt;           &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;           &lt;artifactId&gt;maven-project-info-reports-plugin&lt;/artifactId&gt;           &lt;version&gt;2.2&lt;/version&gt;           &lt;reports&gt;             &lt;report&gt;cim&lt;/report&gt;             &lt;report&gt;issue-tracking&lt;/report&gt;           &lt;/reports&gt;         &lt;/plugin&gt;         &lt;plugin&gt;           &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;           &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;           &lt;version&gt;2.2&lt;/version&gt;         &lt;/plugin&gt;       &lt;/reportPlugins&gt;     &lt;/configuration&gt;   &lt;/plugin&gt; &lt;/build&gt; [...]
"public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {             Component c = super.prepareRenderer(renderer, row, column);              if ((column == 2 || column == 3) &amp;&amp; (Boolean)getValueAt(row, 0)) {                 return c;             }          //    if (column == 0 || column == 1 || (Boolean) getValueAt(row, 0)) {             if (column == 0 || column == 1) {                 return c;             }              return Box.createRigidArea(c.getPreferredSize());         }"
"Callback&lt;TableColumn&lt;TableData, Boolean&gt;, TableCell&lt;TableData, Boolean&gt;&gt; booleanCellFactory =              new Callback&lt;TableColumn&lt;TableData, Boolean&gt;, TableCell&lt;TableData, Boolean&gt;&gt;() {             @Override                 public TableCell&lt;TableData, Boolean&gt; call(TableColumn&lt;TableData, Boolean&gt; p) {                     return new BooleanCell();             }         };         active.setCellValueFactory(new PropertyValueFactory&lt;TableData,Boolean&gt;(""active""));         active.setCellFactory(booleanCellFactory);  class BooleanCell extends TableCell&lt;TableData, Boolean&gt; {         private CheckBox checkBox;         public BooleanCell() {             checkBox = new CheckBox();             checkBox.setDisable(true);             checkBox.selectedProperty().addListener(new ChangeListener&lt;Boolean&gt; () {                 public void changed(ObservableValue&lt;? extends Boolean&gt; observable, Boolean oldValue, Boolean newValue) {                     if(isEditing())                         commitEdit(newValue == null ? false : newValue);                 }             });             this.setGraphic(checkBox);             this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);             this.setEditable(true);         }         @Override         public void startEdit() {             super.startEdit();             if (isEmpty()) {                 return;             }             checkBox.setDisable(false);             checkBox.requestFocus();         }         @Override         public void cancelEdit() {             super.cancelEdit();             checkBox.setDisable(true);         }         public void commitEdit(Boolean value) {             super.commitEdit(value);             checkBox.setDisable(true);         }         @Override         public void updateItem(Boolean item, boolean empty) {             super.updateItem(item, empty);             if (!isEmpty()) {                 checkBox.setSelected(item);             }         }     }"
"Button btnA = (Button) findViewById(R.id.button1);      btnA.setOnClickListener(new View.OnClickListener() {               public void onClick(View v) {                      // TODO Auto-generated method stub                      startActivity(new Intent (""com.emods.app1.BUTTONA""));           }          });    Button btnB = (Button) findViewById(R.id.button2);      btnB.setOnClickListener(new View.OnClickListener() {               public void onClick(View v) {                      startActivity(new Intent (""com.emods.app1.BUTTONB""));              }       });"
"ComboBox accountStatusChoice = new ComboBox();  accountStatusChoice.setCaption(MessageResource.getLocalizedString(""caption.accountStatus"")); accountStatusChoice.setRequired(true); accountStatusChoice.setRequiredError(MessageResource.getLocalizedString(""error.required.accountStatus"")); accountStatusChoice.setImmediate(true);  for (AccountStatus accountStatus : AccountStatus.values()) {     accountStatusChoice.addItem(accountStatus);     accountStatusChoice.setItemCaption(accountStatus, MessageResource.getLocalizedString(accountStatus.name())); }  return accountStatusChoice;"
"textview1.setOnClickListener(new View.OnClickListener() {             public void onClick(View v) {                 fromWhere=""textview1"";                 showDialog(TIME_DIALOG_ID);             }     });      textview2.setOnClickListener(new View.OnClickListener() {             public void onClick(View v) {                 fromWhere=""textview2"";                 showDialog(TIME_DIALOG_ID);             }     });     ...     private TimePickerDialog.OnTimeSetListener mTimeSetListener =             new TimePickerDialog.OnTimeSetListener() {                 @Override                 public void onTimeSet(android.widget.TimePicker view,                         int hourOfDay, int minute) {                      if(fromWhere.equals(textview1))                            // set hour and minute to according variable and textview                     else if(fromWhere.equals(textview2))                            // set hour and minute to according variable and textview                     .. //so on for others                     //mHour = hourOfDay;                     //mMinute = minute;                     fromWhere="""";                 }     };"
"KeyStore trustStore  = KeyStore.getInstance( &quot;BKS&quot; /*KeyStore.getDefaultType()*/ ); FileInputStream instream = new FileInputStream(new File(&quot;/mnt/sdcard/keystore.bks&quot;)); try {     trustStore.load(instream, &quot;222222&quot;.toCharArray()); } catch (NoSuchAlgorithmException e) {     e.printStackTrace(); } catch (CertificateException e) {     e.printStackTrace(); } catch (IOException e) {     e.printStackTrace(); } finally {     try { instream.close(); } catch (Exception ignore) {} }  // Create socket factory with given keystore. SSLSocketFactory socketFactory = new SSLSocketFactory(trustStore);  SSLSocketFactory socketFactory = new SSLSocketFactory(trustStore); Scheme sch = new Scheme(&quot;https&quot;, socketFactory, 443); httpclient.getConnectionManager().getSchemeRegistry().register(sch);  HttpGet httpget = new HttpGet(&quot;https://10.2.20.20/fido/EzPay/login.php&quot;);  System.out.println(&quot;executing request &quot; + httpget.getRequestLine());  HttpResponse response = httpclient.execute(httpget); HttpEntity entity = response.getEntity();  System.out.println(&quot;----------------------------------------&quot;); System.out.println(response.getStatusLine()); if (entity != null) {     System.out.println(&quot;Response content length:  &quot; + entity.getContentLength()); }              // Print html. BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent())); String line = &quot;&quot;; while ((line = in.readLine()) != null) {      System.out.println(line); } in.close();"
"public Bitmap getBitmapFromView(RelativeLayout v) {         v.setLayoutParams(new LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT));         v.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));         v.layout(0, 0, v.getMeasuredWidth(), v.getMeasuredHeight());         Bitmap b = Bitmap.createBitmap(v.getMeasuredWidth(), v.getMeasuredHeight(), Bitmap.Config.ARGB_8888);          Canvas c = new Canvas(b);         v.draw(c);         return b;     }"
"JSONArray array = jobj.getJSONArray(""root""); JSONObject subObj; JSONArray subArray;  for (int i = 0; i &lt; array.length(); i++) {     subObj = array.getJSONObject(i);      if (subObj.has(""Sc_wesam"")) // handle Se_wesam     {         subArray = subObj.getJSONArray(""Sc_wesam"");          for (int j = 0; j &lt; subArray.length(); j++)         {             subObj = subArray.getJSONObject(j);             if (subObj.has(""head""))                 System.out.println(""Sc_wesam head value: "" +                                    subObj.getString(""head""));             else if (subObj.has(""color""))                 System.out.println(""Sc_wesam color value: "" +                                    subObj.getString(""color""));         }     }     else if (subObj.has(""Sc_we"")) // handle Se_we     {         subArray = subObj.getJSONArray(""Sc_wesam"");          // ... etc.     } }"
"MutableStack&lt;String&gt; stack =     Stacks.mutable.with(""j"", ""i"", ""h"", ""g"", ""f"", ""e"", ""d"", ""c"", ""b"", ""a"");  ListIterable&lt;String&gt; result = stack.pop(2); Assert.assertEquals(Lists.mutable.with(""a"", ""b""), result);  ArrayList&lt;String&gt; arrayList = stack.pop(4, new ArrayList&lt;&gt;()); Assert.assertEquals(Arrays.asList(""c"", ""d"", ""e"", ""f""), arrayList);  Assert.assertEquals(Stacks.mutable.withReversed(""g"", ""h"", ""i"", ""j""), stack);  MutableBag&lt;String&gt; bag = stack.pop(4, Bags.mutable.empty()); Assert.assertEquals(Bags.mutable.with(""g"", ""h"", ""i"", ""j""), bag);  Assert.assertTrue(stack.isEmpty());"
"final ListView&lt;CCSubscription&gt; tables = new ListView&lt;CCSubscription&gt;(             ""tables"", getCustomer().getSubscriptions()) {         @Override         protected void populateItem(ListItem&lt;CCSubscription&gt; item) {             ListView&lt;ResourceBalance&gt; resBalTable = new ListView&lt;ResourceBalance&gt;(""listview"", Arrays.asList(item.getModel().getObject().getResourceBalances())) {                  @Override                 protected void populateItem(ListItem&lt;ResourceBalance&gt; item) {                     ResourceBalance bal = item.getModelObject();                     item.add(new Label(""resource"", bal.getResource().getName()));                     item.add(new Label(""balance"", bal.getBalance()+""""));                 }             };             item.add(resBalTable);         }     };      add(tables);"
"OperatingSystemMXBean operatingSystemMXBean =      ManagementFactory.getOperatingSystemMXBean();  for (Method method: operatingSystemMXBean.getClass ().getMethods ())  {     method.setAccessible (true);     String methodName = method.getName ();     if (methodName.startsWith (""get"")         &amp;&amp; Modifier.isPublic (method.getModifiers ())         &amp;&amp; OperatingSystemMXBean.class.isAssignableFrom (             method.getDeclaringClass ())) {         try         {             System.out.println (                 methodName.substring (3) + "": "" +                  method.invoke (operatingSystemMXBean));         }         catch (Throwable ex)         {             // Ignore         }     } }"
"private boolean function isFutureTimestamp(){         String gwtTimestampFormat = convertToGwtTimeStampFormat(timestampFormat);          // timestampFormat = YYYY-MM-DD HH:mm:ss.S AM/PM z         // gwtTimestampFormat = yyyy.MM.dd HH:mm:ss.S a z          DateTimeFormat df = DateTimeFormat.getFormat(gwtTimestampFormat);           String newlyUpdatedTimestampValue = convertToGwtTimeStampFormat(timestampValue);         Date updatedDateTime = df.parse(newlyUpdatedTimestampValue);           String currentTimestamp = convertToGwtTimeStampFormat(currentTimestampValue);         Date currentDateTime = df.parse(currentTimestamp);          boolean isFutureTimestamp  = updatedDateTime.after(currentDateTime);         return isFutureTimestamp; }    private String convertToGwtTimeStampFormat(String gwtTimestampFormat) {          if (gwtTimestampFormat != null &amp;&amp; gwtTimestampFormat.length() &gt; 20) { // ""2012-12-23 23:12:32.2"".length= 21             gwtTimestampFormat = gwtTimestampFormat.replace(""-"", ""."");             gwtTimestampFormat = gwtTimestampFormat.replace(""YYYY"", ""yyyy"");             gwtTimestampFormat = gwtTimestampFormat.replace(""DD"", ""dd"");             gwtTimestampFormat = gwtTimestampFormat.replace(""AM/PM"", ""a"");             return gwtTimestampFormat;         }         else {             return """";         }     }"
"String sqlQuery = ""SELECT kompetence.kompetence_odlisujici_subcategories.nazev as odlisujici_nazev, tolerovana, zadana, aktualni ""+                 ""FROM IPR.kompetence_odlisujici, kompetence.kompetence_odlisujici_subcategories ""+                 ""WHERE IPR.kompetence_odlisujici.os_cislo_zamestnanec = ? AND tolerovana &lt;&gt; 0 AND zadana &lt;&gt; 0 AND aktualni &lt;&gt; 0 AND year = ? AND IPR.kompetence_odlisujici.active = 1 ""+                 ""AND kompetence.kompetence_odlisujici_subcategories.id = IPR.kompetence_odlisujici.id_odlisujici_subcategory"";"
"private Tbl getSampleTable(WordprocessingMLPackage wPMLpackage) {      ObjectFactory factory = Context.getWmlObjectFactory();     int writableWidthTwips = wPMLpackage.getDocumentModel().getSections()                                         .get(0).getPageDimensions()                                         .getWritableWidthTwips();     List&lt;Map&lt;String, String&gt;&gt; data = getSampleTableData();     TableDefinition tableDef = getSampleTableDef();     int cols = tableDef.getColumns().size();     int cellWidthTwips = new Double(             Math.floor((writableWidthTwips / cols))         ).intValue();      Tbl table = TblFactory.createTable((data.size() + 1), cols, cellWidthTwips);      Tr headerRow = (Tr) table.getContent().get(0);      int f = 0;     for (Column column : tableDef.getColumns()) {         Tc column = (Tc) headerRow.getContent().get(f);         P columnPara = (P) column.getContent().get(0);         f++;         Text text = factory.createText();         text.setValue(column.getName());         R run = factory.createR();         run.getContent().add(text);         columnPara.getContent().add(run);     }     int i = 1;      for (Map&lt;String, String&gt; entry : data) {         Tr row = (Tr) table.getContent().get(i);         i++;         int d = 0;         for (String key : entry.keySet()) {             Tc column = (Tc) row.getContent().get(d);             P columnPara = (P) column.getContent().get(0);             d++;             Text tx = factory.createText();             R run = factory.createR();             tx.setValue(entry.get(key));             run.getContent().add(tx);             columnPara.getContent().add(run);         }     }     return table; }"
"String input = ""SrcAddr: 0.0.21.201\n""+            ""DstAddr: 7.202.10.100\n""+            ""NextHop: 0.33.189.142\n""+            ""InputIf: 19\n""+            ""OutputIf: 50715"";   String SrcAddr=getMatchedString(""SrcAddr"",input); String NextHop=getMatchedString(""NextHop"",input); String InputIf=getMatchedString(""InputIf"",input); String OutputIf=getMatchedString(""OutputIf"",input);  System.out.println(SrcAddr); System.out.println(NextHop); System.out.println(InputIf); System.out.println(OutputIf);     ..........   public static String getMatchedString(String word,String input){       String REGEX = ""(?:""+word+"":)\\s(.*)"";      Pattern p = Pattern.compile(REGEX);      Matcher m = p.matcher(input);      if (m.find()) {         String matched = m.group(1);         return matched;      }      return null;   }"
"Registry&lt;ConnectionSocketFactory&gt; reg = RegistryBuilder.&lt;ConnectionSocketFactory&gt;create()         .register(""http"", PlainConnectionSocketFactory.INSTANCE)         .register(""https"", new MyConnectionSocketFactory(SSLContexts.createSystemDefault()))         .build(); PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager(reg); CloseableHttpClient httpclient = HttpClients.custom()         .setConnectionManager(cm)         .build(); try {     InetSocketAddress socksaddr = new InetSocketAddress(""mysockshost"", 1234);     HttpClientContext context = HttpClientContext.create();     context.setAttribute(""socks.address"", socksaddr);      HttpHost target = new HttpHost(""localhost"", 80, ""http"");     HttpGet request = new HttpGet(""/"");      System.out.println(""Executing request "" + request + "" to "" + target + "" via SOCKS proxy "" + socksaddr);     CloseableHttpResponse response = httpclient.execute(target, request, context);     try {         System.out.println(""----------------------------------------"");         System.out.println(response.getStatusLine());         EntityUtils.consume(response.getEntity());     } finally {         response.close();     } } finally {     httpclient.close(); }"
"package com.spmsoftware.plugin.listeners;  import com.atlassian.event.api.EventListener; import com.atlassian.event.api.EventPublisher; import com.atlassian.jira.component.ComponentAccessor; import com.atlassian.jira.event.issue.IssueEvent; import com.atlassian.jira.event.type.EventType; import com.atlassian.jira.issue.Issue; import com.atlassian.jira.issue.MutableIssue; import com.atlassian.jira.issue.customfields.manager.OptionsManager; import com.atlassian.jira.issue.customfields.option.Option; import com.atlassian.jira.issue.customfields.option.Options; import com.atlassian.jira.issue.fields.CustomField; import com.atlassian.jira.issue.fields.config.FieldConfig; import com.atlassian.jira.issue.fields.config.FieldConfigScheme; import org.apache.log4j.Logger; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean;  import java.util.List; import java.util.Map;  /**  * User: adnan  * Date: 5/4/14  * Time: 4:49 PM  */ public class IssueUpdateListener  implements InitializingBean, DisposableBean {      private static final Logger LOGGER = Logger.getLogger(IssueUpdateListener.class);      private final EventPublisher eventPublisher;    // private final JiraAuthenticationContext authenticationContext;      public IssueUpdateListener(EventPublisher eventPublisher) {         this.eventPublisher = eventPublisher;        // this.authenticationContext = ComponentAccessor.getJiraAuthenticationContext();     }      @Override     public void afterPropertiesSet() throws Exception {         eventPublisher.register(this);     }      @Override     public void destroy() throws Exception {         eventPublisher.unregister(this);     }      @EventListener     public void onIssueEvent(IssueEvent issueEvent) {         Long eventTypeId = issueEvent.getEventTypeId();         Issue issue = issueEvent.getIssue();         if (eventTypeId.equals(EventType.ISSUE_RESOLVED_ID)) {             MutableIssue mutableIssue = getMutableIssue(issue);             CustomField customerNameCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""Customer Name"");             CustomField allCustomersCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""All Customers"");             Object customerNameVal = mutableIssue.getCustomFieldValue(customerNameCF);             Option newOptions = addOptionToCustomField(allCustomersCF, customerNameVal.toString());             LOGGER.info(""New updated option {}"" + newOptions);         }     }      private MutableIssue getMutableIssue(Issue issue) {         MutableIssue mutableIssue;         if (issue instanceof MutableIssue)   {             mutableIssue = (MutableIssue)issue;         } else {             mutableIssue = ComponentAccessor.getIssueManager().getIssueObject(issue.getKey());         }         return mutableIssue;     }       public Option addOptionToCustomField(CustomField customField, String value) {         Option newOption = null;         if (customField != null) {             List&lt;FieldConfigScheme&gt; schemes = customField.getConfigurationSchemes();             if (schemes != null &amp;&amp; !schemes.isEmpty()) {                 FieldConfigScheme sc = schemes.get(0);                 Map configs = sc.getConfigsByConfig();                 if (configs != null &amp;&amp; !configs.isEmpty()) {                     FieldConfig config = (FieldConfig) configs.keySet().iterator().next();                     OptionsManager optionsManager = ComponentAccessor.getOptionsManager();                     Options l = optionsManager.getOptions(config);                     int nextSequence = l.isEmpty() ? 1 : l.getRootOptions().size() + 1;                     newOption = optionsManager.createOption(config, null, (long) nextSequence, value);                 }             }         }          return newOption;     }  }"
"public class UndoHandler {   @Inject   private Adapter _adapter;     @Execute   public void execute(@Named(IServiceConstants.ACTIVE_PART) final MPart part)   {     final ITextOperationTarget opTarget = _adapter.adapt(part.getObject(), ITextOperationTarget.class);      opTarget.doOperation(ITextOperationTarget.UNDO);   }      @CanExecute   public boolean canExecute(@Named(IServiceConstants.ACTIVE_PART) final MPart part)   {     final ITextOperationTarget opTarget = _adapter.adapt(part.getObject(), ITextOperationTarget.class);     if (opTarget == null)       return false;      return opTarget.canDoOperation(ITextOperationTarget.UNDO);   } }"
"Path file = ...; BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);  System.out.println(""creationTime: "" + attr.creationTime()); System.out.println(""lastAccessTime: "" + attr.lastAccessTime()); System.out.println(""lastModifiedTime: "" + attr.lastModifiedTime());  System.out.println(""isDirectory: "" + attr.isDirectory()); System.out.println(""isOther: "" + attr.isOther()); System.out.println(""isRegularFile: "" + attr.isRegularFile()); System.out.println(""isSymbolicLink: "" + attr.isSymbolicLink()); System.out.println(""size: "" + attr.size());"
"ActionListener al = new ActionListener {   @Override   public void actionPerformed(ActionEvent e) {     // either do it like this     process(e.getActionCommand());     // or like this to distinguish between the controls     if (e.getSource() == firstElement) processChangeInFirstElement();     else if (e.getSource() == secondElement) processChangeInSecondElement();     // etc   } }  Component firstElement = new JCheckBox(""asdf""); firstElement.addActionListener(al);  Component secondElement = new JTextField(); secondElement.addActionListener(al);"
"private BodyPartDOM collectBodyParts(Part part) throws IOException, MessagingException {          BodyPartDOM dom = new BodyPartDOM();          Object content = part.getContent();          if (content instanceof String) {              // process as string          } else if (content instanceof Multipart) {               Multipart innerMultiPart = (Multipart) content;             int count = innerMultiPart.getCount();              for (int i = 0; i &lt; count; i++) {                  BodyPart innerBodyPart = innerMultiPart.getBodyPart(i);                 BodyPartDOM subDom = collectBodyParts(innerBodyPart);                 // further recursive processing              }          } else if (content instanceof InputStream) {              // process inputStream          }          return dom;      }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"Criteria criteria =      getSession()         .createCriteria(SaleRecord.class)         .add(Restrictions.between(""date"",                                    reportForm.getFromDate(),                                    reportForm.getToDate()));          .setProjection(Projections.projectionList()             .add(Projections.property(""type""), ""accountName"")             .add(Projections.sum(""amount""))             .add(Projections.groupProperty(""type"")));         .setResultTransformer(Transformers.aliasToBean(CollectionDO.class)) return (List&lt;CollectionDO&gt;) criteria.list();"
"ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();  valueaddlist = (Button) findViewById(R.id.valueaddlist);         valueaddlist.setOnClickListener(new OnClickListener() {            public void onClick(View v){ arrayList.add(product_id); arrayList.add(product_title); arrayList.add(product_image); arrayList.add(product_price); arrayList.add(product_desc);     }   valuedisplaylist = (Button) findViewById(R.id.valuedisplaylist);         valuedisplaylist.setOnClickListener(new OnClickListener() {            public void onClick(View v){     Intent intent = new Intent(this,AddedListProducts.class);     intent.putStringArrayListExtra(""arrayList"", (ArrayList&lt;String&gt;) arrayList);     startActivity(intent);    }"
"public static class MyOwnFocusTraversalPolicy extends FocusTraversalPolicy {     Vector&lt;Component&gt; order;      public MyOwnFocusTraversalPolicy(Vector&lt;Component&gt; order)     {         this.order = new Vector&lt;Component&gt;(order.size());         this.order.addAll(order);     }      public Component getComponentAfter(Container focusCycleRoot,                                        Component aComponent)     { //      int idx = (order.indexOf(aComponent) + 1) % order.size(); //      return order.get(idx);          int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx + 1) % order.size();             Component next = order.get(idx);              if (canBeFocusOwner(next)) return next;         }          return null;     }      public Component getComponentBefore(Container focusCycleRoot,                                         Component aComponent)     { /*         int idx = order.indexOf(aComponent) - 1;         if (idx &lt; 0) {             idx = order.size() - 1;         }         return order.get(idx); */         int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx - 1);              if (idx &lt; 0)             {                 idx = order.size() - 1;             }              Component previous = order.get(idx);              if (canBeFocusOwner(previous)) return previous;         }          return null;     }      public Component getDefaultComponent(Container focusCycleRoot) { //      return order.get(0);         return getFirstComponent( focusCycleRoot );     }      public Component getLastComponent(Container focusCycleRoot) { //      return order.lastElement();          Component c = order.lastElement();          if (canBeFocusOwner(c))             return c;         else             return getComponentBefore(focusCycleRoot, c);     }      public Component getFirstComponent(Container focusCycleRoot)     { //      return order.get(0);          Component c = order.get(0);          if (canBeFocusOwner(c))             return c;         else             return getComponentAfter(focusCycleRoot, c);     }      private boolean canBeFocusOwner(Component c)     {         if (c.isEnabled() &amp;&amp; c.isDisplayable() &amp;&amp; c.isVisible() &amp;&amp; c.isFocusable())         {             return true;         }          return false;     }  }"
"public interface ProductTrader&lt;P, S&gt; {    public P create(S specification);  }  public interface ImageCreator {    public boolean canProcess(File file);    public Image createImage(File file);  }  public class PNGImageCreator implements ImageCreator {    public boolean canProcess(File file) {     return (file.isFile() &amp;&amp; file.canRead() &amp;&amp; file.getName().endsWith("".png""));   }    public Image createImag(File file) {     //Image I/O code goes here   }  }  public class FileToImageProductTrader implements ProductTrader&lt;Image, File&gt; {    private List&lt;ImageCreator&gt; imageCreators = new ArrayList&lt;ImageCreator&gt;();    public void registerCreator(ImageCreator creator) {     imageCreators.add(creator);   }    public Image create(File specification) {     for(ImageCreator creator : imageCreators) {       if(creator.canProcess(specification)) {         return creator.createImage(specification);       }     }     //No creator for given file     return null;   }  }  public class Main {    public static void main(String [] args) {     FileToImageProductTrader trader = new FileToImageProductTrader();     PNGCreator pngCreator = new PNGCreator();     trader.registerCreator(pngCreator);     File imageFile = new File(""/tmp/foo.png"");     Image image = trader.create(imageFile);   }  }"
"public class CorsAwareAuthenticationFilter extends UsernamePasswordAuthenticationFilter {     static final String ORIGIN = 'Origin'      @Override     public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response){         if (request.getHeader(ORIGIN)) {             String origin = request.getHeader(ORIGIN)             response.addHeader('Access-Control-Allow-Origin', origin)             response.addHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE')             response.addHeader('Access-Control-Allow-Credentials', 'true')             response.addHeader('Access-Control-Allow-Headers',                     request.getHeader('Access-Control-Request-Headers'))         }         if (request.method == 'OPTIONS') {             response.writer.print('OK')             response.writer.flush()             return         }         return super.attemptAuthentication(request, response)     } }"
