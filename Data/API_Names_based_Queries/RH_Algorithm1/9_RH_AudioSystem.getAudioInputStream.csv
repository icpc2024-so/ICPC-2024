code
"File file = new File(filename); AudioInputStream in= AudioSystem.getAudioInputStream(file); AudioInputStream din = null; AudioFormat baseFormat = in.getFormat(); AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,                                              baseFormat.getSampleRate(),                                             16,                                             baseFormat.getChannels(),                                             baseFormat.getChannels() * 2,                                             baseFormat.getSampleRate(),                                             false); din = AudioSystem.getAudioInputStream(decodedFormat, in);"
"LayoutInflater layoutInflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);     LinearLayout dialerLayout = (LinearLayout) layoutInflater.inflate(R.layout.phone_dialer, null);     LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.FILL_PARENT);     dialerLayout.setLayoutParams(params);     LinearLayout tabDialer = (LinearLayout) findViewById(R.id.tabDialer);     tabDialer.addView(dialerLayout);"
"public static void main(String[] args) throws DocumentException {      SAXReader reader = new SAXReader();     String xml = ""&lt;div class=\""discussionThread dt\""&gt;&lt;div class=\""dt_subject\""&gt;2011 IS HERE!&lt;/div&gt;&lt;/div&gt;"";     Document document = reader.read(new StringReader(xml));      DefaultElement newElement = new DefaultElement(""div"");     newElement.addAttribute(""class"", ""test"");     newElement.add(new DefaultText(""Test Val""));      List content = document.getRootElement().content();     if (content != null ) {         content.add(0, newElement);     }      System.out.println(document.asXML()); }"
"StringReader xmlInput = new StringReader(xmlStringWhichYouHaveCreated); InputStream xslInput = getServletContext().getResourceAsStream(""file.xsl""); // Or wherever it is. As long as you've it as an InputStream, it's fine.  Source xmlSource = new StreamSource(xmlInput); Source xslSource = new StreamSource(xslInput); Result xmlResult = new StreamResult(response.getOutputStream()); // XML result will be written to HTTP response.  Transformer transformer = TransformerFactory.newInstance().newTransformer(xslSource); transformer.transform(xmlSource, xmlResult);"
"String xmlData = ""&lt;test&gt;&lt;one&gt;&lt;URL128 myAttribute='value' /&gt;&lt;/one&gt;&lt;/test&gt;""; InputSource source = new InputSource(new StringReader(xmlData)); //or use your own input source  XPath xPath = XPathFactory.newInstance().newXPath();  NodeList list = (NodeList)xPath.evaluate(""//URL128"", source, XPathConstants.NODESET); List&lt;Element&gt; elements = new ArrayList&lt;Element&gt;(list.getLength()); for (int i = 0; i &lt; list.getLength(); i++) {     elements.add((Element)list.item(i)); }"
"public class mediaPlayer extends JFrame {     public mediaPlayer()     {         setLayout(new BorderLayout());          //file you want to play         URL mediaURL = //Whatever         //create the media player with the media url         Player mediaPlayer = Manager.createRealizedPlayer(mediaURL);         //get components for video and playback controls         Component video = mediaPlayer.getVisualComponent();         Component controls = mediaPlayer.getControlPanelComponent();         add(video,BorderLayout.CENTER);         add(controls,BorderLayout.SOUTH);     } }"
"Document newDocument = DocumentBuilderFactory.newInstance()             .newDocumentBuilder().newDocument();     WordToHtmlConverter wordToHtmlConverter = new WordToHtmlConverter(             newDocument );      wordToHtmlConverter.processDocument( hwpfDocument );      StringWriter stringWriter = new StringWriter();     Transformer transformer = TransformerFactory.newInstance()             .newTransformer();     transformer.setOutputProperty( OutputKeys.INDENT, ""yes"" );     transformer.setOutputProperty( OutputKeys.ENCODING, ""utf-8"" );     transformer.setOutputProperty( OutputKeys.METHOD, ""html"" );     transformer.transform(             new DOMSource( wordToHtmlConverter.getDocument() ),             new StreamResult( stringWriter ) );      String html = stringWriter.toString();"
class Person implements Cloneable {          private String firstName;         private String lastName;          public Object clone() {              Person obj = new Person();             obj.setFirstName(this.firstName);             obj.setLastName(this.lastName);              return obj;         }          public String getFirstName() {             return firstName;         }          public void setFirstName(String firstName) {             this.firstName = firstName;         }          public String getLastName() {             return lastName;         }          public void setLastName(String lastName) {             this.lastName = lastName;         }     }
"import java.awt.EventQueue; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.KeyEvent; import java.util.Arrays; import java.util.List; import javax.swing.AbstractAction; import javax.swing.Action; import javax.swing.BorderFactory; import javax.swing.JComponent; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.KeyStroke;  /** @see http://stackoverflow.com/q/10011564/230513 */ public class TwoPanelsTest extends JFrame {      private MyPanel one = new MyPanel(""One"");     private MyPanel two = new MyPanel(""Two"");     private List&lt;MyPanel&gt; list = Arrays.asList(one, two);      public TwoPanelsTest() {         super(""TwoPanelsTest"");         this.setDefaultCloseOperation(EXIT_ON_CLOSE);         JPanel panel = new JPanel(new GridLayout(0, 1, 10, 10));         panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));         panel.add(one);         panel.add(two);         panel.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT)             .put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), ""up"");         panel.getActionMap().put(""up"", new AbstractAction() {              @Override             public void actionPerformed(ActionEvent e) {                 for (MyPanel panel : list) {                     panel.getAction().actionPerformed(e);                 }             }         });         this.add(panel);         this.pack();         this.setLocationRelativeTo(null);         this.setVisible(true);     }      private static class MyPanel extends JPanel {          private String string = "" will be updated though its action."";         private Action action = new UpdateAction(this);         private String name;         private JLabel label;          public MyPanel(String name) {             this.name = name;             this.label = new JLabel(name + string, JLabel.CENTER);             this.setLayout(new GridLayout());             this.setFocusable(true);             this.add(label);         }          public Action getAction() {             return action;         }          private void update() {             label.setText(name + "": "" + System.nanoTime());         }          private static class UpdateAction extends AbstractAction {              private MyPanel panel;              public UpdateAction(MyPanel panel) {                 this.panel = panel;             }              @Override             public void actionPerformed(ActionEvent ae) {                 panel.update();             }         }     }      public static void main(String[] args) {         EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 TwoPanelsTest t = new TwoPanelsTest();             }         });     } }"
"public class SemiDemo extends Application {      @Override     public void start(Stage primaryStage) {          Group root = new Group();         root.getChildren().add(drawSemiRing(120, 120, 100, 50, Color.LIGHTGREEN, Color.DARKGREEN));         root.getChildren().add(drawSemiRing(350, 350, 200, 30, Color.LIGHTSKYBLUE, Color.DARKBLUE));          Scene scene = new Scene(root, 300, 250);         primaryStage.setScene(scene);         primaryStage.show();     }      private Path drawSemiRing(double centerX, double centerY, double radius, double innerRadius, Color bgColor, Color strkColor) {         Path path = new Path();         path.setFill(bgColor);         path.setStroke(strkColor);         path.setFillRule(FillRule.EVEN_ODD);          MoveTo moveTo = new MoveTo();         moveTo.setX(centerX + innerRadius);         moveTo.setY(centerY);          ArcTo arcToInner = new ArcTo();         arcToInner.setX(centerX - innerRadius);         arcToInner.setY(centerY);         arcToInner.setRadiusX(innerRadius);         arcToInner.setRadiusY(innerRadius);          MoveTo moveTo2 = new MoveTo();         moveTo2.setX(centerX + innerRadius);         moveTo2.setY(centerY);          HLineTo hLineToRightLeg = new HLineTo();         hLineToRightLeg.setX(centerX + radius);          ArcTo arcTo = new ArcTo();         arcTo.setX(centerX - radius);         arcTo.setY(centerY);         arcTo.setRadiusX(radius);         arcTo.setRadiusY(radius);          HLineTo hLineToLeftLeg = new HLineTo();         hLineToLeftLeg.setX(centerX - innerRadius);          path.getElements().add(moveTo);         path.getElements().add(arcToInner);         path.getElements().add(moveTo2);         path.getElements().add(hLineToRightLeg);         path.getElements().add(arcTo);         path.getElements().add(hLineToLeftLeg);          return path;     }      public static void main(String[] args) {         launch(args);     } }"
"public class ListViewDemo extends ListActivity {      ArrayList&lt;String&gt; listItems=new ArrayList&lt;String&gt;();     ArrayAdapter&lt;String&gt; adapter;      TextView theFact;     String shareFact;       @Override     public void onCreate(Bundle icicle) {         super.onCreate(icicle);         setContentView(R.layout.main);          theFact = (TextView) findViewById(R.id.tvContent)         shareFact = theFact.getText().toString();          adapter=new ArrayAdapter&lt;String&gt;(this,         android.R.layout.simple_list_item_1,         listItems);         setListAdapter(adapter);          listItems.add(shareFact);         adapter.notifyDataSetChanged();     } }"
"Type3Font t3 = new Type3Font(writer, true); // Delta PdfContentByte d = t3.defineGlyph('D', 600, 0, 0, 600, 700); d.setColorStroke(new BaseColor(0xFF, 0x00, 0x00)); d.setColorFill(new GrayColor(0.7f)); d.setLineWidth(100); d.moveTo(5, 5); d.lineTo(300, 695); d.lineTo(595, 5); d.closePathFillStroke(); //Sigma PdfContentByte s = t3.defineGlyph('S', 600, 0, 0, 600, 700); s.setColorStroke(new BaseColor(0x00, 0x80, 0x80)); s.setLineWidth(100); s.moveTo(595,5); s.lineTo(5, 5); s.lineTo(300, 350); s.lineTo(5, 695); s.lineTo(595, 695); s.stroke();  // Use as regular font at size 12 Font f = new Font(t3, 12);"
"public static Border getRadioButtonBorder() { UIDefaults table = UIManager.getLookAndFeelDefaults(); Border radioButtonBorder = new BorderUIResource.CompoundBorderUIResource(            new BasicBorders.RadioButtonBorder(                    table.getColor(""RadioButton.shadow""),                                        table.getColor(""RadioButton.darkShadow""),                                        table.getColor(""RadioButton.light""),                                        table.getColor(""RadioButton.highlight"")),                      new MarginBorder()); return radioButtonBorder; }"
"package org.pscode.ui.applet.appleteer;  import java.awt.Component; import java.awt.Dimension;  // placeholder component import javax.swing.JButton;  import javax.swing.text.html.HTML; import javax.swing.text.html.HTMLEditorKit; import javax.swing.text.View; import javax.swing.text.ComponentView; import javax.swing.text.PlainView; import javax.swing.text.ViewFactory; import javax.swing.text.Element; import javax.swing.text.AttributeSet; import javax.swing.text.StyleConstants;  import org.pscode.ui.applet.appleteer.AppletElement; import org.pscode.ui.applet.appleteer.AppletLoaderContainer;  import java.util.HashMap; import java.util.Enumeration;  import java.net.URL;  import java.util.logging.*;  /** The AppletEditorKit extends HTMLEditorKit to support the applet element. */ public class AppletEditorKit extends HTMLEditorKit {      URL documentBase;      PseudoBrowser browser;      static int appletCount;     static boolean hasNamedApplet;       public AppletEditorKit(URL documentBase, PseudoBrowser browser) {         this.documentBase = documentBase;         this.browser = browser;         appletCount = 0;         hasNamedApplet = false;     }      public ViewFactory getViewFactory() {         return new AppletHTMLFactory(documentBase, browser);     }      public static class AppletHTMLFactory extends HTMLFactory implements ViewFactory {          URL documentBase;         PseudoBrowser browser;          AppletHTMLFactory(URL documentBase, PseudoBrowser browser) {             this.documentBase = documentBase;             this.browser = browser;         }          public View create(Element element) {             AttributeSet set = element.getAttributes();             Object o =                 element.getAttributes().getAttribute(StyleConstants.NameAttribute);             if (o instanceof HTML.Tag) {                  HTML.Tag kind = (HTML.Tag) o;                  Logger.getLogger(""Appleteer"").log(                     Level.FINEST, ""AEK.c  HTML.Tag: "" + kind);                  if (kind == HTML.Tag.APPLET ) {                       if(!contains(element.getAttributes().getAttributeNames(),""endtag"")) {                         View view;                         try {                             AppletElement ae = new AppletElement(                                 element,                                 browser,                                 ""applet"" + appletCount++);                             view = new AppletView(ae);                             if ( ae.getName()!=null ) {                                 hasNamedApplet = true;                             }                         } catch(Exception e) {                             return new PlainView(element);                         }                          return view;                     } else {                         return new PlainView(element);                         //return null;                     }                 } else if (kind == HTML.Tag.PARAM) {                     Logger.getLogger(""Appleteer"").log(                         Level.FINEST, ""HTML Param: "" + kind);                 }             }             return super.create( element );         }     }      public static boolean contains(Enumeration en, String name) {         while( en.hasMoreElements() ) {             Object o = en.nextElement();             if (o instanceof HTML.Attribute) {                 Logger.getLogger(""Appleteer"").log(                     Level.FINEST, ""HTML.Attribute: "" + 0);                 if (o.toString().equals(name)) {                     return true;                 }             }         }         return false;     } }"
public &lt;T&gt; List&lt;T&gt; getAll(final Class&lt;T&gt; clazz) {      ParameterizedType parameterizedGenericType = new ParameterizedType() {         public Type[] getActualTypeArguments() {             return new Type[] { clazz };         }          public Type getRawType() {             return List.class;         }          public Type getOwnerType() {             return List.class;         }     };      GenericType&lt;List&lt;T&gt;&gt; genericType = new GenericType&lt;List&lt;T&gt;&gt;(             parameterizedGenericType) {     };      return service.path(Path.ROOT).path(clazz.getSimpleName())             .accept(MediaType.APPLICATION_XML).get(genericType); }
"final class SerializationWrapper implements Serializable {    private final static Kryo KRYO = new Kryo();   private Object object;    public SerializationWrapper(Object object) {     this.object = object;   }    private void readObject(ObjectInputStream objectInputStream)        throws IOException, ClassNotFoundException {     Input input = new Input(objectInputStream);     object = KRYO.readClassAndObject(input);     input.close();   }    private void writeObject(ObjectOutputStream objectOutputStream)        throws IOException {     Output output = new Output(objectOutputStream);     KRYO.writeClassAndObject(output, object);     output.close();   }    public Object getWrappedObject() {     return object;   } }"
interface ItemRequestConverter&lt;IR extends ItemRequest&gt;{} interface ItemRequest{} interface ItemRequestConverterFactory  {     public &lt;IR extends ItemRequest&gt; ItemRequestConverter&lt;IR&gt; newInstance(Class&lt;IR&gt; itemRequestClass); } class CreatePartRequestConverter&lt;IR extends ItemRequest&gt; implements ItemRequestConverter&lt;IR&gt; { }  class DefaultItemRequestConverterFactory implements ItemRequestConverterFactory  {      @Override     public &lt;IR extends ItemRequest&gt; ItemRequestConverter&lt;IR&gt; newInstance(Class&lt;IR&gt; itemRequestClass)      {         // Does not make sense: Comparing ItemRequest class with something         // that is probably an implementation of ItemRequestConverter         if (itemRequestClass.equals(CreatePartRequestConverter.class))         {             return new CreatePartRequestConverter&lt;IR&gt;();         }         return null;     } }
"class User {         private int id;         private String firstName;         private Date registrationDate;          public User(int id, String firstName, Date registrationDate) {             this.id = id;             this.firstName = firstName;             this.registrationDate = registrationDate;         }          public int getId() {             return id;         }          public String getFirstName() {             return firstName;         }          public Date getRegistrationDate() {             return registrationDate;         }      }      DateTimeFormat format = DateTimeFormat.getFormat(""MM/dd/yyyy"");      User[] registeredUsers = new User[] { new User(1, ""valid"", format.parse(""01/20/2014"")),             new User(2, ""invalid"", format.parse(""05/20/2013"")),             new User(3, ""valid"", format.parse(""02/20/2014"")) };      ListGridRecord[] registeredUsersRecords = new ListGridRecord[registeredUsers.length];      for (int i = 0; i &lt; registeredUsers.length; i++) {         User user = registeredUsers[i];         ListGridRecord record = new ListGridRecord();         record.setAttribute(""id"", user.getId());         record.setAttribute(""firstName"", user.getFirstName());         record.setAttribute(""registrationDate"", user.getRegistrationDate());         registeredUsersRecords[i] = record;     }      DataSourceDateField registeredDate = new DataSourceDateField(""registrationDate"", ""Date"");     DataSourceTextField firstName = new DataSourceTextField(""firstName"", ""Name"");     DataSourceIntegerField id = new DataSourceIntegerField(""id"", ""ID"");     id.setRequired(true);     id.setPrimaryKey(true);     id.setHidden(true);      DataSource ds = new DataSource();     ds.setClientOnly(true);     ds.setFields(id, firstName, registeredDate);     for (int i = 0; i &lt; registeredUsersRecords.length; i++) {         ds.addData(registeredUsersRecords[i]);     }      final ListGrid registeredUsersListGrid = new ListGrid();      registeredUsersListGrid.setDataSource(ds);     registeredUsersListGrid.fetchData();     registeredUsersListGrid.setShowFilterEditor(true);      registeredUsersListGrid.addFilterEditorSubmitHandler(new FilterEditorSubmitHandler() {          @Override         public void onFilterEditorSubmit(FilterEditorSubmitEvent event) {              event.cancel();              if (event.getCriteria() != null) {                  AdvancedCriteria advancedCriteria = event.getCriteria().asAdvancedCriteria();                  // store only single criteria for each field(column)                 Map&lt;String, Criterion&gt; criterions = new HashMap&lt;String, Criterion&gt;();                 for (final Criterion criterion : advancedCriteria.getCriteria()) {                      System.out.println(criterion.getFieldName());                     System.out.println(criterion.getValueAsString());                     System.out.println(criterion.getOperator());                      if (criterion.getOperator() == OperatorId.ICONTAINS) {                         Criterion newCritearia = new Criterion(criterion.getFieldName(),                                 OperatorId.STARTS_WITH, criterion.getValueAsString());                         criterions.put(criterion.getFieldName(), newCritearia);                     } else {                         criterions.put(criterion.getFieldName(), criterion);                     }                  }                  if (criterions.size() &gt; 0) {                     AdvancedCriteria filterCriteria = new AdvancedCriteria(OperatorId.AND,                             criterions.values().toArray(new Criterion[] {}));                     registeredUsersListGrid.fetchData(filterCriteria);                 }              }          }     });      Button button = new Button(""Clear all filters"");     button.addClickHandler(new ClickHandler() {          @Override         public void onClick(ClickEvent event) {             registeredUsersListGrid.fetchData();         }     });      VLayout layout = new VLayout();     layout.setWidth(""200px"");     layout.setHeight(""200px"");      layout.addMember(button);     layout.addMember(registeredUsersListGrid);     layout.draw();"
"XMLInputFactory factory = XMLInputFactory.newInstance(); factory.setXMLResolver(new XMLResolver() {     @Override     public Object resolveEntity(String publicID, String systemID,             String baseURI, String namespace) throws XMLStreamException {         //return a closed input stream if external entities are not needed         return new InputStream() {             @Override             public int read() throws IOException {                 return -1;             }         };     } });  XMLEventReader reader = factory.createXMLEventReader( . . . ); try {     while(reader.hasNext()) {         XMLEvent event = reader.nextEvent();         switch (event.getEventType()) {             case XMLStreamConstants.DTD:                 List&lt;EntityDeclaration&gt; entities = ((DTD)event).getEntities();                 if (entities != null) {                     for (EntityDeclaration entity : entities)                         System.out.println(entity.getName() + "" = "" + entity.getSystemId());                 }                 break;             case . . .         }     } } finally {     reader.close(); }"
"JFrame fr = new JFrame(); fr.setResizable(false); if (!fr.isDisplayable()) {     // Can only do this when the frame is not visible     fr.setUndecorated(true); } GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice(); try {   if (gd.isFullScreenSupported()) {     gd.setFullScreenWindow(fr);   } else {     // Can't run fullscreen, need to bodge around it (setSize to screen size, etc)   }   fr.setVisible(true);   // Your business logic here } finally {   gd.setFullScreenWindow(null); }"
abstract class Population&lt;T extends Player&gt; {     T[] members;      void mixUpPopulation() {...}     Strategy[] getMeanStrategies() {...}     double getMeanFitness() {...}     ... }  class SignallerPopulation extends Population&lt;Signaller&gt; {     public SignallerPopulation(int popSize) { members = new Signaller[popSize]; }     ... }  class ReceiverPopulation extends Population&lt;Receiver&gt; {     public ReceiverPopulation(int popSize) { members = new Receiver[popSize]; }     double[] getChannelPreferences() {...}     ... }
"public class References {      // First, initialise all unique keys     public static final UniqueKey&lt;TAuthorRecord&gt; SysPk_14655 =          createUniqueKey(TAuthor.T_AUTHOR, TAuthor.ID);       // Then initialise all foreign keys     public static final Reference&lt;TBookRecord, TAuthorRecord&gt; SysFk_14666 =          createReference(SysPk_14655, TBook.T_BOOK, TBook.AUTHOR_ID);     public static final Reference&lt;TBookRecord, TAuthorRecord&gt; SysFk_14667 =          createReference(SysPk_14655, TBook.T_BOOK, TBook.CO_AUTHOR_ID);       // Factory method for unique keys     protected static &lt;R extends Record&gt; UniqueKey&lt;R&gt;      createUniqueKey(Table&lt;R&gt; table, TableField&lt;R, ?&gt;... fields) {      // Factory method for foreign keys referencing unique keys     protected static &lt;R extends Record, U extends Record&gt; Reference&lt;R, U&gt;      createReference(UniqueKey&lt;U&gt; key, Table&lt;R&gt; table, TableField&lt;R, ?&gt;... fields) {  }"
private IJavaType[] getExceptionTypes(Class&lt;?&gt;[] declaredExceptions) {     IJavaType[] exceptions = new IJavaType[declaredExceptions.length];      for (int i = 0; i &lt; declaredExceptions.length; i++) {         exceptions[i] = getType(declaredExceptions[i]);     }      return exceptions; }  protected IJavaType[] getExceptionTypes(Method method) {     return getExceptionTypes(method.getExceptionTypes()); }  protected IJavaType[] getExceptionTypes(Constructor&lt;?&gt; c) {     return getExceptionTypes(c.getExceptionTypes()); }
"Calendar calendar = Calendar.getInstance(); TimeZone fromTimeZone = calendar.getTimeZone(); TimeZone toTimeZone = TimeZone.getTimeZone(""CST"");  calendar.setTimeZone(fromTimeZone); calendar.add(Calendar.MILLISECOND, fromTimeZone.getRawOffset() * -1); if (fromTimeZone.inDaylightTime(calendar.getTime())) {     calendar.add(Calendar.MILLISECOND, calendar.getTimeZone().getDSTSavings() * -1); }  calendar.add(Calendar.MILLISECOND, toTimeZone.getRawOffset()); if (toTimeZone.inDaylightTime(calendar.getTime())) {     calendar.add(Calendar.MILLISECOND, toTimeZone.getDSTSavings()); }  System.out.println(calendar.getTime());"
"public class Background extends Entity {      private Text text;      public Background(float x, float y, float width, float height, Font font, String textMessage, VertexBufferObjectManager vertexBufferObjectManager) {          this.setPosition(x, y);          this.attachChild(new Rectangle(0, 0, width, height, vertexBufferObjectManager));          this.text = new Text(0, 0, font, textMessage, vertexBufferObjectManager);          this.attachChild(text);     }      @Override     public void setAlpha(float pAlpha) {                  super.setAlpha(pAlpha);          this.text.setAlpha(pAlpha);     }    }"
"public static byte [] getAudioDataBytes(byte [] sourceBytes, AudioFormat audioFormat) throws UnsupportedAudioFileException, IllegalArgumentException, Exception{         if(sourceBytes == null || sourceBytes.length == 0 || audioFormat == null){             throw new IllegalArgumentException(""Illegal Argument passed to this method"");         }          ByteArrayInputStream bais = null;         ByteArrayOutputStream baos = null;         AudioInputStream sourceAIS = null;         AudioInputStream convert1AIS = null;         AudioInputStream convert2AIS = null;          try{             bais = new ByteArrayInputStream(sourceBytes);             sourceAIS = AudioSystem.getAudioInputStream(bais);             AudioFormat sourceFormat = sourceAIS.getFormat();             AudioFormat convertFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, sourceFormat.getSampleRate(), 16, sourceFormat.getChannels(), sourceFormat.getChannels()*2, sourceFormat.getSampleRate(), false);             convert1AIS = AudioSystem.getAudioInputStream(convertFormat, sourceAIS);             convert2AIS = AudioSystem.getAudioInputStream(audioFormat, convert1AIS);              baos = new ByteArrayOutputStream();              byte [] buffer = new byte[8192];             while(true){                 int readCount = convert2AIS.read(buffer, 0, buffer.length);                 if(readCount == -1){                     break;                 }                 baos.write(buffer, 0, readCount);             }             return baos.toByteArray();         } catch(UnsupportedAudioFileException uafe){             //uafe.printStackTrace();             throw uafe;         } catch(IOException ioe){             //ioe.printStackTrace();             throw ioe;         } catch(IllegalArgumentException iae){             //iae.printStackTrace();             throw iae;         } catch (Exception e) {             //e.printStackTrace();             throw e;         }finally{             if(baos != null){                 try{                     baos.close();                 }catch(Exception e){                 }             }             if(convert2AIS != null){                 try{                     convert2AIS.close();                 }catch(Exception e){                 }             }             if(convert1AIS != null){                 try{                     convert1AIS.close();                 }catch(Exception e){                 }             }             if(sourceAIS != null){                 try{                     sourceAIS.close();                 }catch(Exception e){                 }             }             if(bais != null){                 try{                     bais.close();                 }catch(Exception e){                 }             }         }     }"
"import java.io.IOException; import java.io.RandomAccessFile; import net.sf.sevenzipjbinding.ISevenZipInArchive; import net.sf.sevenzipjbinding.SevenZip; import net.sf.sevenzipjbinding.SevenZipException; import net.sf.sevenzipjbinding.impl.RandomAccessFileInStream; import net.sf.sevenzipjbinding.simple.ISimpleInArchive; import net.sf.sevenzipjbinding.simple.ISimpleInArchiveItem;  public class ExtractItemsSimple {     public static void main(String[] args) {         RandomAccessFile randomAccessFile = null;         ISevenZipInArchive inArchive = null;         try {             randomAccessFile = new RandomAccessFile(args[0], ""r"");             inArchive = SevenZip.openInArchive(null, // autodetect archive type                     new RandomAccessFileInStream(randomAccessFile));              ISimpleInArchive simpleInArchive = inArchive.getSimpleInterface();              for (ISimpleInArchiveItem item : simpleInArchive.getArchiveItems()) {                 final int[] hash = new int[] { 0 };                 if (!item.isFolder()) {                     System.out.println(ArchieveInputStreamHandler.slurp(new ArchieveInputStreamHandler(item).getInputStream(),1000));                 }             }         } catch (Exception e) {             System.err.println(""Error occurs: "" + e);             System.exit(1);         } finally {             if (inArchive != null) {                 try {                     inArchive.close();                 } catch (SevenZipException e) {                     System.err.println(""Error closing archive: "" + e);                 }             }             if (randomAccessFile != null) {                 try {                     randomAccessFile.close();                 } catch (IOException e) {                     System.err.println(""Error closing file: "" + e);                 }             }         }     } }"
"public class TerbaruAdapter extends BaseExpandableListAdapter{     Context context;     ArrayList&lt;TerbaruModel&gt;ListTerbaru;     ArrayList&lt;ArrayList&lt;ChildTerbaru&gt;&gt; ListChildTerbaru;     int count;      public TerbaruAdapter (Context context, ArrayList&lt;TerbaruModel&gt;ListTerbaru,ArrayList&lt;ArrayList&lt;ChildTerbaru&gt;&gt; ListChildTerbaru){         this.context=context;         this.ListTerbaru=ListTerbaru;         this.ListChildTerbaru=ListChildTerbaru; //      this.count=ListTerbaru.size(); //      this.count=ListChildTerbaru.size();     }     @Override     public boolean areAllItemsEnabled()     {         return true;     }       @Override     public ChildTerbaru getChild(int groupPosition, int childPosition) {         return ListChildTerbaru.get(groupPosition).get(childPosition);     }      @Override     public long getChildId(int groupPosition, int childPosition) {         return childPosition;     }      @Override     public View getChildView(int groupPosition, int childPosition, boolean isLastChild,View convertView, ViewGroup parent) {          ChildTerbaru childTerbaru = getChild(groupPosition, childPosition);         ViewHolder holder= null;          if (convertView == null) {             LayoutInflater infalInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);             convertView = infalInflater.inflate(R.layout.expandablelistview_child, null);              holder=new ViewHolder();             holder.begdate1=(TextView)convertView.findViewById(R.id.beg_date);             holder.enddate1=(TextView)convertView.findViewById(R.id.end_date);             convertView.setTag(holder);          }         else{             holder=(ViewHolder)convertView.getTag();         }          holder.begdate1.setText(childTerbaru.getBegDate());         holder.enddate1.setText(childTerbaru.getEndDate());          return convertView;     }     @Override     public int getChildrenCount(int groupPosition) {         return ListChildTerbaru.get(groupPosition).size();     }      @Override     public TerbaruModel getGroup(int groupPosition) {         return ListTerbaru.get(groupPosition);     }      @Override     public int getGroupCount() {         return ListTerbaru.size();     }      @Override     public long getGroupId(int groupPosition) {         return groupPosition;     }      @Override     public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {          TerbaruModel terbaruModel = (TerbaruModel) getGroup(groupPosition);         ViewHolder holder= null;         if (convertView == null) {             LayoutInflater infalInflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);             convertView = infalInflater.inflate(R.layout.expandablelistview_group, null);              holder=new ViewHolder();             holder.nama=(TextView)convertView.findViewById(R.id.name);             holder.alamat=(TextView)convertView.findViewById(R.id.address);             convertView.setTag(holder);          }           else{             holder=(ViewHolder)convertView.getTag();          }          holder.nama.setText(terbaruModel.getNama());         holder.alamat.setText(terbaruModel.getAlamat());           return convertView;     }      @Override     public boolean hasStableIds() {         return true;     }      @Override     public boolean isChildSelectable(int arg0, int arg1) {         return true;     }       static class ViewHolder{         TextView begdate1, enddate1,nama, alamat, imageid;     }  }"
"private class SubList extends AbstractList&lt;E&gt; implements RandomAccess {     private final AbstractList&lt;E&gt; parent;     private final int parentOffset;     private final int offset;     int size;      SubList(AbstractList&lt;E&gt; parent,             int offset, int fromIndex, int toIndex) {         this.parent = parent;         this.parentOffset = fromIndex;         this.offset = offset + fromIndex;         this.size = toIndex - fromIndex;         this.modCount = ArrayList.this.modCount;     }"
"import java.awt.BorderLayout; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.UIManager;  import javax.swing.JTree; import javax.swing.tree.DefaultMutableTreeNode; import javax.swing.tree.TreeSelectionModel; import javax.swing.event.TreeSelectionEvent; import javax.swing.event.TreeSelectionListener;  import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; import javax.swing.UnsupportedLookAndFeelException; import javax.swing.tree.DefaultTreeModel; import javax.swing.tree.TreePath;  public class TestTree extends JPanel {      private JTree tree;     private DefaultTreeModel model;     private JButton btnAdd;     private int childCount;      public TestTree() {         super(new BorderLayout());          //Create the nodes.         DefaultMutableTreeNode top = new DefaultMutableTreeNode(""The Java Series"");         createNodes(top);          model = new DefaultTreeModel(top);          //Create a tree that allows one selection at a time.         tree = new JTree(model);         tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);          //Create the scroll pane and add the tree to it.          JScrollPane treeView = new JScrollPane(tree);          //Add the split pane to this panel.         add(treeView);          btnAdd = new JButton(""Add"");         btnAdd.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent e) {                 TreePath treePath = tree.getSelectionPath();                 if (treePath != null) {                     DefaultMutableTreeNode node = (DefaultMutableTreeNode) treePath.getLastPathComponent();                     DefaultMutableTreeNode child = new DefaultMutableTreeNode(""Child "" + (++childCount));                     model.insertNodeInto(child, node, node.getChildCount());                 }             }         });          add(btnAdd, BorderLayout.SOUTH);     }      private class BookInfo {          public String bookName;          public BookInfo(String book) {             bookName = book;         }          public String toString() {             return bookName;         }     }      private void createNodes(DefaultMutableTreeNode top) {         DefaultMutableTreeNode category = null;         DefaultMutableTreeNode book = null;          category = new DefaultMutableTreeNode(""Books for Java Programmers"");         top.add(category);          //original Tutorial         book = new DefaultMutableTreeNode(new BookInfo(""The Java Tutorial: A Short Course on the Basics""));         category.add(book);          //Tutorial Continued         book = new DefaultMutableTreeNode(new BookInfo(""The Java Tutorial Continued: The Rest of the JDK""));         category.add(book);          //JFC Swing Tutorial         book = new DefaultMutableTreeNode(new BookInfo(""The JFC Swing Tutorial: A Guide to Constructing GUIs""));         category.add(book);          //Bloch         book = new DefaultMutableTreeNode(new BookInfo(""Effective Java Programming Language Guide""));         category.add(book);          //Arnold/Gosling         book = new DefaultMutableTreeNode(new BookInfo(""The Java Programming Language""));         category.add(book);          //Chan         book = new DefaultMutableTreeNode(new BookInfo(""The Java Developers Almanac""));         category.add(book);          category = new DefaultMutableTreeNode(""Books for Java Implementers"");         top.add(category);          //VM         book = new DefaultMutableTreeNode(new BookInfo(""The Java Virtual Machine Specification""));         category.add(book);          //Language Spec         book = new DefaultMutableTreeNode(new BookInfo(""The Java Language Specification""));         category.add(book);     }      /**      * Create the GUI and show it. For thread safety, this method should be      * invoked from the event dispatch thread.      */     private static void createAndShowGUI() {         try {             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());         } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {             ex.printStackTrace();         }          //Create and set up the window.         JFrame frame = new JFrame(""TreeDemo"");         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);          //Add content to the window.         frame.add(new TestTree());          //Display the window.         frame.pack();         frame.setVisible(true);     }      public static void main(String[] args) {         //Schedule a job for the event dispatch thread:         //creating and showing this application's GUI.         javax.swing.SwingUtilities.invokeLater(new Runnable() {             public void run() {                 createAndShowGUI();             }         });     }  }"
