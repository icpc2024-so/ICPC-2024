code
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"JSONObject jObj = new JSONObject(jData); ArrayList&lt;Comment&gt; cList = new ArrayList&lt;Comment&gt;(); servResponse = Integer.parseInt(jObj.getString(""returnCode"").trim()); JSONArray objarr = jObj.getJSONArray(""result""); for(int i = 0;i&lt; objarr.length();i++){     JSONObject jCment = objarr.getJSONObject(i);     if(servResponse == 1){        JSONArray jCommentArr = jCment.getJSONArray(""commentList"");           for(int j=0; j&lt;jCommentArr.length(); j++)           {               Comment comment = new Comment();               JSONObject jComment = jCommentArr.getJSONObject(j);                comment.commenterId = Integer.parseInt(jComment.getString(""account_id"").trim());               comment.commenterName = jComment.getString(""name"").trim();               comment.commentMessage = jComment.getString(""comment"").trim();               comment.postDate = jComment.getString(""created_on"").trim();                cList.add(comment);           }     } }"
"VariableElement parameterElement; ProcessingEnvironment processingEnv;  TypeMirror parameterType = parameterElement.asType(); Types typeUtils = processingEnv.getTypeUtils(); TypeElement typeElement = (TypeElement) typeUtils.asElement(parameterType); Elements elementUtils = processingEnv.getElementUtils() List&lt;? extends Element&gt; elementMembers = elementUtils.getAllMembers(typeElement); List&lt;ExecutableElement&gt; elementMethods = ElementFilter.methodsIn(elementMembers); for(ExecutableElement methodElement : elementMethods) {     if (methodElement.getParameters().size()==0 &amp;&amp; methodElement.getSimpleName().toString().startsWith(""get"")) {       // do something     } }"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"JSONArray array = jobj.getJSONArray(""root""); JSONObject subObj; JSONArray subArray;  for (int i = 0; i &lt; array.length(); i++) {     subObj = array.getJSONObject(i);      if (subObj.has(""Sc_wesam"")) // handle Se_wesam     {         subArray = subObj.getJSONArray(""Sc_wesam"");          for (int j = 0; j &lt; subArray.length(); j++)         {             subObj = subArray.getJSONObject(j);             if (subObj.has(""head""))                 System.out.println(""Sc_wesam head value: "" +                                    subObj.getString(""head""));             else if (subObj.has(""color""))                 System.out.println(""Sc_wesam color value: "" +                                    subObj.getString(""color""));         }     }     else if (subObj.has(""Sc_we"")) // handle Se_we     {         subArray = subObj.getJSONArray(""Sc_wesam"");          // ... etc.     } }"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
public List&lt;Task&gt; getTaskDue(){          List&lt;Task&gt; temp = new ArrayList&lt;Task&gt;();      for(int u = 0; u &lt; unitCollection.size(); u++){         Unit unit = unitCollection.get(u);          for (int a = 0; a &lt; unit.getAssessmentCollection().size(); a++){             AssessmentItem assessment = unit.getAssessmentCollection().get(a);              for (int t = 0; t &lt; assessment.getTasks().size(); t++){                 Task task = assessment.getTasks().get(t);                  if (task.getDueDate().compareTo(assessment.getDueDate()) &lt;= 0){                      temp.add(task);                 }                }            }        }        return temp; }
com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$Wadl com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$App com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$General com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$App com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$General com.sun.jersey.json.impl.provider.entity.JSONWithPaddingProvider com.sun.jersey.json.impl.provider.entity.JacksonProviderProxy
"public class AClassAdapter  implements JsonSerializer&lt;A&gt;, JsonDeserializer&lt;A&gt; {   @Override   public JsonElement serialize(A src, Type typeOfSrc, JsonSerializationContext context) {       JsonObject result = new JsonObject();       result.add(""type"", new JsonPrimitive(src.getClass().getSimpleName()));       result.add(""properties"", context.serialize(src, src.getClass()));        return result;   }     @Override   public A deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)         throws JsonParseException {     JsonObject jsonObject = json.getAsJsonObject();     String type = jsonObject.get(""type"").getAsString();     JsonElement element = jsonObject.get(""properties"");      try {                     String fullName = typeOfT.getTypeName();         String packageText = fullName.substring(0, fullName.lastIndexOf(""."") + 1);          return context.deserialize(element, Class.forName(packageText + type));     } catch (ClassNotFoundException cnfe) {         throw new JsonParseException(""Unknown element type: "" + type, cnfe);     }   } }"
"jstring string; string = env-&gt;NewStringUTF(item-&gt;get_id().c_str()); env-&gt;SetObjectArrayElement( data,0,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_number().c_str()); env-&gt;SetObjectArrayElement( data,1,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_fullname().c_str()); env-&gt;SetObjectArrayElement( data,2,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_mf().c_str()); env-&gt;SetObjectArrayElement( data,3,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_dob().c_str()); env-&gt;SetObjectArrayElement( data,4,string); env-&gt;DeleteLocalRef(string); env-&gt;CallVoidMethod(dao, jsaveItem, data, jtype);"
com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter
"public static int KnapSack(int capacity, Item[] items, int numItems, ArrayList&lt;Integer&gt; taken) {     if (numItems == 0 || capacity == 0)         return 0;     if (items[numItems-1].weight &gt; capacity)         return KnapSack(capacity, items, numItems-1, taken);     else {         final int preTookSize = taken.size();         final int took = items[numItems-1].value + KnapSack(capacity - items[numItems-1].weight, items, numItems-1, taken);          final int preLeftSize = taken.size();         final int left = KnapSack(capacity, items, numItems-1, taken);          if (took &gt; left) {             if (taken.size() &gt; preLeftSize)                 taken.removeRange(preLeftSize, taken.size());             taken.add(Integer.valueOf(numItems - 1));             return took;         }         else {             if (preLeftSize &gt; preTookSize)                 taken.removeRange(preTookSize, preLeftSize);             return left;         }     }      }"
"var   PM: JPackageManager;   mainIntent: JIntent;   LaunchIntent: JIntent;   pkgAppsList: JList;   ri: JResolveInfo;   iter: JIterator;   midlist := TStringList; begin   PM := SharedActivityContext.getPackageManager;   mainIntent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_MAIN, nil);   mainIntent.addCategory(TJIntent.JavaClass.CATEGORY_LAUNCHER);   pkgAppsList := PM.queryIntentActivities(mainIntent, 0);   midlist := TStringList;   iter := pkgAppsList.iterator;   while iter.hasNext do   begin     ri := TJResolveInfo.Wrap((iter.next as ILocalObject).GetObjectID);     mIdList.Add(ri.activityInfo.applicationInfo.packageName);   end;   LaunchIntent := PM.getLaunchIntentForPackage(mIdList[2]);   SharedActivityContext.startActivity( LaunchIntent ) end;"
"JNIEXPORT jobject JNICALL Java_com_rmsdk_wrapper_RMServices_getBookmarkNew(     JNIEnv *env, jobject thiso) {    jclass cls = g_jniEnv-&gt;FindClass(""br/com/iba/model/Annotation"");     jobject obj = g_jniEnv-&gt;AllocObject(cls);     jmethodID meth1 = g_jniEnv-&gt;GetMethodID(cls, ""setBookmark1"", ""(Ljava/lang/String;)V"");    jmethodID meth2 = g_jniEnv-&gt;GetMethodID(cls, ""setPage"", ""(I)V"");     jstring jAssetName = g_jniEnv-&gt;NewStringUTF(""Bookmark qualquer"");     g_jniEnv-&gt;CallObjectMethod(obj, meth1, jAssetName);    g_jniEnv-&gt;CallObjectMethod(obj, meth2, 2);     return obj; };"
"String sqlQuery = ""SELECT kompetence.kompetence_odlisujici_subcategories.nazev as odlisujici_nazev, tolerovana, zadana, aktualni ""+                 ""FROM IPR.kompetence_odlisujici, kompetence.kompetence_odlisujici_subcategories ""+                 ""WHERE IPR.kompetence_odlisujici.os_cislo_zamestnanec = ? AND tolerovana &lt;&gt; 0 AND zadana &lt;&gt; 0 AND aktualni &lt;&gt; 0 AND year = ? AND IPR.kompetence_odlisujici.active = 1 ""+                 ""AND kompetence.kompetence_odlisujici_subcategories.id = IPR.kompetence_odlisujici.id_odlisujici_subcategory"";"
"MultiSelectListPreference listPreference = new MultiSelectListPreference(context);     listPreference.setTitle(R.string.configure_category_title);     listPreference.setDialogTitle(R.string.configure_category_title);     listPreference.setSummary(R.string.configure_category_summary);     listPreference.setEntries(R.array.configure_category_array);     listPreference.setEntryValues(new CharSequence[]{             ProcessList.PREF_SERVICES + mAppWidgetId,             ProcessList.PREF_INACTIVE + mAppWidgetId,             ProcessList.PREF_INTERNAL + mAppWidgetId     });      //Create a Set&lt;String&gt; with list items that should be selected     SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);     boolean showServices = sharedPref.getBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, true);     boolean showInactive = sharedPref.getBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, true);     boolean showInternal = sharedPref.getBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, true);      String[] strings = new String[3];     int cnt = 0;     if (showServices)         strings[cnt++] = ProcessList.PREF_SERVICES + mAppWidgetId;     if (showInactive)         strings[cnt++] = ProcessList.PREF_INACTIVE + mAppWidgetId;     if (showInternal)         strings[cnt] = ProcessList.PREF_INTERNAL + mAppWidgetId;      Set&lt;String&gt; mySet = new HashSet&lt;String&gt;();     Collections.addAll(mySet, strings);      //Add the set     listPreference.setValues(mySet);      //Listen for changes, I'm not sure if this is how it's meant to work, but it does :/     listPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {         public boolean onPreferenceChange(Preference preference, Object o) {              HashSet hashSet = (HashSet) o;             Iterator stringIterator = hashSet.iterator();             boolean[] states = {false, false, false};             String prefString;              while (stringIterator.hasNext()) {                  prefString = (String) stringIterator.next();                  if (prefString == null)                     continue;                  if (prefString.compareTo(ProcessList.PREF_SERVICES + mAppWidgetId) == 0)                     states[0] = true;                 else if (prefString.compareTo(ProcessList.PREF_INACTIVE + mAppWidgetId) == 0)                     states[1] = true;                 else if (prefString.compareTo(ProcessList.PREF_INTERNAL + mAppWidgetId) == 0)                     states[2] = true;              }              PreferenceManager                     .getDefaultSharedPreferences(getActivity())                     .edit()                     .putBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, states[0])                     .putBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, states[1])                     .putBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, states[2])                     .commit();              return true;         }     });      preferenceCategory.addPreference(listPreference);"
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"for (Task tempTask : TasksListAppObj.getInstance().tasksRepository.getTasksRepository())                 {                     LatLng latlng = new LatLng(tempTask.getLatitude(), tempTask.getLongtitude());                     if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_WAITING))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_blue)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_IN_PROGRESS))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_bordo)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_ON_THE_WAY))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_turkiz)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_COMPLETE))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_orange)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_FAILED))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_purpul)));                     } }"
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"JSONObject jSONObject = new JSONObject(jsonString); String str_type=jSONObject.getString(""type"");  // using JSONArray JSONArray featuresArr = jSONObject.getJSONArray(""features"");   for (int i=0; i&lt;featuresArr.length; i++){     JSONObject anotherjsonObject = featuresArr.getJSONObject(i);     //access the fields of that json object     String str_type_one=anotherjsonObject.getString(""type"");    JSONArray featuresArr_properties = anotherjsonObject.getJSONArray(""properties"");     JSONObject propertiesjsonObject = featuresArr_properties.getJSONObject(0);    String str_type=propertiesjsonObject.getString(""type"");    String str_type=propertiesjsonObject.getString(""thumb"");    String str_type=propertiesjsonObject.getString(""name_pl"");    String str_type=propertiesjsonObject.getString(""name_en"");  ////parse all items ...........   }"
"Enumeration&lt;?&gt; e = getServletContext().getAttributeNames(); while (e.hasMoreElements()) {     String name = (String) e.nextElement();      // Get the value of the attribute     Object value = getServletContext().getAttribute(name);      if (value instanceof Map) {         for (Map.Entry&lt;?, ?&gt; entry : ((Map&lt;?, ?&gt;)value).entrySet()) {             System.out.println(entry.getKey() + ""="" + entry.getValue());         }     } else if (value instanceof List) {         for (Object element : (List)value) {             System.out.println(element);         }     } }"
"public class GsonOptionalDeserializer&lt;T&gt; implements JsonSerializer&lt;Optional&lt;T&gt;&gt;, JsonDeserializer&lt;Optional&lt;T&gt;&gt; {      @Override     public Optional&lt;T&gt; deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)             throws JsonParseException {         final JsonArray asJsonArray = json.getAsJsonArray();         final JsonElement jsonElement = asJsonArray.get(0);         final T value = context.deserialize(jsonElement, ((ParameterizedType) typeOfT).getActualTypeArguments()[0]);         return Optional.fromNullable(value);     }      @Override     public JsonElement serialize(Optional&lt;T&gt; src, Type typeOfSrc, JsonSerializationContext context) {         final JsonElement element = context.serialize(src.orNull());         final JsonArray result = new JsonArray();         result.add(element);         return result;     } }"
"query.from(catalog) .innerJoin(qe).on(catalog.id.eq(qe.itemId)) .innerJoin(enterprise).on(enterprise.id.eq(qe.enterpriseId)) .leftJoin(catalogPerson).on(catalogPerson.catalogId.eq(catalog.id)) .where(catalog.deletionDate.isNull(), qe.enterpriseId.eq(org)) .orderBy(catalog.creationDate.desc()) .limit(limit) .offset(offset) .groupBy(catalog.id) .list(Projections.constructor(Catalog.class,                             catalog.id,                             catalog.name,                             catalog.code,                             catalogPerson.count()));"
"DiffFormatter formatter = new DiffFormatter( System.out ); formatter.setRepository( git.getRepository() ); AbstractTreeIterator commitTreeIterator = prepareTreeParser( git.getRepository(),  Constants.HEAD ); FileTreeIterator workTreeIterator = new FileTreeIterator( git.getRepository() ); List&lt;DiffEntry&gt; diffEntries = formatter.scan( commitTreeIterator, workTreeIterator );  for( DiffEntry entry : diffEntries ) {   System.out.println( ""Entry: "" + entry + "", from: "" + entry.getOldId() + "", to: "" + entry.getNewId() );   formatter.format( entry ); }"
project 1   |- common        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;common&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- util        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;util&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- domain        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;domain&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- service        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;service&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- webapps        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;webapps&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;
"Path file = ...; BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);  System.out.println(""creationTime: "" + attr.creationTime()); System.out.println(""lastAccessTime: "" + attr.lastAccessTime()); System.out.println(""lastModifiedTime: "" + attr.lastModifiedTime());  System.out.println(""isDirectory: "" + attr.isDirectory()); System.out.println(""isOther: "" + attr.isOther()); System.out.println(""isRegularFile: "" + attr.isRegularFile()); System.out.println(""isSymbolicLink: "" + attr.isSymbolicLink()); System.out.println(""size: "" + attr.size());"
"JSONObject json; Object     intervention; JSONArray  interventionJsonArray; JSONObject interventionObject;  json = RestManager.getJSONfromURL(myuri); // retrieve the entire json stream      Object intervention = json.get(""intervention""); if (intervention instanceof JSONArray) {     // It's an array     interventionJsonArray = (JSONArray)intervention; } else if (intervention instanceof JSONObject) {     // It's an object     interventionObject = (JSONObject)intervention; } else {     // It's something else, like a string or number }"
"Criteria criteria = hibernetSession.createCriteria(WishList.class); criteria.createAlias(""item"", ""itemAlias"") .setProjection(Projections.projectionList() .add(Projections.property(""id""),""id"") .add(Projections.property(""itemAlias.id""),""itemAlias.id"") .add(Projections.property(""itemAlias.productCategory""),""itemAlias.productCategory"") .add(Projections.property(""itemAlias.productName""),""itemAlias.productName"") .add(Projections.groupProperty(""itemAlias.productName""))) .setResultTransformer(Transformers.aliasToBean(WishList.class)); List&lt;WishList&gt; itemList = criteria.list();"
