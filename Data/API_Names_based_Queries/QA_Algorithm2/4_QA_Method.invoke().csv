code
"OperatingSystemMXBean operatingSystemMXBean =      ManagementFactory.getOperatingSystemMXBean();  for (Method method: operatingSystemMXBean.getClass ().getMethods ())  {     method.setAccessible (true);     String methodName = method.getName ();     if (methodName.startsWith (""get"")         &amp;&amp; Modifier.isPublic (method.getModifiers ())         &amp;&amp; OperatingSystemMXBean.class.isAssignableFrom (             method.getDeclaringClass ())) {         try         {             System.out.println (                 methodName.substring (3) + "": "" +                  method.invoke (operatingSystemMXBean));         }         catch (Throwable ex)         {             // Ignore         }     } }"

"Model model = ...      model.addLiteral (subject, predicate, 10);     model.addLiteral (subject, predicate, 0.5);     model.addLiteral (subject, predicate, (float)0.5);     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(20));     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(0.99));     model.addLiteral (subject, predicate, true);     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""2012-03-11"", XSDDatatype.XSDdate));     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""P2Y"", XSDDatatype.XSDduration));"
"{     ""entry"": ""132456"",     ""product"":      {         ""item"": ""123456"",         ""prompts"":          [             {                 ""promptId"": ""1"",                 ""promptNumber"": ""109"",                 ""promptType"": 4,                 ""promptTypeDesc"": ""desc1"",                 ""validations"":                 [                     {                         ""minLen"": 10,                         ""maxLen"": 10,                         ""required"": true                      }                  ]              }          ]      } }"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"VariableElement parameterElement; ProcessingEnvironment processingEnv;  TypeMirror parameterType = parameterElement.asType(); Types typeUtils = processingEnv.getTypeUtils(); TypeElement typeElement = (TypeElement) typeUtils.asElement(parameterType); Elements elementUtils = processingEnv.getElementUtils() List&lt;? extends Element&gt; elementMembers = elementUtils.getAllMembers(typeElement); List&lt;ExecutableElement&gt; elementMethods = ElementFilter.methodsIn(elementMembers); for(ExecutableElement methodElement : elementMethods) {     if (methodElement.getParameters().size()==0 &amp;&amp; methodElement.getSimpleName().toString().startsWith(""get"")) {       // do something     } }"
"public aspect ValidationAspect {      pointcut serviceMethodCall() : execution(public * com.yourcompany.**.*(..));      Object around(final Object[] args) : serviceMethodCall() &amp;&amp; args(args){         Signature signature = thisJoinPointStaticPart.getSignature();         if(signature instanceof MethodSignature){             MethodSignature ms = (MethodSignature) signature;             Method method = ms.getMethod();             Annotation[][] parameterAnnotations =                  method.getParameterAnnotations();             String[] parameterNames = ms.getParameterNames();             for(int i = 0; i &lt; parameterAnnotations.length; i++){                 Annotation[] annotations = parameterAnnotations[i];                 validateParameter(parameterNames[i], args[i],annotations);             }         }         return proceed(args);     }      private void validateParameter(String paramName, Object object,         Annotation[] annotations){          // validate object against the annotations         // throw a RuntimeException if validation fails     }  }"
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"NSMutableArray *arrFixedData=[[NSMutableArray alloc]initWithObjects:@""DCS"",@""DCT"",@""DCU"",@""DAG"",@""DAI"",@""DAJ"",@""DAK"",@""DCG"",@""DAQ"",@""DCA"",@""DCB"",@""DCD"",@""DCF"",@""DCH"",@""DBA"",@""DBB"",@""DBC"",@""DBD"",@""DAU"",@""DCE"",@""DAY"",@""ZWA"",@""ZWB"",@""ZWC"",@""ZWD"",@""ZWE"",@""ZWF"", nil];     NSMutableArray *arrDriverData=[[NSMutableArray alloc]initWithObjects:@""Customer Family Name"",@""Customer Given Name"",@""Name Suffix"",@""Street Address 1"",@""City"",@""Jurisdction Code"",@""Postal Code"",@""Country Identification"",@""Customer Id Number"",@""Class"",@""Restrictions"",@""Endorsements"",@""Document Discriminator"",@""Vehicle Code"",@""Expiration Date"",@""Date Of Birth"",@""Sex"",@""Issue Date"",@""Height"",@""Weight"",@""Eye Color"",@""Control Number"",@""Endorsements"",@""Transaction Types"",@""Under 18 Until"",@""Under 21 Until"",@""Revision Date"", nil];       NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];     for (int i=0; i&lt;[arrFixedData count]; i++)     {         NSRange range = [message  rangeOfString: [arrFixedData objectAtIndex:i] options: NSCaseInsensitiveSearch];         NSLog(@""found: %@"", (range.location != NSNotFound) ? @""Yes"" : @""No"");         if (range.location != NSNotFound)         {             NSString *temp=[message substringFromIndex:range.location+range.length];              NSRange end = [temp rangeOfString:@""\n""];             if (end.location != NSNotFound)             {                 temp = [temp substringToIndex:end.location];                 temp =[temp stringByReplacingOccurrencesOfString:@""\n"" withString:@""""];                 temp=[temp stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];              }             NSLog(@""temp data : %@"",temp);             [dict setObject:temp forKey:[arrDriverData objectAtIndex:i]];         }     }      NSLog(@""Dictionary : %@"",dict);"
AS_INSTALL_ROOT/bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.is-connection-validation-required=true domain.resources.jdbc-connection-pool.DerbyPool.is-connection-validation-required = true  AS_INSTALL_ROOT/bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.connection-validation-method=table domain.resources.jdbc-connection-pool.DerbyPool.connection-validation-method = table  bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.validation-table-name=sys.systables domain.resources.jdbc-connection-pool.DerbyPool.validation-table-name = sys.systables
"try {         String insertTableSQL = ""INSERT INTO DBUSER""+ ""fcltyName,CommunicationOral,Communicationwritten,Leadership,AnalyticalAbilities,Interpersonalskills,DecisionMakingSkills,SelfConfidence,Creativity,Punctualityregularity,GeneralAwareness,Commitment,HardWork) VALUES""+ ""(?,?,?,?,?,?,?,?,?,?,?,?,?)"";          dbConnection = getDBConnection();         preparedStatement = dbConnection.prepareStatement(insertTableSQL);          preparedStatement.setStringt(1, fcltyName);         preparedStatement.setInt(2, 0);         preparedStatement.setInt(3, 0);         preparedStatement.setInt(4,0);         preparedStatement.setInt(5, 0);         preparedStatement.setInt(6, 0);         preparedStatement.setInt(7,0);         preparedStatement.setInt(8, 0);         preparedStatement.setInt(9, 0);         preparedStatement.setInt(10,0);         preparedStatement.setInt(11, 0);         preparedStatement.setInt(12, 0);         preparedStatement.setInt(13,0);          // execute insert SQL stetement         preparedStatement.executeUpdate();}'"
A                      vtable for A  +-------------+        +---------------+  | vtable ptr  | --+-&gt;  | method one    |  +-------------+   |    +---------------+  |             |   |    | method two    |  | fields of A |   |    +---------------+  |             |   |    |     ...       |  +-------------+   |    +----------------                    |    | method N      |    A               |    +---------------+  +-------------+   |  | vtable ptr  |---+  +-------------+  |             |  | fields of A |  |             |  +-------------+     B                  vtable for B  +-------------+     +------------+  | vtable ptr  | --&gt; | method one |  +-------------+     +------------+  |             |     | method two |  | fields of B |     +------------+  |             |     |    ...     |  +-------------+     +------------+                      | method M   |                      +------------+
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"private static List&lt;InetAddress&gt; getIpAddress() {   try {     List&lt;InetAddress&gt; result = new ArrayList&lt;InetAddress&gt;();      Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces();     while (interfaces.hasMoreElements()) {       NetworkInterface intf = interfaces.nextElement();       Enumeration&lt;InetAddress&gt; addresses = intf.getInetAddresses();       while (addresses.hasMoreElements()) {         InetAddress address = addresses.nextElement();         if (!address.isLoopbackAddress() &amp;&amp; !address.isLinkLocalAddress()) {           result.add(address);         }       }     }     return result;   } catch (SocketException ex) {     Log.e(TAG, ""Failed to list network interfaces."", ex);     return null;   } }"
"Method         = ""OPTIONS""                ; Section 9.2                   | ""GET""                    ; Section 9.3                   | ""HEAD""                   ; Section 9.4                   | ""POST""                   ; Section 9.5                   | ""PUT""                    ; Section 9.6                   | ""DELETE""                 ; Section 9.7                   | ""TRACE""                  ; Section 9.8                   | ""CONNECT""                ; Section 9.9                   | extension-method    extension-method = token"
project 1   |- common        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;common&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- util        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;util&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- domain        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;domain&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- service        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;service&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- webapps        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;webapps&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;
"class SameDirectionPathEvaluator implements PathEvaluator&lt;Direction&gt; {     public Evaluation evaluate(Path path, BranchState&lt;Direction&gt; state) {       if (path.length()==0) {          return Evaluation.EXCLUDE_AND_CONTINUE;       } else if (path.length()==1) {          state.setState(getDirectionOfLastRelationship(path));          return Evaluation.INCLUDE_AND_CONTINUE;       } else {          if (state.getState().equals(getDirectionOfLastRelationship(path)) {             return Evaluation.INCLUDE_AND_CONTINUE;          } else {             return Evaluation.EXCLUDE_AND_PRUNE;          }       }    }     private Direction getDirectionOfLastRelationship(Path path) {       assert path.length() &gt; 0;       Direction direction = Direction.INCOMING       if (path.endNode().equals(path.lastRelationship().getEndNode()) {         direction = Direction.OUTGOING;       }       return direction;    }  }"
"The Action class:  public class SomeAction extends DispatchAction {  public ActionForward someRequest(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)             throws Exception {   SomeForm someForm = ( SomeForm) form;   List&lt;SomeDTO&gt; someList = populateDto();   someForm.setSomeList(someList);   return mapping.findForward(""someAction"");  } The Form class:  public class SomeForm extends ActionForm{     List&lt;SomeDTO&gt; someList;    //getter and setters for someList }  StrutsConfig:  &lt;form-beans&gt;     &lt;form-bean name=""someForm"" type=""my.forms.SomeForm"" /&gt; &lt;/form-beans&gt;  &lt;action path=""/someRequest""             type=""my.actions.SomeAction""             name=""someForm"" scope=""request"" &gt; &lt;forward name=""someAction"" path=""goesSomeWhere"" /&gt;  &lt;/action&gt;  View:  &lt;c:forEach items=""${someForm.someList}"" var=""someThing"" varStatus=""someCounter""&gt;     &lt;c:out value=""${someThing.foo}"" /&gt; &lt;!-- assuming foo is a member in SomeThing DTO --&gt; &lt;/c:forEach&gt;"
"EntityPersister persister = ((SessionFactoryImpl) session.getSessionFactory()).getEntityPersister(""theNameOfYourEntity"");  if (persister.hasCache() &amp;&amp;      !persister.isCacheInvalidationRequired() &amp;&amp;      session.getCacheMode().isPutEnabled()) {      CacheKey ck = new CacheKey(                      theEntityToBeCached.getId(),                      persister.getIdentifierType(),                      persister.getRootEntityName(),                      session.getEntityMode(),                      session.getFactory()                  );      persister.getCacheAccessStrategy().afterInsert(ck, theEntityToBeCached, null); }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"package com.spmsoftware.plugin.listeners;  import com.atlassian.event.api.EventListener; import com.atlassian.event.api.EventPublisher; import com.atlassian.jira.component.ComponentAccessor; import com.atlassian.jira.event.issue.IssueEvent; import com.atlassian.jira.event.type.EventType; import com.atlassian.jira.issue.Issue; import com.atlassian.jira.issue.MutableIssue; import com.atlassian.jira.issue.customfields.manager.OptionsManager; import com.atlassian.jira.issue.customfields.option.Option; import com.atlassian.jira.issue.customfields.option.Options; import com.atlassian.jira.issue.fields.CustomField; import com.atlassian.jira.issue.fields.config.FieldConfig; import com.atlassian.jira.issue.fields.config.FieldConfigScheme; import org.apache.log4j.Logger; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean;  import java.util.List; import java.util.Map;  /**  * User: adnan  * Date: 5/4/14  * Time: 4:49 PM  */ public class IssueUpdateListener  implements InitializingBean, DisposableBean {      private static final Logger LOGGER = Logger.getLogger(IssueUpdateListener.class);      private final EventPublisher eventPublisher;    // private final JiraAuthenticationContext authenticationContext;      public IssueUpdateListener(EventPublisher eventPublisher) {         this.eventPublisher = eventPublisher;        // this.authenticationContext = ComponentAccessor.getJiraAuthenticationContext();     }      @Override     public void afterPropertiesSet() throws Exception {         eventPublisher.register(this);     }      @Override     public void destroy() throws Exception {         eventPublisher.unregister(this);     }      @EventListener     public void onIssueEvent(IssueEvent issueEvent) {         Long eventTypeId = issueEvent.getEventTypeId();         Issue issue = issueEvent.getIssue();         if (eventTypeId.equals(EventType.ISSUE_RESOLVED_ID)) {             MutableIssue mutableIssue = getMutableIssue(issue);             CustomField customerNameCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""Customer Name"");             CustomField allCustomersCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""All Customers"");             Object customerNameVal = mutableIssue.getCustomFieldValue(customerNameCF);             Option newOptions = addOptionToCustomField(allCustomersCF, customerNameVal.toString());             LOGGER.info(""New updated option {}"" + newOptions);         }     }      private MutableIssue getMutableIssue(Issue issue) {         MutableIssue mutableIssue;         if (issue instanceof MutableIssue)   {             mutableIssue = (MutableIssue)issue;         } else {             mutableIssue = ComponentAccessor.getIssueManager().getIssueObject(issue.getKey());         }         return mutableIssue;     }       public Option addOptionToCustomField(CustomField customField, String value) {         Option newOption = null;         if (customField != null) {             List&lt;FieldConfigScheme&gt; schemes = customField.getConfigurationSchemes();             if (schemes != null &amp;&amp; !schemes.isEmpty()) {                 FieldConfigScheme sc = schemes.get(0);                 Map configs = sc.getConfigsByConfig();                 if (configs != null &amp;&amp; !configs.isEmpty()) {                     FieldConfig config = (FieldConfig) configs.keySet().iterator().next();                     OptionsManager optionsManager = ComponentAccessor.getOptionsManager();                     Options l = optionsManager.getOptions(config);                     int nextSequence = l.isEmpty() ? 1 : l.getRootOptions().size() + 1;                     newOption = optionsManager.createOption(config, null, (long) nextSequence, value);                 }             }         }          return newOption;     }  }"
"interface DistributionProvider&lt;D extends Distribution&gt; {   D create(ValueRange vr); }  class UniformDistributionProvider implements DistributionProvider&lt;UniformDistribution&gt; {   UniformDistribution create(ValueRange vr) {     return new UniformDistribution(vr);   } }  class ForwardMarkovDistributionProvider implements DistributionProvider&lt;ForwardMarkovDistribution&gt; {    private final MarkovDistribution.Parameters params;    ForwardMarkovDistributionProvider(MarkovDistribution.Parameters pParams) {     params = pParams;   }    ForwardMarkovDistribution create(ValueRange vr) {     return new ForwardMarkovDistribution(vr, params);   } }  // etc."
"package org.hibernate.envers.test.integration.basic;  import org.hibernate.Session; import org.hibernate.action.spi.AfterTransactionCompletionProcess; import org.hibernate.action.spi.BeforeTransactionCompletionProcess; import org.hibernate.engine.spi.SessionImplementor; import org.hibernate.envers.internal.tools.MutableInteger; import org.hibernate.envers.test.BaseEnversFunctionalTestCase; import org.hibernate.envers.test.entities.StrTestEntity; import org.hibernate.event.service.spi.EventListenerRegistry; import org.hibernate.event.spi.EventType; import org.hibernate.event.spi.PostInsertEvent; import org.hibernate.event.spi.PostInsertEventListener; import org.hibernate.persister.entity.EntityPersister;  import org.junit.Assert; import org.junit.Test;  import org.hibernate.testing.TestForIssue;  /**  * @author Lukasz Antoniak (lukasz dot antoniak at gmail dot com)  */ public class RegisterUserEventListenersTest extends BaseEnversFunctionalTestCase {     @Override     protected Class&lt;?&gt;[] getAnnotatedClasses() {         return new Class&lt;?&gt;[] {StrTestEntity.class};     }      @Test     @TestForIssue(jiraKey = ""HHH-7478"")     public void testTransactionProcessSynchronization() {         final EventListenerRegistry registry = sessionFactory().getServiceRegistry()                 .getService( EventListenerRegistry.class );         final CountingPostInsertTransactionBoundaryListener listener = new CountingPostInsertTransactionBoundaryListener();          registry.getEventListenerGroup( EventType.POST_INSERT ).appendListener( listener );          Session session = openSession();         session.getTransaction().begin();         StrTestEntity entity = new StrTestEntity( ""str1"" );         session.save( entity );         session.getTransaction().commit();         session.close();          // Post insert listener invoked three times - before/after insertion of original data,         // revision entity and audit row.         Assert.assertEquals( 3, listener.getBeforeCount() );         Assert.assertEquals( 3, listener.getAfterCount() );     }      private static class CountingPostInsertTransactionBoundaryListener implements PostInsertEventListener {         private final MutableInteger beforeCounter = new MutableInteger();         private final MutableInteger afterCounter = new MutableInteger();          @Override         public void onPostInsert(PostInsertEvent event) {             event.getSession().getActionQueue().registerProcess(                     new BeforeTransactionCompletionProcess() {                         @Override                         public void doBeforeTransactionCompletion(SessionImplementor session) {                             beforeCounter.increase();                         }                     }             );             event.getSession().getActionQueue().registerProcess(                     new AfterTransactionCompletionProcess() {                         @Override                         public void doAfterTransactionCompletion(boolean success, SessionImplementor session) {                             afterCounter.increase();                         }                     }             );         }          @Override         public boolean requiresPostCommitHanding(EntityPersister persister) {             return true;         }          public int getBeforeCount() {             return beforeCounter.get();         }          public int getAfterCount() {             return afterCounter.get();         }     } }"
"HttpClient createClient() {     HttpParams params = new BasicHttpParams();     params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);     params.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, HTTP.DEFAULT_CONTENT_CHARSET);     params.setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true);     params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 30 * 1000);     params.setParameter(CoreConnectionPNames.SO_TIMEOUT, 30 * 1000);      SchemeRegistry schReg = new SchemeRegistry();     schReg.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));     schReg.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));     ClientConnectionManager conMgr = new ThreadSafeClientConnManager(params, schReg);      return new DefaultHttpClient(conMgr, params); }"
"ExtendedPropertyDefinition propDef_PidLidEmail1DisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8080, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1AddressType = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8082, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1EmailAddress = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8083, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalDisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8084, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalEntryId = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8085, MapiPropertyType.Binary);  ExchangeService mailbox = new ExchangeService(ExchangeVersion.Exchange2007_SP1); mailbox.setUrl(new URL(""https://remote.domain.com/EWS/exchange.asmx"").toURI()); ExchangeCredentials credentials = new WebCredentials(""user.name"", ""pw"", ""domain""); mailbox.setCredentials(credentials);  String FIRST = ""First""; String LAST = ""Last""; String FIRST_LAST = FIRST + "" "" + LAST; // ""First Last"" String EMAIL = ""first.last@email.com""; String DISPLAY_NAME = FIRST + "" "" + LAST + "" ("" + EMAIL + "")""; // ""First Last (first.last@email.com)""  Contact c = new Contact(mailbox); c.setGivenName(FIRST); c.setSurname(LAST); c.setFileAs(FIRST_LAST);  // don't use this //    c.getEmailAddresses().setEmailAddress(EmailAddressKey.EmailAddress1, new EmailAddress(EMAIL));  // Address book Name (seem to trigger the whole address book functionality) c.setSubject(FIRST_LAST); // Address book email address c.setExtendedProperty(propDef_PidLidEmail1OriginalDisplayName, EMAIL); // contact and address book display name c.setExtendedProperty(propDef_PidLidEmail1DisplayName, DISPLAY_NAME);  c.setExtendedProperty(propDef_PidLidEmail1AddressType, ""SMTP""); // constant c.setExtendedProperty(propDef_PidLidEmail1EmailAddress, EMAIL);  // not needed after all, exchange sets this automatically //    c.setExtendedProperty(propDef_PidLidEmail1OriginalEntryId, ???);  c.save(WellKnownFolderName.Contacts);  for(Item item : mailbox.findItems(WellKnownFolderName.Contacts, new ItemView(1000))) {   Contact result = (Contact) item;    PropertySet propertySet = new PropertySet(BasePropertySet.FirstClassProperties);   propertySet.add(propDef_PidLidEmail1AddressType);   propertySet.add(propDef_PidLidEmail1EmailAddress);   propertySet.add(propDef_PidLidEmail1OriginalDisplayName);   propertySet.add(propDef_PidLidEmail1DisplayName);   propertySet.add(propDef_PidLidEmail1OriginalEntryId);    result = Contact.bind(mailbox, result.getId(), propertySet);    LOGGER.info(""count: "" + result.getExtendedProperties().getCount());    for(ExtendedProperty p : result.getExtendedProperties())   {     LOGGER.info(p.toString());   } }"
"public class RolesAndServicesMapping {     private static final ImmutableMultimap&lt;Service, Authority&gt; SERVICES_TO_ROLES_MAPPING =           ImmutableMultimap.&lt;Service, Authority&gt;builder()             .put(Service.SFP1, Authority.ROLE_PREMIUM)             .put(Service.SFP, Authority.ROLE_PREMIUM)             .put(Service.SFE, Authority.ROLE_EXTRA)             .put(Service.SF, Authority.ROLE_STANDARD)             .put(Service.SK, Authority.ROLE_STANDARD)             .put(Service.SFP1, Authority.ROLE_ADMIN)             .put(Service.ADMIN, Authority.ROLE_ADMIN)             .put(Service.NONE, Authority.ROLE_DENY)             .build();      // Whole magic is here:     private static final ImmutableMultimap&lt;Authority, Service&gt; ROLES_TO_SERVICES_MAPPING =             SERVICES_TO_ROLES_MAPPING.inverse();     // before guava-11.0 it was: ImmutableMultimap.copyOf(Multimaps.invertFrom(SERVICES_TO_ROLES_MAPPING, HashMultimap.&lt;Authority, Service&gt;create()));      public static ImmutableSet&lt;Authority&gt; getRoles(final Service service) {         return Sets.immutableEnumSet(SERVICES_TO_ROLES_MAPPING.get(service));     }      public static ImmutableSet&lt;Service&gt; getServices(final Authority role) {         return Sets.immutableEnumSet(ROLES_TO_SERVICES_MAPPING.get(role));     } }"
