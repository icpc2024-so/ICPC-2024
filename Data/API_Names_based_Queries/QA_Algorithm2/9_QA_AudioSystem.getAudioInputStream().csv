code
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"MediaRecorder recorder = new MediaRecorder();  recorder.setAudioSource(MediaRecorder.AudioSource.MIC);  recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP);  recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);  recorder.setOutputFile(PATH_NAME);  recorder.prepare();  recorder.start();   // Recording is now started  ...  while(recordingNotOver)  {     int lastMaxAmplitude = recorder.getMaxAmplitude();     // you have the value here in lastMaxAmplitude, do what u want to  }   recorder.stop();  recorder.reset();   // You can reuse the object by going back to setAudioSource() step  recorder.release(); // Now the object cannot be reused"
"AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);         int sb2value = audioManager.getStreamMaxVolume(AudioManager.STREAM_RING);         NotificationManager notificationManager = (NotificationManager) getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);         Notification notification = new Notification(R.drawable.ic_launcher, ""Testomg"", System.currentTimeMillis() + 5000);          Intent notificationIntent = new Intent(Intent.ACTION_VIEW);         notificationIntent.setData(Uri.parse(""market://details?id=com.karya.kot""));         notificationIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);         PendingIntent intent = PendingIntent.getActivity(getApplicationContext(), 0, notificationIntent, 0);         notification.setLatestEventInfo(getApplicationContext(), ""Google Play"", ""Download app"", intent);          notification.flags |= Notification.FLAG_AUTO_CANCEL;         notificationManager.notify(0, notification);"
"File file = new File(filename); AudioInputStream in= AudioSystem.getAudioInputStream(file); AudioInputStream din = null; AudioFormat baseFormat = in.getFormat(); AudioFormat decodedFormat = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,                                              baseFormat.getSampleRate(),                                             16,                                             baseFormat.getChannels(),                                             baseFormat.getChannels() * 2,                                             baseFormat.getSampleRate(),                                             false); din = AudioSystem.getAudioInputStream(decodedFormat, in);"
"import com.xuggle.mediatool.IMediaWriter; import com.xuggle.mediatool.ToolFactory; import com.xuggle.xuggler.IAudioSamples; import com.xuggle.xuggler.ICodec; import com.xuggle.xuggler.IContainer; import com.xuggle.xuggler.IPacket; import com.xuggle.xuggler.IStream; import com.xuggle.xuggler.IStreamCoder; import com.xuggle.xuggler.IVideoPicture;    /**  * This class is used to merge audio and video file.  *  * @author Arslaan Ejaz  */ public class DecodeAndSaveAudioVideo {   public static void main(String[] args)   {      String filenamevideo = ""f:/testvidfol/video.mp4""; //this is the input file for video. you can change extension     String filenameaudio = ""f:/testvidfol/audio.wav""; //this is the input file for audio. you can change extension       IMediaWriter mWriter = ToolFactory.makeWriter(""f:/testvidfol/audiovideooutput.flv""); //output file      IContainer containerVideo = IContainer.make();     IContainer containerAudio = IContainer.make();      if (containerVideo.open(filenamevideo, IContainer.Type.READ, null) &lt; 0)         throw new IllegalArgumentException(""Cant find "" + filenamevideo);      if (containerAudio.open(filenameaudio, IContainer.Type.READ, null) &lt; 0)         throw new IllegalArgumentException(""Cant find "" + filenameaudio);      int numStreamVideo = containerVideo.getNumStreams();     int numStreamAudio = containerAudio.getNumStreams();      System.out.println(""Number of video streams: ""+numStreamVideo + ""\n"" + ""Number of audio streams: ""+numStreamAudio );  int videostreamt = -1; //this is the video stream id int audiostreamt = -1;  IStreamCoder  videocoder = null;      for(int i=0; i&lt;numStreamVideo; i++){         IStream stream = containerVideo.getStream(i);         IStreamCoder code = stream.getStreamCoder();          if(code.getCodecType() == ICodec.Type.CODEC_TYPE_VIDEO)         {             videostreamt = i;             videocoder = code;             break;         }      }      for(int i=0; i&lt;numStreamAudio; i++){         IStream stream = containerAudio.getStream(i);         IStreamCoder code = stream.getStreamCoder();          if(code.getCodecType() == ICodec.Type.CODEC_TYPE_AUDIO)         {             audiostreamt = i;             break;         }      }      if (videostreamt == -1) throw new RuntimeException(""No video steam found"");     if (audiostreamt == -1) throw new RuntimeException(""No audio steam found"");      if(videocoder.open()&lt;0 ) throw new RuntimeException(""Cant open video coder"");     IPacket packetvideo = IPacket.make();      IStreamCoder audioCoder = containerAudio.getStream(audiostreamt).getStreamCoder();      if(audioCoder.open()&lt;0 ) throw new RuntimeException(""Cant open audio coder"");     mWriter.addAudioStream(1, 1, audioCoder.getChannels(), audioCoder.getSampleRate());      mWriter.addVideoStream(0, 0, videocoder.getWidth(), videocoder.getHeight());      IPacket packetaudio = IPacket.make();      while(containerVideo.readNextPacket(packetvideo) &gt;= 0 ||             containerAudio.readNextPacket(packetaudio) &gt;= 0){          if(packetvideo.getStreamIndex() == videostreamt){              //video packet             IVideoPicture picture = IVideoPicture.make(videocoder.getPixelType(),                     videocoder.getWidth(),                     videocoder.getHeight());             int offset = 0;             while (offset &lt; packetvideo.getSize()){                 int bytesDecoded = videocoder.decodeVideo(picture,                          packetvideo,                          offset);                 if(bytesDecoded &lt; 0) throw new RuntimeException(""bytesDecoded not working"");                 offset += bytesDecoded;                  if(picture.isComplete()){                     System.out.println(picture.getPixelType());                     mWriter.encodeVideo(0, picture);                  }             }         }           if(packetaudio.getStreamIndex() == audiostreamt){            //audio packet              IAudioSamples samples = IAudioSamples.make(512,                      audioCoder.getChannels(),                     IAudioSamples.Format.FMT_S32);               int offset = 0;             while(offset&lt;packetaudio.getSize())             {                 int bytesDecodedaudio = audioCoder.decodeAudio(samples,                          packetaudio,                         offset);                 if (bytesDecodedaudio &lt; 0)                     throw new RuntimeException(""could not detect audio"");                 offset += bytesDecodedaudio;                  if (samples.isComplete()){                      mWriter.encodeAudio(1, samples);          }             }      }    } } }"
"public static void main(String[] args) throws IOException {      String audioDeutsch = MuxMp4SourcesExample.class.getProtectionDomain().getCodeSource().getLocation().getFile() + ""/count-deutsch-audio.mp4"";     String audioEnglish = MuxMp4SourcesExample.class.getProtectionDomain().getCodeSource().getLocation().getFile() + ""/count-english-audio.mp4"";     String video = MuxMp4SourcesExample.class.getProtectionDomain().getCodeSource().getLocation().getFile() + ""/count-video.mp4"";       Movie countVideo = MovieCreator.build(new FileInputStream(video).getChannel());     Movie countAudioDeutsch = MovieCreator.build(new FileInputStream(audioDeutsch).getChannel());     Movie countAudioEnglish = MovieCreator.build(new FileInputStream(audioEnglish).getChannel());      Track audioTrackDeutsch = countAudioDeutsch.getTracks().get(0);     audioTrackDeutsch.getTrackMetaData().setLanguage(""deu"");     Track audioTrackEnglish = countAudioEnglish.getTracks().get(0);     audioTrackEnglish.getTrackMetaData().setLanguage(""eng"");      countVideo.addTrack(audioTrackDeutsch);     countVideo.addTrack(audioTrackEnglish);      Container out = new DefaultMp4Builder().build(countVideo);     FileOutputStream fos = new FileOutputStream(new File(""output.mp4""));     out.writeContainer(fos.getChannel());     fos.close();  }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"String query = ""env.adapterName=DefaultAdapter""     + ""&amp;env.systemName=DefaultSystem""     + ""&amp;env.userId=admin""     + ""&amp;env.progId=PerlHttpTest"";     + ""&amp;"" + URLEncoder.encode(interopApiName, ""UTF-8"") + ""="" + URLEncoder.encode(apiName, ""UTF-8"")     + ""&amp;"" + URLEncoder.encode(interopApiData, ""UTF-8"") + ""="" + URLEncoder.encode(xmlData, ""UTF-8"");  URLConnection connection = new URL(""http://hostname/interop/InteropHttpServlet"").openConnection(); connection.setDoOutput(true); // Triggers POST. connection.getOutputStream().write(query.getBytes(""UTF-8""));  InputStream response = connection.getInputStream(); // ..."
"DiffFormatter formatter = new DiffFormatter( System.out ); formatter.setRepository( git.getRepository() ); AbstractTreeIterator commitTreeIterator = prepareTreeParser( git.getRepository(),  Constants.HEAD ); FileTreeIterator workTreeIterator = new FileTreeIterator( git.getRepository() ); List&lt;DiffEntry&gt; diffEntries = formatter.scan( commitTreeIterator, workTreeIterator );  for( DiffEntry entry : diffEntries ) {   System.out.println( ""Entry: "" + entry + "", from: "" + entry.getOldId() + "", to: "" + entry.getNewId() );   formatter.format( entry ); }"
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"package com.spmsoftware.plugin.listeners;  import com.atlassian.event.api.EventListener; import com.atlassian.event.api.EventPublisher; import com.atlassian.jira.component.ComponentAccessor; import com.atlassian.jira.event.issue.IssueEvent; import com.atlassian.jira.event.type.EventType; import com.atlassian.jira.issue.Issue; import com.atlassian.jira.issue.MutableIssue; import com.atlassian.jira.issue.customfields.manager.OptionsManager; import com.atlassian.jira.issue.customfields.option.Option; import com.atlassian.jira.issue.customfields.option.Options; import com.atlassian.jira.issue.fields.CustomField; import com.atlassian.jira.issue.fields.config.FieldConfig; import com.atlassian.jira.issue.fields.config.FieldConfigScheme; import org.apache.log4j.Logger; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean;  import java.util.List; import java.util.Map;  /**  * User: adnan  * Date: 5/4/14  * Time: 4:49 PM  */ public class IssueUpdateListener  implements InitializingBean, DisposableBean {      private static final Logger LOGGER = Logger.getLogger(IssueUpdateListener.class);      private final EventPublisher eventPublisher;    // private final JiraAuthenticationContext authenticationContext;      public IssueUpdateListener(EventPublisher eventPublisher) {         this.eventPublisher = eventPublisher;        // this.authenticationContext = ComponentAccessor.getJiraAuthenticationContext();     }      @Override     public void afterPropertiesSet() throws Exception {         eventPublisher.register(this);     }      @Override     public void destroy() throws Exception {         eventPublisher.unregister(this);     }      @EventListener     public void onIssueEvent(IssueEvent issueEvent) {         Long eventTypeId = issueEvent.getEventTypeId();         Issue issue = issueEvent.getIssue();         if (eventTypeId.equals(EventType.ISSUE_RESOLVED_ID)) {             MutableIssue mutableIssue = getMutableIssue(issue);             CustomField customerNameCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""Customer Name"");             CustomField allCustomersCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""All Customers"");             Object customerNameVal = mutableIssue.getCustomFieldValue(customerNameCF);             Option newOptions = addOptionToCustomField(allCustomersCF, customerNameVal.toString());             LOGGER.info(""New updated option {}"" + newOptions);         }     }      private MutableIssue getMutableIssue(Issue issue) {         MutableIssue mutableIssue;         if (issue instanceof MutableIssue)   {             mutableIssue = (MutableIssue)issue;         } else {             mutableIssue = ComponentAccessor.getIssueManager().getIssueObject(issue.getKey());         }         return mutableIssue;     }       public Option addOptionToCustomField(CustomField customField, String value) {         Option newOption = null;         if (customField != null) {             List&lt;FieldConfigScheme&gt; schemes = customField.getConfigurationSchemes();             if (schemes != null &amp;&amp; !schemes.isEmpty()) {                 FieldConfigScheme sc = schemes.get(0);                 Map configs = sc.getConfigsByConfig();                 if (configs != null &amp;&amp; !configs.isEmpty()) {                     FieldConfig config = (FieldConfig) configs.keySet().iterator().next();                     OptionsManager optionsManager = ComponentAccessor.getOptionsManager();                     Options l = optionsManager.getOptions(config);                     int nextSequence = l.isEmpty() ? 1 : l.getRootOptions().size() + 1;                     newOption = optionsManager.createOption(config, null, (long) nextSequence, value);                 }             }         }          return newOption;     }  }"
"IplImage img=cvLoadImage(""pathtosourceimage"");     CvSize cvSize = cvSize(img.width(), img.height());     IplImage gry=cvCreateImage(cvSize, img.depth(), 1);     cvCvtColor(img, gry, CV_BGR2GRAY);     cvThreshold(gry, gry, 200, 255, CV_THRESH_BINARY);     cvAdaptiveThreshold(gry, gry, 255, CV_ADAPTIVE_THRESH_MEAN_C, CV_THRESH_BINARY_INV, 11, 5);      CvMemStorage storage = CvMemStorage.create();     CvSeq contours = new CvContour(null);      int noOfContors = cvFindContours(gry, storage, contours, Loader.sizeof(CvContour.class), CV_RETR_CCOMP, CV_CHAIN_APPROX_NONE, new CvPoint(0,0));      CvSeq ptr = new CvSeq();      int count =1;     CvPoint p1 = new CvPoint(0,0),p2 = new CvPoint(0,0);      for (ptr = contours; ptr != null; ptr = ptr.h_next()) {          CvScalar color = CvScalar.BLUE;         CvRect sq = cvBoundingRect(ptr, 0);              System.out.println(""Contour No =""+count);             System.out.println(""X =""+ sq.x()+"" Y=""+ sq.y());             System.out.println(""Height =""+sq.height()+"" Width =""+sq.width());             System.out.println("""");              p1.x(sq.x());             p2.x(sq.x()+sq.width());             p1.y(sq.y());             p2.y(sq.y()+sq.height());             cvRectangle(img, p1,p2, CV_RGB(255, 0, 0), 2, 8, 0);             cvDrawContours(img, ptr, color, CV_RGB(0,0,0), -1, CV_FILLED, 8, cvPoint(0,0));             count++;      }      cvShowImage(""contures"",img);     cvWaitKey(0);"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"import com.xuggle.xuggler.Configuration; import com.xuggle.xuggler.ICodec; import com.xuggle.xuggler.IContainer; import com.xuggle.xuggler.IContainerFormat; import com.xuggle.xuggler.IPacket; import com.xuggle.xuggler.IPixelFormat; import com.xuggle.xuggler.IRational; import com.xuggle.xuggler.IStream; import com.xuggle.xuggler.IStreamCoder; import com.xuggle.xuggler.IVideoPicture; import com.xuggle.xuggler.video.ConverterFactory; import com.xuggle.xuggler.video.IConverter; import java.awt.AWTException; import java.awt.Rectangle; import java.awt.Robot; import java.awt.image.BufferedImage; import java.io.IOException; import java.io.InputStream; import java.util.Properties;  public class XugglerRtmpReferenceImpl {     private static String url = ""rtmp://your.test.server/screen/"";    private static String fileName = ""test/teststream"";    private static int framesToEncode = 60;    private static int x = 0;    private static int y = 0;    private static int height = 480;    private static int width = 640;     public static void main(String[] args) {        IContainer container = IContainer.make();        IContainerFormat containerFormat_live = IContainerFormat.make();        containerFormat_live.setOutputFormat(""flv"", url + fileName, null);        container.setInputBufferLength(0);        int retVal = container.open(url + fileName, IContainer.Type.WRITE, containerFormat_live);        if (retVal &lt; 0) {            System.err.println(""Could not open output container for live stream"");            System.exit(1);        }        IStream stream = container.addNewStream(0);        IStreamCoder coder = stream.getStreamCoder();        ICodec codec = ICodec.findEncodingCodec(ICodec.ID.CODEC_ID_H264);        coder.setNumPicturesInGroupOfPictures(5);        coder.setCodec(codec);        coder.setBitRate(200000);        coder.setPixelType(IPixelFormat.Type.YUV420P);        coder.setHeight(height);        coder.setWidth(width);        System.out.println(""[ENCODER] video size is "" + width + ""x"" + height);        coder.setFlag(IStreamCoder.Flags.FLAG_QSCALE, true);        coder.setGlobalQuality(0);        IRational frameRate = IRational.make(5, 1);        coder.setFrameRate(frameRate);        coder.setTimeBase(IRational.make(frameRate.getDenominator(), frameRate.getNumerator()));        Properties props = new Properties();        InputStream is = XugglerRtmpReferenceImpl.class.getResourceAsStream(""/libx264-normal.ffpreset"");        try {            props.load(is);        } catch (IOException e) {            System.err.println(""You need the libx264-normal.ffpreset file from the Xuggle distribution in your classpath."");            System.exit(1);        }        Configuration.configure(props, coder);        coder.open();        container.writeHeader();        long firstTimeStamp = System.currentTimeMillis();        long lastTimeStamp = -1;        int i = 0;        try {            Robot robot = new Robot();            while (i &lt; framesToEncode) {                //long iterationStartTime = System.currentTimeMillis();                long now = System.currentTimeMillis();                //grab the screenshot                BufferedImage image = robot.createScreenCapture(new Rectangle(x, y, width, height));                //convert it for Xuggler                BufferedImage currentScreenshot = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);                currentScreenshot.getGraphics().drawImage(image, 0, 0, null);                //start the encoding process                IPacket packet = IPacket.make();                IConverter converter = ConverterFactory.createConverter(currentScreenshot, IPixelFormat.Type.YUV420P);                long timeStamp = (now - firstTimeStamp) * 1000;                 IVideoPicture outFrame = converter.toPicture(currentScreenshot, timeStamp);                if (i == 0) {                    //make first frame keyframe                    outFrame.setKeyFrame(true);                }                outFrame.setQuality(0);                coder.encodeVideo(packet, outFrame, 0);                outFrame.delete();                if (packet.isComplete()) {                    container.writePacket(packet);                    System.out.println(""[ENCODER] writing packet of size "" + packet.getSize() + "" for elapsed time "" + ((timeStamp - lastTimeStamp) / 1000));                    lastTimeStamp = timeStamp;                }                System.out.println(""[ENCODER] encoded image "" + i + "" in "" + (System.currentTimeMillis() - now));                i++;                try {                    Thread.sleep(Math.max((long) (1000 / frameRate.getDouble()) - (System.currentTimeMillis() - now), 0));                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        } catch (AWTException e) {            e.printStackTrace();        }        container.writeTrailer();     } }"
"Path file = ...; BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);  System.out.println(""creationTime: "" + attr.creationTime()); System.out.println(""lastAccessTime: "" + attr.lastAccessTime()); System.out.println(""lastModifiedTime: "" + attr.lastModifiedTime());  System.out.println(""isDirectory: "" + attr.isDirectory()); System.out.println(""isOther: "" + attr.isOther()); System.out.println(""isRegularFile: "" + attr.isRegularFile()); System.out.println(""isSymbolicLink: "" + attr.isSymbolicLink()); System.out.println(""size: "" + attr.size());"
"public static String addTracksToPlaylist(final long id, List&lt;MediaData&gt; tracks, final Context context) {     int count = getPlaylistSize(id, context);     ContentValues[] values = new ContentValues[tracks.size()];     for (int i = 0; i &lt; tracks.size(); i++) {         values[i] = new ContentValues();         values[i].put(MediaStore.Audio.Playlists.Members.PLAY_ORDER, i + count + 1);         values[i].put(MediaStore.Audio.Playlists.Members.AUDIO_ID, tracks.get(i).getId());     }     Uri uri = MediaStore.Audio.Playlists.Members.getContentUri(""external"", id);     ContentResolver resolver = context.getContentResolver();     int num = resolver.bulkInsert(uri, values);     resolver.notifyChange(Uri.parse(""content://media""), null);     return String.format(context.getString(R.string.ADDED_TO_PLAYLIST), num, context.getString(R.string.CURRENT));  }"
"OperatingSystemMXBean operatingSystemMXBean =      ManagementFactory.getOperatingSystemMXBean();  for (Method method: operatingSystemMXBean.getClass ().getMethods ())  {     method.setAccessible (true);     String methodName = method.getName ();     if (methodName.startsWith (""get"")         &amp;&amp; Modifier.isPublic (method.getModifiers ())         &amp;&amp; OperatingSystemMXBean.class.isAssignableFrom (             method.getDeclaringClass ())) {         try         {             System.out.println (                 methodName.substring (3) + "": "" +                  method.invoke (operatingSystemMXBean));         }         catch (Throwable ex)         {             // Ignore         }     } }"
"EntityPersister persister = ((SessionFactoryImpl) session.getSessionFactory()).getEntityPersister(""theNameOfYourEntity"");  if (persister.hasCache() &amp;&amp;      !persister.isCacheInvalidationRequired() &amp;&amp;      session.getCacheMode().isPutEnabled()) {      CacheKey ck = new CacheKey(                      theEntityToBeCached.getId(),                      persister.getIdentifierType(),                      persister.getRootEntityName(),                      session.getEntityMode(),                      session.getFactory()                  );      persister.getCacheAccessStrategy().afterInsert(ck, theEntityToBeCached, null); }"
"public static boolean intersectsWith(BoundingBox boundingBox1, BoundingBox boundingBox2) {         Vector3 otherMin = boundingBox1.getMin();         Vector3 otherMax = boundingBox1.getMax();         Vector3 min = boundingBox2.getMin();         Vector3 max = boundingBox2.getMax();          return (min.x &lt; otherMax.x) &amp;&amp; (max.x &gt; otherMin.x)             &amp;&amp; (min.y &lt; otherMax.y) &amp;&amp; (max.y &gt; otherMin.y)             &amp;&amp; (min.z &lt; otherMax.z) &amp;&amp; (max.z &gt; otherMin.z);     }"
"response.setContentType(""application/force-download""); response.setContentLength((int)f.length());         //response.setContentLength(-1); response.setHeader(""Content-Transfer-Encoding"", ""binary""); response.setHeader(""Content-Disposition"",""attachment; filename=\"""" + ""xxx\"""");//fileName); ... ... File f= new File(fileName);  InputStream in = new FileInputStream(f); BufferedInputStream bin = new BufferedInputStream(in); DataInputStream din = new DataInputStream(bin);  while(din.available() &gt; 0){     out.print(din.readLine());     out.print(""\n""); }"
"PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet(); DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE; PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras); PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService(); PrintService service = ServiceUI.printDialog(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration(), 200, 200,                       printService, defaultService, flavor, pras); if (service != null) {     DocPrintJob job = service.createPrintJob();     FileInputStream fis = new FileInputStream(doc);     DocAttributeSet das = new HashDocAttributeSet();     Doc document = new SimpleDoc(fis, flavor, das);     job.print(document, pras); }"
"writer.addVideoStream(videoStreamIndex, 0, videoCodec, width, height); writer.addAudioStream(audioStreamIndex, 0, audioCodec, channelCount, sampleRate);  while (... have more data ...) {     BufferedImage videoFrame = ...;     long videoFrameTime = ...; // this is the time to display this frame     writer.encodeVideo(videoStreamIndex, videoFrame, videoFrameTime, DEFAULT_TIME_UNIT);      short[] audioSamples = ...; // the size of this array should be number of samples * channelCount     long audioSamplesTime = ...; // this is the time to play back this bit of audio     writer.encodeAudio(audioStreamIndex, audioSamples, audioSamplesTime, DEFAULT_TIME_UNIT); }"
"package com.bullethq.jawr.postprocessor;  import net.jawr.web.resource.FileNameUtils; import net.jawr.web.resource.bundle.factory.util.PathNormalizer; import net.jawr.web.resource.bundle.postprocess.BundleProcessingStatus; import net.jawr.web.resource.bundle.postprocess.impl.CSSURLPathRewriterPostProcessor; import net.jawr.web.resource.bundle.postprocess.impl.PostProcessorCssImageUrlRewriter;  import java.io.IOException;  public class CustomCssUrlPathRewriterPostProcessor extends CSSURLPathRewriterPostProcessor {      public static final String CUSTOM_URL_PATH_REWRITER = ""customcsspathrewriter"";      public CustomCssUrlPathRewriterPostProcessor() {         super(CUSTOM_URL_PATH_REWRITER);     }      // ========================================================================     // ========================================================================     // ========================================================================     @Override     protected PostProcessorCssImageUrlRewriter createImageUrlRewriter(BundleProcessingStatus status) {         return new CustomPostProcessorCssImageUrlRewriter(status);     }      // ========================================================================     // ========================================================================     // ========================================================================     public class CustomPostProcessorCssImageUrlRewriter extends PostProcessorCssImageUrlRewriter {          public CustomPostProcessorCssImageUrlRewriter(BundleProcessingStatus status) {             super(status);         }          // ========================================================================         // ========================================================================         // ========================================================================         @Override         protected String getUrlPath(String match, String originalPath, String newCssPath) throws IOException {             String url = match.substring(match.indexOf('(') + 1, match.lastIndexOf(')')).trim();              // Remove any quotes if necessary.             String quoteStr = """";             if (url.startsWith(""'"") || url.startsWith(""\"""")) {                 quoteStr = String.valueOf(url.charAt(0));                 url = url.substring(1, url.length() - 1);             }              // We now check if the url ends in a known image file extension             // If not, the url is ignored.             if (FileNameUtils.hasImageExtension(url)) {                 return super.getUrlPath(match, originalPath, newCssPath);             } else {                 // We need to rewrite the path, as any relative URLs will                 // not resolve correctly if Jawr has changed the CSS path.                 url = PathNormalizer.concatWebPath(originalPath, url);                 url = PathNormalizer.getRelativeWebPath(PathNormalizer.getParentPath(newCssPath), url);                 return ""url("" + quoteStr + url + quoteStr + "")"";             }         }     } }"
"import java.net.URL;          import javax.sound.sampled.AudioFormat;         import javax.sound.sampled.AudioInputStream;         import javax.sound.sampled.AudioSystem;         import javax.sound.sampled.Clip;         import javax.sound.sampled.DataLine;          public class SoundUtils {             public static double getLength(String path) throws Exception {                 AudioInputStream stream;                 stream = AudioSystem.getAudioInputStream(new URL(path));                 AudioFormat format = stream.getFormat();                 if (format.getEncoding() != AudioFormat.Encoding.PCM_SIGNED) {                     format = new AudioFormat(AudioFormat.Encoding.PCM_SIGNED, format                             .getSampleRate(), format.getSampleSizeInBits() * 2, format                             .getChannels(), format.getFrameSize() * 2, format                             .getFrameRate(), true); // big endian                     stream = AudioSystem.getAudioInputStream(format, stream);                 }                 DataLine.Info info = new DataLine.Info(Clip.class, stream.getFormat(),                         ((int) stream.getFrameLength() * format.getFrameSize()));                 Clip clip = (Clip) AudioSystem.getLine(info);                 clip.close();                 return clip.getBufferSize()                         / (clip.getFormat().getFrameSize() * clip.getFormat()                                 .getFrameRate());             }              public static void main(String[] args) {                 try {                      System.out                             .println(getLength(""...""));                 } catch (Exception e) {                     e.printStackTrace();                 }             }          }"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter
"CpeDescription cpeDesc = UIMAFramework.getXMLParser().parseCpeDescription(new XMLInputSource(cpeFile)); File rootFolder = new File(cpeDesc.getSourceUrl().getFile()).getParentFile(); ArrayList&lt;TypeSystemDescription&gt; typeSystems = new ArrayList&lt;&gt;();  for(CpeCollectionReader collReader : cpeDesc.getAllCollectionCollectionReaders()){     File descFile = new File(rootFolder + System.getProperty(""file.separator"") + collReader.getDescriptor().getImport().getLocation());      CollectionReaderDescription crd = UIMAFramework.getXMLParser().parseCollectionReaderDescription(new XMLInputSource(descFile));      TypeSystemDescription typeSystem = crd.getCollectionReaderMetaData().getTypeSystem();     typeSystem.resolveImports();      typeSystems.add(typeSystem); }  for(CpeCasProcessor casProcessor : cpeDesc.getCpeCasProcessors().getAllCpeCasProcessors()){     File descFile = new File(rootFolder + System.getProperty(""file.separator"") + casProcessor.getCpeComponentDescriptor().getImport().getLocation());      AnalysisEngineDescription aed = UIMAFramework.getXMLParser().parseAnalysisEngineDescription(new XMLInputSource(descFile));      TypeSystemDescription typeSystem = aed.getAnalysisEngineMetaData().getTypeSystem();     typeSystem.resolveImports();      typeSystems.add(typeSystem); }  TypeSystemDescription mergedTypeSystem = CasCreationUtils.mergeTypeSystems(typeSystems);"
"LayoutInflater inflater = (LayoutInflater)EEActionListDetail.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);     Display display = getWindowManager().getDefaultDisplay();      int width = display.getWidth()/2;     int height = display.getHeight()/2;      View pop = inflater.inflate(R.layout.popupemail,null,false);     pop.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);     height = pop.getMeasuredHeight();     width = pop.getMeasuredWidth()+200;     pu = new PopupWindow(pop,width,height,true);     pu.showAtLocation(findViewById(R.id.ll3),Gravity.CENTER,1,1);      Button brnSend = (Button)pu.getContentView().findViewById(R.id.btnSend);     Button close = (Button)pu.getContentView().findViewById(R.id.close);      Subject = (EditText)pu.getContentView().findViewById(R.id.subject);     Message = (EditText)pu.getContentView().findViewById(R.id.message);      close.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {             pu.dismiss();          }     });     brnSend.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {             for(int j=0;j&lt;EmailArray.size();j++){                 String EmailSent = EmailArray.get(j);                 SendEmailALL(EmailSent);             }         }     });"
