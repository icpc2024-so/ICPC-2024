code
"public void populate(Bundle bundle) {     String localisation = (String) bundle.getHeaders().get(""Bundle-Localization"");     Locale locale = Locale.getDefault();      populate(bundle.getEntry(getFileName(localisation)));     populate(bundle.getEntry(getFileName(localisation, locale.getLanguage())));     populate(bundle.getEntry(getFileName(localisation, locale.getLanguage(), locale.getCountry())));     populate(bundle.getResource(getFileName(""fragment"")));     populate(bundle.getResource(getFileName(""fragment"", locale.getLanguage())));     populate(bundle.getResource(getFileName(""fragment"", locale.getLanguage(), locale.getCountry()))); }"
"boolean isPattern(String givenPattern, String stringToMatch) {     if (givenPattern.empty)         return stringToMatch.isEmpty();     char patternCh = givenPatter.charAt(0);     boolean atEnd = stringToMatch.isEmpty();     if (patternCh == '*') {         return isPattenn(givenPattern.substring(1), stringToMatch)             || (!atEnd &amp;&amp; isPattern(givenPattern, stringToMatch.substring(1)));     } else if (patternCh == '?') {         return !atEnd &amp;&amp; isPattern(givenPattern.substring(1),              stringToMatch.substring(1));     }     return !atEnd &amp;&amp; patternCh == stringToMatch.charAt(0)           &amp;&amp; isPattern(givenPattern.substring(1), stringToNatch.subtring(1); }"
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
"String cronAttribute = taskElement.getAttribute(""cron""); if (StringUtils.hasText(cronAttribute)) {     cronTaskMap.put(runnableBeanRef, cronAttribute); } else {     String fixedDelayAttribute = taskElement.getAttribute(""fixed-delay"");     if (StringUtils.hasText(fixedDelayAttribute)) {         fixedDelayTaskMap.put(runnableBeanRef, fixedDelayAttribute);     }     else {         String fixedRateAttribute = taskElement.getAttribute(""fixed-rate"");         if (!StringUtils.hasText(fixedRateAttribute)) {             parserContext.getReaderContext().error(                     ""One of 'cron', 'fixed-delay', or 'fixed-rate' is required"",                     taskElement);             // Continue with the possible next task element             continue;         }         fixedRateTaskMap.put(runnableBeanRef, fixedRateAttribute);     } }"
"public static &lt;T&gt; ConcurrentMap&lt;String,Collection&lt;T&gt;&gt; reduceMap(ConcurrentMap&lt;String, ConcurrentHashMap&lt;String, Collection&lt;T&gt;&gt;&gt; map) {     ConcurrentMap&lt;String, Collection&lt;T&gt;&gt; smallerMap = new ConcurrentHashMap&lt;String, Collection&lt;T&gt;&gt;();     for (String material : map.keySet()) {         for(String genre: map.get(material).keySet()) {             if (smallerMap.get(genre) == null) {                 smallerMap.put(genre, map.get(material).get(genre));             }             else {                 Collection&lt;T&gt; stories = smallerMap.get(genre);                 for (T o : map.get(material).get(genre)) {                     if (!smallerMap.get(genre).contains(o)) {                         stories.add(o); // error here                     }                 }                 smallerMap.put(genre, stories);             }         }     }        return smallerMap; }"

"finalText = textField.getText().toString();  String[] textArrayWithFullStop = finalText.split(""\\. ""); String colelctionOfFiveSentences = """"; int sentenceAdded = 0;  List&lt;String&gt;textCollection = new ArrayList&lt;String&gt;(); for(int i=0;i&lt;textArrayWithFullStop.length;i++) {     colelctionOfFiveSentences += textArrayWithFullStop[i] + "". "";     sentenceAdded++;     if(sentenceAdded == 5)     {         textCollection.add(colelctionOfFiveSentences);         colelctionOfFiveSentences = """";         sentenceAdded = 0;     }  }"
"String str = ""kushal,mayurv,narendra,dhrumil,mark, ,,,, "";         String splitted[] = str.split("","");         StringBuffer sb = new StringBuffer();         String retrieveData = """";         for(int i =0; i&lt;splitted.length; i++){             retrieveData = splitted[i];             if((retrieveData.trim()).length()&gt;0){                  if(i!=0){                     sb.append("","");                 }                 sb.append(retrieveData);              }         }      str = sb.toString();     System.out.println(str);"
"if (range.hasLowerBound()) {   if (range.hasUpperBound()) {     return set.subSet(       range.lowerEndpoint(),       range.lowerBoundType() == BoundType.CLOSED,       range.upperEndpoint(),       range.upperBoundType() == BoundType.CLOSED);   } else {     return set.tailSet(       range.lowerEndpoint(),       range.lowerBoundType() == BoundType.CLOSED);   } } else {   if (range.hasUpperBound()) {     return set.headSet(       range.upperEndpoint(),       range.upperBoundType() == BoundType.CLOSED);   } else {     return set;   } }"
"layout.setHorizontalGroup(layout     .createParallelGroup(GroupLayout.Alignment.LEADING)     .addGroup(layout.createSequentialGroup()         .addComponent(one, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)         .addComponent(two, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)         .addComponent(three, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))     .addGroup(layout.createSequentialGroup()         .addComponent(four, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)         .addComponent(five, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))     .addComponent(six, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));  layout.setVerticalGroup(layout.createSequentialGroup()     .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)         .addComponent(one).addComponent(two).addComponent(three))     .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)         .addComponent(four).addComponent(five))     .addComponent(six));"
"package example;         if (low != mid &amp;&amp; mid != high) {         for (int i = 0; i &lt;= mid; i++) {             if ( ! Determinate.isPointLeftSide(a, auxiliaryListTwo.get(i), auxiliaryListTwo.get(i + 1))) {                 p = auxiliaryListTwo.get(i);              } else {                 if ( Determinate.isPointRightSide(a, auxiliaryListTwo.get(i + 1), auxiliaryListTwo.get(i)) &amp;&amp; Determinate.isPointRightSide(a, auxiliaryListTwo.get(i + 1), b) ) {                     p = auxiliaryList.get(i + 1);                 }                 else{                     i++;                 }             }         }     }"
"int[][] map = {     {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  };"
"public void stateChanged(ChangeEvent e) {      System.out.println(""!! Ping !!"" + e.getSource());      if (e.getSource() == ventana.sliderLargoPuntas) {         dibujo.setLargoDePuntas(ventana.sliderLargoPuntas.getScaledValue());     } else if (e.getSource() == ventana.sliderTamanioEstrella) {         dibujo.setTamanio(ventana.sliderTamanioEstrella.getValue());      } else if (e.getSource() == ventana.spinnerCantidadPuntas) {         dibujo.setCantidadPuntas((int) ventana.spinnerCantidadPuntas.getValue());      // &gt;&gt;--- Change this ------------------------------------------------------------&lt;&lt;     //} else if (e.getSource() == ventana.ccColor) {     } else if (e.getSource() == ventana.ccColor.getSelectionModel()) {          System.out.println(""!! Pong !!"");         dibujo.setColor(ventana.ccColor.getColor());     }     areaDeTrabajo.pintarEstrella(dibujo); }"
"String hostName = InetAddress.getLocalHost().getHostName();  InetAddress addrs[] = InetAddress.getAllByName(hostName);  String myIp = ""UNKNOWN""; for (InetAddress addr: addrs) {   System.out.println (""addr.getHostAddress() = "" + addr.getHostAddress());   System.out.println (""addr.getHostName() = "" + addr.getHostName());   System.out.println (""addr.isAnyLocalAddress() = "" + addr.isAnyLocalAddress());   System.out.println (""addr.isLinkLocalAddress() = "" + addr.isLinkLocalAddress());   System.out.println (""addr.isLoopbackAddress() = "" + addr.isLoopbackAddress());   System.out.println (""addr.isMulticastAddress() = "" + addr.isMulticastAddress());   System.out.println (""addr.isSiteLocalAddress() = "" + addr.isSiteLocalAddress());   System.out.println ("""");    if (!addr.isLoopbackAddress() &amp;&amp; addr.isSiteLocalAddress()) {     myIp = addr.getHostAddress();   } }"
"[     {         ""lat1"" : 39.737567,         ""lat2"" : 32.7801399,         ""long1"" : -104.98471790000002,         ""long2"" : -96.80045109999998,         ""boxes"" : [                      {                       ""lat"": {                           ""b"": 38.88368709500021,                           ""d"": 40.620468491667026                       },                       ""long"": {                           ""b"": -105.75306170749764,                           ""d"": -104.675854661387                       }                     }                   ]     } ]"
"package com.bullethq.jawr.postprocessor;  import net.jawr.web.resource.FileNameUtils; import net.jawr.web.resource.bundle.factory.util.PathNormalizer; import net.jawr.web.resource.bundle.postprocess.BundleProcessingStatus; import net.jawr.web.resource.bundle.postprocess.impl.CSSURLPathRewriterPostProcessor; import net.jawr.web.resource.bundle.postprocess.impl.PostProcessorCssImageUrlRewriter;  import java.io.IOException;  public class CustomCssUrlPathRewriterPostProcessor extends CSSURLPathRewriterPostProcessor {      public static final String CUSTOM_URL_PATH_REWRITER = ""customcsspathrewriter"";      public CustomCssUrlPathRewriterPostProcessor() {         super(CUSTOM_URL_PATH_REWRITER);     }      // ========================================================================     // ========================================================================     // ========================================================================     @Override     protected PostProcessorCssImageUrlRewriter createImageUrlRewriter(BundleProcessingStatus status) {         return new CustomPostProcessorCssImageUrlRewriter(status);     }      // ========================================================================     // ========================================================================     // ========================================================================     public class CustomPostProcessorCssImageUrlRewriter extends PostProcessorCssImageUrlRewriter {          public CustomPostProcessorCssImageUrlRewriter(BundleProcessingStatus status) {             super(status);         }          // ========================================================================         // ========================================================================         // ========================================================================         @Override         protected String getUrlPath(String match, String originalPath, String newCssPath) throws IOException {             String url = match.substring(match.indexOf('(') + 1, match.lastIndexOf(')')).trim();              // Remove any quotes if necessary.             String quoteStr = """";             if (url.startsWith(""'"") || url.startsWith(""\"""")) {                 quoteStr = String.valueOf(url.charAt(0));                 url = url.substring(1, url.length() - 1);             }              // We now check if the url ends in a known image file extension             // If not, the url is ignored.             if (FileNameUtils.hasImageExtension(url)) {                 return super.getUrlPath(match, originalPath, newCssPath);             } else {                 // We need to rewrite the path, as any relative URLs will                 // not resolve correctly if Jawr has changed the CSS path.                 url = PathNormalizer.concatWebPath(originalPath, url);                 url = PathNormalizer.getRelativeWebPath(PathNormalizer.getParentPath(newCssPath), url);                 return ""url("" + quoteStr + url + quoteStr + "")"";             }         }     } }"
"try {          JsonRootNode json = JDOM.parse(l);         final String xVal = json.getNode(""sr"").getNode(""posx"").getText();         final String yVal = json.getNode(""sr"").getNode(""posy"").getText();         final String zVal = json.getNode(""sr"").getNode(""posz"").getText();         final String aVal = json.getNode(""sr"").getNode(""posa"").getText();          // here you are calling UI getter, and parse it each time         // it would be more optimal to store `x` value in separate variable         // between updates         final float x = Float.parseFloat(xAxisVal.getText());         final float y = Float.parseFloat(yAxisVal.getText());          Platform.runLater(new Runnable() {              public void run() {                 //We are now back in the EventThread and can update the GUI                 try {                      xAxisVal.setText(xVal);                     yAxisVal.setText(yVal);                     zAxisVal.setText(zVal);                     aAxisVal.setText(aVal);                     xl.setX(x + 400);                     y1.setY(y + 400);                     LineTo tmpL = new LineTo(x * 2 + 400, y * 2 + 400);                     path.getElements().add(tmpL);                  }             }         }      } catch (argo.saj.InvalidSyntaxException ex) {         //Json line invalid.     }"
"public static&lt;A, B, C&gt; Stream&lt;C&gt; zip(Stream&lt;? extends A&gt; a,                                      Stream&lt;? extends B&gt; b,                                      BiFunction&lt;? super A, ? super B, ? extends C&gt; zipper) {     Objects.requireNonNull(zipper);     Spliterator&lt;? extends A&gt; aSpliterator = Objects.requireNonNull(a).spliterator();     Spliterator&lt;? extends B&gt; bSpliterator = Objects.requireNonNull(b).spliterator();      // Zipping looses DISTINCT and SORTED characteristics     int characteristics = aSpliterator.characteristics() &amp; bSpliterator.characteristics() &amp;             ~(Spliterator.DISTINCT | Spliterator.SORTED);      long zipSize = ((characteristics &amp; Spliterator.SIZED) != 0)             ? Math.min(aSpliterator.getExactSizeIfKnown(), bSpliterator.getExactSizeIfKnown())             : -1;      Iterator&lt;A&gt; aIterator = Spliterators.iterator(aSpliterator);     Iterator&lt;B&gt; bIterator = Spliterators.iterator(bSpliterator);     Iterator&lt;C&gt; cIterator = new Iterator&lt;C&gt;() {         @Override         public boolean hasNext() {             return aIterator.hasNext() &amp;&amp; bIterator.hasNext();         }          @Override         public C next() {             return zipper.apply(aIterator.next(), bIterator.next());         }     };      Spliterator&lt;C&gt; split = Spliterators.spliterator(cIterator, zipSize, characteristics);     return (a.isParallel() || b.isParallel())            ? StreamSupport.stream(split, true)            : StreamSupport.stream(split, false); }"
String text1=jt1.getText(); String text2=jt2.getText(); String text3=jt3.getText(); String text4=jt4.getText(); String text5=jt5.getText();  if (text1 != null &amp;&amp; !text1.trim().isEmpty() &amp;&amp;     text2 != null &amp;&amp; !text2.trim().isEmpty() &amp;&amp;     text3 != null &amp;&amp; !text3.trim().isEmpty() &amp;&amp;     text4 != null &amp;&amp; !text4.trim().isEmpty() &amp;&amp;     text5 != null &amp;&amp; !text5.trim().isEmpty()) {      //... Do insert  } else {      // Deal with the fact that one or more of the values are invalid  }
"String html = ""&lt;h6 class='uiStreamMessage' data-ft=''&gt;&lt;span class='messageBody' data-ft=''&gt;Twisted&lt;a href='http://'&gt;&lt;span&gt;http://&lt;/span&gt;&lt;span class='word_break'&gt;&lt;/span&gt;www.tb.net/&lt;/a&gt; Balloons&lt;/span&gt;&lt;/h6&gt;"";  Document doc = Jsoup.parse(html);  Elements elements = doc.select(""h6.uiStreamMessage &gt; span.messageBody"");  for (Element e : elements) {       System.out.println(""All text:"" + e.text());       System.out.println(""Only messageBody text:"" + e.ownText()); }"
"std::string getString() {     jmethodID methodID = env-&gt;GetMethodID(aClass,         ""methodName"",         ""()Ljava/lang/String;"");     if (methodID == NULL)     {         cout &lt;&lt; ""--methodID = NULL"";         exit(0);     }     jstring jstringResult = (jstring) env-&gt;CallObjectMethod(aClassInstance, methodID);     const char* result = env-&gt;GetStringUTFChars(jstringResult, NULL);     std::string result2(result);     env-&gt;ReleaseStringUTFChars(jstringResult, result);      return result2; }"
com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter
"Method         = ""OPTIONS""                ; Section 9.2                   | ""GET""                    ; Section 9.3                   | ""HEAD""                   ; Section 9.4                   | ""POST""                   ; Section 9.5                   | ""PUT""                    ; Section 9.6                   | ""DELETE""                 ; Section 9.7                   | ""TRACE""                  ; Section 9.8                   | ""CONNECT""                ; Section 9.9                   | extension-method    extension-method = token"
"public class CoordTest {      private static String  coords = ""N 39° 28.941 W 0° 23.275"";      public static void main(String[] args) {         String[] cArray = coords.split("" "");         String latSign = cArray[0];         String latDegrees = cArray[1].substring(0, cArray[1].length()-1);         String latSubdegrees = cArray[2];         String lonSign = cArray[3];         String lonDegrees = cArray[4].substring(0, cArray[4].length()-1);         String lonSubdegrees = cArray[5];         double lat = getSign(latSign) * (Integer.valueOf(latDegrees) + convertFromDegreesToDecimal(Double.valueOf(latSubdegrees)));         double lon = getSign(lonSign) * (Integer.valueOf(lonDegrees) + convertFromDegreesToDecimal(Double.valueOf(lonSubdegrees)));     }       private static int getSign(String c){         if (c.equals(""N"") || c.equals(""E"")){             return 1;         }         return -1;     }      private static double convertFromDegreesToDecimal(Double value){         double result = value/60d;         return result;     } }"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"LayoutInflater inflater = (LayoutInflater)EEActionListDetail.this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);     Display display = getWindowManager().getDefaultDisplay();      int width = display.getWidth()/2;     int height = display.getHeight()/2;      View pop = inflater.inflate(R.layout.popupemail,null,false);     pop.measure(View.MeasureSpec.UNSPECIFIED,View.MeasureSpec.UNSPECIFIED);     height = pop.getMeasuredHeight();     width = pop.getMeasuredWidth()+200;     pu = new PopupWindow(pop,width,height,true);     pu.showAtLocation(findViewById(R.id.ll3),Gravity.CENTER,1,1);      Button brnSend = (Button)pu.getContentView().findViewById(R.id.btnSend);     Button close = (Button)pu.getContentView().findViewById(R.id.close);      Subject = (EditText)pu.getContentView().findViewById(R.id.subject);     Message = (EditText)pu.getContentView().findViewById(R.id.message);      close.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {             pu.dismiss();          }     });     brnSend.setOnClickListener(new View.OnClickListener() {          @Override         public void onClick(View v) {             for(int j=0;j&lt;EmailArray.size();j++){                 String EmailSent = EmailArray.get(j);                 SendEmailALL(EmailSent);             }         }     });"
"String input = ""SrcAddr: 0.0.21.201\n""+            ""DstAddr: 7.202.10.100\n""+            ""NextHop: 0.33.189.142\n""+            ""InputIf: 19\n""+            ""OutputIf: 50715"";   String SrcAddr=getMatchedString(""SrcAddr"",input); String NextHop=getMatchedString(""NextHop"",input); String InputIf=getMatchedString(""InputIf"",input); String OutputIf=getMatchedString(""OutputIf"",input);  System.out.println(SrcAddr); System.out.println(NextHop); System.out.println(InputIf); System.out.println(OutputIf);     ..........   public static String getMatchedString(String word,String input){       String REGEX = ""(?:""+word+"":)\\s(.*)"";      Pattern p = Pattern.compile(REGEX);      Matcher m = p.matcher(input);      if (m.find()) {         String matched = m.group(1);         return matched;      }      return null;   }"
"if (outputFileCache.exists())         {             connection.setAllowUserInteraction(true);             connection.setRequestProperty(""Range"", ""bytes="" + outputFileCache.length() + ""-"");         }          connection.setConnectTimeout(14000);         connection.setReadTimeout(20000);         connection.connect();          if (connection.getResponseCode() / 100 != 2)             throw new Exception(""Invalid response code!"");         else         {             String connectionField = connection.getHeaderField(""content-range"");              if (connectionField != null)             {                 String[] connectionRanges = connectionField.substring(""bytes="".length()).split(""-"");                 downloadedSize = Long.valueOf(connectionRanges[0]);             }              if (connectionField == null &amp;&amp; outputFileCache.exists())                 outputFileCache.delete();              fileLength = connection.getContentLength() + downloadedSize;             input = new BufferedInputStream(connection.getInputStream());             output = new RandomAccessFile(outputFileCache, ""rw"");             output.seek(downloadedSize);              byte data[] = new byte[1024];             int count = 0;             int __progress = 0;              while ((count = input.read(data, 0, 1024)) != -1                      &amp;&amp; __progress != 100)              {                 downloadedSize += count;                 output.write(data, 0, count);                 __progress = (int) ((downloadedSize * 100) / fileLength);             }              output.close();             input.close();        }"
"String str = ""{"" +              ""    \""gb\"": ["" +              ""        {"" +              ""            \""omrid\"": \""gis-n\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-s\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-c\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-h\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-g\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""hes\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 2"" +              ""        }"" +              ""    ]"" +              ""}"";      JSONObject jsonObject = new JSONObject(str);      JSONArray gb = jsonObject.getJSONArray(""gb"");      for (int j = 0; j &lt; gb.length(); j++) {         JSONObject element = gb.getJSONObject(j);          int status = element.getInt(""status"");         int grupp = element.getInt(""grupp"");         String omrid = element.getString(""omrid"");          System.out.println(""status="" + status + ""; grupp="" + grupp + ""; omrid="" + omrid);  //create togglebutton here     }"
"public void popupMenuWillBecomeVisible(PopupMenuEvent e) {     JComboBox box = (JComboBox) e.getSource();     Object comp = box.getUI().getAccessibleChild(box, 0);     if (!(comp instanceof JPopupMenu)) return;     JComponent scrollPane = (JComponent) ((JPopupMenu) comp).getComponent(0);     Dimension size = new Dimension();     size.width = box.getPreferredSize().width;     size.height = scrollPane.getPreferredSize().height;     scrollPane.setPreferredSize(size);     //  following line for Tiger     // scrollPane.setMaximumSize(size); }"
