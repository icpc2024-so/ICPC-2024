code
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
project 1   |- common        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;common&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- util        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;util&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- domain        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;domain&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- service        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;service&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- webapps        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;webapps&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;
"VariableElement parameterElement; ProcessingEnvironment processingEnv;  TypeMirror parameterType = parameterElement.asType(); Types typeUtils = processingEnv.getTypeUtils(); TypeElement typeElement = (TypeElement) typeUtils.asElement(parameterType); Elements elementUtils = processingEnv.getElementUtils() List&lt;? extends Element&gt; elementMembers = elementUtils.getAllMembers(typeElement); List&lt;ExecutableElement&gt; elementMethods = ElementFilter.methodsIn(elementMembers); for(ExecutableElement methodElement : elementMethods) {     if (methodElement.getParameters().size()==0 &amp;&amp; methodElement.getSimpleName().toString().startsWith(""get"")) {       // do something     } }"
"package com.spmsoftware.plugin.listeners;  import com.atlassian.event.api.EventListener; import com.atlassian.event.api.EventPublisher; import com.atlassian.jira.component.ComponentAccessor; import com.atlassian.jira.event.issue.IssueEvent; import com.atlassian.jira.event.type.EventType; import com.atlassian.jira.issue.Issue; import com.atlassian.jira.issue.MutableIssue; import com.atlassian.jira.issue.customfields.manager.OptionsManager; import com.atlassian.jira.issue.customfields.option.Option; import com.atlassian.jira.issue.customfields.option.Options; import com.atlassian.jira.issue.fields.CustomField; import com.atlassian.jira.issue.fields.config.FieldConfig; import com.atlassian.jira.issue.fields.config.FieldConfigScheme; import org.apache.log4j.Logger; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean;  import java.util.List; import java.util.Map;  /**  * User: adnan  * Date: 5/4/14  * Time: 4:49 PM  */ public class IssueUpdateListener  implements InitializingBean, DisposableBean {      private static final Logger LOGGER = Logger.getLogger(IssueUpdateListener.class);      private final EventPublisher eventPublisher;    // private final JiraAuthenticationContext authenticationContext;      public IssueUpdateListener(EventPublisher eventPublisher) {         this.eventPublisher = eventPublisher;        // this.authenticationContext = ComponentAccessor.getJiraAuthenticationContext();     }      @Override     public void afterPropertiesSet() throws Exception {         eventPublisher.register(this);     }      @Override     public void destroy() throws Exception {         eventPublisher.unregister(this);     }      @EventListener     public void onIssueEvent(IssueEvent issueEvent) {         Long eventTypeId = issueEvent.getEventTypeId();         Issue issue = issueEvent.getIssue();         if (eventTypeId.equals(EventType.ISSUE_RESOLVED_ID)) {             MutableIssue mutableIssue = getMutableIssue(issue);             CustomField customerNameCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""Customer Name"");             CustomField allCustomersCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""All Customers"");             Object customerNameVal = mutableIssue.getCustomFieldValue(customerNameCF);             Option newOptions = addOptionToCustomField(allCustomersCF, customerNameVal.toString());             LOGGER.info(""New updated option {}"" + newOptions);         }     }      private MutableIssue getMutableIssue(Issue issue) {         MutableIssue mutableIssue;         if (issue instanceof MutableIssue)   {             mutableIssue = (MutableIssue)issue;         } else {             mutableIssue = ComponentAccessor.getIssueManager().getIssueObject(issue.getKey());         }         return mutableIssue;     }       public Option addOptionToCustomField(CustomField customField, String value) {         Option newOption = null;         if (customField != null) {             List&lt;FieldConfigScheme&gt; schemes = customField.getConfigurationSchemes();             if (schemes != null &amp;&amp; !schemes.isEmpty()) {                 FieldConfigScheme sc = schemes.get(0);                 Map configs = sc.getConfigsByConfig();                 if (configs != null &amp;&amp; !configs.isEmpty()) {                     FieldConfig config = (FieldConfig) configs.keySet().iterator().next();                     OptionsManager optionsManager = ComponentAccessor.getOptionsManager();                     Options l = optionsManager.getOptions(config);                     int nextSequence = l.isEmpty() ? 1 : l.getRootOptions().size() + 1;                     newOption = optionsManager.createOption(config, null, (long) nextSequence, value);                 }             }         }          return newOption;     }  }"
"Criteria criteria = hibernetSession.createCriteria(WishList.class); criteria.createAlias(""item"", ""itemAlias"") .setProjection(Projections.projectionList() .add(Projections.property(""id""),""id"") .add(Projections.property(""itemAlias.id""),""itemAlias.id"") .add(Projections.property(""itemAlias.productCategory""),""itemAlias.productCategory"") .add(Projections.property(""itemAlias.productName""),""itemAlias.productName"") .add(Projections.groupProperty(""itemAlias.productName""))) .setResultTransformer(Transformers.aliasToBean(WishList.class)); List&lt;WishList&gt; itemList = criteria.list();"
"int[][] map = {     {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  };"
"{     ""objects"": {         ""array1"": [             {                 ""element1"": ""value1"",                 ""element2"": ""value2"",                 ""element3"": ""value3""             }         ],         ""array2"": [             {                 ""element1"": ""value1"",                 ""element2"": ""value2"",                 ""element3"": ""value3""             }         ],         ""array3"": [             {                 ""element1"": ""value1"",                 ""element2"": ""value2"",                 ""element3"": ""value3""             }         ]     } }"
"package com.XXXXXXXX.aspects;  import lombok.extern.slf4j.Slf4j; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.stereotype.Component;  @Component @Aspect @Slf4j public class LoggerAspect {      private final static String DOMAIN = ""XXXXXXXX"";      private static String getCurrentUser() {         String username = ""Unknown"";         try {             Object principal = SecurityContextHolder.getContext().                     getAuthentication().                     getPrincipal();             if (principal instanceof UserDetails) {                 username = ((UserDetails) principal).getUsername();             } else {                 username = principal.toString();             }         } catch (Exception e) {         }         return username;     }      @Pointcut(""within(com.XXXXXXXX.services..*)"")     public void inServiceLayer() {     }      @Pointcut(""execution(* getMatcherInfo(..)) || execution(* resetCounter(..))"")     public void notToAdvise() {     }      @Around(""com.XXXXXXXX.aspects.LoggerAspect.inServiceLayer() &amp;&amp; !com.XXXXXXXX.aspects.LoggerAspect.notToAdvise()"")     public Object doLogging(ProceedingJoinPoint pjp)             throws Throwable {         long start = System.nanoTime();         StringBuilder sb = new StringBuilder(DOMAIN);         sb.append('/').                 append(getCurrentUser()).                 append("" accessing "").                 append(pjp.getSignature().                 getDeclaringTypeName()).                 append('.').                 append(pjp.getSignature().                 getName());         log.trace(""START: "" + sb.toString());         Object retVal = pjp.proceed(pjp.getArgs());         long duration = System.nanoTime() - start;         log.trace(""STOP: "" + duration / 1000000 + "" msec. "" + sb.toString());         return retVal;     } }"
"import org.camunda.bpm.ProcessEngineService; import org.camunda.bpm.container.RuntimeContainerDelegate; import org.camunda.bpm.engine.ManagementService; import org.camunda.bpm.engine.ProcessEngine; import org.camunda.bpm.engine.RepositoryService; import org.camunda.bpm.engine.management.JobDefinition; import org.camunda.bpm.engine.repository.ProcessDefinition; import org.camunda.bpm.engine.runtime.Job;  import java.util.HashMap; import java.util.List;  public class StackOverflow {    public HashMap&lt;ProcessDefinition, List&lt;Job&gt;&gt; queryNextScheduledExecutionOfTimers() {     ProcessEngineService processEngineService =      RuntimeContainerDelegate.INSTANCE.get().getProcessEngineService();     ProcessEngine defaultProcessEngine = processEngineService.getDefaultProcessEngine();      // optional step - get all active process definitions     RepositoryService repositoryService = defaultProcessEngine.getRepositoryService();     List&lt;ProcessDefinition&gt; processDefinitions =         repositoryService.createProcessDefinitionQuery().active().list();      ManagementService managementService = defaultProcessEngine.getManagementService();      HashMap&lt;ProcessDefinition,List&lt;Job&gt;&gt; timerJobsByProcessDefinition = new HashMap&lt;ProcessDefinition, List&lt;Job&gt;&gt;();     for (ProcessDefinition processDefinition : processDefinitions) {       List&lt;JobDefinition&gt; jobDefinitions =           managementService.createJobDefinitionQuery()               .active()               .processDefinitionId(processDefinition.getId())               .list();        for (JobDefinition jobDefinition : jobDefinitions) {         // if you want to lookup the activity to highlight it inside the process diagram for example         String activityId = jobDefinition.getActivityId();         // if you want to display the configured expression / date / cron expression when the timer should fire         String jobConfiguration = jobDefinition.getJobConfiguration();         // if you want to distinguish between timer start event / catching timer intermediate event / boundary timer event         String timerType = jobDefinition.getJobType();          List&lt;Job&gt; jobs = managementService.createJobQuery()             .active()             .timers()             .jobDefinitionId(jobDefinition.getId())             .orderByJobDuedate()             .list();          timerJobsByProcessDefinition.put(processDefinition, jobs);       }     }      return timerJobsByProcessDefinition;   } }"
"public static class MyOwnFocusTraversalPolicy extends FocusTraversalPolicy {     Vector&lt;Component&gt; order;      public MyOwnFocusTraversalPolicy(Vector&lt;Component&gt; order)     {         this.order = new Vector&lt;Component&gt;(order.size());         this.order.addAll(order);     }      public Component getComponentAfter(Container focusCycleRoot,                                        Component aComponent)     { //      int idx = (order.indexOf(aComponent) + 1) % order.size(); //      return order.get(idx);          int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx + 1) % order.size();             Component next = order.get(idx);              if (canBeFocusOwner(next)) return next;         }          return null;     }      public Component getComponentBefore(Container focusCycleRoot,                                         Component aComponent)     { /*         int idx = order.indexOf(aComponent) - 1;         if (idx &lt; 0) {             idx = order.size() - 1;         }         return order.get(idx); */         int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx - 1);              if (idx &lt; 0)             {                 idx = order.size() - 1;             }              Component previous = order.get(idx);              if (canBeFocusOwner(previous)) return previous;         }          return null;     }      public Component getDefaultComponent(Container focusCycleRoot) { //      return order.get(0);         return getFirstComponent( focusCycleRoot );     }      public Component getLastComponent(Container focusCycleRoot) { //      return order.lastElement();          Component c = order.lastElement();          if (canBeFocusOwner(c))             return c;         else             return getComponentBefore(focusCycleRoot, c);     }      public Component getFirstComponent(Container focusCycleRoot)     { //      return order.get(0);          Component c = order.get(0);          if (canBeFocusOwner(c))             return c;         else             return getComponentAfter(focusCycleRoot, c);     }      private boolean canBeFocusOwner(Component c)     {         if (c.isEnabled() &amp;&amp; c.isDisplayable() &amp;&amp; c.isVisible() &amp;&amp; c.isFocusable())         {             return true;         }          return false;     }  }"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"Model model = ...      model.addLiteral (subject, predicate, 10);     model.addLiteral (subject, predicate, 0.5);     model.addLiteral (subject, predicate, (float)0.5);     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(20));     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(0.99));     model.addLiteral (subject, predicate, true);     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""2012-03-11"", XSDDatatype.XSDdate));     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""P2Y"", XSDDatatype.XSDduration));"
"HibernateValidatorConfiguration configuration = Validation     .byProvider( HibernateValidator.class )     .configure();  ConstraintMapping constraintMapping = configuration.createConstraintMapping();  constraintMapping     .type( ExternalClass.class )         .property( ""someProperty"", FIELD )             .constraint( new NotNullDef() )             .constraint( new SizeDef().min( 2 ).max( 14 ) )     .type( AnotherExternalClass.class )         .property( ""anotherProperty"", METHOD )             .constraint( new NotNullDef() );  Validator validator = configuration.addMapping( constraintMapping )     .buildValidatorFactory()     .getValidator();"
"public class RolesAndServicesMapping {     private static final ImmutableMultimap&lt;Service, Authority&gt; SERVICES_TO_ROLES_MAPPING =           ImmutableMultimap.&lt;Service, Authority&gt;builder()             .put(Service.SFP1, Authority.ROLE_PREMIUM)             .put(Service.SFP, Authority.ROLE_PREMIUM)             .put(Service.SFE, Authority.ROLE_EXTRA)             .put(Service.SF, Authority.ROLE_STANDARD)             .put(Service.SK, Authority.ROLE_STANDARD)             .put(Service.SFP1, Authority.ROLE_ADMIN)             .put(Service.ADMIN, Authority.ROLE_ADMIN)             .put(Service.NONE, Authority.ROLE_DENY)             .build();      // Whole magic is here:     private static final ImmutableMultimap&lt;Authority, Service&gt; ROLES_TO_SERVICES_MAPPING =             SERVICES_TO_ROLES_MAPPING.inverse();     // before guava-11.0 it was: ImmutableMultimap.copyOf(Multimaps.invertFrom(SERVICES_TO_ROLES_MAPPING, HashMultimap.&lt;Authority, Service&gt;create()));      public static ImmutableSet&lt;Authority&gt; getRoles(final Service service) {         return Sets.immutableEnumSet(SERVICES_TO_ROLES_MAPPING.get(service));     }      public static ImmutableSet&lt;Service&gt; getServices(final Authority role) {         return Sets.immutableEnumSet(ROLES_TO_SERVICES_MAPPING.get(role));     } }"

ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
A                      vtable for A  +-------------+        +---------------+  | vtable ptr  | --+-&gt;  | method one    |  +-------------+   |    +---------------+  |             |   |    | method two    |  | fields of A |   |    +---------------+  |             |   |    |     ...       |  +-------------+   |    +----------------                    |    | method N      |    A               |    +---------------+  +-------------+   |  | vtable ptr  |---+  +-------------+  |             |  | fields of A |  |             |  +-------------+     B                  vtable for B  +-------------+     +------------+  | vtable ptr  | --&gt; | method one |  +-------------+     +------------+  |             |     | method two |  | fields of B |     +------------+  |             |     |    ...     |  +-------------+     +------------+                      | method M   |                      +------------+
"package com.acme;  import org.mule.DefaultMuleEvent; import org.mule.DefaultMuleMessage; import org.mule.MessageExchangePattern; import org.mule.api.MuleException; import org.mule.api.MuleRuntimeException; import org.mule.api.context.notification.MuleContextNotificationListener; import org.mule.config.i18n.MessageFactory; import org.mule.construct.Flow; import org.mule.context.notification.MuleContextNotification;  public class FlowInvokingContextListener implements MuleContextNotificationListener&lt;MuleContextNotification&gt; {     private Flow startingFlow;     private Flow stoppingFlow;      public void onNotification(final MuleContextNotification notification)     {         if (notification.getAction() == MuleContextNotification.CONTEXT_STARTED)         {             sendNotificationToFlow(notification, startingFlow);         }         else if (notification.getAction() == MuleContextNotification.CONTEXT_STOPPING)         {             sendNotificationToFlow(notification, stoppingFlow);         }     }      private void sendNotificationToFlow(final MuleContextNotification notification, final Flow flow)     {         try         {             final DefaultMuleEvent event = new DefaultMuleEvent(new DefaultMuleMessage(notification,                 notification.getMuleContext()), MessageExchangePattern.REQUEST_RESPONSE, startingFlow);             flow.process(event);         }         catch (final MuleException me)         {             throw new MuleRuntimeException(MessageFactory.createStaticMessage(""Failed to invoke: ""                                                                               + startingFlow), me);         }     }      public void setStartingFlow(final Flow startingFlow)     {         this.startingFlow = startingFlow;     }      public void setStoppingFlow(final Flow stoppingFlow)     {         this.stoppingFlow = stoppingFlow;     } }"
"BeanInfo beanInfo = Introspector.getBeanInfo(MappingMemberWithGetterOrSetter.class, Object.class); PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors(); for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {     String propertyName = propertyDescriptor.getName();     Method getter = propertyDescriptor.getReadMethod();     Method setter = propertyDescriptor.getWriteMethod();     Field field = MappingMemberWithGetterOrSetter.class                 .getDeclaredField(propertyName);     System.out.println(""Property "" + propertyName + "" field:  "" + field);     System.out.println(""Getter "" + getter);     System.out.println(""Setter "" + setter); }"
interface ItemRequestConverter&lt;IR extends ItemRequest&gt;{} interface ItemRequest{} interface ItemRequestConverterFactory  {     public &lt;IR extends ItemRequest&gt; ItemRequestConverter&lt;IR&gt; newInstance(Class&lt;IR&gt; itemRequestClass); } class CreatePartRequestConverter&lt;IR extends ItemRequest&gt; implements ItemRequestConverter&lt;IR&gt; { }  class DefaultItemRequestConverterFactory implements ItemRequestConverterFactory  {      @Override     public &lt;IR extends ItemRequest&gt; ItemRequestConverter&lt;IR&gt; newInstance(Class&lt;IR&gt; itemRequestClass)      {         // Does not make sense: Comparing ItemRequest class with something         // that is probably an implementation of ItemRequestConverter         if (itemRequestClass.equals(CreatePartRequestConverter.class))         {             return new CreatePartRequestConverter&lt;IR&gt;();         }         return null;     } }
"package foo;  import static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;  import java.io.IOException;  import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder; import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequestBuilder; import org.elasticsearch.action.admin.indices.exists.indices.IndicesExistsResponse; import org.elasticsearch.action.get.GetRequestBuilder; import org.elasticsearch.action.get.GetResponse; import org.elasticsearch.action.index.IndexRequestBuilder; import org.elasticsearch.client.Client; import org.elasticsearch.client.transport.TransportClient; import org.elasticsearch.common.settings.ImmutableSettings; import org.elasticsearch.common.transport.InetSocketTransportAddress; import org.elasticsearch.common.xcontent.XContentBuilder;  public class MyTestClass {      private static final String ID_NOT_FOUND = ""&lt;ID NOT FOUND&gt;"";      private static Client getClient() {         final ImmutableSettings.Builder settings = ImmutableSettings.settingsBuilder();         TransportClient transportClient = new TransportClient(settings);         transportClient = transportClient.addTransportAddress(new InetSocketTransportAddress(""localhost"", 9300));         return transportClient;     }      public static void main(final String[] args) throws IOException, InterruptedException {          final Client client = getClient();         // Create Index and set settings and mappings         final String indexName = ""test"";         final String documentType = ""tweet"";         final String documentId = ""1"";         final String fieldName = ""foo"";         final String value = ""bar"";          final IndicesExistsResponse res = client.admin().indices().prepareExists(indexName).execute().actionGet();         if (res.isExists()) {             final DeleteIndexRequestBuilder delIdx = client.admin().indices().prepareDelete(indexName);             delIdx.execute().actionGet();         }          final CreateIndexRequestBuilder createIndexRequestBuilder = client.admin().indices().prepareCreate(indexName);          // MAPPING GOES HERE          final XContentBuilder mappingBuilder = jsonBuilder().startObject().startObject(documentType)                 .startObject(""_ttl"").field(""enabled"", ""true"").field(""default"", ""1s"").endObject().endObject()                 .endObject();         System.out.println(mappingBuilder.string());         createIndexRequestBuilder.addMapping(documentType, mappingBuilder);          // MAPPING DONE         createIndexRequestBuilder.execute().actionGet();          // Add documents         final IndexRequestBuilder indexRequestBuilder = client.prepareIndex(indexName, documentType, documentId);         // build json object         final XContentBuilder contentBuilder = jsonBuilder().startObject().prettyPrint();         contentBuilder.field(fieldName, value);          indexRequestBuilder.setSource(contentBuilder);         indexRequestBuilder.execute().actionGet();          // Get document         System.out.println(getValue(client, indexName, documentType, documentId, fieldName));          int idx = 0;         while (true) {             Thread.sleep(10000L);             idx++;             System.out.println(idx * 10 + "" seconds passed"");             final String name = getValue(client, indexName, documentType, documentId, fieldName);             if (ID_NOT_FOUND.equals(name)) {                 break;             } else {                 // Try again                 System.out.println(name);             }         }         System.out.println(""Document was garbage collected"");     }      protected static String getValue(final Client client, final String indexName, final String documentType,             final String documentId, final String fieldName) {         final GetRequestBuilder getRequestBuilder = client.prepareGet(indexName, documentType, documentId);         getRequestBuilder.setFields(new String[] { fieldName });         final GetResponse response2 = getRequestBuilder.execute().actionGet();         if (response2.isExists()) {             final String name = response2.getField(fieldName).getValue().toString();             return name;         } else {             return ID_NOT_FOUND;         }     }  }"
"properties.put(Constants.FRAMEWORK_SYSTEMPACKAGES_EXTRA,          ""org.ops4j.pax.url.mvn,org.apache.felix.scr;uses:=\""org.osgi.framework,"" +         ""org.osgi.service.component\"";version=\""1.7\"","" +         ""org.apache.felix.scr.component;status=provisional;mandatory:=status;"" +         ""uses:=\""org.osgi.service.component\"";version=\""1.0\"","" +         ""org.osgi.service.component;uses:=\""org.osgi.framework\"";version=\""1.2\"""");  //Which you pass to the FrameworkFactory ...  ServiceLoader&lt;FrameworkFactory&gt; loader = ServiceLoader.load(FrameworkFactory.class); Iterator&lt;FrameworkFactory&gt; iterator = loader.iterator(); Framework framework = iterator.next().newFramework(properties); framework.start();"
"public aspect ValidationAspect {      pointcut serviceMethodCall() : execution(public * com.yourcompany.**.*(..));      Object around(final Object[] args) : serviceMethodCall() &amp;&amp; args(args){         Signature signature = thisJoinPointStaticPart.getSignature();         if(signature instanceof MethodSignature){             MethodSignature ms = (MethodSignature) signature;             Method method = ms.getMethod();             Annotation[][] parameterAnnotations =                  method.getParameterAnnotations();             String[] parameterNames = ms.getParameterNames();             for(int i = 0; i &lt; parameterAnnotations.length; i++){                 Annotation[] annotations = parameterAnnotations[i];                 validateParameter(parameterNames[i], args[i],annotations);             }         }         return proceed(args);     }      private void validateParameter(String paramName, Object object,         Annotation[] annotations){          // validate object against the annotations         // throw a RuntimeException if validation fails     }  }"
"import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.Path; import org.apache.hadoop.mapreduce.InputFormat; import org.apache.hadoop.mapreduce.RecordReader; import org.apache.hadoop.mapreduce.TaskAttemptContext; import org.apache.hadoop.mapreduce.TaskAttemptID; import org.apache.hadoop.mapreduce.lib.input.FileSplit; import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl; import org.apache.hadoop.util.ReflectionUtils; import java.io.File;  Configuration conf = new Configuration(false); conf.set(""fs.default.name"", ""file:///"");  File testFile = new File(""path/to/file""); Path path = new Path(testFile.getAbsoluteFile().toURI()); FileSplit split = new FileSplit(path, 0, testFile.length(), null);  InputFormat inputFormat = ReflectionUtils.newInstance(MyInputFormat.class, conf); TaskAttemptContext context = new TaskAttemptContextImpl(conf, new TaskAttemptID()); RecordReader reader = inputFormat.createRecordReader(split, context);  reader.initialize(split, context);"
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
public List&lt;Task&gt; getTaskDue(){          List&lt;Task&gt; temp = new ArrayList&lt;Task&gt;();      for(int u = 0; u &lt; unitCollection.size(); u++){         Unit unit = unitCollection.get(u);          for (int a = 0; a &lt; unit.getAssessmentCollection().size(); a++){             AssessmentItem assessment = unit.getAssessmentCollection().get(a);              for (int t = 0; t &lt; assessment.getTasks().size(); t++){                 Task task = assessment.getTasks().get(t);                  if (task.getDueDate().compareTo(assessment.getDueDate()) &lt;= 0){                      temp.add(task);                 }                }            }        }        return temp; }
"public List&lt;PayoutDetails&gt; getPayoutDetails(AdvisorReportForm advisorReportForm) {         Criteria criteria = getSession().createCriteria(PayoutDetails.class);          if (advisorReportForm.getAdvisorId() != null &amp;&amp; advisorReportForm.getAdvisorId() &gt; 0) {             criteria.add(Restrictions.eq(""advisorId"", advisorReportForm.getAdvisorId().toString()));         }          criteria.createCriteria(""payoutHeader"")                 .add(Restrictions.between(""chequeIssuedDate"", advisorReportForm.getFromDate(), advisorReportForm.getToDate()));                  return criteria.list();     }"
"IplImage img=cvLoadImage(""pathtosourceimage"");     CvSize cvSize = cvSize(img.width(), img.height());     IplImage gry=cvCreateImage(cvSize, img.depth(), 1);     cvCvtColor(img, gry, CV_BGR2GRAY);     cvThreshold(gry, gry, 200, 255, CV_THRESH_BINARY);     cvAdaptiveThreshold(gry, gry, 255, CV_ADAPTIVE_THRESH_MEAN_C, CV_THRESH_BINARY_INV, 11, 5);      CvMemStorage storage = CvMemStorage.create();     CvSeq contours = new CvContour(null);      int noOfContors = cvFindContours(gry, storage, contours, Loader.sizeof(CvContour.class), CV_RETR_CCOMP, CV_CHAIN_APPROX_NONE, new CvPoint(0,0));      CvSeq ptr = new CvSeq();      int count =1;     CvPoint p1 = new CvPoint(0,0),p2 = new CvPoint(0,0);      for (ptr = contours; ptr != null; ptr = ptr.h_next()) {          CvScalar color = CvScalar.BLUE;         CvRect sq = cvBoundingRect(ptr, 0);              System.out.println(""Contour No =""+count);             System.out.println(""X =""+ sq.x()+"" Y=""+ sq.y());             System.out.println(""Height =""+sq.height()+"" Width =""+sq.width());             System.out.println("""");              p1.x(sq.x());             p2.x(sq.x()+sq.width());             p1.y(sq.y());             p2.y(sq.y()+sq.height());             cvRectangle(img, p1,p2, CV_RGB(255, 0, 0), 2, 8, 0);             cvDrawContours(img, ptr, color, CV_RGB(0,0,0), -1, CV_FILLED, 8, cvPoint(0,0));             count++;      }      cvShowImage(""contures"",img);     cvWaitKey(0);"
AS_INSTALL_ROOT/bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.is-connection-validation-required=true domain.resources.jdbc-connection-pool.DerbyPool.is-connection-validation-required = true  AS_INSTALL_ROOT/bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.connection-validation-method=table domain.resources.jdbc-connection-pool.DerbyPool.connection-validation-method = table  bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.validation-table-name=sys.systables domain.resources.jdbc-connection-pool.DerbyPool.validation-table-name = sys.systables
