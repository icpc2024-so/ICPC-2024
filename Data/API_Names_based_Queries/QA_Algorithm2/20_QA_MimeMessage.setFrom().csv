code
"try {   connection con.setAutoCommit(false);           PreparedStatement prepStmt = con.prepareStatement(         ""insert into product(code,name,price,available) values (?,?,?,?"");   Iterator&lt;Product&gt; it = li.iterator();   while(it.hasNext()){      Product p = it.next();     prepStmt.setString(1,p.getCode());                 prepStmt.setString(2,p.getCode());     prepStmt.setInt(3,p.getPrice());     prepStmt.setBoolean(4,p.isAvailable());     prepStmt.addBatch();                          }         int [] numUpdates=prepStmt.executeBatch();   for (int i=0; i &lt; numUpdates.length; i++) {     if (numUpdates[i] == -2)       System.out.println(""Execution "" + i +          "": unknown number of rows updated"");     else       System.out.println(""Execution "" + i +          ""successful: "" + numUpdates[i] + "" rows updated"");   }   con.commit(); } catch(BatchUpdateException b) {   // process BatchUpdateException }"
"JPanel innerSelectPanel = new JPanel(new GridLayout(0, 1, 0, 5));     // innerSelectPanel.setPreferredSize(new Dimension(50, 0));     innerSelectPanel.add(selectAllButton);     innerSelectPanel.add(selectButton);     innerSelectPanel.add(deselectButton);     innerSelectPanel.add(deselectAllButton);     innerSelectPanel.setOpaque(false);     innerSelectPanel.setBorder(BorderFactory.createEmptyBorder(0, 2, 0, 2));     selectButtonsPanel.setLayout(new BoxLayout(selectButtonsPanel, BoxLayout.PAGE_AXIS));     selectButtonsPanel.add(Box.createVerticalGlue());     selectButtonsPanel.add(innerSelectPanel);     selectButtonsPanel.add(Box.createVerticalGlue());"
"public DynamicReport buildDynamicReport() throws ReportDocumentGenerationException {   DynamicReportBuilder drb = new DynamicReportBuilder();   drb.setDetailHeight(detailHeight)        .setMargins(properties.getReportMargins().getTopMargin(), properties.getReportMargins().getBottomMargin(), properties.getReportMargins().getLeftMargin(), properties.getReportMargins().getRightMargin())        .setDefaultStyles(null, null, null, getSpoolStyle(SpoolRow.PLAIN_ATTRIBUTE))       .setPageSizeAndOrientation(new Page(**/*Your document dimensions and orientation*/**)   .setColumnsPerPage(1);    for(ReportDocumentInformationPage page: reportInformation.getPaginas()){             drb.addConcatenatedReport(getPageSubReport(page.getPageNumber()),new ClassicLayoutManager(),""DS""+page.getPageNumber().toString(),DJConstants.DATA_SOURCE_ORIGIN_PARAMETER, DJConstants.DATA_SOURCE_TYPE_JRDATASOURCE,!page.getPageNumber().equals(1));             params.put(""DS""+page.getPageNumber().toString(), getReportJRDataSource(page.getPageNumber())  );         }         drb.setUseFullPageWidth(true);         DynamicReport dr = drb.build();         return dr;     }"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"try { ...   connection con.setAutoCommit(false);                      PreparedStatement prepStmt = con.prepareStatement(         ""UPDATE DEPT SET MGRNO=? WHERE DEPTNO=?"");              prepStmt.setString(1,mgrnum1);                            prepStmt.setString(2,deptnum1);   prepStmt.addBatch();                                       prepStmt.setString(1,mgrnum2);                           prepStmt.setString(2,deptnum2);   prepStmt.addBatch();   int [] numUpdates=prepStmt.executeBatch();                for (int i=0; i &lt; numUpdates.length; i++) {                 if (numUpdates[i] == -2)       System.out.println(""Execution "" + i +          "": unknown number of rows updated"");     else       System.out.println(""Execution "" + i +          ""successful: "" numUpdates[i] + "" rows updated"");   }   con.commit();                                           } catch(BatchUpdateException b) {   // process BatchUpdateException }"
"try {   connection con.setAutoCommit(false);           PreparedStatement prepStmt = con.prepareStatement(         ""UPDATE DEPT SET MGRNO=? WHERE DEPTNO=?"");   prepStmt.setString(1,mgrnum1);               prepStmt.setString(2,deptnum1);   prepStmt.addBatch();                          prepStmt.setString(1,mgrnum2);                           prepStmt.setString(2,deptnum2);   prepStmt.addBatch();   int [] numUpdates=prepStmt.executeBatch();   for (int i=0; i &lt; numUpdates.length; i++) {     if (numUpdates[i] == -2)       System.out.println(""Execution "" + i +          "": unknown number of rows updated"");     else       System.out.println(""Execution "" + i +          ""successful: "" + numUpdates[i] + "" rows updated"");   }   con.commit(); } catch(BatchUpdateException b) {   // process BatchUpdateException }"
"BCookieAuthenticator cookieAuth1 = new BCookieAuthenticator(getContext(), false, false); cookieAuth1.setNext(InvoiceInstallmentResource.class); BCookieAuthenticator cookieAuth2 = new BCookieAuthenticator(getContext(), false, false); cookieAuth2.setNext(ChangeStatusResource.class);  BBasicAuthenticator basicAuth = new BBasicAuthenticator(getContext(), true, false); basicAuth.setNext(router2);  router2.attach(""/v1/accounts"", AccountsResource.class); router2.attach(""/v1/accounts/{id}"", AccountResource.class); router2.attach(""/v1/items/{id}"", ItemResource.class); router2.attach(""/v1/items"", ItemsResource.class);  router1.attach(""/v1/invoices/{invoice_id}/installments/{id}"", cookieAuth1); router1.attach(""/v1/{object_type}/{id}/change-status"", cookieAuth2); router1.attachDefault(basicAuth);"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"String cronAttribute = taskElement.getAttribute(""cron""); if (StringUtils.hasText(cronAttribute)) {     cronTaskMap.put(runnableBeanRef, cronAttribute); } else {     String fixedDelayAttribute = taskElement.getAttribute(""fixed-delay"");     if (StringUtils.hasText(fixedDelayAttribute)) {         fixedDelayTaskMap.put(runnableBeanRef, fixedDelayAttribute);     }     else {         String fixedRateAttribute = taskElement.getAttribute(""fixed-rate"");         if (!StringUtils.hasText(fixedRateAttribute)) {             parserContext.getReaderContext().error(                     ""One of 'cron', 'fixed-delay', or 'fixed-rate' is required"",                     taskElement);             // Continue with the possible next task element             continue;         }         fixedRateTaskMap.put(runnableBeanRef, fixedRateAttribute);     } }"
"SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator(); JceKeyAgreeRecipientInfoGenerator rig = new JceKeyAgreeRecipientInfoGenerator(CMSAlgorithm.ECDH_SHA1KDF, senderPrivateKey, senderPublicKey, CMSAlgorithm.AES128_WRAP); rig.setProvider(BouncyCastleProvider.PROVIDER_NAME); rig.addRecipient(recipientX509Certificate); gen.addRecipientInfoGenerator(rig);  MimeBodyPart msg = new MimeBodyPart(); msg.setText(&quot;This is a secret message&quot;);  MimeBodyPart mp = gen.generate(msg, new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(&quot;BC&quot;).build());  Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null);  String to = &quot;bob@example.com&quot;;  Address fromUser = new InternetAddress(&quot;alice@example.com&quot;); Address toUser = new InternetAddress(to);  MimeMessage body = new MimeMessage(session); body.setFrom(fromUser); body.setRecipient(Message.RecipientType.TO, toUser); body.setSubject(&quot;example encrypted message&quot;); body.setContent(mp.getContent(), mp.getContentType()); body.saveChanges();  body.writeTo(new FileOutputStream(&quot;/tmp/encrypted.msg&quot;));"
final JFormattedTextField textField1 = new JFormattedTextField(new Float(10.01));     textField1.setFormatterFactory(new AbstractFormatterFactory() {          @Override         public AbstractFormatter getFormatter(JFormattedTextField tf) {             NumberFormat format = DecimalFormat.getInstance();             format.setMinimumFractionDigits(2);             format.setMaximumFractionDigits(2);             format.setRoundingMode(RoundingMode.HALF_UP);             InternationalFormatter formatter = new InternationalFormatter(format);             formatter.setAllowsInvalid(false);             formatter.setMinimum(0.0);             formatter.setMaximum(1000.00);             return formatter;         }     }); }
"for(int i = 0; i &lt; 2; i++) {     testPerformance(castNumerator, 6);     testPerformance(multiplyNumerator, 6);     testPerformance(makeNumerator, 6);     testPerformance(castDenominator, 6);     testPerformance(multiplyDenominator, 6);     testPerformance(makeDenominator, 6);     testPerformance(diDivider, 6);     testPerformance(idDivider, 6);     System.out.println();     testPerformance(castNumerator2, 6);     testPerformance(multiplyNumerator2, 6);     testPerformance(makeNumerator2, 6);     testPerformance(castDenominator2, 6);     testPerformance(multiplyDenominator2, 6);     testPerformance(makeDenominator2, 6);     testPerformance(diDivider2, 6);     testPerformance(idDivider2, 6);     System.out.println(); }"
"algorithms.put(""MD2WITHRSAENCRYPTION"", PKCSObjectIdentifiers.md2WithRSAEncryption); algorithms.put(""MD2WITHRSA"", PKCSObjectIdentifiers.md2WithRSAEncryption); algorithms.put(""MD5WITHRSAENCRYPTION"", PKCSObjectIdentifiers.md5WithRSAEncryption); algorithms.put(""MD5WITHRSA"", PKCSObjectIdentifiers.md5WithRSAEncryption); algorithms.put(""SHA1WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha1WithRSAEncryption); algorithms.put(""SHA1WITHRSA"", PKCSObjectIdentifiers.sha1WithRSAEncryption); algorithms.put(""SHA224WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha224WithRSAEncryption); algorithms.put(""SHA224WITHRSA"", PKCSObjectIdentifiers.sha224WithRSAEncryption); algorithms.put(""SHA256WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha256WithRSAEncryption); algorithms.put(""SHA256WITHRSA"", PKCSObjectIdentifiers.sha256WithRSAEncryption); algorithms.put(""SHA384WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha384WithRSAEncryption); algorithms.put(""SHA384WITHRSA"", PKCSObjectIdentifiers.sha384WithRSAEncryption); algorithms.put(""SHA512WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha512WithRSAEncryption); algorithms.put(""SHA512WITHRSA"", PKCSObjectIdentifiers.sha512WithRSAEncryption); algorithms.put(""SHA1WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA224WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA256WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA384WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA512WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""RIPEMD160WITHRSAENCRYPTION"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd160); algorithms.put(""RIPEMD160WITHRSA"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd160); algorithms.put(""RIPEMD128WITHRSAENCRYPTION"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd128); algorithms.put(""RIPEMD128WITHRSA"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd128); algorithms.put(""RIPEMD256WITHRSAENCRYPTION"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd256); algorithms.put(""RIPEMD256WITHRSA"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd256); algorithms.put(""SHA1WITHDSA"", X9ObjectIdentifiers.id_dsa_with_sha1); algorithms.put(""DSAWITHSHA1"", X9ObjectIdentifiers.id_dsa_with_sha1); algorithms.put(""SHA224WITHDSA"", NISTObjectIdentifiers.dsa_with_sha224); algorithms.put(""SHA256WITHDSA"", NISTObjectIdentifiers.dsa_with_sha256); algorithms.put(""SHA384WITHDSA"", NISTObjectIdentifiers.dsa_with_sha384); algorithms.put(""SHA512WITHDSA"", NISTObjectIdentifiers.dsa_with_sha512); algorithms.put(""SHA1WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA1); algorithms.put(""ECDSAWITHSHA1"", X9ObjectIdentifiers.ecdsa_with_SHA1); algorithms.put(""SHA224WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA224); algorithms.put(""SHA256WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA256); algorithms.put(""SHA384WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA384); algorithms.put(""SHA512WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA512); algorithms.put(""GOST3411WITHGOST3410"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_94); algorithms.put(""GOST3411WITHGOST3410-94"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_94); algorithms.put(""GOST3411WITHECGOST3410"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_2001); algorithms.put(""GOST3411WITHECGOST3410-2001"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_2001); algorithms.put(""GOST3411WITHGOST3410-2001"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_2001);"
"JFrame toDisplay = new JFrame(""Please Wait"");   toDisplay.setAlwaysOnTop(true);   toDisplay.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   toDisplay.setVisible(true);   toDisplay.setLayout(new FlowLayout());   toDisplay.setSize(300,200);   toDisplay.setLocation((int)dimension.getWidth()/3, (int)dimension.getHeight()/3);    JLabel message = new JLabel(""&lt;html&gt;CheapTix is currently running&lt;br /&gt;        please do not close this box or open the file &lt;br /&gt;        Destinations.txt &lt;br /&gt;        until instructed to do so&lt;/html&gt;"");   toDisplay.add(message,BorderLayout.CENTER);"
"private void installShortcut() {     final Intent shortcutIntent = new Intent(getApplicationContext(), MainActivity.class);     shortcutIntent.setAction(Intent.ACTION_MAIN);     shortcutIntent.addCategory(Intent.CATEGORY_LAUNCHER);     shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);     shortcutIntent.addFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);      final Intent intent = new Intent();     intent.putExtra(""duplicate"", false);     intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, shortcutIntent);     intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, getString(R.string.app_name));     intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE, Intent.ShortcutIconResource.fromContext(this, R.drawable.icon));     intent.setAction(""com.android.launcher.action.INSTALL_SHORTCUT"");     sendBroadcast(intent); }"
com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter
"Public List&lt;Claim&gt; validateAuthenticationResponse(String yourToken){     SamlTokenValidator validator = new SamlTokenValidator();      validator.setThumbprint(""thumbprint from the thinktecture idp server or what ever idp you are using"");      validator.getAudienceUris().add(new URI(“http://localhost:8080/javafederationtest”);      //validator.setValidateExpiration(false); //This can be used to stop validation of the expiration fields in the token.      List&lt;Claim&gt; claims = validator.validate(yourToken); //A Federation Exception is thrown if the token is invalid      System.out.println(claims.toString()); //This will show the claims asserted by the token! }"
"Method         = ""OPTIONS""                ; Section 9.2                   | ""GET""                    ; Section 9.3                   | ""HEAD""                   ; Section 9.4                   | ""POST""                   ; Section 9.5                   | ""PUT""                    ; Section 9.6                   | ""DELETE""                 ; Section 9.7                   | ""TRACE""                  ; Section 9.8                   | ""CONNECT""                ; Section 9.9                   | extension-method    extension-method = token"
"private static Pointer getWindowPointer(Stage stage) {     try {         TKStage tkStage = stage.impl_getPeer();         Method getPlatformWindow = tkStage.getClass().getDeclaredMethod(""getPlatformWindow"" );         getPlatformWindow.setAccessible(true);         Object platformWindow = getPlatformWindow.invoke(tkStage);         Method getNativeHandle = platformWindow.getClass().getMethod( ""getNativeHandle"" );         getNativeHandle.setAccessible(true);         Object nativeHandle = getNativeHandle.invoke(platformWindow);         return new Pointer((Long) nativeHandle);     } catch (Throwable e) {         System.err.println(""Error getting Window Pointer"");         return null;     } }"
"GsonBuilder gsonBuilder = new GsonBuilder();     gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer&lt;Date&gt;() {         DateFormat df = new SimpleDateFormat(""yyyy-MM-dd HH:mm"");         @Override         public Date deserialize(final JsonElement json, final Type typeOfT, final JsonDeserializationContext context)                 throws JsonParseException {             try {                 return df.parse(json.getAsString());             } catch (ParseException e) {                 return null;             }         }     });     Gson gson = gsonBuilder.create();"
"var   PM: JPackageManager;   mainIntent: JIntent;   LaunchIntent: JIntent;   pkgAppsList: JList;   ri: JResolveInfo;   iter: JIterator;   midlist := TStringList; begin   PM := SharedActivityContext.getPackageManager;   mainIntent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_MAIN, nil);   mainIntent.addCategory(TJIntent.JavaClass.CATEGORY_LAUNCHER);   pkgAppsList := PM.queryIntentActivities(mainIntent, 0);   midlist := TStringList;   iter := pkgAppsList.iterator;   while iter.hasNext do   begin     ri := TJResolveInfo.Wrap((iter.next as ILocalObject).GetObjectID);     mIdList.Add(ri.activityInfo.applicationInfo.packageName);   end;   LaunchIntent := PM.getLaunchIntentForPackage(mIdList[2]);   SharedActivityContext.startActivity( LaunchIntent ) end;"
"ArrayList&lt;String&gt; wordDulicate = new ArrayList&lt;String&gt;();          wordDulicate.add(""Tom"");         wordDulicate.add(""Jones"");         wordDulicate.add(""Sam"");         wordDulicate.add(""Jamie"");         wordDulicate.add(""Robie"");         wordDulicate.add(""Helen"");         wordDulicate.add(""Tom"");         wordDulicate.add(""Troy"");         wordDulicate.add(""Mika"");         wordDulicate.add(""Tom"");          ArrayList&lt;String&gt; nonDupList = new ArrayList&lt;String&gt;();          Iterator&lt;String&gt; dupIter = wordDulicate.iterator();         while(dupIter.hasNext())         {         String dupWord = dupIter.next();         if(nonDupList.contains(dupWord))         {             dupIter.remove();         }else         {             nonDupList.add(dupWord);         }         }       System.out.println(nonDupList);"
"void addKeyBinding(JComponent jc) {         jc.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0, false), ""A pressed"");         jc.getActionMap().put(""esc pressed"", new AbstractAction() {             @Override             public void actionPerformed(ActionEvent ae) {                 System.out.println(""A pressed"");             }         });          jc.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_A, 0, true), ""A released"");         jc.getActionMap().put(""A released"", new AbstractAction() {             @Override             public void actionPerformed(ActionEvent ae) {                 System.out.println(""A released"");             }         }); }"
public class VisitorUpdateModelWithoutValidation implements FormComponent.IVisitor {  public Object formComponent(IFormVisitorParticipant formComponent) {         if (formComponent instanceof FormComponent) {             final FormComponent&lt;?&gt; formComponent1 = (FormComponent&lt;?&gt;) formComponent;             boolean required = formComponent1.isRequired();             if (required) {                 formComponent1.setRequired(false);             }             formComponent1.modelChanging();             formComponent1.validate();             formComponent1.updateModel();             formComponent1.modelChanged();             if (required) {                 formComponent1.setRequired(true);             }         }          return Component.IVisitor.CONTINUE_TRAVERSAL;     } }
"getInputMap(c).put(KeyStroke.getKeyStroke(""D""), ""pressed""); getActionMap().put(""pressed"", right); getInputMap(c).put(KeyStroke.getKeyStroke(""released D""), ""released""); getActionMap().put(""released"", stop); getInputMap(c).put(KeyStroke.getKeyStroke(""W""), ""pressed""); getActionMap().put(""pressed"", up); // this overwrites the ""pressed"" action name above with the up action getInputMap(c).put(KeyStroke.getKeyStroke(""released W""), ""released""); getActionMap().put(""released"", stop); // similarly, this is redundant because you have the same thing above"
"when(mockTransactionTemplate.execute(Mockito.&lt;TransactionCallback&gt;any())).thenAnswer(new Answer() {          public Object answer(InvocationOnMock invocation) {              Object[] args = invocation.getArguments();            TransactionCallback arg = (TransactionCallback)args[0];              return arg.doInTransaction(new SimpleTransactionStatus());          }      });          when(mockResourceService.callReserve(any(ReserveDetails.class))).thenReturn(reserveInfo);     when(mockResourceService.callRelease(eq(id))).thenReturn(releaseInfo);      //Call the exe method     someService.exe();      verify(mockResourceService, times(1)).callReserve(any(ReserveDetails.class));     verify(mockSomeOtherService, times(1)).doSomthing());     verify(mockMemberResourceService, times(1)).callRelease(eq(id));"
"NotificationCompat.Builder b = new NotificationCompat.Builder(c);        b.setNumber(g_push.Counter)         .setLargeIcon(BitmapFactory.decodeResource(c.getResources(), R.drawable.list_avatar))         .setSmallIcon(R.drawable.ic_stat_example)         .setAutoCancel(true)         .setContentTitle(pushCount &gt; 1 ? c.getString(R.string.stat_messages_title) + pushCount : title)         .setContentText(pushCount &gt; 1 ? push.ProfileID : mess)         .setWhen(g_push.Timestamp)         .setContentIntent(PendingIntent.getActivity(c, 0, it, PendingIntent.FLAG_UPDATE_CURRENT))         .setDeleteIntent(PendingIntent.getBroadcast(c, 0, new Intent(ACTION_CLEAR_NOTIFICATION), PendingIntent.FLAG_CANCEL_CURRENT))         .setDefaults(Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE)         .setSound(Uri.parse(prefs.getString(                 SharedPreferencesID.PREFERENCE_ID_PUSH_SOUND_URI,                 ""android.resource://ru.mail.mailapp/raw/new_message_bells"")));"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"if (i == 0) {          Integer codigo = Integer.parseInt(tabelaImoveis.getValueAt(linha, 0).toString());         for (Imovel imovel : imovelLista) {              if (imovel.getCodigo() == codigo) {                                                frmAlterar alterar = new frmAlterar();  // *** this should be a modal JDialog                 alterar.setLocationRelativeTo(null);                  // alterar.setVisible(true);                 // alterar.setDefaultCloseOperation(alterar.DISPOSE_ON_CLOSE);                 alterar.setarAtributos(imovel);                 alterar.setVisible(true);             }         }     }"
