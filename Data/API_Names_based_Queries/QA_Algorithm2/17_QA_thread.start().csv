code

ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"ExtendedPropertyDefinition propDef_PidLidEmail1DisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8080, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1AddressType = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8082, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1EmailAddress = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8083, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalDisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8084, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalEntryId = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8085, MapiPropertyType.Binary);  ExchangeService mailbox = new ExchangeService(ExchangeVersion.Exchange2007_SP1); mailbox.setUrl(new URL(""https://remote.domain.com/EWS/exchange.asmx"").toURI()); ExchangeCredentials credentials = new WebCredentials(""user.name"", ""pw"", ""domain""); mailbox.setCredentials(credentials);  String FIRST = ""First""; String LAST = ""Last""; String FIRST_LAST = FIRST + "" "" + LAST; // ""First Last"" String EMAIL = ""first.last@email.com""; String DISPLAY_NAME = FIRST + "" "" + LAST + "" ("" + EMAIL + "")""; // ""First Last (first.last@email.com)""  Contact c = new Contact(mailbox); c.setGivenName(FIRST); c.setSurname(LAST); c.setFileAs(FIRST_LAST);  // don't use this //    c.getEmailAddresses().setEmailAddress(EmailAddressKey.EmailAddress1, new EmailAddress(EMAIL));  // Address book Name (seem to trigger the whole address book functionality) c.setSubject(FIRST_LAST); // Address book email address c.setExtendedProperty(propDef_PidLidEmail1OriginalDisplayName, EMAIL); // contact and address book display name c.setExtendedProperty(propDef_PidLidEmail1DisplayName, DISPLAY_NAME);  c.setExtendedProperty(propDef_PidLidEmail1AddressType, ""SMTP""); // constant c.setExtendedProperty(propDef_PidLidEmail1EmailAddress, EMAIL);  // not needed after all, exchange sets this automatically //    c.setExtendedProperty(propDef_PidLidEmail1OriginalEntryId, ???);  c.save(WellKnownFolderName.Contacts);  for(Item item : mailbox.findItems(WellKnownFolderName.Contacts, new ItemView(1000))) {   Contact result = (Contact) item;    PropertySet propertySet = new PropertySet(BasePropertySet.FirstClassProperties);   propertySet.add(propDef_PidLidEmail1AddressType);   propertySet.add(propDef_PidLidEmail1EmailAddress);   propertySet.add(propDef_PidLidEmail1OriginalDisplayName);   propertySet.add(propDef_PidLidEmail1DisplayName);   propertySet.add(propDef_PidLidEmail1OriginalEntryId);    result = Contact.bind(mailbox, result.getId(), propertySet);    LOGGER.info(""count: "" + result.getExtendedProperties().getCount());    for(ExtendedProperty p : result.getExtendedProperties())   {     LOGGER.info(p.toString());   } }"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"MultiSelectListPreference listPreference = new MultiSelectListPreference(context);     listPreference.setTitle(R.string.configure_category_title);     listPreference.setDialogTitle(R.string.configure_category_title);     listPreference.setSummary(R.string.configure_category_summary);     listPreference.setEntries(R.array.configure_category_array);     listPreference.setEntryValues(new CharSequence[]{             ProcessList.PREF_SERVICES + mAppWidgetId,             ProcessList.PREF_INACTIVE + mAppWidgetId,             ProcessList.PREF_INTERNAL + mAppWidgetId     });      //Create a Set&lt;String&gt; with list items that should be selected     SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);     boolean showServices = sharedPref.getBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, true);     boolean showInactive = sharedPref.getBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, true);     boolean showInternal = sharedPref.getBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, true);      String[] strings = new String[3];     int cnt = 0;     if (showServices)         strings[cnt++] = ProcessList.PREF_SERVICES + mAppWidgetId;     if (showInactive)         strings[cnt++] = ProcessList.PREF_INACTIVE + mAppWidgetId;     if (showInternal)         strings[cnt] = ProcessList.PREF_INTERNAL + mAppWidgetId;      Set&lt;String&gt; mySet = new HashSet&lt;String&gt;();     Collections.addAll(mySet, strings);      //Add the set     listPreference.setValues(mySet);      //Listen for changes, I'm not sure if this is how it's meant to work, but it does :/     listPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {         public boolean onPreferenceChange(Preference preference, Object o) {              HashSet hashSet = (HashSet) o;             Iterator stringIterator = hashSet.iterator();             boolean[] states = {false, false, false};             String prefString;              while (stringIterator.hasNext()) {                  prefString = (String) stringIterator.next();                  if (prefString == null)                     continue;                  if (prefString.compareTo(ProcessList.PREF_SERVICES + mAppWidgetId) == 0)                     states[0] = true;                 else if (prefString.compareTo(ProcessList.PREF_INACTIVE + mAppWidgetId) == 0)                     states[1] = true;                 else if (prefString.compareTo(ProcessList.PREF_INTERNAL + mAppWidgetId) == 0)                     states[2] = true;              }              PreferenceManager                     .getDefaultSharedPreferences(getActivity())                     .edit()                     .putBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, states[0])                     .putBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, states[1])                     .putBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, states[2])                     .commit();              return true;         }     });      preferenceCategory.addPreference(listPreference);"
"SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator(); JceKeyAgreeRecipientInfoGenerator rig = new JceKeyAgreeRecipientInfoGenerator(CMSAlgorithm.ECDH_SHA1KDF, senderPrivateKey, senderPublicKey, CMSAlgorithm.AES128_WRAP); rig.setProvider(BouncyCastleProvider.PROVIDER_NAME); rig.addRecipient(recipientX509Certificate); gen.addRecipientInfoGenerator(rig);  MimeBodyPart msg = new MimeBodyPart(); msg.setText(&quot;This is a secret message&quot;);  MimeBodyPart mp = gen.generate(msg, new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(&quot;BC&quot;).build());  Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null);  String to = &quot;bob@example.com&quot;;  Address fromUser = new InternetAddress(&quot;alice@example.com&quot;); Address toUser = new InternetAddress(to);  MimeMessage body = new MimeMessage(session); body.setFrom(fromUser); body.setRecipient(Message.RecipientType.TO, toUser); body.setSubject(&quot;example encrypted message&quot;); body.setContent(mp.getContent(), mp.getContentType()); body.saveChanges();  body.writeTo(new FileOutputStream(&quot;/tmp/encrypted.msg&quot;));"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
public List&lt;Task&gt; getTaskDue(){          List&lt;Task&gt; temp = new ArrayList&lt;Task&gt;();      for(int u = 0; u &lt; unitCollection.size(); u++){         Unit unit = unitCollection.get(u);          for (int a = 0; a &lt; unit.getAssessmentCollection().size(); a++){             AssessmentItem assessment = unit.getAssessmentCollection().get(a);              for (int t = 0; t &lt; assessment.getTasks().size(); t++){                 Task task = assessment.getTasks().get(t);                  if (task.getDueDate().compareTo(assessment.getDueDate()) &lt;= 0){                      temp.add(task);                 }                }            }        }        return temp; }
"JFrame toDisplay = new JFrame(""Please Wait"");   toDisplay.setAlwaysOnTop(true);   toDisplay.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   toDisplay.setVisible(true);   toDisplay.setLayout(new FlowLayout());   toDisplay.setSize(300,200);   toDisplay.setLocation((int)dimension.getWidth()/3, (int)dimension.getHeight()/3);    JLabel message = new JLabel(""&lt;html&gt;CheapTix is currently running&lt;br /&gt;        please do not close this box or open the file &lt;br /&gt;        Destinations.txt &lt;br /&gt;        until instructed to do so&lt;/html&gt;"");   toDisplay.add(message,BorderLayout.CENTER);"
"public JMenuItem createMenuItemWithListener(String text,                                              char mnemonic,                                              ActionListener action) {     JMenuItem result = new JMenuItem(text);     result.setMnemonic(mnemonic);     result.addActionListener(action);     return result; }  public JMenuItem createMenuItemWithAction(char mnemonic,                                            Action action) {     JMenuItem result = new JMenuItem(action);     result.setMnemonic(mnemonic);     return result; }"
"public String slice_start(String s, int startIndex) {     if (startIndex &lt; 0) startIndex = s.length() + startIndex;     return s.substring(startIndex); }  public String slice_end(String s, int endIndex) {     if (endIndex &lt; 0) endIndex = s.length() + endIndex;     return s.substring(0, endIndex); }  public String slice_range(String s, int startIndex, int endIndex) {     if (startIndex &lt; 0) startIndex = s.length() + startIndex;     if (endIndex &lt; 0) endIndex = s.length() + endIndex;     return s.substring(startIndex, endIndex); }"
"OperatingSystemMXBean operatingSystemMXBean =      ManagementFactory.getOperatingSystemMXBean();  for (Method method: operatingSystemMXBean.getClass ().getMethods ())  {     method.setAccessible (true);     String methodName = method.getName ();     if (methodName.startsWith (""get"")         &amp;&amp; Modifier.isPublic (method.getModifiers ())         &amp;&amp; OperatingSystemMXBean.class.isAssignableFrom (             method.getDeclaringClass ())) {         try         {             System.out.println (                 methodName.substring (3) + "": "" +                  method.invoke (operatingSystemMXBean));         }         catch (Throwable ex)         {             // Ignore         }     } }"
"EntityPersister persister = ((SessionFactoryImpl) session.getSessionFactory()).getEntityPersister(""theNameOfYourEntity"");  if (persister.hasCache() &amp;&amp;      !persister.isCacheInvalidationRequired() &amp;&amp;      session.getCacheMode().isPutEnabled()) {      CacheKey ck = new CacheKey(                      theEntityToBeCached.getId(),                      persister.getIdentifierType(),                      persister.getRootEntityName(),                      session.getEntityMode(),                      session.getFactory()                  );      persister.getCacheAccessStrategy().afterInsert(ck, theEntityToBeCached, null); }"
"const char* GetIDJni() {      JniMethodInfo t;          if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, ""GetIDJni"", ""()Ljava/lang/String;"")) {             jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID);             t.env-&gt;DeleteLocalRef(t.classID);             CCString *ret = new CCString(JniHelper::jstring2string(str).c_str());             ret-&gt;autorelease();             t.env-&gt;DeleteLocalRef(str);              return ret-&gt;m_sString.c_str();         }          return 0;     }"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"public static class MyOwnFocusTraversalPolicy extends FocusTraversalPolicy {     Vector&lt;Component&gt; order;      public MyOwnFocusTraversalPolicy(Vector&lt;Component&gt; order)     {         this.order = new Vector&lt;Component&gt;(order.size());         this.order.addAll(order);     }      public Component getComponentAfter(Container focusCycleRoot,                                        Component aComponent)     { //      int idx = (order.indexOf(aComponent) + 1) % order.size(); //      return order.get(idx);          int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx + 1) % order.size();             Component next = order.get(idx);              if (canBeFocusOwner(next)) return next;         }          return null;     }      public Component getComponentBefore(Container focusCycleRoot,                                         Component aComponent)     { /*         int idx = order.indexOf(aComponent) - 1;         if (idx &lt; 0) {             idx = order.size() - 1;         }         return order.get(idx); */         int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx - 1);              if (idx &lt; 0)             {                 idx = order.size() - 1;             }              Component previous = order.get(idx);              if (canBeFocusOwner(previous)) return previous;         }          return null;     }      public Component getDefaultComponent(Container focusCycleRoot) { //      return order.get(0);         return getFirstComponent( focusCycleRoot );     }      public Component getLastComponent(Container focusCycleRoot) { //      return order.lastElement();          Component c = order.lastElement();          if (canBeFocusOwner(c))             return c;         else             return getComponentBefore(focusCycleRoot, c);     }      public Component getFirstComponent(Container focusCycleRoot)     { //      return order.get(0);          Component c = order.get(0);          if (canBeFocusOwner(c))             return c;         else             return getComponentAfter(focusCycleRoot, c);     }      private boolean canBeFocusOwner(Component c)     {         if (c.isEnabled() &amp;&amp; c.isDisplayable() &amp;&amp; c.isVisible() &amp;&amp; c.isFocusable())         {             return true;         }          return false;     }  }"
"jndiContext = new InitialContext(); connectionFactory = (QueueConnectionFactory) jndiContext.lookup(""ConnectionFactory""); connection = connectionFactory.createConnection(); connection.start(); session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE); temporaryQueue = session.createTemporaryQueue();        jndiContext.bind(queueJndiName, temporaryQueue);     destination = temporaryQueue; responseConsumer = session.createConsumer(destination); responseConsumer.setMessageListener(new MyListener());"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
FocusAdapter selectAllFocusAdapter = new FocusAdapter() {   public void focusGained(FocusEvent e) {     final JTextComponent tComponent = (JTextComponent) e.getSource();     SwingUtilities.invokeLater(new Runnable() {        @Override       public void run() {         tComponent.selectAll();       }     });     tComponent.selectAll();   } };  myJTextField.addFocusListener(selectAllFocusAdapter); otherJTextField.addFocusListener(selectAllFocusAdapter); myTextArea.addFocusListener(selectAllFocusAdapter);
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"String s = ""&lt;html&gt;&lt;div style=\""text-align:center;\""&gt;&lt;b&gt;first&lt;/b&gt;&lt;br&gt;&lt;i&gt;Aula: &lt;/i&gt;&lt;b&gt;second&lt;/b&gt;&lt;/div&gt;&lt;/html&gt;""; int start = s.indexOf(""&lt;b&gt;""); int end = s.indexOf(""&lt;/b&gt;""); String firstMatch = s.substring(start + ""&lt;b&gt;"".length(), end);  //now we can start looking for next `&lt;b&gt;` after position where we found `&lt;/b&gt;` start = s.indexOf(""&lt;b&gt;"", end); //and look for &lt;/b&gt; after position that we found latest &lt;b&gt; end = s.indexOf(""&lt;/b&gt;"", start); String secondMatch = s.substring(start + ""&lt;b&gt;"".length(), end);  System.out.println(firstMatch); System.out.println(secondMatch);"
"DescribeInstancesRequest dis = new DescribeInstancesRequest();    dis.setInstanceIds(instancesList); DescribeInstancesResult disresult = ec2.describeInstances(dis); List&lt;Reservation&gt; list = disresult.getReservations();  System.out.println(""-------------- status of instances -------------""); for (Reservation res : list) {     List &lt;Instance&gt; instancelist = res.getInstances();      for (Instance instance : instancelist) {         System.out.println(""Instance Status : "" + instance.getState().getName());         List &lt;Tag&gt; t1 = instance.getTags();         for (Tag teg : t1) {             System.out.println(""Instance Name : ""+ teg.getValue());         }     }        System.out.println(""------------------------------------------------""); }"
"import java.net.NetworkInterface;  ...  for (     final Enumeration&lt; NetworkInterface &gt; interfaces =         NetworkInterface.getNetworkInterfaces( );     interfaces.hasMoreElements( ); ) {     final NetworkInterface cur = interfaces.nextElement( );      if ( cur.isLoopback( ) )     {         continue;     }      System.out.println( ""interface "" + cur.getName( ) );      for ( final InterfaceAddress addr : cur.getInterfaceAddresses( ) )     {         final InetAddress inet_addr = addr.getAddress( );          if ( !( inet_addr instanceof Inet4Address ) )         {             continue;         }          System.out.println(             ""  address: "" + inet_addr.getHostAddress( ) +             ""/"" + addr.getNetworkPrefixLength( )         );          System.out.println(             ""  broadcast address: "" +                 addr.getBroadcast( ).getHostAddress( )         );     } }"
"Random r = new Random();     int[] ints = new int[500000];     for (int i = 0 ; i &lt; ints.length ; i++)         ints[i] = r.nextInt();      for (int i = 0 ; i &lt; ints.length-1; i++)         GCD(i,i+1);     for (int i = 0 ; i &lt; ints.length-1; i++)         gcdThing(i, i + 1);      long start = System.currentTimeMillis();     for (int i = 0 ; i &lt; ints.length-1; i++)         GCD(i,i+1);     System.out.println(""GCD: "" + (System.currentTimeMillis() - start));      start = System.currentTimeMillis();     for (int i = 0 ; i &lt; ints.length-1; i++)         gcdThing(i, i + 1);     System.out.println(""gcdThing: "" + (System.currentTimeMillis() - start));"
"List&lt;ListenableFuture&lt;Object&gt;&gt; requiredTasks = ...;  ListenableFuture&lt;List&lt;Object&gt;&gt; requiredTasksResult = Futures.allAsList(requiredTasks);  ListenableFuture&lt;Object&gt; resultFuture = Futures.transform(requiredTasksResult, new Function&lt;List&lt;Object&gt;, Object&gt;() {     public Object apply(List&lt;Object&gt; results) {         // Apply computing formula     } }, threadPool); // Function will be executed in threadPool  Object result = resultFuture.get(10, TimeUnit.SECONDS);"
"net.sf.json.JSONObject obj = new net.sf.json.JSONObject(); obj.put(&quot;jsonStringValue&quot;,&quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;); obj.put(&quot;quotedJsonStringValue&quot;,&quot;\'{\&quot;hello\&quot;:\&quot;world\&quot;}\'&quot;); obj.put(&quot;naturalStringValue&quot;, &quot;\&quot;hello world\&quot;&quot;); System.out.println(obj.toString()); System.out.println(obj.getString(&quot;jsonStringValue&quot;)); System.out.println(obj.getString(&quot;quotedJsonStringValue&quot;)); System.out.println(obj.getString(&quot;naturalStringValue&quot;));"
"String cronAttribute = taskElement.getAttribute(""cron""); if (StringUtils.hasText(cronAttribute)) {     cronTaskMap.put(runnableBeanRef, cronAttribute); } else {     String fixedDelayAttribute = taskElement.getAttribute(""fixed-delay"");     if (StringUtils.hasText(fixedDelayAttribute)) {         fixedDelayTaskMap.put(runnableBeanRef, fixedDelayAttribute);     }     else {         String fixedRateAttribute = taskElement.getAttribute(""fixed-rate"");         if (!StringUtils.hasText(fixedRateAttribute)) {             parserContext.getReaderContext().error(                     ""One of 'cron', 'fixed-delay', or 'fixed-rate' is required"",                     taskElement);             // Continue with the possible next task element             continue;         }         fixedRateTaskMap.put(runnableBeanRef, fixedRateAttribute);     } }"
