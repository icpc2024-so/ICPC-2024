code
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"while ((line = bufferReader.readLine()) != null)   {         bufferdata+=  System.getProperty(""line.separator"") + line;        if(startSaving)       {            modifieddata += System.getProperty(""line.separator"") + line;       }       else         {           originaldata += System.getProperty(""line.separator"") + line;       }        if(line.isEmpty())       {            startSaving = true;        }   }    if(modifieddata.isEmpty())   {       modifieddata = originaldata.trim();   }   else   {       modifieddata = modifieddata.trim();   }    String[] array = new String[]{modifieddata, originaldata};    //Close the buffer reader   bufferReader.close();    // return array;"
"mButton.setOnClickListener( new View.OnClickListener()          {             public void onClick(View view)              {                 collectionID = mEdit.getText().toString();                  Log.d(""EditText"", collectionID);                  // save value here in SharedPreferences                  SharedPreferences settings =                              ConfigPage.this.getSharedPreferences(PREFS_NAME, 0);                  SharedPreferences.Editor editor = settings.edit();                  editor.putString(collectionID, collectionID);                  editor.commit();                }          });"
"public View anEpisode(String n, String i, String d){     View v;     LayoutInflater inflater = (LayoutInflater)getBaseContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);     v = inflater.inflate(R.layout.episodedescription, null);      TextView nameOfEpisode = (TextView) v.findViewById(R.id.episodedescriptionname);     ImageView imageOfEpisode = (ImageView) v.findViewById(R.id.episodedescriptionimage);     TextView descriptionOfEpisode = (TextView) v.findViewById(R.id.episodedescriptiondescription);      nameOfEpisode.setText(n);     descriptionOfEpisode.setText(d);     createUrlImage(imageOfEpisode, i);      return v; }   flipper.addView(anEpisode(""test"", ""url image"", ""test description""));"
"while (it.hasNext()) {     SelectionKey key = (SelectionKey )it.next();     if (key.isReadable()) {         System.out.println(""It's readable!"");          // Added read operation         ByteBuffer buffer = ByteBuffer.allocate(1024);         Charset charset = Charset.forName(""UTF-8"");         buffer.clear();         if (socketChannel.read(buffer) &lt; 0) {             // Client connection refused             socketChannel.close();             return;         }         buffer.flip();         System.out.println(""Value = "" + charset.decode(buffer).toString());      }     it.remove(); }"
"public Object instantiateItem(View collection, int position) {         LayoutInflater inflater = (LayoutInflater)cxt.getSystemService(Context.LAYOUT_INFLATER_SERVICE);         View layout = inflater.inflate(R.layout.search_result, null);         //         TextView title = (TextView)layout.findViewById(R.id.search_result_title);         TextView body = (TextView)layout.findViewById(R.id.search_result_body);         TextView byline = (TextView)layout.findViewById(R.id.search_result_byline);         TextView day = (TextView)layout.findViewById(R.id.search_result_date_day);         TextView month = (TextView)layout.findViewById(R.id.search_result_date_month);         TextView year = (TextView)layout.findViewById(R.id.search_result_date_year);         //         title.setText(list_title.get(position).toString());         body.setText(list_body.get(position).toString());         day.setText(list_day.get(position).toString());         month.setText(list_month.get(position).toString());         year.setText(list_year.get(position).toString());         byline.setText(list_byline.get(position).toString());         //         ((ViewPager) collection).addView(layout,0);         return layout;     }"
protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      map = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();      // Add this line     map.setMyLocationEnabled(true);      locManager = (LocationManager)getSystemService(LOCATION_SERVICE);     providersList = locManager.getAllProviders();     provider =locManager.getProvider(providersList.get(0));     precision = provider.getAccuracy();     req = new Criteria();     req.setAccuracy(Criteria.ACCURACY_FINE);             inside = false;      //map.getUiSettings().setMyLocationButtonEnabled(true);      buildPolygon();     drawPolygon();     startLocalization(); }
"public static BufferedImage replaceInsideBufferedImage(BufferedImage containingImage, BufferedImage toBeReplaced, BufferedImage replaceWithThis) {     BufferedImage returnImage = deepCopyImage(containingImage);     for (int x = 0; x+toBeReplaced.getWidth() &lt; containingImage.getWidth(); x++) {         for (int y = 0; y+toBeReplaced.getHeight() &lt; containingImage.getHeight(); y++) {             BufferedImage subImg = containingImage.getSubimage(x, y, toBeReplaced.getWidth(), toBeReplaced.getHeight());             if (imageEquals(subImg,toBeReplaced)) {                 for (int sx = 0; sx &lt; replaceWithThis.getWidth(); sx++) {                     for (int sy = 0; sy &lt; replaceWithThis.getHeight(); sy++) {                         returnImage.setRGB(x+sx, y+sy, replaceWithThis.getRGB(sx, sy));                     }                 }             }         }     }     return returnImage; }"
"Path file = ...; BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);  System.out.println(""creationTime: "" + attr.creationTime()); System.out.println(""lastAccessTime: "" + attr.lastAccessTime()); System.out.println(""lastModifiedTime: "" + attr.lastModifiedTime());  System.out.println(""isDirectory: "" + attr.isDirectory()); System.out.println(""isOther: "" + attr.isOther()); System.out.println(""isRegularFile: "" + attr.isRegularFile()); System.out.println(""isSymbolicLink: "" + attr.isSymbolicLink()); System.out.println(""size: "" + attr.size());"
"model.read(...); StmtIterator si = model.listStatements(         model.getResource(""required property uri""), RDFS.range, (RDFNode) null); while (si.hasNext()) {     Statement stmt = si.next();     Resource range = stmt.getObject().asResource();     // get restrictions collection     Resource nextNode = range.getPropertyResourceValue(OWL2.withRestrictions);     for (;;) {         Resource restr = nextNode.getPropertyResourceValue(RDF.first);         if (restr == null)             break;          StmtIterator pi = restr.listProperties();         while (pi.hasNext()) {             Statement restrStmt = pi.next();             Property restrType = restrStmt.getPredicate();             Literal value = restrStmt.getObject().asLiteral();             // print type and value for each restriction             System.out.println(restrType + "" = "" + value);         }         // go to the next element of collection         nextNode = nextNode.getPropertyResourceValue(RDF.rest);     } }"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"protected IResourceInfo getResourceInfo(ITranslationUnit translationUnit, ICProjectDescription prjDescription) {      ICProject cProject = translationUnit.getCProject();     if (cProject != null) {         ICConfigurationDescription cfgDescription = prjDescription.getActiveConfiguration();         IConfiguration configuration = ManagedBuildManager.getConfigurationForDescription(cfgDescription);         IPath projectPath = translationUnit.getResource().getProjectRelativePath();          IResourceInfo ri = configuration.getResourceInfo(projectPath, true);          if (ri == null) {              ri = configuration.createFileInfo(projectPath);         }          return ri;     }      return null; }"
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"private static void copySrcIntoDstAt(final BufferedImage src,         final BufferedImage dst, final int dx, final int dy) {     int[] srcbuf = ((DataBufferInt) src.getRaster().getDataBuffer()).getData();     int[] dstbuf = ((DataBufferInt) dst.getRaster().getDataBuffer()).getData();     int width = src.getWidth();     int height = src.getHeight();     int dstoffs = dx + dy * dst.getWidth();     int srcoffs = 0;     for (int y = 0 ; y &lt; height ; y++ , dstoffs+= dst.getWidth(), srcoffs += width ) {         System.arraycopy(srcbuf, srcoffs , dstbuf, dstoffs, width);     } }"
"public aspect ValidationAspect {      pointcut serviceMethodCall() : execution(public * com.yourcompany.**.*(..));      Object around(final Object[] args) : serviceMethodCall() &amp;&amp; args(args){         Signature signature = thisJoinPointStaticPart.getSignature();         if(signature instanceof MethodSignature){             MethodSignature ms = (MethodSignature) signature;             Method method = ms.getMethod();             Annotation[][] parameterAnnotations =                  method.getParameterAnnotations();             String[] parameterNames = ms.getParameterNames();             for(int i = 0; i &lt; parameterAnnotations.length; i++){                 Annotation[] annotations = parameterAnnotations[i];                 validateParameter(parameterNames[i], args[i],annotations);             }         }         return proceed(args);     }      private void validateParameter(String paramName, Object object,         Annotation[] annotations){          // validate object against the annotations         // throw a RuntimeException if validation fails     }  }"
"JComponent dropTargetComponent = ...; new DropTarget(dropTargetComponent , DnDConstants.ACTION_COPY,     new DropTargetListener() {          public void drop(DropTargetDropEvent dtde) {             Transferable tr = dtde.getTransferable();             if(tr.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.imageFlavor)) {                  Image image = (Image) tr.getTransferData(java.awt.datatransfer.DataFlavor.imageFlavor);                  // Do something with image             }          }           ...    }"
"final SearchResponse response = client.prepareSearch(indexName)             .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)             .setTypes(FEED_TYPE)             .setQuery(queryString(query).field(""title"").field(""description"").field(""keywords""))             .addHighlightedField(""title"", 0, 0)             .addHighlightedField(""description"", 0, 0)             .addFields(""title"", ""description"", ""url"", ""iconUrl"", ""keywords"")             .setSize(size)             .setFrom(start)             .execute().actionGet();"
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
"String hostName = InetAddress.getLocalHost().getHostName();  InetAddress addrs[] = InetAddress.getAllByName(hostName);  String myIp = ""UNKNOWN""; for (InetAddress addr: addrs) {   System.out.println (""addr.getHostAddress() = "" + addr.getHostAddress());   System.out.println (""addr.getHostName() = "" + addr.getHostName());   System.out.println (""addr.isAnyLocalAddress() = "" + addr.isAnyLocalAddress());   System.out.println (""addr.isLinkLocalAddress() = "" + addr.isLinkLocalAddress());   System.out.println (""addr.isLoopbackAddress() = "" + addr.isLoopbackAddress());   System.out.println (""addr.isMulticastAddress() = "" + addr.isMulticastAddress());   System.out.println (""addr.isSiteLocalAddress() = "" + addr.isSiteLocalAddress());   System.out.println ("""");    if (!addr.isLoopbackAddress() &amp;&amp; addr.isSiteLocalAddress()) {     myIp = addr.getHostAddress();   } }"
"package your.package;  public class CORSFilter implements ContainerResponseFilter {      @Override     public ContainerResponse filter(ContainerRequest creq, ContainerResponse cresp) {          cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Origin"", ""*"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Credentials"", ""true"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Methods"", ""GET, POST, DELETE, PUT, OPTIONS, HEAD"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Headers"", ""Content-Type, Accept, X-Requested-With"");          return cresp;     } }"
"BufferedReader bufferedReader; try {     bufferedReader = request.getReader(); } catch (IllegalStateException e) {     InputStream inputStream = request.getInputStream();      // As per BalusC's comment:     String charsetName = request.getCharacterEncoding();     if (charsetName == null) {         charsetName = ""UTF-8"";     }      InputStreamReader inputStreamReader = new InputStreamReader(inputStream, charsetName);     bufferedReader = new BufferedReader(inputStreamReader); }  bufferedReader.readLine();"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"protected void onCreate(Bundle savedInstanceState) {     super.onCreate(savedInstanceState);     setContentView(R.layout.activity_main);      mainFlipper = (ViewFlipper) findViewById(R.id.flipper);     firstLayout = (LinearLayout) findViewById(R.id.layout1);     secondLayout = (LinearLayout) findViewById(R.id.layout2);       findViewById(R.id.btnPrevious).setOnClickListener(new OnClickListener() {          @Override         public void onClick(View arg0) {             showPrevious();         }     });      findViewById(R.id.btnNext).setOnClickListener(new OnClickListener() {          @Override         public void onClick(View arg0) {             showNext();         }     });  }  private void showNext() {     mainFlipper.setInAnimation(AnimationUtils.loadAnimation(this, R.anim.slide_in_left));     mainFlipper.setOutAnimation(AnimationUtils.loadAnimation(this, R.anim.slide_out_right));     flip(); }  private void showPrevious() {     mainFlipper.setInAnimation(AnimationUtils.loadAnimation(this, R.anim.slide_in_right));     mainFlipper.setOutAnimation(AnimationUtils.loadAnimation(this, R.anim.slide_out_left));     flip(); }  private void flip() {     if(isFirstVisible) {         isFirstVisible = false;         secondLayout.removeAllViews();         secondLayout.addView(getTextView(""Second""));     } else {         isFirstVisible = true;         firstLayout.removeAllViews();         firstLayout.addView(getTextView(""First""));     }     mainFlipper.showNext(); }  private TextView getTextView(String txt) {     TextView txtView = new TextView(this);     txtView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));     txtView.setText(txt);     return txtView; }"
"Button btnDownload = (Button) findViewById(R.id.DownloadView);   Button btnApp = (Button) findViewById(R.id.AppView);    btnDownload.setOnClickListener(handler);   btnApp.setOnClickListener(handler);    View.OnClickListener handler = new View.OnClickListener(){    public void onClick(View v) {      if(v==btnDownload){              // doStuff             Intent intentMain = new Intent(CurrentActivity.this ,                                             SecondActivity.class);             CurrentActivity.this.startActivity(intentMain);             Log.i(""Content "","" Main layout "");     }      if(v==btnApp){              // doStuff             Intent intentApp = new Intent(CurrentActivity.this,                                            ThirdActivity.class);              CurrentActivity.this.startActivity(intentApp);              Log.i(""Content "","" App layout "");      }    }   };"
"public &lt;S&gt; Iterable&lt;S&gt; load(Class&lt;S&gt; ifc) throws Exception {   ClassLoader ldr = Thread.currentThread().getContextClassLoader();   Enumeration&lt;URL&gt; e = ldr.getResources(""META-INF/services/"" + ifc.getName());   Collection&lt;S&gt; services = new ArrayList&lt;S&gt;();   while (e.hasMoreElements()) {     URL url = e.nextElement();     InputStream is = url.openStream();     try {       BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));       while (true) {         String line = r.readLine();         if (line == null)           break;         int comment = line.indexOf('#');         if (comment &gt;= 0)           line = line.substring(0, comment);         String name = line.trim();         if (name.length() == 0)           continue;         Class&lt;?&gt; clz = Class.forName(name, true, ldr);         Class&lt;? extends S&gt; impl = clz.asSubclass(ifc);         Constructor&lt;? extends S&gt; ctor = impl.getConstructor();         S svc = ctor.newInstance();         services.add(svc);       }     }     finally {       is.close();     }   }   return services; }"
"public void selectFromDropdown(String option) {          WebElement dobFieldDropdown;          WebElement content = driver.findElement(By.className(""leftClmn""));          driver.findElement(By.id(""aWrapper_dob_day"")).click();          dobFieldDropdown = content.findElements(By.className(""tooltipGroup"")).get(2).findElement(By.className(""day"")).findElement(By.tagName(""ul""));          HashMap&lt;String, WebElement&gt; dropdownValues = new HashMap&lt;String, WebElement&gt;();          for (WebElement el : dobFieldDropdown.findElements(By.tagName(""a""))) {             dropdownValues.put(el.getText(), el);              System.out.println(el.getText().toString());         }         dropdownValues.get(option).click();      }"
"Connection connection = DriverManager.getConnection(""URL"", ""USERNAME"", ""PASSWORD""); PreparedStatement statement = connection.prepareStatement(""select * from table""); ResultSet resultSet = statement.executeQuery();  if (resultSet != null) {     while (resultSet.next()) {         ResultSetMetaData resultSetMetaData = resultSet.getMetaData();         for (int i = 1; i &lt;= resultSetMetaData.getColumnCount(); i++) {              int type = resultSetMetaData.getColumnType(i);             if (type == Types.VARCHAR || type == Types.CHAR) {                  System.out.println(resultSet.getString(i));             } else {                  System.out.println(resultSet.getLong(i));             }         }           System.out.println(""-----------"");     } }"
"List&lt;string&gt; termSet = fieldQuery.getTermSet(fieldName);         VectorHighlightMapper tfv = new VectorHighlightMapper(termSet);             reader.GetTermFreqVector(docId, fieldName, tfv);  // &lt;-- look at this line          string[] terms = tfv.GetTerms();         foreach (String term in terms)         {             if (!termSet.Contains(term)) continue;             int index = tfv.IndexOf(term);             TermVectorOffsetInfo[] tvois = tfv.GetOffsets(index);             if (tvois == null) return; // just return to make null snippets             int[] poss = tfv.GetTermPositions(index);             if (poss == null) return; // just return to make null snippets             for (int i = 0; i &lt; tvois.Length; i++)                 termList.AddLast(new TermInfo(term, tvois[i].GetStartOffset(), tvois[i].GetEndOffset(), poss[i]));"
tabHost.setOnTabChangedListener(new OnTabChangeListener() {          public void onTabChanged(String arg0) {             for (int i = 0; i &lt; tab.getTabWidget().getChildCount(); i++) {                 tab.getTabWidget().getChildAt(i)                         .setBackgroundResource(R.drawable.tab_selected); // unselected             }             tab.getTabWidget().getChildAt(tab.getCurrentTab())                     .setBackgroundResource(R.drawable.tab_unselected); // selected          }     });
