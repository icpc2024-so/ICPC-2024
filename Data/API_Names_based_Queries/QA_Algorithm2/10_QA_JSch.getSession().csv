code
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"DescribeInstancesRequest dis = new DescribeInstancesRequest();    dis.setInstanceIds(instancesList); DescribeInstancesResult disresult = ec2.describeInstances(dis); List&lt;Reservation&gt; list = disresult.getReservations();  System.out.println(""-------------- status of instances -------------""); for (Reservation res : list) {     List &lt;Instance&gt; instancelist = res.getInstances();      for (Instance instance : instancelist) {         System.out.println(""Instance Status : "" + instance.getState().getName());         List &lt;Tag&gt; t1 = instance.getTags();         for (Tag teg : t1) {             System.out.println(""Instance Name : ""+ teg.getValue());         }     }        System.out.println(""------------------------------------------------""); }"
"public class GsonOptionalDeserializer&lt;T&gt; implements JsonSerializer&lt;Optional&lt;T&gt;&gt;, JsonDeserializer&lt;Optional&lt;T&gt;&gt; {      @Override     public Optional&lt;T&gt; deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)             throws JsonParseException {         final JsonArray asJsonArray = json.getAsJsonArray();         final JsonElement jsonElement = asJsonArray.get(0);         final T value = context.deserialize(jsonElement, ((ParameterizedType) typeOfT).getActualTypeArguments()[0]);         return Optional.fromNullable(value);     }      @Override     public JsonElement serialize(Optional&lt;T&gt; src, Type typeOfSrc, JsonSerializationContext context) {         final JsonElement element = context.serialize(src.orNull());         final JsonArray result = new JsonArray();         result.add(element);         return result;     } }"
project 1   |- common        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;common&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- util        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;util&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- domain        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;domain&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- service        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;service&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- webapps        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;webapps&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;
"NSMutableArray *arrFixedData=[[NSMutableArray alloc]initWithObjects:@""DCS"",@""DCT"",@""DCU"",@""DAG"",@""DAI"",@""DAJ"",@""DAK"",@""DCG"",@""DAQ"",@""DCA"",@""DCB"",@""DCD"",@""DCF"",@""DCH"",@""DBA"",@""DBB"",@""DBC"",@""DBD"",@""DAU"",@""DCE"",@""DAY"",@""ZWA"",@""ZWB"",@""ZWC"",@""ZWD"",@""ZWE"",@""ZWF"", nil];     NSMutableArray *arrDriverData=[[NSMutableArray alloc]initWithObjects:@""Customer Family Name"",@""Customer Given Name"",@""Name Suffix"",@""Street Address 1"",@""City"",@""Jurisdction Code"",@""Postal Code"",@""Country Identification"",@""Customer Id Number"",@""Class"",@""Restrictions"",@""Endorsements"",@""Document Discriminator"",@""Vehicle Code"",@""Expiration Date"",@""Date Of Birth"",@""Sex"",@""Issue Date"",@""Height"",@""Weight"",@""Eye Color"",@""Control Number"",@""Endorsements"",@""Transaction Types"",@""Under 18 Until"",@""Under 21 Until"",@""Revision Date"", nil];       NSMutableDictionary *dict=[[NSMutableDictionary alloc]init];     for (int i=0; i&lt;[arrFixedData count]; i++)     {         NSRange range = [message  rangeOfString: [arrFixedData objectAtIndex:i] options: NSCaseInsensitiveSearch];         NSLog(@""found: %@"", (range.location != NSNotFound) ? @""Yes"" : @""No"");         if (range.location != NSNotFound)         {             NSString *temp=[message substringFromIndex:range.location+range.length];              NSRange end = [temp rangeOfString:@""\n""];             if (end.location != NSNotFound)             {                 temp = [temp substringToIndex:end.location];                 temp =[temp stringByReplacingOccurrencesOfString:@""\n"" withString:@""""];                 temp=[temp stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];              }             NSLog(@""temp data : %@"",temp);             [dict setObject:temp forKey:[arrDriverData objectAtIndex:i]];         }     }      NSLog(@""Dictionary : %@"",dict);"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"public List&lt;PayoutDetails&gt; getPayoutDetails(AdvisorReportForm advisorReportForm) {         Criteria criteria = getSession().createCriteria(PayoutDetails.class);          if (advisorReportForm.getAdvisorId() != null &amp;&amp; advisorReportForm.getAdvisorId() &gt; 0) {             criteria.add(Restrictions.eq(""advisorId"", advisorReportForm.getAdvisorId().toString()));         }          criteria.createCriteria(""payoutHeader"")                 .add(Restrictions.between(""chequeIssuedDate"", advisorReportForm.getFromDate(), advisorReportForm.getToDate()));                  return criteria.list();     }"
"Model model = ...      model.addLiteral (subject, predicate, 10);     model.addLiteral (subject, predicate, 0.5);     model.addLiteral (subject, predicate, (float)0.5);     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(20));     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(0.99));     model.addLiteral (subject, predicate, true);     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""2012-03-11"", XSDDatatype.XSDdate));     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""P2Y"", XSDDatatype.XSDduration));"
"ComboBox accountStatusChoice = new ComboBox();  accountStatusChoice.setCaption(MessageResource.getLocalizedString(""caption.accountStatus"")); accountStatusChoice.setRequired(true); accountStatusChoice.setRequiredError(MessageResource.getLocalizedString(""error.required.accountStatus"")); accountStatusChoice.setImmediate(true);  for (AccountStatus accountStatus : AccountStatus.values()) {     accountStatusChoice.addItem(accountStatus);     accountStatusChoice.setItemCaption(accountStatus, MessageResource.getLocalizedString(accountStatus.name())); }  return accountStatusChoice;"
"net.sf.json.JSONObject obj = new net.sf.json.JSONObject(); obj.put(&quot;jsonStringValue&quot;,&quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;); obj.put(&quot;quotedJsonStringValue&quot;,&quot;\'{\&quot;hello\&quot;:\&quot;world\&quot;}\'&quot;); obj.put(&quot;naturalStringValue&quot;, &quot;\&quot;hello world\&quot;&quot;); System.out.println(obj.toString()); System.out.println(obj.getString(&quot;jsonStringValue&quot;)); System.out.println(obj.getString(&quot;quotedJsonStringValue&quot;)); System.out.println(obj.getString(&quot;naturalStringValue&quot;));"
"VariableElement parameterElement; ProcessingEnvironment processingEnv;  TypeMirror parameterType = parameterElement.asType(); Types typeUtils = processingEnv.getTypeUtils(); TypeElement typeElement = (TypeElement) typeUtils.asElement(parameterType); Elements elementUtils = processingEnv.getElementUtils() List&lt;? extends Element&gt; elementMembers = elementUtils.getAllMembers(typeElement); List&lt;ExecutableElement&gt; elementMethods = ElementFilter.methodsIn(elementMembers); for(ExecutableElement methodElement : elementMethods) {     if (methodElement.getParameters().size()==0 &amp;&amp; methodElement.getSimpleName().toString().startsWith(""get"")) {       // do something     } }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"String str = ""{"" +              ""    \""gb\"": ["" +              ""        {"" +              ""            \""omrid\"": \""gis-n\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-s\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-c\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-h\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""gis-g\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 1"" +              ""        },"" +              ""        {"" +              ""            \""omrid\"": \""hes\"","" +              ""            \""status\"": 0,"" +              ""            \""grupp\"": 2"" +              ""        }"" +              ""    ]"" +              ""}"";      JSONObject jsonObject = new JSONObject(str);      JSONArray gb = jsonObject.getJSONArray(""gb"");      for (int j = 0; j &lt; gb.length(); j++) {         JSONObject element = gb.getJSONObject(j);          int status = element.getInt(""status"");         int grupp = element.getInt(""grupp"");         String omrid = element.getString(""omrid"");          System.out.println(""status="" + status + ""; grupp="" + grupp + ""; omrid="" + omrid);  //create togglebutton here     }"
"public &lt;E&gt; List&lt;List&lt;E&gt;&gt; generatePerm(List&lt;E&gt; original) {      if (original.isEmpty()) {        List&lt;List&lt;E&gt;&gt; result = new ArrayList&lt;&gt;();         result.add(new ArrayList&lt;&gt;());         return result;       }      E firstElement = original.remove(0);      List&lt;List&lt;E&gt;&gt; returnValue = new ArrayList&lt;&gt;();      List&lt;List&lt;E&gt;&gt; permutations = generatePerm(original);      for (List&lt;E&gt; smallerPermutated : permutations) {        for (int index=0; index &lt;= smallerPermutated.size(); index++) {          List&lt;E&gt; temp = new ArrayList&lt;&gt;(smallerPermutated);          temp.add(index, firstElement);          returnValue.add(temp);        }      }      return returnValue;    }"
"protected IResourceInfo getResourceInfo(ITranslationUnit translationUnit, ICProjectDescription prjDescription) {      ICProject cProject = translationUnit.getCProject();     if (cProject != null) {         ICConfigurationDescription cfgDescription = prjDescription.getActiveConfiguration();         IConfiguration configuration = ManagedBuildManager.getConfigurationForDescription(cfgDescription);         IPath projectPath = translationUnit.getResource().getProjectRelativePath();          IResourceInfo ri = configuration.getResourceInfo(projectPath, true);          if (ri == null) {              ri = configuration.createFileInfo(projectPath);         }          return ri;     }      return null; }"
"interface DistributionProvider&lt;D extends Distribution&gt; {   D create(ValueRange vr); }  class UniformDistributionProvider implements DistributionProvider&lt;UniformDistribution&gt; {   UniformDistribution create(ValueRange vr) {     return new UniformDistribution(vr);   } }  class ForwardMarkovDistributionProvider implements DistributionProvider&lt;ForwardMarkovDistribution&gt; {    private final MarkovDistribution.Parameters params;    ForwardMarkovDistributionProvider(MarkovDistribution.Parameters pParams) {     params = pParams;   }    ForwardMarkovDistribution create(ValueRange vr) {     return new ForwardMarkovDistribution(vr, params);   } }  // etc."
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"const char* GetIDJni() {      JniMethodInfo t;          if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, ""GetIDJni"", ""()Ljava/lang/String;"")) {             jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID);             t.env-&gt;DeleteLocalRef(t.classID);             CCString *ret = new CCString(JniHelper::jstring2string(str).c_str());             ret-&gt;autorelease();             t.env-&gt;DeleteLocalRef(str);              return ret-&gt;m_sString.c_str();         }          return 0;     }"
"JComponent     title = ((BasicInternalFrameUI)myInternalFrame.getUI()).getNorthPane();     for (int i = 0; i &lt; title.getComponentCount(); i++) {         JComponent component = (JComponent)title.getComponent(i);         if(component instanceof JButton) {             JButton button = ((JButton)component);             if(button.getName() == null) continue;             if(button.getName().endsWith(""closeButton"")) {                 button.setIcon(myIcon);                 button.setSelectedIcon(myIcon);                 button.setPressedIcon(myIcon);             }             if(button.getName().endsWith(""maximizeButton"")) {                 ...             }             if(button.getName().endsWith(""iconifyButton"")) {                 ...             }         }     }"
"String s = ""&lt;html&gt;&lt;div style=\""text-align:center;\""&gt;&lt;b&gt;first&lt;/b&gt;&lt;br&gt;&lt;i&gt;Aula: &lt;/i&gt;&lt;b&gt;second&lt;/b&gt;&lt;/div&gt;&lt;/html&gt;""; int start = s.indexOf(""&lt;b&gt;""); int end = s.indexOf(""&lt;/b&gt;""); String firstMatch = s.substring(start + ""&lt;b&gt;"".length(), end);  //now we can start looking for next `&lt;b&gt;` after position where we found `&lt;/b&gt;` start = s.indexOf(""&lt;b&gt;"", end); //and look for &lt;/b&gt; after position that we found latest &lt;b&gt; end = s.indexOf(""&lt;/b&gt;"", start); String secondMatch = s.substring(start + ""&lt;b&gt;"".length(), end);  System.out.println(firstMatch); System.out.println(secondMatch);"
"ShapeDrawable sd1 = new ShapeDrawable(new RectShape());                         sd1.getPaint().setColor(CommonUtilities.color);                         sd1.getPaint().setStyle(Style.STROKE);                         sd1.getPaint().setStrokeWidth(CommonUtilities.stroke);                         sd1.setPadding(15, 10, 15, 10);                          sd1.getPaint().setPathEffect(                                 new CornerPathEffect(CommonUtilities.corner));                         ln_back.setBackgroundDrawable(sd1);"
"Criteria criteria =      getSession()         .createCriteria(SaleRecord.class)         .add(Restrictions.between(""date"",                                    reportForm.getFromDate(),                                    reportForm.getToDate()));          .setProjection(Projections.projectionList()             .add(Projections.property(""type""), ""accountName"")             .add(Projections.sum(""amount""))             .add(Projections.groupProperty(""type"")));         .setResultTransformer(Transformers.aliasToBean(CollectionDO.class)) return (List&lt;CollectionDO&gt;) criteria.list();"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"package example;         if (low != mid &amp;&amp; mid != high) {         for (int i = 0; i &lt;= mid; i++) {             if ( ! Determinate.isPointLeftSide(a, auxiliaryListTwo.get(i), auxiliaryListTwo.get(i + 1))) {                 p = auxiliaryListTwo.get(i);              } else {                 if ( Determinate.isPointRightSide(a, auxiliaryListTwo.get(i + 1), auxiliaryListTwo.get(i)) &amp;&amp; Determinate.isPointRightSide(a, auxiliaryListTwo.get(i + 1), b) ) {                     p = auxiliaryList.get(i + 1);                 }                 else{                     i++;                 }             }         }     }"
"String mStr="""";  mStr=mStr.concat(""&lt;body &gt;""); mStr=mStr.concat(""&lt;tr&gt;&lt;td align='center'&gt;&lt;b&gt;orderno&lt;/b&gt;&lt;/td&gt;&lt;td align='center'&gt;&lt;b&gt;productid&lt;/b&gt;&lt;/td&gt;&lt;td align='center'&gt;&lt;b&gt;productqty&lt;/b&gt;&lt;/td&gt; &lt;td align='center'&gt;&lt;b&gt;custid&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;"");  dbadapter.open(); Cursor cursor=dbadapter.fetchordersdata(custid); cursor.moveToFirst(); while(!cursor.isAfterLast())             { mStr=mStr.concat(""&lt;tr&gt;&lt;td&gt;""+(cursor.getString(cursor.getColumnIndex(""col1"")))+""&lt;/td&gt;&lt;td&gt;""+(cursor.getString(cursor.getColumnIndex(""col2"")))+""&lt;/td&gt; &lt;td&gt;""+(cursor.getString(cursor.getColumnIndex(""col3"")))+""&lt;/td&gt; &lt;td&gt;""+(cursor.getString(cursor.getColumnIndex(""col4"")))+""&lt;/td&gt;&lt;/tr&gt;"");     cursor.moveToNext(); }     mStr.concat(""&lt;/table&gt;&lt;/body&gt;"");"
"Criteria criteria = hibernetSession.createCriteria(WishList.class); criteria.createAlias(""item"", ""itemAlias"") .setProjection(Projections.projectionList() .add(Projections.property(""id""),""id"") .add(Projections.property(""itemAlias.id""),""itemAlias.id"") .add(Projections.property(""itemAlias.productCategory""),""itemAlias.productCategory"") .add(Projections.property(""itemAlias.productName""),""itemAlias.productName"") .add(Projections.groupProperty(""itemAlias.productName""))) .setResultTransformer(Transformers.aliasToBean(WishList.class)); List&lt;WishList&gt; itemList = criteria.list();"
interface ItemRequestConverter&lt;IR extends ItemRequest&gt;{} interface ItemRequest{} interface ItemRequestConverterFactory  {     public &lt;IR extends ItemRequest&gt; ItemRequestConverter&lt;IR&gt; newInstance(Class&lt;IR&gt; itemRequestClass); } class CreatePartRequestConverter&lt;IR extends ItemRequest&gt; implements ItemRequestConverter&lt;IR&gt; { }  class DefaultItemRequestConverterFactory implements ItemRequestConverterFactory  {      @Override     public &lt;IR extends ItemRequest&gt; ItemRequestConverter&lt;IR&gt; newInstance(Class&lt;IR&gt; itemRequestClass)      {         // Does not make sense: Comparing ItemRequest class with something         // that is probably an implementation of ItemRequestConverter         if (itemRequestClass.equals(CreatePartRequestConverter.class))         {             return new CreatePartRequestConverter&lt;IR&gt;();         }         return null;     } }
"bool Bounds::IntersectsBounds(const Bounds &amp;other) const {     return !(min.x &gt; other.max.x || max.x &lt; other.min.x              || min.y &gt; other.max.y || max.y &lt; other.min.y); }  bool Bounds::Intersection(const Bounds &amp;other, Bounds &amp;outBounds) const {     if (!this-&gt;IntersectsBounds(other)) {         return false;     }      outBounds.min.x = std::max(min.x, other.min.x);     outBounds.min.y = std::max(min.y, other.min.y);     outBounds.max.x = std::min(max.x, other.max.x);     outBounds.max.y = std::min(max.y, other.max.y);       return true; }"
