code
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"public aspect ValidationAspect {      pointcut serviceMethodCall() : execution(public * com.yourcompany.**.*(..));      Object around(final Object[] args) : serviceMethodCall() &amp;&amp; args(args){         Signature signature = thisJoinPointStaticPart.getSignature();         if(signature instanceof MethodSignature){             MethodSignature ms = (MethodSignature) signature;             Method method = ms.getMethod();             Annotation[][] parameterAnnotations =                  method.getParameterAnnotations();             String[] parameterNames = ms.getParameterNames();             for(int i = 0; i &lt; parameterAnnotations.length; i++){                 Annotation[] annotations = parameterAnnotations[i];                 validateParameter(parameterNames[i], args[i],annotations);             }         }         return proceed(args);     }      private void validateParameter(String paramName, Object object,         Annotation[] annotations){          // validate object against the annotations         // throw a RuntimeException if validation fails     }  }"
"package com.mobinet.snmp;  import org.snmp4j.CommunityTarget; import org.snmp4j.PDU; import org.snmp4j.Snmp; import org.snmp4j.TransportMapping; import org.snmp4j.event.ResponseEvent; import org.snmp4j.mp.SnmpConstants; import org.snmp4j.smi.Address; import org.snmp4j.smi.GenericAddress; import org.snmp4j.smi.Integer32; import org.snmp4j.smi.OID; import org.snmp4j.smi.OctetString; import org.snmp4j.smi.VariableBinding; import org.snmp4j.transport.DefaultTcpTransportMapping;  /**  *  * @author batbayar  */ public class SnmpTest {     private String address = ""192.168.1.254/161""; // switch address and snmp port     private String writeCommunity = ""myCommunityWrite""; // write community name      private Snmp snmp;     private CommunityTarget target;      public SnmpTest() {         try {             TransportMapping transport = new DefaultTcpTransportMapping();             snmp = new Snmp(transport);              Address targetAddress = GenericAddress.parse(address);             target = new CommunityTarget();             target.setCommunity(new OctetString(writeCommunity));             target.setAddress(targetAddress);             target.setRetries(2);             target.setTimeout(1500);             target.setVersion(SnmpConstants.version2c);              PDU command = new PDU();             command.setType(PDU.SET);             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.1""), new Integer32(2))); // port 1 down             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.6""), new Integer32(1))); // port 6 up             ResponseEvent response = snmp.send(command, target);             System.out.println(""response: "" + response);         } catch(Exception e) {             e.printStackTrace();         }     }      public static void main(String[] args) {         SnmpTest test = new SnmpTest();     } }"
"if (req.getRequestURI().equals(""/twitter"")) {     Token requestToken = service.getRequestToken();     System.out.println(""Got the Request Token!"" + requestToken.getToken());     session = request.getSession(true);     session.setAttribute(""TOKEN"", requestToken);     response.sendRedirect(service.getAuthorizationUrl(requestToken)); } else if (req.getRequestURI().equals(""/twitter/callback"")) {     String code = request.getParameter(""oauth_verifier"");     System.out.println(""Verifier :: "" + code);     System.out.println(""service.getRequestToken()"" + service.getRequestToken());     session = request.getSession(false);     Token requestToken = (Token) session.getAttribute(""TOKEN"");     System.out.println(""requestToken from Session "" + service.getRequestToken().getToken() + "" Secr"" + service.getRequestToken().getSecret());      if (code != null &amp;&amp; !code.isEmpty()) {         Verifier verifier = new Verifier(code);         Token accessToken = service.getAccessToken(requestToken, verifier);         OAuthRequest req = new OAuthRequest(Verb.GET, OAUTH_PROTECTED_URL);         service.signRequest(accessToken, req);         Response res = req.send();         response.setContentType(""text/plain"");         response.getWriter().println(res.getBody());     } }"
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
"final List&lt;Pane&gt; panes = new ArrayList&lt;Pane&gt;();      button1.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent e) {              BorderPane myborderpane = new BorderPane();              //adding             panes.add(myborderpane);              splitPane.getItems().addAll(myborderpane);              ObservableList&lt;SplitPane.Divider&gt; splitDiv = splitPane.getDividers();              System.out.println(""splitDiv.size() "" + splitDiv.size());              percSplit = 1 / (double) (splitDiv.size() + 1);             for (int i = 0; i &lt; splitDiv.size(); i++) {                 System.out.println(""i "" + i + "" percSplit "" + percSplit);                 splitPane.setDividerPosition(i, percSplit);                 percSplit += 1 / (double) (splitDiv.size() + 1);             }         }     });      button2.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent t) {             if (panes.size() &gt; 0) {                 // removing from both list and splitPane childs                 Pane toDelete = panes.remove(0);                 splitPane.getItems().remove(toDelete);             }         }     });"
"protected IResourceInfo getResourceInfo(ITranslationUnit translationUnit, ICProjectDescription prjDescription) {      ICProject cProject = translationUnit.getCProject();     if (cProject != null) {         ICConfigurationDescription cfgDescription = prjDescription.getActiveConfiguration();         IConfiguration configuration = ManagedBuildManager.getConfigurationForDescription(cfgDescription);         IPath projectPath = translationUnit.getResource().getProjectRelativePath();          IResourceInfo ri = configuration.getResourceInfo(projectPath, true);          if (ri == null) {              ri = configuration.createFileInfo(projectPath);         }          return ri;     }      return null; }"
"public static Result feedComments(String feedUrl) {   return async(     WS.url(feedUrl).get().flatMap(       new Function&lt;WS.Response, Promise&lt;Result&gt;&gt;() {         public Promise&lt;Result&gt; apply(WS.Response response) {           return WS.url(response.asJson().findPath(""commentsUrl"").get().map(             new Function&lt;WS.Response, Result&gt;() {               public Result apply(WS.Response response) {                 return ok(""Number of comments: "" + response.asJson().findPath(""count""));               }             }           );         }       }     )   ); }"
"mIntentFilter = new IntentFilter();   mIntentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);   mIntentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);   mIntentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);   mIntentFilter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);   registerReceiver(mReceiver, mIntentFilter);     public void onReceive(Context context, Intent intent)    {     String action  = intent.getAction();     if(action.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION))     {     }else if(action.equals(WifiManager.WIFI_STATE_CHANGED_ACTION))     {      int iTemp = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE,        WifiManager.WIFI_STATE_UNKNOWN);      LogUtil.d(LOG_SET, ""+++++++-----------wifiStateReceiver------+++++++"", DEBUG);      checkState(iTemp);     }else if(action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION))     {      DetailedState state =WifiInfo.getDetailedStateOf((SupplicantState)      intent.getParcelableExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED));      changeState(state);      LogUtil.d(LOG_SET, ""------------&gt;&gt;&gt;&gt;SUPPLICANT_STATE_CHANGED_ACTION&lt;&lt;&lt;&lt;&lt;&lt;-------"", DEBUG);     }     else if(action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION))     {         DetailedState state=        ((NetworkInfo)intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO)).getDetailedState();        changeState(state);      }    }    private void changeState(DetailedState aState)     {      LogUtil.d(LOG_SET, ""&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;changeState&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;""+aState, DEBUG);    if (aState == DetailedState.SCANNING)    {    Log.d(""wifiSupplicanState"", ""SCANNING"");    }    else if (aState == DetailedState.CONNECTING)    {    Log.d(""wifiSupplicanState"", ""CONNECTING"");    }else if(aState == DetailedState.OBTAINING_IPADDR)    {    Log.d(""wifiSupplicanState"", ""OBTAINING_IPADDR"");    }    else if (aState == DetailedState.CONNECTED)    {    Log.d(""wifiSupplicanState"", ""CONNECTED"");    }    else if (aState == DetailedState.DISCONNECTING)    {     Log.d(""wifiSupplicanState"", ""DISCONNECTING"");    }    else if (aState == DetailedState.DISCONNECTED)    {     Log.d(""wifiSupplicanState"", ""DISCONNECTTED"");    }    else if (aState == DetailedState.FAILED)    {    }   }    public void checkState(int aInt)   {    LogUtil.d(LOG_SET,""==&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;checkState&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;""+aInt, DEBUG);    if (aInt == WifiManager.WIFI_STATE_ENABLING)     {     Log.d(""WifiManager"", ""WIFI_STATE_ENABLING"");     }    else if (aInt== WifiManager.WIFI_STATE_ENABLED)    {    Log.d(""WifiManager"", ""WIFI_STATE_ENABLED"");     }     else if (aInt == WifiManager.WIFI_STATE_DISABLING)     {     Log.d(""WifiManager"", ""WIFI_STATE_DISABLING"");     }     else if (aInt == WifiManager.WIFI_STATE_DISABLED)     {     Log.d(""WifiManager"", ""WIFI_STATE_DISABLED"");     }   }"
"HttpClient createClient() {     HttpParams params = new BasicHttpParams();     params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);     params.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, HTTP.DEFAULT_CONTENT_CHARSET);     params.setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true);     params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 30 * 1000);     params.setParameter(CoreConnectionPNames.SO_TIMEOUT, 30 * 1000);      SchemeRegistry schReg = new SchemeRegistry();     schReg.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));     schReg.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));     ClientConnectionManager conMgr = new ThreadSafeClientConnManager(params, schReg);      return new DefaultHttpClient(conMgr, params); }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"var   PM: JPackageManager;   mainIntent: JIntent;   LaunchIntent: JIntent;   pkgAppsList: JList;   ri: JResolveInfo;   iter: JIterator;   midlist := TStringList; begin   PM := SharedActivityContext.getPackageManager;   mainIntent := TJIntent.JavaClass.init(TJIntent.JavaClass.ACTION_MAIN, nil);   mainIntent.addCategory(TJIntent.JavaClass.CATEGORY_LAUNCHER);   pkgAppsList := PM.queryIntentActivities(mainIntent, 0);   midlist := TStringList;   iter := pkgAppsList.iterator;   while iter.hasNext do   begin     ri := TJResolveInfo.Wrap((iter.next as ILocalObject).GetObjectID);     mIdList.Add(ri.activityInfo.applicationInfo.packageName);   end;   LaunchIntent := PM.getLaunchIntentForPackage(mIdList[2]);   SharedActivityContext.startActivity( LaunchIntent ) end;"
"try {         String insertTableSQL = ""INSERT INTO DBUSER""+ ""fcltyName,CommunicationOral,Communicationwritten,Leadership,AnalyticalAbilities,Interpersonalskills,DecisionMakingSkills,SelfConfidence,Creativity,Punctualityregularity,GeneralAwareness,Commitment,HardWork) VALUES""+ ""(?,?,?,?,?,?,?,?,?,?,?,?,?)"";          dbConnection = getDBConnection();         preparedStatement = dbConnection.prepareStatement(insertTableSQL);          preparedStatement.setStringt(1, fcltyName);         preparedStatement.setInt(2, 0);         preparedStatement.setInt(3, 0);         preparedStatement.setInt(4,0);         preparedStatement.setInt(5, 0);         preparedStatement.setInt(6, 0);         preparedStatement.setInt(7,0);         preparedStatement.setInt(8, 0);         preparedStatement.setInt(9, 0);         preparedStatement.setInt(10,0);         preparedStatement.setInt(11, 0);         preparedStatement.setInt(12, 0);         preparedStatement.setInt(13,0);          // execute insert SQL stetement         preparedStatement.executeUpdate();}'"
"HikariConfig config = new HikariConfig(); config.setMinimumIdle(1); config.setMaximumPoolSize(2); config.setInitializationFailFast(true); config.setConnectionTestQuery(""VALUES 1""); config.setDataSourceClassName(""com.mysql.jdbc.jdbc2.optional.MysqlDataSource""); config.addDataSourceProperty(""serverName"", ""localhost""); config.addDataSourceProperty(""port"", ""3306""); config.addDataSourceProperty(""databaseName"", ""webapp""); config.addDataSourceProperty(""user"", ""webapp""); config.addDataSourceProperty(""password"", ""password"");"
"final SearchResponse response = client.prepareSearch(indexName)             .setSearchType(SearchType.DFS_QUERY_THEN_FETCH)             .setTypes(FEED_TYPE)             .setQuery(queryString(query).field(""title"").field(""description"").field(""keywords""))             .addHighlightedField(""title"", 0, 0)             .addHighlightedField(""description"", 0, 0)             .addFields(""title"", ""description"", ""url"", ""iconUrl"", ""keywords"")             .setSize(size)             .setFrom(start)             .execute().actionGet();"
"package com.spmsoftware.plugin.listeners;  import com.atlassian.event.api.EventListener; import com.atlassian.event.api.EventPublisher; import com.atlassian.jira.component.ComponentAccessor; import com.atlassian.jira.event.issue.IssueEvent; import com.atlassian.jira.event.type.EventType; import com.atlassian.jira.issue.Issue; import com.atlassian.jira.issue.MutableIssue; import com.atlassian.jira.issue.customfields.manager.OptionsManager; import com.atlassian.jira.issue.customfields.option.Option; import com.atlassian.jira.issue.customfields.option.Options; import com.atlassian.jira.issue.fields.CustomField; import com.atlassian.jira.issue.fields.config.FieldConfig; import com.atlassian.jira.issue.fields.config.FieldConfigScheme; import org.apache.log4j.Logger; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean;  import java.util.List; import java.util.Map;  /**  * User: adnan  * Date: 5/4/14  * Time: 4:49 PM  */ public class IssueUpdateListener  implements InitializingBean, DisposableBean {      private static final Logger LOGGER = Logger.getLogger(IssueUpdateListener.class);      private final EventPublisher eventPublisher;    // private final JiraAuthenticationContext authenticationContext;      public IssueUpdateListener(EventPublisher eventPublisher) {         this.eventPublisher = eventPublisher;        // this.authenticationContext = ComponentAccessor.getJiraAuthenticationContext();     }      @Override     public void afterPropertiesSet() throws Exception {         eventPublisher.register(this);     }      @Override     public void destroy() throws Exception {         eventPublisher.unregister(this);     }      @EventListener     public void onIssueEvent(IssueEvent issueEvent) {         Long eventTypeId = issueEvent.getEventTypeId();         Issue issue = issueEvent.getIssue();         if (eventTypeId.equals(EventType.ISSUE_RESOLVED_ID)) {             MutableIssue mutableIssue = getMutableIssue(issue);             CustomField customerNameCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""Customer Name"");             CustomField allCustomersCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""All Customers"");             Object customerNameVal = mutableIssue.getCustomFieldValue(customerNameCF);             Option newOptions = addOptionToCustomField(allCustomersCF, customerNameVal.toString());             LOGGER.info(""New updated option {}"" + newOptions);         }     }      private MutableIssue getMutableIssue(Issue issue) {         MutableIssue mutableIssue;         if (issue instanceof MutableIssue)   {             mutableIssue = (MutableIssue)issue;         } else {             mutableIssue = ComponentAccessor.getIssueManager().getIssueObject(issue.getKey());         }         return mutableIssue;     }       public Option addOptionToCustomField(CustomField customField, String value) {         Option newOption = null;         if (customField != null) {             List&lt;FieldConfigScheme&gt; schemes = customField.getConfigurationSchemes();             if (schemes != null &amp;&amp; !schemes.isEmpty()) {                 FieldConfigScheme sc = schemes.get(0);                 Map configs = sc.getConfigsByConfig();                 if (configs != null &amp;&amp; !configs.isEmpty()) {                     FieldConfig config = (FieldConfig) configs.keySet().iterator().next();                     OptionsManager optionsManager = ComponentAccessor.getOptionsManager();                     Options l = optionsManager.getOptions(config);                     int nextSequence = l.isEmpty() ? 1 : l.getRootOptions().size() + 1;                     newOption = optionsManager.createOption(config, null, (long) nextSequence, value);                 }             }         }          return newOption;     }  }"
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"ComboBox accountStatusChoice = new ComboBox();  accountStatusChoice.setCaption(MessageResource.getLocalizedString(""caption.accountStatus"")); accountStatusChoice.setRequired(true); accountStatusChoice.setRequiredError(MessageResource.getLocalizedString(""error.required.accountStatus"")); accountStatusChoice.setImmediate(true);  for (AccountStatus accountStatus : AccountStatus.values()) {     accountStatusChoice.addItem(accountStatus);     accountStatusChoice.setItemCaption(accountStatus, MessageResource.getLocalizedString(accountStatus.name())); }  return accountStatusChoice;"
"PGPSignatureGenerator sGen = new PGPSignatureGenerator(new JcaPGPContentSignerBuilder(skey.getPublicKey().getAlgorithm(), PGPUtil.SHA256).setProvider(""BC""));         PGPSignatureSubpacketGenerator  spGen = new PGPSignatureSubpacketGenerator();          sGen.init(PGPSignature.CANONICAL_TEXT_DOCUMENT, prKey);         Iterator userIDs = skey.getPublicKey().getUserIDs();         if (it.hasNext()) {             spGen.setSignerUserID(false, (String)userIDs.next());             sGen.setHashedSubpackets(spGen.generate());         }          ArmoredOutputStream aos = new ArmoredOutputStream(baos);         aos.beginClearText(PGPUtil.SHA256);          sGen.update(dataBytes);         aos.write(dataBytes);          aos.endClearText();          BCPGOutputStream bOut = new BCPGOutputStream(aos);         sGen.generate().encode(bOut);          aos.flush();         aos.close();"
"for (Task tempTask : TasksListAppObj.getInstance().tasksRepository.getTasksRepository())                 {                     LatLng latlng = new LatLng(tempTask.getLatitude(), tempTask.getLongtitude());                     if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_WAITING))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_blue)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_IN_PROGRESS))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_bordo)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_ON_THE_WAY))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_turkiz)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_COMPLETE))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_orange)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_FAILED))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_purpul)));                     } }"
"DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); DocumentBuilder db = dbf.newDocumentBuilder(); Document dom = db.parse(is); NodeList contacts = dom.getElementsByTagName(""Contact""); for(int i = 0; i &lt; contacts.getLength(); i++) {     Element contact = (Element) contacts.item(i);     String contactNumber = contact.getAttribute(""Number"");     if(contactNumber.equals(somenumber)) {         Element newMessage = dom.createElement(""Message"");         // Configure the message element         contact.appendChild(newMessage);     } }"
"String newtype_mod=""""; String newcontent_mod="""";  if ((object.has(""message"")))  {      JSONObject message = object.getJSONObject(""message"");      newtype_mod = object.getJSONObject(""message"")                         .getString(""type"");      newcontent_mod = object.getJSONObject(""message"")                      .getString(""content"");      objSample = new GetSetMethod();      objSample.setnewcontent_mod(newcontent_mod);              objSample.setnewtype_mod(newtype_mod);      Log.v(""##""+newcontent_mod,""V ""+newtype_mod); }"
