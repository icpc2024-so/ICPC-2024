code
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
"String query = ""env.adapterName=DefaultAdapter""     + ""&amp;env.systemName=DefaultSystem""     + ""&amp;env.userId=admin""     + ""&amp;env.progId=PerlHttpTest"";     + ""&amp;"" + URLEncoder.encode(interopApiName, ""UTF-8"") + ""="" + URLEncoder.encode(apiName, ""UTF-8"")     + ""&amp;"" + URLEncoder.encode(interopApiData, ""UTF-8"") + ""="" + URLEncoder.encode(xmlData, ""UTF-8"");  URLConnection connection = new URL(""http://hostname/interop/InteropHttpServlet"").openConnection(); connection.setDoOutput(true); // Triggers POST. connection.getOutputStream().write(query.getBytes(""UTF-8""));  InputStream response = connection.getInputStream(); // ..."
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
"public &lt;S&gt; Iterable&lt;S&gt; load(Class&lt;S&gt; ifc) throws Exception {   ClassLoader ldr = Thread.currentThread().getContextClassLoader();   Enumeration&lt;URL&gt; e = ldr.getResources(""META-INF/services/"" + ifc.getName());   Collection&lt;S&gt; services = new ArrayList&lt;S&gt;();   while (e.hasMoreElements()) {     URL url = e.nextElement();     InputStream is = url.openStream();     try {       BufferedReader r = new BufferedReader(new InputStreamReader(is, ""UTF-8""));       while (true) {         String line = r.readLine();         if (line == null)           break;         int comment = line.indexOf('#');         if (comment &gt;= 0)           line = line.substring(0, comment);         String name = line.trim();         if (name.length() == 0)           continue;         Class&lt;?&gt; clz = Class.forName(name, true, ldr);         Class&lt;? extends S&gt; impl = clz.asSubclass(ifc);         Constructor&lt;? extends S&gt; ctor = impl.getConstructor();         S svc = ctor.newInstance();         services.add(svc);       }     }     finally {       is.close();     }   }   return services; }"
"OperatingSystemMXBean operatingSystemMXBean =      ManagementFactory.getOperatingSystemMXBean();  for (Method method: operatingSystemMXBean.getClass ().getMethods ())  {     method.setAccessible (true);     String methodName = method.getName ();     if (methodName.startsWith (""get"")         &amp;&amp; Modifier.isPublic (method.getModifiers ())         &amp;&amp; OperatingSystemMXBean.class.isAssignableFrom (             method.getDeclaringClass ())) {         try         {             System.out.println (                 methodName.substring (3) + "": "" +                  method.invoke (operatingSystemMXBean));         }         catch (Throwable ex)         {             // Ignore         }     } }"
"String hostName = InetAddress.getLocalHost().getHostName();  InetAddress addrs[] = InetAddress.getAllByName(hostName);  String myIp = ""UNKNOWN""; for (InetAddress addr: addrs) {   System.out.println (""addr.getHostAddress() = "" + addr.getHostAddress());   System.out.println (""addr.getHostName() = "" + addr.getHostName());   System.out.println (""addr.isAnyLocalAddress() = "" + addr.isAnyLocalAddress());   System.out.println (""addr.isLinkLocalAddress() = "" + addr.isLinkLocalAddress());   System.out.println (""addr.isLoopbackAddress() = "" + addr.isLoopbackAddress());   System.out.println (""addr.isMulticastAddress() = "" + addr.isMulticastAddress());   System.out.println (""addr.isSiteLocalAddress() = "" + addr.isSiteLocalAddress());   System.out.println ("""");    if (!addr.isLoopbackAddress() &amp;&amp; addr.isSiteLocalAddress()) {     myIp = addr.getHostAddress();   } }"
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"jstring string; string = env-&gt;NewStringUTF(item-&gt;get_id().c_str()); env-&gt;SetObjectArrayElement( data,0,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_number().c_str()); env-&gt;SetObjectArrayElement( data,1,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_fullname().c_str()); env-&gt;SetObjectArrayElement( data,2,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_mf().c_str()); env-&gt;SetObjectArrayElement( data,3,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_dob().c_str()); env-&gt;SetObjectArrayElement( data,4,string); env-&gt;DeleteLocalRef(string); env-&gt;CallVoidMethod(dao, jsaveItem, data, jtype);"
"List&lt;GarbageCollectorMXBean&gt; gcList = ManagementFactory.getGarbageCollectorMXBeans();     for(GarbageCollectorMXBean tmpGC : gcList){          System.out.println(""\nName: "" + tmpGC.getName());         System.out.println(""Collection count: "" + tmpGC.getCollectionCount());         System.out.println(""Collection time: "" + tmpGC.getCollectionTime());         System.out.println(""Memory Pools: "");          String[] memoryPoolNames = tmpGC.getMemoryPoolNames();         for(String mpnTmp : memoryPoolNames){             System.out.println(""\t"" + mpnTmp);         }      }      System.out.println( ""Memory Pools Info"" );     List&lt;MemoryPoolMXBean&gt; memoryList = ManagementFactory.getMemoryPoolMXBeans();     for(MemoryPoolMXBean tmpMem : memoryList){          System.out.println(""\nName: "" + tmpMem.getName());         System.out.println(""Usage: "" + tmpMem.getUsage());         System.out.println(""Collection Usage: "" + tmpMem.getCollectionUsage());         System.out.println(""Peak Usage: "" + tmpMem.getPeakUsage());         System.out.println(""Type: "" + tmpMem.getType());         System.out.println(""Memory Manager Names: "") ;          String[] memManagerNames = tmpMem.getMemoryManagerNames();         for(String mmnTmp : memManagerNames){             System.out.println(""\t"" + mmnTmp);         }         System.out.println(""\n"");     }      MemoryUsage mu =ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();     MemoryUsage muNH =ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();     System.out.println(             ""Init :""+mu.getInit()+             ""\nMax :""+mu.getMax()+             ""\nUsed :""+mu.getUsed()+             ""\nCommited :""+mu.getCommitted()+             ""\nInit NH :""+muNH.getInit()+             ""\nMax NH :""+muNH.getMax()+             ""\nUsed NH:""+muNH.getUsed()+             ""\nCommited NH:""+muNH.getCommitted());"
"protected IResourceInfo getResourceInfo(ITranslationUnit translationUnit, ICProjectDescription prjDescription) {      ICProject cProject = translationUnit.getCProject();     if (cProject != null) {         ICConfigurationDescription cfgDescription = prjDescription.getActiveConfiguration();         IConfiguration configuration = ManagedBuildManager.getConfigurationForDescription(cfgDescription);         IPath projectPath = translationUnit.getResource().getProjectRelativePath();          IResourceInfo ri = configuration.getResourceInfo(projectPath, true);          if (ri == null) {              ri = configuration.createFileInfo(projectPath);         }          return ri;     }      return null; }"
"Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.image);  RelativeLayout layout = (RelativeLayout) findViewById(R.id.layout); LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(         LinearLayout.LayoutParams.FILL_PARENT,          LinearLayout.LayoutParams.WRAP_CONTENT);  imageView = new ImageView(this); imageView.setLayoutParams(params); imageView.setImageBitmap(bitmap);  layout.setGravity(Gravity.CENTER_VERTICAL | Gravity.TOP); layout.addView(imageView);"
"public void selectFromDropdown(String option) {          WebElement dobFieldDropdown;          WebElement content = driver.findElement(By.className(""leftClmn""));          driver.findElement(By.id(""aWrapper_dob_day"")).click();          dobFieldDropdown = content.findElements(By.className(""tooltipGroup"")).get(2).findElement(By.className(""day"")).findElement(By.tagName(""ul""));          HashMap&lt;String, WebElement&gt; dropdownValues = new HashMap&lt;String, WebElement&gt;();          for (WebElement el : dobFieldDropdown.findElements(By.tagName(""a""))) {             dropdownValues.put(el.getText(), el);              System.out.println(el.getText().toString());         }         dropdownValues.get(option).click();      }"
"String sqlQuery = ""SELECT kompetence.kompetence_odlisujici_subcategories.nazev as odlisujici_nazev, tolerovana, zadana, aktualni ""+                 ""FROM IPR.kompetence_odlisujici, kompetence.kompetence_odlisujici_subcategories ""+                 ""WHERE IPR.kompetence_odlisujici.os_cislo_zamestnanec = ? AND tolerovana &lt;&gt; 0 AND zadana &lt;&gt; 0 AND aktualni &lt;&gt; 0 AND year = ? AND IPR.kompetence_odlisujici.active = 1 ""+                 ""AND kompetence.kompetence_odlisujici_subcategories.id = IPR.kompetence_odlisujici.id_odlisujici_subcategory"";"
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"while (it.hasNext()) {     SelectionKey key = (SelectionKey )it.next();     if (key.isReadable()) {         System.out.println(""It's readable!"");          // Added read operation         ByteBuffer buffer = ByteBuffer.allocate(1024);         Charset charset = Charset.forName(""UTF-8"");         buffer.clear();         if (socketChannel.read(buffer) &lt; 0) {             // Client connection refused             socketChannel.close();             return;         }         buffer.flip();         System.out.println(""Value = "" + charset.decode(buffer).toString());      }     it.remove(); }"
"public Bitmap getBitmapFromView(RelativeLayout v) {         v.setLayoutParams(new LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT));         v.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));         v.layout(0, 0, v.getMeasuredWidth(), v.getMeasuredHeight());         Bitmap b = Bitmap.createBitmap(v.getMeasuredWidth(), v.getMeasuredHeight(), Bitmap.Config.ARGB_8888);          Canvas c = new Canvas(b);         v.draw(c);         return b;     }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"DiffFormatter formatter = new DiffFormatter( System.out ); formatter.setRepository( git.getRepository() ); AbstractTreeIterator commitTreeIterator = prepareTreeParser( git.getRepository(),  Constants.HEAD ); FileTreeIterator workTreeIterator = new FileTreeIterator( git.getRepository() ); List&lt;DiffEntry&gt; diffEntries = formatter.scan( commitTreeIterator, workTreeIterator );  for( DiffEntry entry : diffEntries ) {   System.out.println( ""Entry: "" + entry + "", from: "" + entry.getOldId() + "", to: "" + entry.getNewId() );   formatter.format( entry ); }"
"EntityPersister persister = ((SessionFactoryImpl) session.getSessionFactory()).getEntityPersister(""theNameOfYourEntity"");  if (persister.hasCache() &amp;&amp;      !persister.isCacheInvalidationRequired() &amp;&amp;      session.getCacheMode().isPutEnabled()) {      CacheKey ck = new CacheKey(                      theEntityToBeCached.getId(),                      persister.getIdentifierType(),                      persister.getRootEntityName(),                      session.getEntityMode(),                      session.getFactory()                  );      persister.getCacheAccessStrategy().afterInsert(ck, theEntityToBeCached, null); }"
for (Iterator entries = logEntries.iterator(); entries.hasNext();) {                 SVNLogEntry logEntry = (SVNLogEntry) entries.next();                  if (logEntry.getChangedPaths().size() &gt; 0) {                     Set&lt;String&gt; changedPathsSet = logEntry.getChangedPaths().keySet();                      for (Iterator&lt;String&gt; changedPaths = changedPathsSet.iterator(); changedPaths                             .hasNext();) {                         SVNLogEntryPath entryPath = (SVNLogEntryPath) logEntry                                 .getChangedPaths().get(changedPaths.next());                         String path = entryPath.getPath();                         if (!path.startsWith(updatePath)) {                             continue;                         }
"algorithms.put(""MD2WITHRSAENCRYPTION"", PKCSObjectIdentifiers.md2WithRSAEncryption); algorithms.put(""MD2WITHRSA"", PKCSObjectIdentifiers.md2WithRSAEncryption); algorithms.put(""MD5WITHRSAENCRYPTION"", PKCSObjectIdentifiers.md5WithRSAEncryption); algorithms.put(""MD5WITHRSA"", PKCSObjectIdentifiers.md5WithRSAEncryption); algorithms.put(""SHA1WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha1WithRSAEncryption); algorithms.put(""SHA1WITHRSA"", PKCSObjectIdentifiers.sha1WithRSAEncryption); algorithms.put(""SHA224WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha224WithRSAEncryption); algorithms.put(""SHA224WITHRSA"", PKCSObjectIdentifiers.sha224WithRSAEncryption); algorithms.put(""SHA256WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha256WithRSAEncryption); algorithms.put(""SHA256WITHRSA"", PKCSObjectIdentifiers.sha256WithRSAEncryption); algorithms.put(""SHA384WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha384WithRSAEncryption); algorithms.put(""SHA384WITHRSA"", PKCSObjectIdentifiers.sha384WithRSAEncryption); algorithms.put(""SHA512WITHRSAENCRYPTION"", PKCSObjectIdentifiers.sha512WithRSAEncryption); algorithms.put(""SHA512WITHRSA"", PKCSObjectIdentifiers.sha512WithRSAEncryption); algorithms.put(""SHA1WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA224WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA256WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA384WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""SHA512WITHRSAANDMGF1"", PKCSObjectIdentifiers.id_RSASSA_PSS); algorithms.put(""RIPEMD160WITHRSAENCRYPTION"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd160); algorithms.put(""RIPEMD160WITHRSA"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd160); algorithms.put(""RIPEMD128WITHRSAENCRYPTION"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd128); algorithms.put(""RIPEMD128WITHRSA"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd128); algorithms.put(""RIPEMD256WITHRSAENCRYPTION"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd256); algorithms.put(""RIPEMD256WITHRSA"", TeleTrusTObjectIdentifiers.rsaSignatureWithripemd256); algorithms.put(""SHA1WITHDSA"", X9ObjectIdentifiers.id_dsa_with_sha1); algorithms.put(""DSAWITHSHA1"", X9ObjectIdentifiers.id_dsa_with_sha1); algorithms.put(""SHA224WITHDSA"", NISTObjectIdentifiers.dsa_with_sha224); algorithms.put(""SHA256WITHDSA"", NISTObjectIdentifiers.dsa_with_sha256); algorithms.put(""SHA384WITHDSA"", NISTObjectIdentifiers.dsa_with_sha384); algorithms.put(""SHA512WITHDSA"", NISTObjectIdentifiers.dsa_with_sha512); algorithms.put(""SHA1WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA1); algorithms.put(""ECDSAWITHSHA1"", X9ObjectIdentifiers.ecdsa_with_SHA1); algorithms.put(""SHA224WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA224); algorithms.put(""SHA256WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA256); algorithms.put(""SHA384WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA384); algorithms.put(""SHA512WITHECDSA"", X9ObjectIdentifiers.ecdsa_with_SHA512); algorithms.put(""GOST3411WITHGOST3410"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_94); algorithms.put(""GOST3411WITHGOST3410-94"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_94); algorithms.put(""GOST3411WITHECGOST3410"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_2001); algorithms.put(""GOST3411WITHECGOST3410-2001"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_2001); algorithms.put(""GOST3411WITHGOST3410-2001"", CryptoProObjectIdentifiers.gostR3411_94_with_gostR3410_2001);"
"package your.package;  public class CORSFilter implements ContainerResponseFilter {      @Override     public ContainerResponse filter(ContainerRequest creq, ContainerResponse cresp) {          cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Origin"", ""*"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Credentials"", ""true"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Methods"", ""GET, POST, DELETE, PUT, OPTIONS, HEAD"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Headers"", ""Content-Type, Accept, X-Requested-With"");          return cresp;     } }"
"StringSerializer stringSerializer = StringSerializer.get(); BytesArraySerializer bas = BytesArraySerializer.get();   IndexedSlicesQuery&lt;String, String, byte[]&gt; indexedSlicesQuery =              HFactory.createIndexedSlicesQuery(""your keyspace"", stringSerializer, stringSerializer, bas);  indexedSlicesQuery.setColumnFamily(""ClientHeaders""); indexedSlicesQuery.setColumnNames(""UUID"",""Cliend_id"",""IP"",""Country"",""Date""); indexedSlicesQuery.addEqualsExpression(""Client_id"", stringSerializer.toBytes(""123""));  QueryResult&lt;OrderedRows&lt;String, String, byte[]&gt;&gt; result = indexedSlicesQuery.execute();"
"package com.bullethq.jawr.postprocessor;  import net.jawr.web.resource.FileNameUtils; import net.jawr.web.resource.bundle.factory.util.PathNormalizer; import net.jawr.web.resource.bundle.postprocess.BundleProcessingStatus; import net.jawr.web.resource.bundle.postprocess.impl.CSSURLPathRewriterPostProcessor; import net.jawr.web.resource.bundle.postprocess.impl.PostProcessorCssImageUrlRewriter;  import java.io.IOException;  public class CustomCssUrlPathRewriterPostProcessor extends CSSURLPathRewriterPostProcessor {      public static final String CUSTOM_URL_PATH_REWRITER = ""customcsspathrewriter"";      public CustomCssUrlPathRewriterPostProcessor() {         super(CUSTOM_URL_PATH_REWRITER);     }      // ========================================================================     // ========================================================================     // ========================================================================     @Override     protected PostProcessorCssImageUrlRewriter createImageUrlRewriter(BundleProcessingStatus status) {         return new CustomPostProcessorCssImageUrlRewriter(status);     }      // ========================================================================     // ========================================================================     // ========================================================================     public class CustomPostProcessorCssImageUrlRewriter extends PostProcessorCssImageUrlRewriter {          public CustomPostProcessorCssImageUrlRewriter(BundleProcessingStatus status) {             super(status);         }          // ========================================================================         // ========================================================================         // ========================================================================         @Override         protected String getUrlPath(String match, String originalPath, String newCssPath) throws IOException {             String url = match.substring(match.indexOf('(') + 1, match.lastIndexOf(')')).trim();              // Remove any quotes if necessary.             String quoteStr = """";             if (url.startsWith(""'"") || url.startsWith(""\"""")) {                 quoteStr = String.valueOf(url.charAt(0));                 url = url.substring(1, url.length() - 1);             }              // We now check if the url ends in a known image file extension             // If not, the url is ignored.             if (FileNameUtils.hasImageExtension(url)) {                 return super.getUrlPath(match, originalPath, newCssPath);             } else {                 // We need to rewrite the path, as any relative URLs will                 // not resolve correctly if Jawr has changed the CSS path.                 url = PathNormalizer.concatWebPath(originalPath, url);                 url = PathNormalizer.getRelativeWebPath(PathNormalizer.getParentPath(newCssPath), url);                 return ""url("" + quoteStr + url + quoteStr + "")"";             }         }     } }"
"final ContentAdapter ca = moz.getChromeAdapter().getContentAdapter();  nsIURIContentListener mycl = new nsIURIContentListener() {     public boolean onStartURIOpen(nsIURI aURI) {         System.out.println(aURI.getHost() + aURI.getPath());         return true;     }     public boolean doContent(String aContentType, boolean aIsContentPreferred, nsIRequest aRequest, nsIStreamListener[] aContentHandler) {          System.out.println(""1"");         return ca.doContent(aContentType, aIsContentPreferred, aRequest, aContentHandler);      }     public boolean isPreferred(String aContentType, String[] aDesiredContentType) {          System.out.println(""2"");         return ca.isPreferred(aContentType, aDesiredContentType);      }     public boolean canHandleContent(String aContentType, boolean aIsContentPreferred, String[] aDesiredContentType) {          System.out.println(""3"");         return ca.canHandleContent(aContentType, aIsContentPreferred, aDesiredContentType);      }     public nsISupports getLoadCookie() {          System.out.println(""4"");         return ca.getLoadCookie();      }     public void setLoadCookie(nsISupports aLoadCookie) {          System.out.println(""5"");         ca.setLoadCookie(aLoadCookie);      }     public nsIURIContentListener getParentContentListener() {          System.out.println(""6"");         return ca.getParentContentListener();      }     public void setParentContentListener(nsIURIContentListener aParentContentListener) {          System.out.println(""7"");         ca.setParentContentListener(aParentContentListener);      }     public nsISupports queryInterface(String uuid) {          System.out.println(""8"");         return ca.queryInterface(uuid);      }  };   moz.getChromeAdapter().getWebBrowser().setParentURIContentListener(mycl);"
"PreparedStatement pstmt = null; Connection conn = null;  try{      //if you have a method that creates a connection for you.      conn = getConnection();      pstmt = conn.prepareStatement(""INSERT INTO tops(id, title, elements, size, entity, timeStamp) VALUES(?,?,?,?,?,?)"");      pstmt.setInt(1,item.getID());       //Assuming that title is a String data type      pstmt.setString(2,item.getTitle());      pstmt.setString(3,this.elements);      pstmt.setDouble(4,item.getSize()); // &lt;--- JDBC will make sure this works       //assuming Entity data type is String      pstmt.setString(5,item.getEntity());       //if your timestamp's string format is       //well formed, you may insert as a string.      pstmt.setString(6,timestamp.toString());      pstmt.executeUpdate(); }catch(Exception e){      e.printStackTrace(); }finally{        try{          pstmt.close();      }catch(Exception e){}       try{          conn.close();      }catch(Exception e){}  }"
