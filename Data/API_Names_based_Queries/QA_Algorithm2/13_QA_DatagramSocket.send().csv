code
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
for (Iterator entries = logEntries.iterator(); entries.hasNext();) {                 SVNLogEntry logEntry = (SVNLogEntry) entries.next();                  if (logEntry.getChangedPaths().size() &gt; 0) {                     Set&lt;String&gt; changedPathsSet = logEntry.getChangedPaths().keySet();                      for (Iterator&lt;String&gt; changedPaths = changedPathsSet.iterator(); changedPaths                             .hasNext();) {                         SVNLogEntryPath entryPath = (SVNLogEntryPath) logEntry                                 .getChangedPaths().get(changedPaths.next());                         String path = entryPath.getPath();                         if (!path.startsWith(updatePath)) {                             continue;                         }
"JSONObject json; Object     intervention; JSONArray  interventionJsonArray; JSONObject interventionObject;  json = RestManager.getJSONfromURL(myuri); // retrieve the entire json stream      Object intervention = json.get(""intervention""); if (intervention instanceof JSONArray) {     // It's an array     interventionJsonArray = (JSONArray)intervention; } else if (intervention instanceof JSONObject) {     // It's an object     interventionObject = (JSONObject)intervention; } else {     // It's something else, like a string or number }"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"import org.apache.hadoop.conf.Configuration; import org.apache.hadoop.fs.Path; import org.apache.hadoop.mapreduce.InputFormat; import org.apache.hadoop.mapreduce.RecordReader; import org.apache.hadoop.mapreduce.TaskAttemptContext; import org.apache.hadoop.mapreduce.TaskAttemptID; import org.apache.hadoop.mapreduce.lib.input.FileSplit; import org.apache.hadoop.mapreduce.task.TaskAttemptContextImpl; import org.apache.hadoop.util.ReflectionUtils; import java.io.File;  Configuration conf = new Configuration(false); conf.set(""fs.default.name"", ""file:///"");  File testFile = new File(""path/to/file""); Path path = new Path(testFile.getAbsoluteFile().toURI()); FileSplit split = new FileSplit(path, 0, testFile.length(), null);  InputFormat inputFormat = ReflectionUtils.newInstance(MyInputFormat.class, conf); TaskAttemptContext context = new TaskAttemptContextImpl(conf, new TaskAttemptID()); RecordReader reader = inputFormat.createRecordReader(split, context);  reader.initialize(split, context);"
"String sqlQuery = ""SELECT kompetence.kompetence_odlisujici_subcategories.nazev as odlisujici_nazev, tolerovana, zadana, aktualni ""+                 ""FROM IPR.kompetence_odlisujici, kompetence.kompetence_odlisujici_subcategories ""+                 ""WHERE IPR.kompetence_odlisujici.os_cislo_zamestnanec = ? AND tolerovana &lt;&gt; 0 AND zadana &lt;&gt; 0 AND aktualni &lt;&gt; 0 AND year = ? AND IPR.kompetence_odlisujici.active = 1 ""+                 ""AND kompetence.kompetence_odlisujici_subcategories.id = IPR.kompetence_odlisujici.id_odlisujici_subcategory"";"
"jstring string; string = env-&gt;NewStringUTF(item-&gt;get_id().c_str()); env-&gt;SetObjectArrayElement( data,0,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_number().c_str()); env-&gt;SetObjectArrayElement( data,1,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_fullname().c_str()); env-&gt;SetObjectArrayElement( data,2,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_mf().c_str()); env-&gt;SetObjectArrayElement( data,3,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_dob().c_str()); env-&gt;SetObjectArrayElement( data,4,string); env-&gt;DeleteLocalRef(string); env-&gt;CallVoidMethod(dao, jsaveItem, data, jtype);"
"private static List&lt;InetAddress&gt; getIpAddress() {   try {     List&lt;InetAddress&gt; result = new ArrayList&lt;InetAddress&gt;();      Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces();     while (interfaces.hasMoreElements()) {       NetworkInterface intf = interfaces.nextElement();       Enumeration&lt;InetAddress&gt; addresses = intf.getInetAddresses();       while (addresses.hasMoreElements()) {         InetAddress address = addresses.nextElement();         if (!address.isLoopbackAddress() &amp;&amp; !address.isLinkLocalAddress()) {           result.add(address);         }       }     }     return result;   } catch (SocketException ex) {     Log.e(TAG, ""Failed to list network interfaces."", ex);     return null;   } }"
"public class MultiMapType implements UserCollectionType {  public boolean contains(Object collection, Object entity) {     return ((MultiMap) collection).containsValue(entity); }  public Iterator getElementsIterator(Object collection) {     return ((MultiMap) collection).values().iterator(); }  public Object indexOf(Object collection, Object entity) {     for (Iterator i = ((MultiMap) collection).entrySet().iterator(); i.hasNext();) {         Map.Entry entry = (Map.Entry) i.next();             Collection value = (Collection) entry.getValue();         if (value.contains(entity)) {             return entry.getKey();         }     }     return null; }  public Object instantiate() {     return new MultiHashMap(); }  public PersistentCollection instantiate(SessionImplementor session, CollectionPersister persister) throws HibernateException {     return new PersistentMultiMap(session); }  public PersistentCollection wrap(SessionImplementor session, Object collection) {     return new PersistentMultiMap(session, (MultiMap) collection); }  public Object replaceElements(Object original, Object target, CollectionPersister persister, Object owner, Map copyCache, SessionImplementor session) throws HibernateException {      MultiMap result = (MultiMap) target;     result.clear();      Iterator iter = ( (java.util.Map) original ).entrySet().iterator();     while ( iter.hasNext() ) {         java.util.Map.Entry me = (java.util.Map.Entry) iter.next();         Object key = persister.getIndexType().replace( me.getKey(), null, session, owner, copyCache );         Collection collection = (Collection) me.getValue();         for (Iterator iterator = collection.iterator(); iterator.hasNext();) {             Object value = persister.getElementType().replace( iterator.next(), null, session, owner, copyCache );             result.put(key, value);         }     }      return result; }"
"public class AClassAdapter  implements JsonSerializer&lt;A&gt;, JsonDeserializer&lt;A&gt; {   @Override   public JsonElement serialize(A src, Type typeOfSrc, JsonSerializationContext context) {       JsonObject result = new JsonObject();       result.add(""type"", new JsonPrimitive(src.getClass().getSimpleName()));       result.add(""properties"", context.serialize(src, src.getClass()));        return result;   }     @Override   public A deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)         throws JsonParseException {     JsonObject jsonObject = json.getAsJsonObject();     String type = jsonObject.get(""type"").getAsString();     JsonElement element = jsonObject.get(""properties"");      try {                     String fullName = typeOfT.getTypeName();         String packageText = fullName.substring(0, fullName.lastIndexOf(""."") + 1);          return context.deserialize(element, Class.forName(packageText + type));     } catch (ClassNotFoundException cnfe) {         throw new JsonParseException(""Unknown element type: "" + type, cnfe);     }   } }"
"Connection connection = DriverManager.getConnection(""URL"", ""USERNAME"", ""PASSWORD""); PreparedStatement statement = connection.prepareStatement(""select * from table""); ResultSet resultSet = statement.executeQuery();  if (resultSet != null) {     while (resultSet.next()) {         ResultSetMetaData resultSetMetaData = resultSet.getMetaData();         for (int i = 1; i &lt;= resultSetMetaData.getColumnCount(); i++) {              int type = resultSetMetaData.getColumnType(i);             if (type == Types.VARCHAR || type == Types.CHAR) {                  System.out.println(resultSet.getString(i));             } else {                  System.out.println(resultSet.getLong(i));             }         }           System.out.println(""-----------"");     } }"
"PreparedStatement pstmt = null; Connection conn = null;  try{      //if you have a method that creates a connection for you.      conn = getConnection();      pstmt = conn.prepareStatement(""INSERT INTO tops(id, title, elements, size, entity, timeStamp) VALUES(?,?,?,?,?,?)"");      pstmt.setInt(1,item.getID());       //Assuming that title is a String data type      pstmt.setString(2,item.getTitle());      pstmt.setString(3,this.elements);      pstmt.setDouble(4,item.getSize()); // &lt;--- JDBC will make sure this works       //assuming Entity data type is String      pstmt.setString(5,item.getEntity());       //if your timestamp's string format is       //well formed, you may insert as a string.      pstmt.setString(6,timestamp.toString());      pstmt.executeUpdate(); }catch(Exception e){      e.printStackTrace(); }finally{        try{          pstmt.close();      }catch(Exception e){}       try{          conn.close();      }catch(Exception e){}  }"
"if (req.getRequestURI().equals(""/twitter"")) {     Token requestToken = service.getRequestToken();     System.out.println(""Got the Request Token!"" + requestToken.getToken());     session = request.getSession(true);     session.setAttribute(""TOKEN"", requestToken);     response.sendRedirect(service.getAuthorizationUrl(requestToken)); } else if (req.getRequestURI().equals(""/twitter/callback"")) {     String code = request.getParameter(""oauth_verifier"");     System.out.println(""Verifier :: "" + code);     System.out.println(""service.getRequestToken()"" + service.getRequestToken());     session = request.getSession(false);     Token requestToken = (Token) session.getAttribute(""TOKEN"");     System.out.println(""requestToken from Session "" + service.getRequestToken().getToken() + "" Secr"" + service.getRequestToken().getSecret());      if (code != null &amp;&amp; !code.isEmpty()) {         Verifier verifier = new Verifier(code);         Token accessToken = service.getAccessToken(requestToken, verifier);         OAuthRequest req = new OAuthRequest(Verb.GET, OAUTH_PROTECTED_URL);         service.signRequest(accessToken, req);         Response res = req.send();         response.setContentType(""text/plain"");         response.getWriter().println(res.getBody());     } }"
"Class&lt;?&gt; handlerCl = Class.forName(""sun.misc.SignalHandler"");         Class&lt;?&gt; signalCl = Class.forName(""sun.misc.Signal"");          Constructor signalCtor = signalCl.getConstructor(String.class);         Method signalHandle = signalCl.getMethod(""handle"", signalCl, handlerCl);          // Create a proxy class that implements SignalHandler         Class&lt;?&gt; proxyClass = Proxy.getProxyClass(signalCl.getClassLoader(),             handlerCl);          // This is used by the instance of proxyClass to dispatch method calls         InvocationHandler invHandler = new InvocationHandler()         {             public Object invoke(Object proxy,                 Method method, Object[] args) throws Throwable             {                 // proxy is the SignalHandler's ""this"" rederence                 // method will be the handle(Signal) method                 // args[0] will be an instance of Signal                 // If you're using this object for multiple signals, you'll                 // you'll need to use the ""getName"" method to determine which                 // signal you have caught.                 return null;             }         };          // Get the constructor and create an instance of proxyClass         Constructor&lt;?&gt; proxyCtor = proxyClass.getConstructor(InvocationHandler.class);         Object handler = proxyCtor.newInstance(invHandler);          // Create the signal and call Signal.handle to bind handler to signal         Object signal = signalCtor.newInstance(""TERM"");         signalHandle.invoke(null, signal, handler);"
"package com.mobinet.snmp;  import org.snmp4j.CommunityTarget; import org.snmp4j.PDU; import org.snmp4j.Snmp; import org.snmp4j.TransportMapping; import org.snmp4j.event.ResponseEvent; import org.snmp4j.mp.SnmpConstants; import org.snmp4j.smi.Address; import org.snmp4j.smi.GenericAddress; import org.snmp4j.smi.Integer32; import org.snmp4j.smi.OID; import org.snmp4j.smi.OctetString; import org.snmp4j.smi.VariableBinding; import org.snmp4j.transport.DefaultTcpTransportMapping;  /**  *  * @author batbayar  */ public class SnmpTest {     private String address = ""192.168.1.254/161""; // switch address and snmp port     private String writeCommunity = ""myCommunityWrite""; // write community name      private Snmp snmp;     private CommunityTarget target;      public SnmpTest() {         try {             TransportMapping transport = new DefaultTcpTransportMapping();             snmp = new Snmp(transport);              Address targetAddress = GenericAddress.parse(address);             target = new CommunityTarget();             target.setCommunity(new OctetString(writeCommunity));             target.setAddress(targetAddress);             target.setRetries(2);             target.setTimeout(1500);             target.setVersion(SnmpConstants.version2c);              PDU command = new PDU();             command.setType(PDU.SET);             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.1""), new Integer32(2))); // port 1 down             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.6""), new Integer32(1))); // port 6 up             ResponseEvent response = snmp.send(command, target);             System.out.println(""response: "" + response);         } catch(Exception e) {             e.printStackTrace();         }     }      public static void main(String[] args) {         SnmpTest test = new SnmpTest();     } }"
"DiffFormatter formatter = new DiffFormatter( System.out ); formatter.setRepository( git.getRepository() ); AbstractTreeIterator commitTreeIterator = prepareTreeParser( git.getRepository(),  Constants.HEAD ); FileTreeIterator workTreeIterator = new FileTreeIterator( git.getRepository() ); List&lt;DiffEntry&gt; diffEntries = formatter.scan( commitTreeIterator, workTreeIterator );  for( DiffEntry entry : diffEntries ) {   System.out.println( ""Entry: "" + entry + "", from: "" + entry.getOldId() + "", to: "" + entry.getNewId() );   formatter.format( entry ); }"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
project 1   |- common        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;common&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- util        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;util&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- domain        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;domain&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- service        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;service&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;   |- webapps        |- pom.xml           &lt;groupId&gt;com.project1&lt;/groupId&gt;           &lt;artifactId&gt;webapps&lt;/artifactId&gt;           &lt;version&gt;1.0&lt;/version&gt;
"JSONObject jSONObject = new JSONObject(jsonString); String str_type=jSONObject.getString(""type"");  // using JSONArray JSONArray featuresArr = jSONObject.getJSONArray(""features"");   for (int i=0; i&lt;featuresArr.length; i++){     JSONObject anotherjsonObject = featuresArr.getJSONObject(i);     //access the fields of that json object     String str_type_one=anotherjsonObject.getString(""type"");    JSONArray featuresArr_properties = anotherjsonObject.getJSONArray(""properties"");     JSONObject propertiesjsonObject = featuresArr_properties.getJSONObject(0);    String str_type=propertiesjsonObject.getString(""type"");    String str_type=propertiesjsonObject.getString(""thumb"");    String str_type=propertiesjsonObject.getString(""name_pl"");    String str_type=propertiesjsonObject.getString(""name_en"");  ////parse all items ...........   }"
"Field elementField = xmlReader.getClass().getDeclaredField(""theNewElement""); elementField.setAccessible(true); Object element = elementField.get(xmlReader); Field attsField = element.getClass().getDeclaredField(""theAtts""); attsField.setAccessible(true); Object atts = attsField.get(element); Field dataField = atts.getClass().getDeclaredField(""data""); dataField.setAccessible(true); String[] data = (String[])dataField.get(atts); Field lengthField = atts.getClass().getDeclaredField(""length""); lengthField.setAccessible(true); int len = (Integer)lengthField.get(atts);  String myAttributeA = null; String myAttributeB = null;  for(int i = 0; i &lt; len; i++) {     if(""attrA"".equals(data[i * 5 + 1])) {         myAttributeA = data[i * 5 + 4];     } else if(""attrB"".equals(data[i * 5 + 1])) {         myAttributeB = data[i * 5 + 4];     } }"
"procedure TIndyLoginServer.SendRequest(Command, Json: string;   Request: TRequest); var   JsonToSend: TIdStringStream;   ServerResponse: string;   Url: string; begin   // Build parameters   JsonToSend := TIdStringStream.Create(Json);    try     try       FIndyHttp.Request.Accept := 'application/json';       FIndyHttp.Request.ContentType := 'application/json';       FIndyHttp.Request.ContentEncoding := 'utf-8';         Url := FUrl +'?command=' + Command;       ServerResponse := FIndyHttp.Post(Url, JsonToSend);        Request.OnRequestFinished(ServerResponse, '', '');     except       on E: EIdHTTPProtocolException do       begin         Request.OnRequestFinished('', E.Message, '');       end;       on E: EIdSocketError do       begin         if E.LastError = Id_WSAETIMEDOUT then           Request.OnRequestTimedOut();       end;       on E: EIdException do       begin         Request.OnRequestFinished('', E.Message, '');       end;     end;   finally     JsonToSend.Free();   end; end;"
"query.from(catalog) .innerJoin(qe).on(catalog.id.eq(qe.itemId)) .innerJoin(enterprise).on(enterprise.id.eq(qe.enterpriseId)) .leftJoin(catalogPerson).on(catalogPerson.catalogId.eq(catalog.id)) .where(catalog.deletionDate.isNull(), qe.enterpriseId.eq(org)) .orderBy(catalog.creationDate.desc()) .limit(limit) .offset(offset) .groupBy(catalog.id) .list(Projections.constructor(Catalog.class,                             catalog.id,                             catalog.name,                             catalog.code,                             catalogPerson.count()));"
boolean isMultipart = ServletFileUpload.isMultipartContent(request);         if (isMultipart)         {             try              {                 List items = upload.parseRequest(request);                 Iterator iterator = items.iterator();                 while (iterator.hasNext())                  {                     FileItem item = (FileItem) iterator.next();                      if (item.isFormField()) //your code for getting form fields                     {                         String name = item.getFieldName();                         String value = item.getString();                         System.out.println(name+value);                     }                      if (!item.isFormField())                      {                        //your code for getting multipart                      }                 }             }
"String newtype_mod=""""; String newcontent_mod="""";  if ((object.has(""message"")))  {      JSONObject message = object.getJSONObject(""message"");      newtype_mod = object.getJSONObject(""message"")                         .getString(""type"");      newcontent_mod = object.getJSONObject(""message"")                      .getString(""content"");      objSample = new GetSetMethod();      objSample.setnewcontent_mod(newcontent_mod);              objSample.setnewtype_mod(newtype_mod);      Log.v(""##""+newcontent_mod,""V ""+newtype_mod); }"
"protected IResourceInfo getResourceInfo(ITranslationUnit translationUnit, ICProjectDescription prjDescription) {      ICProject cProject = translationUnit.getCProject();     if (cProject != null) {         ICConfigurationDescription cfgDescription = prjDescription.getActiveConfiguration();         IConfiguration configuration = ManagedBuildManager.getConfigurationForDescription(cfgDescription);         IPath projectPath = translationUnit.getResource().getProjectRelativePath();          IResourceInfo ri = configuration.getResourceInfo(projectPath, true);          if (ri == null) {              ri = configuration.createFileInfo(projectPath);         }          return ri;     }      return null; }"
"package your.package;  public class CORSFilter implements ContainerResponseFilter {      @Override     public ContainerResponse filter(ContainerRequest creq, ContainerResponse cresp) {          cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Origin"", ""*"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Credentials"", ""true"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Methods"", ""GET, POST, DELETE, PUT, OPTIONS, HEAD"");         cresp.getHttpHeaders().putSingle(""Access-Control-Allow-Headers"", ""Content-Type, Accept, X-Requested-With"");          return cresp;     } }"
"ComboBox accountStatusChoice = new ComboBox();  accountStatusChoice.setCaption(MessageResource.getLocalizedString(""caption.accountStatus"")); accountStatusChoice.setRequired(true); accountStatusChoice.setRequiredError(MessageResource.getLocalizedString(""error.required.accountStatus"")); accountStatusChoice.setImmediate(true);  for (AccountStatus accountStatus : AccountStatus.values()) {     accountStatusChoice.addItem(accountStatus);     accountStatusChoice.setItemCaption(accountStatus, MessageResource.getLocalizedString(accountStatus.name())); }  return accountStatusChoice;"
"try {         String insertTableSQL = ""INSERT INTO DBUSER""+ ""fcltyName,CommunicationOral,Communicationwritten,Leadership,AnalyticalAbilities,Interpersonalskills,DecisionMakingSkills,SelfConfidence,Creativity,Punctualityregularity,GeneralAwareness,Commitment,HardWork) VALUES""+ ""(?,?,?,?,?,?,?,?,?,?,?,?,?)"";          dbConnection = getDBConnection();         preparedStatement = dbConnection.prepareStatement(insertTableSQL);          preparedStatement.setStringt(1, fcltyName);         preparedStatement.setInt(2, 0);         preparedStatement.setInt(3, 0);         preparedStatement.setInt(4,0);         preparedStatement.setInt(5, 0);         preparedStatement.setInt(6, 0);         preparedStatement.setInt(7,0);         preparedStatement.setInt(8, 0);         preparedStatement.setInt(9, 0);         preparedStatement.setInt(10,0);         preparedStatement.setInt(11, 0);         preparedStatement.setInt(12, 0);         preparedStatement.setInt(13,0);          // execute insert SQL stetement         preparedStatement.executeUpdate();}'"
package org.camunda.bpm;  import org.camunda.bpm.engine.ProcessEngine; import org.camunda.bpm.engine.RepositoryService; import org.camunda.bpm.engine.RuntimeService; import org.camunda.bpm.engine.repository.ProcessDefinition; import org.camunda.bpm.engine.runtime.ProcessInstance; import java.util.List;  public class AllRunningProcessInstances {    public List&lt;ProcessInstance&gt; getAllRunningProcessInstances(String processDefinitionName) {     // get process engine and services     ProcessEngine processEngine = BpmPlatform.getDefaultProcessEngine();     RuntimeService runtimeService = processEngine.getRuntimeService();     RepositoryService repositoryService = processEngine.getRepositoryService();      // query for latest process definition with given name     ProcessDefinition myProcessDefinition =         repositoryService.createProcessDefinitionQuery()             .processDefinitionName(processDefinitionName)             .latestVersion()             .singleResult();      // list all running/unsuspended instances of the process     List&lt;ProcessInstance&gt; processInstances =         runtimeService.createProcessInstanceQuery()             .processDefinitionId(myProcessDefinition.getId())             .active() // we only want the unsuspended process instances             .list();      return processInstances;   }  }
