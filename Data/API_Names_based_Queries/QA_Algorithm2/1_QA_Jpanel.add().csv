code
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"Model model = ...      model.addLiteral (subject, predicate, 10);     model.addLiteral (subject, predicate, 0.5);     model.addLiteral (subject, predicate, (float)0.5);     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(20));     model.addLiteral (subject, predicate, ResourceFactory.createTypedLiteral(0.99));     model.addLiteral (subject, predicate, true);     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""2012-03-11"", XSDDatatype.XSDdate));     model.add (subject, predicate, ResourceFactory.createTypedLiteral(""P2Y"", XSDDatatype.XSDduration));"
"ParcelFileDescriptor fileDescriptor = this.getContentResolver().openFileDescriptor(uri, &quot;r&quot;);             InputStream in = this.getContentResolver().openInputStream(uri);              CountingInputStreamEntity entity = new CountingInputStreamEntity(in, fileDescriptor.getStatSize());             entity.setUploadListener(this);             entity.setContentType(&quot;binary/octet-stream&quot;);             entity.setChunked(true);                       BufferedHttpEntity myEntity = null;             try {                 myEntity = new BufferedHttpEntity(entity);             } catch (IOException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }                          put.setEntity(myEntity);"
"frame.setLayout(new BoxLayout(frame.getContentPane(), BoxLayout.Y_AXIS));                       JPanel panelMain = new JPanel(new GridLayout(0,2));             ChartPanel chartPanel = createChart();         JPanel subPanel = new JPanel(new BorderLayout());    subPanel.setBorder(BorderFactory.createTitledBorder(""Consommation"")); subPanel.setPreferredSize(new Dimension(400, 200));     subPanel.add(chartPanel);      panelMain.add(subPanel);         frame.add(panelMain);         frame.pack(); frame.setLocationRelativeTo(null); frame.setVisible(true);"
"SMIMEEnvelopedGenerator gen = new SMIMEEnvelopedGenerator(); JceKeyAgreeRecipientInfoGenerator rig = new JceKeyAgreeRecipientInfoGenerator(CMSAlgorithm.ECDH_SHA1KDF, senderPrivateKey, senderPublicKey, CMSAlgorithm.AES128_WRAP); rig.setProvider(BouncyCastleProvider.PROVIDER_NAME); rig.addRecipient(recipientX509Certificate); gen.addRecipientInfoGenerator(rig);  MimeBodyPart msg = new MimeBodyPart(); msg.setText(&quot;This is a secret message&quot;);  MimeBodyPart mp = gen.generate(msg, new JceCMSContentEncryptorBuilder(CMSAlgorithm.AES128_CBC).setProvider(&quot;BC&quot;).build());  Properties props = System.getProperties(); Session session = Session.getDefaultInstance(props, null);  String to = &quot;bob@example.com&quot;;  Address fromUser = new InternetAddress(&quot;alice@example.com&quot;); Address toUser = new InternetAddress(to);  MimeMessage body = new MimeMessage(session); body.setFrom(fromUser); body.setRecipient(Message.RecipientType.TO, toUser); body.setSubject(&quot;example encrypted message&quot;); body.setContent(mp.getContent(), mp.getContentType()); body.saveChanges();  body.writeTo(new FileOutputStream(&quot;/tmp/encrypted.msg&quot;));"
"final ContentAdapter ca = moz.getChromeAdapter().getContentAdapter();  nsIURIContentListener mycl = new nsIURIContentListener() {     public boolean onStartURIOpen(nsIURI aURI) {         System.out.println(aURI.getHost() + aURI.getPath());         return true;     }     public boolean doContent(String aContentType, boolean aIsContentPreferred, nsIRequest aRequest, nsIStreamListener[] aContentHandler) {          System.out.println(""1"");         return ca.doContent(aContentType, aIsContentPreferred, aRequest, aContentHandler);      }     public boolean isPreferred(String aContentType, String[] aDesiredContentType) {          System.out.println(""2"");         return ca.isPreferred(aContentType, aDesiredContentType);      }     public boolean canHandleContent(String aContentType, boolean aIsContentPreferred, String[] aDesiredContentType) {          System.out.println(""3"");         return ca.canHandleContent(aContentType, aIsContentPreferred, aDesiredContentType);      }     public nsISupports getLoadCookie() {          System.out.println(""4"");         return ca.getLoadCookie();      }     public void setLoadCookie(nsISupports aLoadCookie) {          System.out.println(""5"");         ca.setLoadCookie(aLoadCookie);      }     public nsIURIContentListener getParentContentListener() {          System.out.println(""6"");         return ca.getParentContentListener();      }     public void setParentContentListener(nsIURIContentListener aParentContentListener) {          System.out.println(""7"");         ca.setParentContentListener(aParentContentListener);      }     public nsISupports queryInterface(String uuid) {          System.out.println(""8"");         return ca.queryInterface(uuid);      }  };   moz.getChromeAdapter().getWebBrowser().setParentURIContentListener(mycl);"
public List&lt;Task&gt; getTaskDue(){          List&lt;Task&gt; temp = new ArrayList&lt;Task&gt;();      for(int u = 0; u &lt; unitCollection.size(); u++){         Unit unit = unitCollection.get(u);          for (int a = 0; a &lt; unit.getAssessmentCollection().size(); a++){             AssessmentItem assessment = unit.getAssessmentCollection().get(a);              for (int t = 0; t &lt; assessment.getTasks().size(); t++){                 Task task = assessment.getTasks().get(t);                  if (task.getDueDate().compareTo(assessment.getDueDate()) &lt;= 0){                      temp.add(task);                 }                }            }        }        return temp; }
7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450
"const char* GetIDJni() {      JniMethodInfo t;          if (JniHelper::getStaticMethodInfo(t, CLASS_NAME, ""GetIDJni"", ""()Ljava/lang/String;"")) {             jstring str = (jstring)t.env-&gt;CallStaticObjectMethod(t.classID, t.methodID);             t.env-&gt;DeleteLocalRef(t.classID);             CCString *ret = new CCString(JniHelper::jstring2string(str).c_str());             ret-&gt;autorelease();             t.env-&gt;DeleteLocalRef(str);              return ret-&gt;m_sString.c_str();         }          return 0;     }"
"final List&lt;Pane&gt; panes = new ArrayList&lt;Pane&gt;();      button1.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent e) {              BorderPane myborderpane = new BorderPane();              //adding             panes.add(myborderpane);              splitPane.getItems().addAll(myborderpane);              ObservableList&lt;SplitPane.Divider&gt; splitDiv = splitPane.getDividers();              System.out.println(""splitDiv.size() "" + splitDiv.size());              percSplit = 1 / (double) (splitDiv.size() + 1);             for (int i = 0; i &lt; splitDiv.size(); i++) {                 System.out.println(""i "" + i + "" percSplit "" + percSplit);                 splitPane.setDividerPosition(i, percSplit);                 percSplit += 1 / (double) (splitDiv.size() + 1);             }         }     });      button2.setOnAction(new EventHandler&lt;ActionEvent&gt;() {         @Override         public void handle(ActionEvent t) {             if (panes.size() &gt; 0) {                 // removing from both list and splitPane childs                 Pane toDelete = panes.remove(0);                 splitPane.getItems().remove(toDelete);             }         }     });"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"final SvnOperationFactory svnOperationFactory = new SvnOperationFactory();     try {         final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();         final SvnDiffGenerator diffGenerator = new SvnDiffGenerator();         diffGenerator.setBasePath(new File(""""));          final SvnDiff diff = svnOperationFactory.createDiff();         diff.setSources(SvnTarget.fromURL(url1, svnRevision1), SvnTarget.fromURL(url2, svnRevision1));         diff.setDiffGenerator(diffGenerator);         diff.setOutput(byteArrayOutputStream);         diff.run();     } finally {         svnOperationFactory.dispose();     }"
"EntityPersister persister = ((SessionFactoryImpl) session.getSessionFactory()).getEntityPersister(""theNameOfYourEntity"");  if (persister.hasCache() &amp;&amp;      !persister.isCacheInvalidationRequired() &amp;&amp;      session.getCacheMode().isPutEnabled()) {      CacheKey ck = new CacheKey(                      theEntityToBeCached.getId(),                      persister.getIdentifierType(),                      persister.getRootEntityName(),                      session.getEntityMode(),                      session.getFactory()                  );      persister.getCacheAccessStrategy().afterInsert(ck, theEntityToBeCached, null); }"
"Field jrViewerField;             try {                 jrViewerField = viewer.getClass().getDeclaredField(""viewer"");                  jrViewerField.setAccessible(true);                 JRViewer jrViewer = (JRViewer) jrViewerField.get(viewer);                 List&lt;JRSaveContributor&gt; savers = new ArrayList&lt;JRSaveContributor&gt;();                 for (JRSaveContributor sc : jrViewer.getSaveContributors()) {                          savers.add(sc);                  }                  for (JRSaveContributor sc : savers) {                     if (! sc.getClass().getName().toLowerCase().contains(""pdf"")) {                         jrViewer.removeSaveContributor(sc);                     }                 }               } catch (Exception ex) {               ex.printStackTrace();             }"
"public class IPGUI extends JFrame implements ActionListener {  ...  public IPGUI() {         setTitle(""IP Extractor"");         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         setBounds(100, 100, 250, 300);         contentPane = new JPanel();         contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));         contentPane.setLayout(new BorderLayout(0, 0));         setContentPane(contentPane);          JPanel panel = new JPanel();         contentPane.add(panel, BorderLayout.CENTER);         panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));          JButton btnConvertDocuments = new JButton(""1. Convert Documents"");         btnConvertDocuments.setAlignmentX(Component.CENTER_ALIGNMENT);         btnConvertDocuments.setMaximumSize(new Dimension(160, 0));         btnConvertDocuments.setPreferredSize(new Dimension(0, 50));          panel.add(btnConvertDocuments);         //btnConvertDocuments.addActionListener(new ActionListener() {         //    public void actionPerformed(ActionEvent e) {         //        //FileConverter fc = new FileConverter();         //                    //Why wont the above method work?         //    }         //});          btnConvertDocuments.setActionCommand(""x"");         btnConvertDocuments.addActionListener(this);          JSeparator separator_3 = new JSeparator();         panel.add(separator_3); }  public void actionPerformed(ActionEvent event) {     String command = event.getActionCommand();     if (command.equals(""x"")) {         //FileConverter fc = new FileConverter();     } } ...  }"
"BufferedImage image = ImageIO.read(new File(path)); JPEGImageEncoder jpegEncoder = JPEGCodec.createJPEGEncoder(new FileOutputStream(new File(path))); JPEGEncodeParam jpegEncodeParam = jpegEncoder.getDefaultJPEGEncodeParam(image); jpegEncodeParam.setDensityUnit(JPEGEncodeParam.DENSITY_UNIT_DOTS_INCH); jpegEncoder.setJPEGEncodeParam(jpegEncodeParam); jpegEncodeParam.setQuality(0.75f, false); jpegEncodeParam.setXDensity(300); jpegEncodeParam.setYDensity(300); jpegEncoder.encode(image, jpegEncodeParam); image.flush();"
"ShapeDrawable sd1 = new ShapeDrawable(new RectShape());                         sd1.getPaint().setColor(CommonUtilities.color);                         sd1.getPaint().setStyle(Style.STROKE);                         sd1.getPaint().setStrokeWidth(CommonUtilities.stroke);                         sd1.setPadding(15, 10, 15, 10);                          sd1.getPaint().setPathEffect(                                 new CornerPathEffect(CommonUtilities.corner));                         ln_back.setBackgroundDrawable(sd1);"
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"contentPane.setLayout(new GridBagLayout());     ((GridBagLayout)contentPane.getLayout()).columnWidths = new int[] {0, 0, 0, 0};     ((GridBagLayout)contentPane.getLayout()).rowHeights = new int[] {0, 0, 10, 0, 0, 0};     ((GridBagLayout)contentPane.getLayout()).columnWeights = new double[] {1.0, 0.0, 1.0, 1.0E-4};     ((GridBagLayout)contentPane.getLayout()).rowWeights = new double[] {1.0, 0.0, 0.0, 0.0, 1.0, 1.0E-4};      //---- leftBtn ----     leftBtn.setText(""left Button"");     contentPane.add(leftBtn, new GridBagConstraints(0, 0, 1, 5, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));      //---- rightBtn ----     rightBtn.setText(""right Button"");     contentPane.add(rightBtn, new GridBagConstraints(2, 0, 1, 5, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));      //---- addBtn ----     addBtn.setText(""add Button"");     contentPane.add(addBtn, new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));      //---- remBtn ----     remBtn.setText(""rem Button"");     contentPane.add(remBtn, new GridBagConstraints(1, 3, 1, 1, 0.0, 0.0,         GridBagConstraints.CENTER, GridBagConstraints.BOTH,         new Insets(0, 0, 0, 0), 0, 0));"
"Category category = new Category(); AbstractPolicyRule policyRule1 = new AbstractPolicyRule(""foo"");  category.addToActivePolicyRules(policyRule1); em.persist(category); em.flush();  assertNotNull(category.getId()); assertNotNull(category.getActivePolicyRules()); assertEquals(1, category.getActivePolicyRules().size());  category.removeFromActivePolicyRules(policyRule1); category.addToActivePolicyRules(new AbstractPolicyRule(""bar"")); // category = em.merge(category); // works with or without em.flush(); assertEquals(1, category.getActivePolicyRules().size());"
"HikariConfig config = new HikariConfig(); config.setMinimumIdle(1); config.setMaximumPoolSize(2); config.setInitializationFailFast(true); config.setConnectionTestQuery(""VALUES 1""); config.setDataSourceClassName(""com.mysql.jdbc.jdbc2.optional.MysqlDataSource""); config.addDataSourceProperty(""serverName"", ""localhost""); config.addDataSourceProperty(""port"", ""3306""); config.addDataSourceProperty(""databaseName"", ""webapp""); config.addDataSourceProperty(""user"", ""webapp""); config.addDataSourceProperty(""password"", ""password"");"
"public class AClassAdapter  implements JsonSerializer&lt;A&gt;, JsonDeserializer&lt;A&gt; {   @Override   public JsonElement serialize(A src, Type typeOfSrc, JsonSerializationContext context) {       JsonObject result = new JsonObject();       result.add(""type"", new JsonPrimitive(src.getClass().getSimpleName()));       result.add(""properties"", context.serialize(src, src.getClass()));        return result;   }     @Override   public A deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)         throws JsonParseException {     JsonObject jsonObject = json.getAsJsonObject();     String type = jsonObject.get(""type"").getAsString();     JsonElement element = jsonObject.get(""properties"");      try {                     String fullName = typeOfT.getTypeName();         String packageText = fullName.substring(0, fullName.lastIndexOf(""."") + 1);          return context.deserialize(element, Class.forName(packageText + type));     } catch (ClassNotFoundException cnfe) {         throw new JsonParseException(""Unknown element type: "" + type, cnfe);     }   } }"
"JSONObject object = new JSONObject(); object.put(""name"", ""sample""); JSONArray array = new JSONArray();  JSONObject arrayElementOne = new JSONObject(); arrayElementOne.put(""setId"", 1); JSONArray arrayElementOneArray = new JSONArray();  JSONObject arrayElementOneArrayElementOne = new JSONObject(); arrayElementOneArrayElementOne.put(""name"", ""ABC""); arrayElementOneArrayElementOne.put(""type"", ""STRING"");  JSONObject arrayElementOneArrayElementTwo = new JSONObject(); arrayElementOneArrayElementTwo.put(""name"", ""XYZ""); arrayElementOneArrayElementTwo.put(""type"", ""STRING"");  arrayElementOneArray.put(arrayElementOneArrayElementOne); arrayElementOneArray.put(arrayElementOneArrayElementTwo);  arrayElementOne.put(""setDef"", arrayElementOneArray); array.put(arrayElementOne); object.put(""def"", array);"
com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$Wadl com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONRootElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONJAXBElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$App com.sun.jersey.json.impl.provider.entity.JSONListElementProvider$General com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$App com.sun.jersey.json.impl.provider.entity.JSONArrayProvider$General com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$App com.sun.jersey.json.impl.provider.entity.JSONObjectProvider$General com.sun.jersey.json.impl.provider.entity.JSONWithPaddingProvider com.sun.jersey.json.impl.provider.entity.JacksonProviderProxy
"if (pump1Running){             jLabel3.setIcon(new ImageIcon(getClass().getResource(""/Pauze.png"")));             jLabel3.setText(""Infusion Paused"");             jButton1.setText(""Start Infusion"");             pump1Running = !pump1Running;         }         else {//if (pump1Running == true){             jLabel3.setIcon(new ImageIcon(getClass().getResource(""/Pauze.png"")));             jLabel3.setText(""Running infusion"");             jButton1.setText(""Stop Infusion"");             pump1Running = !pump1Running;         }"
"JFrame frame = new JFrame();     frame.setSize(400, 400);     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);      final JTabbedPane pane = new JTabbedPane();      JPanel jPanel = new JPanel();     JButton button = new JButton(""Blink tab"");     jPanel.add(button);     pane.addTab(""adsad"", jPanel);      JPanel jPanel1 = new JPanel();     jPanel1.add(new JLabel(""hi""));     pane.addTab(""werqr"", jPanel1);      final Color defaultBackColor = pane.getBackgroundAt(1); // default background color of tab     final Color defaultForeColor = pane.getForegroundAt(1); // default foreground color of tab      button.addActionListener(new ActionListener() {         @Override         public void actionPerformed(ActionEvent e) {             Timer timer = new Timer(500, new ActionListener() {                 boolean blinkFlag = false;                 @Override                 public void actionPerformed(ActionEvent e) {                     blink(blinkFlag);                     blinkFlag = !blinkFlag;                 }             });             timer.start();         }         private void blink(boolean blinkFlag) {             if (blinkFlag) {                 pane.setForegroundAt(1, Color.green);                 pane.setBackgroundAt(1, Color.orange);             } else {                 pane.setForegroundAt(1, defaultForeColor);                 pane.setBackgroundAt(1, defaultBackColor);             }             pane.repaint();         }     });      frame.add(pane);     frame.setVisible(true);"
"public static class MyOwnFocusTraversalPolicy extends FocusTraversalPolicy {     Vector&lt;Component&gt; order;      public MyOwnFocusTraversalPolicy(Vector&lt;Component&gt; order)     {         this.order = new Vector&lt;Component&gt;(order.size());         this.order.addAll(order);     }      public Component getComponentAfter(Container focusCycleRoot,                                        Component aComponent)     { //      int idx = (order.indexOf(aComponent) + 1) % order.size(); //      return order.get(idx);          int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx + 1) % order.size();             Component next = order.get(idx);              if (canBeFocusOwner(next)) return next;         }          return null;     }      public Component getComponentBefore(Container focusCycleRoot,                                         Component aComponent)     { /*         int idx = order.indexOf(aComponent) - 1;         if (idx &lt; 0) {             idx = order.size() - 1;         }         return order.get(idx); */         int idx = order.indexOf(aComponent);          for (int i = 0; i &lt; order.size(); i++)         {             idx = (idx - 1);              if (idx &lt; 0)             {                 idx = order.size() - 1;             }              Component previous = order.get(idx);              if (canBeFocusOwner(previous)) return previous;         }          return null;     }      public Component getDefaultComponent(Container focusCycleRoot) { //      return order.get(0);         return getFirstComponent( focusCycleRoot );     }      public Component getLastComponent(Container focusCycleRoot) { //      return order.lastElement();          Component c = order.lastElement();          if (canBeFocusOwner(c))             return c;         else             return getComponentBefore(focusCycleRoot, c);     }      public Component getFirstComponent(Container focusCycleRoot)     { //      return order.get(0);          Component c = order.get(0);          if (canBeFocusOwner(c))             return c;         else             return getComponentAfter(focusCycleRoot, c);     }      private boolean canBeFocusOwner(Component c)     {         if (c.isEnabled() &amp;&amp; c.isDisplayable() &amp;&amp; c.isVisible() &amp;&amp; c.isFocusable())         {             return true;         }          return false;     }  }"
"public class GsonOptionalDeserializer&lt;T&gt; implements JsonSerializer&lt;Optional&lt;T&gt;&gt;, JsonDeserializer&lt;Optional&lt;T&gt;&gt; {      @Override     public Optional&lt;T&gt; deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)             throws JsonParseException {         final JsonArray asJsonArray = json.getAsJsonArray();         final JsonElement jsonElement = asJsonArray.get(0);         final T value = context.deserialize(jsonElement, ((ParameterizedType) typeOfT).getActualTypeArguments()[0]);         return Optional.fromNullable(value);     }      @Override     public JsonElement serialize(Optional&lt;T&gt; src, Type typeOfSrc, JsonSerializationContext context) {         final JsonElement element = context.serialize(src.orNull());         final JsonArray result = new JsonArray();         result.add(element);         return result;     } }"
"AbstractSVNCommand.registerCommand(new SVNStatusCommand());  final ByteArrayOutputStream bos = new ByteArrayOutputStream(); final PrintStream stream = new PrintStream(bos);  final SVNCommandLine commandLine = new SVNCommandLine(); commandLine.init(new String[] {""status"", ""d:/svntest/small.svn17""});  final SVNCommandEnvironment env = new SVNCommandEnvironment(""mySvn"", stream, stream, System.in); env.init(commandLine); env.initClientManager();  final SVNStatusCommand svnStatusCall = new SVNStatusCommand(); svnStatusCall.init(env); svnStatusCall.run(); stream.flush(); System.out.println(new String(bos.toByteArray()));"
"JFrame f = new JFrame();     f.setLayout(new BorderLayout());     f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     JPanel p = new JPanel(new GridLayout(0, 5));     JScrollPane jsp = new JScrollPane(p);      jsp.setPreferredSize(new Dimension(300,300));     jsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);     jsp.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);      for (int i = 0; i &lt; 100; i++) {         JButton b = new JButton(""Button "" + i);         p.add(b);     }      f.add(jsp, BorderLayout.CENTER);     f.setLocation(300, 300);     f.setVisible(true);     f.pack();"
