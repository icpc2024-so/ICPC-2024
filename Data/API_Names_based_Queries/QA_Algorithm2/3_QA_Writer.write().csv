code
"XMLOutputFactory factory = XMLOutputFactory     .newInstance(); XMLStreamWriter writer = factory.createXMLStreamWriter(     stream, ""UTF-8""); try {   writer.writeStartDocument(""UTF-8"", ""1.0"");   writer.writeStartElement(""pie"");   for (Entry&lt;String, String&gt; entry : map.entrySet()) {     writer.writeStartElement(""slice"");     writer.writeAttribute(""title"", entry.getKey());     writer.writeCharacters(entry.getValue());     writer.writeEndElement();   }   writer.writeEndElement();   writer.writeEndDocument(); } finally {   writer.close(); }"
"public void onEndPage(PdfWriter writer, Document document) {         Rectangle rect = writer.getBoxSize(""art"");         switch(writer.getPageNumber() % 2) {         case 0:             ColumnText.showTextAligned(writer.getDirectContent(),                     Element.ALIGN_RIGHT, header[0],                     rect.getRight(), rect.getTop(), 0);             break;         case 1:             ColumnText.showTextAligned(writer.getDirectContent(),                     Element.ALIGN_LEFT, header[1],                     rect.getLeft(), rect.getTop(), 0);             break;         }         ColumnText.showTextAligned(writer.getDirectContent(),                 Element.ALIGN_CENTER, new Phrase(String.format(""page %d"", pagenumber)),                 (rect.getLeft() + rect.getRight()) / 2, rect.getBottom() - 18, 0);     }"
"public void writeToParcel(Parcel dest, int flags) {     dest.writeString(type);     dest.writeString(numberPlate);     dest.writeString(brand);     dest.writeDouble(pricePerHour);     dest.writeDouble(pricePerKm);     dest.writeString(objectId);     dest.writeInt(photo.length());     dest.writeByteArray(photo); }    public void readFromParcel(Parcel in){     this.type = in.readString();     this.numberPlate = in.readString();     this.brand = in.readString();     this.pricePerHour = in.readDouble();     this.pricePerKm = in.readDouble();     this.objectId = in.readString();     this.photo = new byte[in.readInt()];     in.readByteArray(this.photo); }"
"JTextPane textPane = new JTextPane(); textPane.setText(""Line1""); StyledDocument doc = textPane.getStyledDocument();  //  Define the attribute you want for the line of text  SimpleAttributeSet center = new SimpleAttributeSet(); StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);  //  Add some text to the end of the Document  try {     int length = doc.getLength();     doc.insertString(doc.getLength(), ""\ntest"", null);     doc.setParagraphAttributes(length+1, 1, center, false); } catch(Exception e) { System.out.println(e);}"
"char[] ch; AttributesImpl atts = new AttributesImpl(); Writer writer = new StringWriter(); StreamResult streamResult = new StreamResult(writer); SAXTransformerFactory tf = (SAXTransformerFactory) TransformerFactory.newInstance();  // SAX2.0 ContentHandler TransformerHandler transformerHandler = tf.newTransformerHandler();  Transformer serializer = transformerHandler.getTransformer();  serializer.setOutputProperty(OutputKeys.ENCODING, ""UTF-8""); // serializer.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM, ""nodes.dtd""); serializer.setOutputProperty(OutputKeys.INDENT, ""yes"");  transformerHandler.setResult(streamResult);  transformerHandler.startDocument();  atts.clear(); // atts.addAttribute("""", """", ""xmlns"", ""CDATA"", ""http://www.example.com/nodes""); // atts.addAttribute("""", """", ""xmlns:xsi"", ""CDATA"", ""http://www.w3.org/2001/XMLSchema-instance""); // atts.addAttribute("""", """", ""xsi:schemaLocation"", ""CDATA"", ""/nodes.xsd""); transformerHandler.startElement("""", """", ""node_list"", atts);  // displayName element if (displayName != null) {     transformerHandler.startElement("""", """", ""display_name"", null);     ch = displayName.toCharArray();     transformerHandler.characters(ch, 0, ch.length);     transformerHandler.endElement("""", """", ""display_name""); }  // nodes element transformerHandler.startElement("""", """", ""nodes"", null);  atts.clear(); atts.addAttribute("""", """", ""node_type"", ""CDATA"", ""sometype""); transformerHandler.startElement("""", """", ""node"", atts);  ch = node.getValue().toCharArray(); transformerHandler.startElement("""", """", ""value"", null); transformerHandler.characters(ch, 0, ch.length); transformerHandler.endElement("""", """", ""value"");  transformerHandler.endElement("""", """", ""node"");  transformerHandler.endElement("""", """", ""nodes"");  transformerHandler.endElement("""", """", ""node_list"");  transformerHandler.endDocument();  String xml = writer.toString();"
"FileOutputStream fileOutputStream = new FileOutputStream(outXmlFile); XMLStreamWriter defaultWriter = factory.createXMLStreamWriter(fileOutputStream, encoding); IndentingXMLStreamWriter writer = new IndentingXMLStreamWriter(defaultWriter); writer.setIndentStep(""  ""); try {     writer.writeStartDocument(encoding, ""1.0"");      if (stylesheet != null)     {         writer.writeProcessingInstruction(""xml-stylesheet"", ""type='text/xsl' href='"" + stylesheet + ""'"");         writer.writeCharacters(""\n"");     }       writer.writeStartElement(TAG_ROOT);     writer.writeAttribute(TAG_OBJECT_TYPE, rootObject.getClass().getSimpleName());      ...      writer.writeEndElement();     writer.writeEndDocument(); }  finally {     writer.flush();     writer.close();     fileOutputStream.close(); }"
"XStream xstream = new XStream(            new DomDriver() {                public HierarchicalStreamWriter createWriter(Writer out) {                    return new MyWriter(out);}}); String xml = xstream.toXML(myObj);      ......  public class MyWriter extends PrettyPrintWriter {     public MyWriter(Writer writer) {         super(writer);     }      protected void writeText(QuickWriter writer, String text) {          if (text.indexOf('&lt;') &lt; 0) {             writer.write(text);         }         else {              writer.write(""&lt;[CDATA[""); writer.write(text); writer.write(""]]&gt;"");          }     } }"
"CsvListReader reader = new CsvListReader(new FileReader(inputCsv), CsvPreference.STANDARD_PREFERENCE); CsvListWriter writer = new CsvListWriter(new FileWriter(outputCsv), CsvPreference.STANDARD_PREFERENCE); List&lt;String&gt; columns; while ((columns = reader.read()) != null) {     System.out.println(""Input: "" + columns);     // Add new columns     columns.add(1, ""Column_2"");     columns.add(""Last_column"");      System.out.println(""Output: "" + columns);     writer.write(columns); } reader.close(); writer.close();"
"public static void export2CSV(HttpServletResponse response,         String[] header, String filePrefix, List&lt;? extends Object&gt; dataObjs) {     ICsvBeanWriter writer;     try{         response.setContentType(""text/csv;charset=utf-8"");          response.setHeader(""Content-Disposition"",             ""attachment; filename=""+filePrefix+""_Data.csv"");          OutputStreamWriter outputwriter =              new OutputStreamWriter(response.getOutputStream());           writer = new CsvBeanWriter(outputwriter, CsvPreference.EXCEL_PREFERENCE);          // the actual writing         writer.writeHeader(header);          for(Object anObj : dataObjs){             writer.write(anObj, header);                                         }     } catch (Exception e) {         e.printStackTrace();     } finally {         try {             writer.close(); // closes writer and underlying stream         } catch (Exception e){}     } };"
"String[] wrds   = counter.getWords(WordCounter.SortOrder.BY_FREQUENCY); int[] frequency = counter.getFrequencies(WordCounter.SortOrder.BY_FREQUENCY);         String texttoWrite = """"; int n = counter.getEntryCount(); for (int i=0; i&lt;n; i++)  {     texttoWrite += frequency[i] + "" "" + wrds[i]+"" ""+ counter.getWordCount(); } try{  FileWriter fstream = new FileWriter(""out.txt"");  BufferedWriter out = new BufferedWriter(fstream);  out.write(texttoWrite);  out.close();  }catch (Exception e){   System.err.println(""Error: "" + e.getMessage());  } }"
"JFrame f = new JFrame();     f.setLayout(new BorderLayout());     f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     JPanel p = new JPanel(new GridLayout(0, 5));     JScrollPane jsp = new JScrollPane(p);      jsp.setPreferredSize(new Dimension(300,300));     jsp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);     jsp.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);      for (int i = 0; i &lt; 100; i++) {         JButton b = new JButton(""Button "" + i);         p.add(b);     }      f.add(jsp, BorderLayout.CENTER);     f.setLocation(300, 300);     f.setVisible(true);     f.pack();"
"DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();         dbf.setNamespaceAware(true);         DocumentBuilder db = dbf.newDocumentBuilder();         InputStream is = post.getResponseBodyAsStream();         Document doc = db.parse(is);         DOMSource ds = new DOMSource(doc);         JAXBContext responseContext = JAXBContext.newInstance(SearchEnrolledFundingResponse.class);         Unmarshaller u = responseContext.createUnmarshaller();         JAXBElement&lt;SearchEnrolledFundingResponse&gt; jaxbResponse = (JAXBElement&lt;SearchEnrolledFundingResponse&gt;) u.unmarshal(ds, SearchEnrolledFundingResponse.class);         SearchEnrolledFundingResponse searchResponse = jaxbResponse.getValue();"
"JComponent     title = ((BasicInternalFrameUI)myInternalFrame.getUI()).getNorthPane();     for (int i = 0; i &lt; title.getComponentCount(); i++) {         JComponent component = (JComponent)title.getComponent(i);         if(component instanceof JButton) {             JButton button = ((JButton)component);             if(button.getName() == null) continue;             if(button.getName().endsWith(""closeButton"")) {                 button.setIcon(myIcon);                 button.setSelectedIcon(myIcon);                 button.setPressedIcon(myIcon);             }             if(button.getName().endsWith(""maximizeButton"")) {                 ...             }             if(button.getName().endsWith(""iconifyButton"")) {                 ...             }         }     }"
"URL url = new URL(urlString);     URLConnection conn = url.openConnection();     conn.setDoOutput(true);     conn.setRequestProperty (""Authorization"", encodedCredentials);      OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream());      writer.write(data);     writer.flush();     String line;     BufferedReader reader = new BufferedReader(new                                       InputStreamReader(conn.getInputStream()));     while ((line = reader.readLine()) != null) {       System.out.println(line);     }     writer.close();     reader.close();"
com.sun.jersey.core.impl.provider.entity.FormProvider com.sun.jersey.core.impl.provider.entity.MimeMultipartProvider com.sun.jersey.core.impl.provider.entity.StringProvider com.sun.jersey.core.impl.provider.entity.ByteArrayProvider com.sun.jersey.core.impl.provider.entity.FileProvider com.sun.jersey.core.impl.provider.entity.InputStreamProvider com.sun.jersey.core.impl.provider.entity.DataSourceProvider com.sun.jersey.core.impl.provider.entity.XMLJAXBElementProvider$General com.sun.jersey.core.impl.provider.entity.ReaderProvider com.sun.jersey.core.impl.provider.entity.DocumentProvider com.sun.jersey.core.impl.provider.entity.StreamingOutputProvider com.sun.jersey.core.impl.provider.entity.SourceProvider$SourceWriter
"if (s.getRouteType().equals(RouteType.*Something*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_negru))); } else if (s.getRouteType().equals(RouteType.*SomethingElse*)) {     mMap.addMarker(new MarkerOptions().position(new LatLng(s.getLatitude(),s.getLongitude())).title(s.getRouteType().toString()).icon(BitmapDescriptorFactory.fromResource(R.drawable.punct_rosu))); }"
"int indexOfSpace = 0; int nextIndexOfSpace = 0;  String sentence  = ""This is a sentence"";  int lastIndexOfSpace = sentence.lastIndexOf("" ""); while(indexOfSpace != lastIndexOfSpace){     nextIndexOfSpace = sentence.indexOf("" "",indexOfSpace);       String word = sentence.subString(indexOfSpace,nextIndexOfSpace);     System.out.println(""Word: "" + word + "" Length: "" + word.length());     indexOfSpace = nextIndexOfSpace; }  String lastWord = sentence.subString(lastIndexOfSpace); System.out.println(""Word: "" + lastWord + "" Length: "" + lastWord.length());"
"net.sf.json.JSONObject obj = new net.sf.json.JSONObject(); obj.put(&quot;jsonStringValue&quot;,&quot;{\&quot;hello\&quot;:\&quot;world\&quot;}&quot;); obj.put(&quot;quotedJsonStringValue&quot;,&quot;\'{\&quot;hello\&quot;:\&quot;world\&quot;}\'&quot;); obj.put(&quot;naturalStringValue&quot;, &quot;\&quot;hello world\&quot;&quot;); System.out.println(obj.toString()); System.out.println(obj.getString(&quot;jsonStringValue&quot;)); System.out.println(obj.getString(&quot;quotedJsonStringValue&quot;)); System.out.println(obj.getString(&quot;naturalStringValue&quot;));"
"PGPSignatureGenerator sGen = new PGPSignatureGenerator(new JcaPGPContentSignerBuilder(skey.getPublicKey().getAlgorithm(), PGPUtil.SHA256).setProvider(""BC""));         PGPSignatureSubpacketGenerator  spGen = new PGPSignatureSubpacketGenerator();          sGen.init(PGPSignature.CANONICAL_TEXT_DOCUMENT, prKey);         Iterator userIDs = skey.getPublicKey().getUserIDs();         if (it.hasNext()) {             spGen.setSignerUserID(false, (String)userIDs.next());             sGen.setHashedSubpackets(spGen.generate());         }          ArmoredOutputStream aos = new ArmoredOutputStream(baos);         aos.beginClearText(PGPUtil.SHA256);          sGen.update(dataBytes);         aos.write(dataBytes);          aos.endClearText();          BCPGOutputStream bOut = new BCPGOutputStream(aos);         sGen.generate().encode(bOut);          aos.flush();         aos.close();"
"public class ClientModule extends PrivateModule {   private final Writer writer;   private final Class&lt;? extends Annotation&gt; annotationType;    public ClientModule(Writer writer, Class&lt;? extends Annotation&gt; annotationType) {     this.writer = writer;     this.annotationType = annotationType;   }    @Override protected void configure() {     bind(Writer.class).toInstance(writer);     bind(Logger.class).to(LoggerImpl.class);     expose(Client.class).annotatedWith(annotationType);   } }  public class ClientFactoryModule extends AbstractModule {   private final File file;    public ClientFactoryModule(File file) {     this.file = file;   }    @Override protected void configure() {     install(new ClientModule(new StdOutWriter(), StdOut.class));     install(new ClientModule(new FileWriter(file), FileOut.class));     bind(ClientFactory.class).to(ClientFactoryImpl.class);   } }  public class ClientFactoryImpl implements ClientFactory {   private final Client stdOutClient;   private final Client fileClient;    @Inject public ClientFactoryImpl(@StdOut Client stdOutClient,                                     @FileOut Client fileClient) {     this.stdOutClient = stdOutClient;     this.fileClient = fileClient;   }    ... }"
"String newtype_mod=""""; String newcontent_mod="""";  if ((object.has(""message"")))  {      JSONObject message = object.getJSONObject(""message"");      newtype_mod = object.getJSONObject(""message"")                         .getString(""type"");      newcontent_mod = object.getJSONObject(""message"")                      .getString(""content"");      objSample = new GetSetMethod();      objSample.setnewcontent_mod(newcontent_mod);              objSample.setnewtype_mod(newtype_mod);      Log.v(""##""+newcontent_mod,""V ""+newtype_mod); }"
"PDRectangle rec = new PDRectangle(220, 120); PDDocument document = null; document = new PDDocument();  PDPage page = new PDPage(rec); document.addPage(page);  PDPageContentStream content = new PDPageContentStream(document, page, true, true);  content.beginText(); content.moveTextPositionByAmount(7, 105); content.setFont(PDType1Font.HELVETICA, 12); content.drawString(&quot;Normal text and &quot;); content.setFont(PDType1Font.HELVETICA_BOLD, 12); content.drawString(&quot;bold text&quot;); content.moveTextPositionByAmount(0, -25); content.setFont(PDType1Font.HELVETICA_OBLIQUE, 12); content.drawString(&quot;Italic text and &quot;); content.setFont(PDType1Font.HELVETICA_BOLD_OBLIQUE, 12); content.drawString(&quot;bold italic text&quot;); content.endText();  content.setLineWidth(.5f);  content.beginText(); content.moveTextPositionByAmount(7, 55); content.setFont(PDType1Font.HELVETICA, 12); content.drawString(&quot;Normal text and &quot;); content.appendRawCommands(&quot;2 Tr\n&quot;); content.drawString(&quot;artificially bold text&quot;); content.appendRawCommands(&quot;0 Tr\n&quot;); content.moveTextPositionByAmount(0, -25); content.appendRawCommands(&quot;1 Tr\n&quot;); content.drawString(&quot;Artificially outlined text&quot;); content.appendRawCommands(&quot;0 Tr\n&quot;); content.setTextMatrix(1, 0, .2f, 1, 7, 5); content.drawString(&quot;Artificially italic text and &quot;); content.appendRawCommands(&quot;2 Tr\n&quot;); content.drawString(&quot;bold italic text&quot;); content.appendRawCommands(&quot;0 Tr\n&quot;); content.endText();  content.close();  document.save(&quot;StyledTexts.pdf&quot;); document.close();"
"select         reviewsubj0_.id as id1_2_0_,         reviewsubj0_.subject as subject2_2_0_,         reviews1_.ReviewSubject_id as ReviewSu1_2_1_,         review2_.id as reviews_2_3_1_,         reviews1_.reviews_ORDER as reviews_3_1_,         review2_.id as id1_1_2_,         review2_.text as text2_1_2_,         comments3_.Review_id as Review_i1_1_3_,         comment4_.id as comments2_4_3_,         comments3_.comments_ORDER as comments3_3_,         comment4_.id as id1_0_4_,         comment4_.text as text2_0_4_      from         ReviewSubject reviewsubj0_      left outer join         ReviewSubject_Review reviews1_              on reviewsubj0_.id=reviews1_.ReviewSubject_id      left outer join         Review review2_              on reviews1_.reviews_id=review2_.id      left outer join         Review_Comment comments3_              on review2_.id=comments3_.Review_id      left outer join         Comment comment4_              on comments3_.comments_id=comment4_.id      where         reviewsubj0_.id=?"
"MultiSelectListPreference listPreference = new MultiSelectListPreference(context);     listPreference.setTitle(R.string.configure_category_title);     listPreference.setDialogTitle(R.string.configure_category_title);     listPreference.setSummary(R.string.configure_category_summary);     listPreference.setEntries(R.array.configure_category_array);     listPreference.setEntryValues(new CharSequence[]{             ProcessList.PREF_SERVICES + mAppWidgetId,             ProcessList.PREF_INACTIVE + mAppWidgetId,             ProcessList.PREF_INTERNAL + mAppWidgetId     });      //Create a Set&lt;String&gt; with list items that should be selected     SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);     boolean showServices = sharedPref.getBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, true);     boolean showInactive = sharedPref.getBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, true);     boolean showInternal = sharedPref.getBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, true);      String[] strings = new String[3];     int cnt = 0;     if (showServices)         strings[cnt++] = ProcessList.PREF_SERVICES + mAppWidgetId;     if (showInactive)         strings[cnt++] = ProcessList.PREF_INACTIVE + mAppWidgetId;     if (showInternal)         strings[cnt] = ProcessList.PREF_INTERNAL + mAppWidgetId;      Set&lt;String&gt; mySet = new HashSet&lt;String&gt;();     Collections.addAll(mySet, strings);      //Add the set     listPreference.setValues(mySet);      //Listen for changes, I'm not sure if this is how it's meant to work, but it does :/     listPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {         public boolean onPreferenceChange(Preference preference, Object o) {              HashSet hashSet = (HashSet) o;             Iterator stringIterator = hashSet.iterator();             boolean[] states = {false, false, false};             String prefString;              while (stringIterator.hasNext()) {                  prefString = (String) stringIterator.next();                  if (prefString == null)                     continue;                  if (prefString.compareTo(ProcessList.PREF_SERVICES + mAppWidgetId) == 0)                     states[0] = true;                 else if (prefString.compareTo(ProcessList.PREF_INACTIVE + mAppWidgetId) == 0)                     states[1] = true;                 else if (prefString.compareTo(ProcessList.PREF_INTERNAL + mAppWidgetId) == 0)                     states[2] = true;              }              PreferenceManager                     .getDefaultSharedPreferences(getActivity())                     .edit()                     .putBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, states[0])                     .putBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, states[1])                     .putBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, states[2])                     .commit();              return true;         }     });      preferenceCategory.addPreference(listPreference);"
"select ITEM.ID,ITEM.CREATEDDATE,ITEM.TYPEID,         CAT_DIC_AUTHOR.DISPLAYENTRY,         CAT_DIC_PUBLISHER.DISPLAYENTRY,         CAT_DIC_KEYWORD.ACCESSENTRY,CAT_DIC_KEYWORD.DISPLAYENTRY,         CAT_DIC_LANGUAGE.DISPLAYENTRY,CAT_DIC_LANGUAGE.NAMEVIET,         CAT_DIC_SH.DISPLAYENTRY,         CAT_DIC_ITEM_TYPE.ACCESSENTRY,CAT_DIC_ITEM_TYPE.TYPENAME  from ( select rownum r,ITEM.ID,ITEM.TYPEID, ITEM.CREATEDDATE from ITEM)  ITEM  LEFT JOIN ITEM_AUTHOR      ON ITEM.ID=ITEM_AUTHOR.ITEMID  LEFT JOIN CAT_DIC_AUTHOR      ON ITEM_AUTHOR.AUTHORID=CAT_DIC_AUTHOR.ID  LEFT JOIN ITEM_PUBLISHER      ON ITEM.ID=ITEM_PUBLISHER.ITEMID  LEFT JOIN CAT_DIC_PUBLISHER      ON ITEM_PUBLISHER.PUBLISHERID=CAT_DIC_PUBLISHER.ID  LEFT JOIN ITEM_KEYWORD      ON ITEM.ID=ITEM_KEYWORD.ITEMID  LEFT JOIN CAT_DIC_KEYWORD      ON ITEM_KEYWORD.KEYWORDID=CAT_DIC_KEYWORD.ID  LEFT JOIN ITEM_LANGUAGE      ON ITEM.ID=ITEM_LANGUAGE.ITEMID  LEFT JOIN CAT_DIC_LANGUAGE      ON ITEM_LANGUAGE.LANGUAGEID=CAT_DIC_LANGUAGE.ID  LEFT JOIN ITEM_SH      ON ITEM.ID=ITEM_SH.ITEMID  LEFT JOIN CAT_DIC_SH      ON ITEM_SH.SHID=CAT_DIC_SH.ID  LEFT JOIN CAT_DIC_ITEM_TYPE      ON ITEM.TYPEID=CAT_DIC_ITEM_TYPE.ID  where r&gt;100 and r&lt;=200"
"public JMenuItem createMenuItemWithListener(String text,                                              char mnemonic,                                              ActionListener action) {     JMenuItem result = new JMenuItem(text);     result.setMnemonic(mnemonic);     result.addActionListener(action);     return result; }  public JMenuItem createMenuItemWithAction(char mnemonic,                                            Action action) {     JMenuItem result = new JMenuItem(action);     result.setMnemonic(mnemonic);     return result; }"
"try {         String insertTableSQL = ""INSERT INTO DBUSER""+ ""fcltyName,CommunicationOral,Communicationwritten,Leadership,AnalyticalAbilities,Interpersonalskills,DecisionMakingSkills,SelfConfidence,Creativity,Punctualityregularity,GeneralAwareness,Commitment,HardWork) VALUES""+ ""(?,?,?,?,?,?,?,?,?,?,?,?,?)"";          dbConnection = getDBConnection();         preparedStatement = dbConnection.prepareStatement(insertTableSQL);          preparedStatement.setStringt(1, fcltyName);         preparedStatement.setInt(2, 0);         preparedStatement.setInt(3, 0);         preparedStatement.setInt(4,0);         preparedStatement.setInt(5, 0);         preparedStatement.setInt(6, 0);         preparedStatement.setInt(7,0);         preparedStatement.setInt(8, 0);         preparedStatement.setInt(9, 0);         preparedStatement.setInt(10,0);         preparedStatement.setInt(11, 0);         preparedStatement.setInt(12, 0);         preparedStatement.setInt(13,0);          // execute insert SQL stetement         preparedStatement.executeUpdate();}'"
"public void sendPdf() throws IOException {     FacesContext facesContext = FacesContext.getCurrentInstance();     ExternalContext externalContext = facesContext.getExternalContext();     externalContext.setResponseContentType(&quot;application/pdf&quot;);     externalContext.setResponseHeader(&quot;Content-Disposition&quot;, &quot;inline; filename=\&quot;filename.pdf\&quot;&quot;);     yourJasperReportsClass.writePdfTo(externalContext.getResponseOutputStream());     facesContext.responseComplete(); }"
"for(Object obj : elemetns){    if(obj instanceof Tbl){       Tbl table = (Tbl) obj;          List rows = getAllElementFromObject(table, Tr.class);             for(Object trObj : rows){          Tr tr = (Tr) trObj;          List cols = getAllElementFromObject(tr, Tc.class);          for(Object tcObj : cols){             Tc tc = (Tc) tcObj;             List texts = getAllElementFromObject(tc, Text.class);             for(Object textObj : texts){               Text text = (Text) textObj;                      if(text.getValue().equalsIgnoreCase(""${MY_PLACE_HOLDER}"")){                         File file = new File(""C:\\image.jpeg"");                  P paragraphWithImage = addInlineImageToParagraph(createInlineImage(file));                         tc.getContent().remove(0);                          tc.getContent().add(paragraphWithImage);               }                   }            System.out.println(""here"");          }            }         System.out.println(""here"");     } }  wordMLPackage.save(new java.io.File(""C:\\result.docx""));"
"InputStream response = new ByteArrayInputStream(""&lt;Response&gt; &lt;aa&gt; ""         + ""&lt;Fromhere&gt; &lt;a1&gt;Content&lt;/a1&gt; &lt;a2&gt;Content&lt;/a2&gt; &lt;/Fromhere&gt; ""         + ""&lt;/aa&gt; &lt;/Response&gt;"".getBytes()); /* Or whatever. */  DocumentBuilder builder = DocumentBuilderFactory         .newInstance().newDocumentBuilder(); Document doc = builder.parse(response);  XPath xpath = XPathFactory.newInstance().newXPath(); XPathExpression expr = xpath.compile(""string(/Response/aa/FromHere)""); String result = (String)expr.evaluate(doc, XPathConstants.STRING);"
