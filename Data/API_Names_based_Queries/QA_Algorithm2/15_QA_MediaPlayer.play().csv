code
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"public MediaView createMediaView(Collection&lt;String&gt; urls){     MediaView mediaView = new MediaView();     initMediaPlayer(mediaView, urls.iterator());     return mediaView; }  private void initMediaPlayer(           final MediaView mediaView,            final Iterator&lt;String&gt; urls ){     if (urls.hasNext()){         MediaPlayer mediaPlayer = new MediaPlayer(new Media(urls.next()));         mediaPlayer.setAutoPlay(true);         mediaPlayer.setOnEndOfMedia(new Runnable() {             @Override public void run() {                 initMediaPlayer(mediaView, urls);             }         });         mediaView.setMediaPlayer(mediaPlayer);     }  }"
"Public class MediaPlayerDemo_Video extends Activity implements TextureView.SurfaceTextureListener {    private MediaPlayer mMediaPlayer;   private TextureView mPreview;   @Override  public void onCreate(Bundle icicle) {        super.onCreate(icicle);        mPreview = new TextureView(this);       mPreview.setLayoutParams(new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));       mPreview.setSurfaceTextureListener(this);        extras = getIntent().getExtras();        setContentView(mPreview);  }   @Override  public void onSurfaceTextureAvailable(SurfaceTexture surface, int width, int height) {  Surface s = new Surface(surface);   try {        mMediaPlayer= new MediaPlayer();        mMediaPlayer.setDataSource(""http://daily3gp.com/vids/747.3gp"");        mMediaPlayer.setSurface(s);        mMediaPlayer.prepare();        mMediaPlayer.setOnBufferingUpdateListener(this);        mMediaPlayer.setOnCompletionListener(this);        mMediaPlayer.setOnPreparedListener(this);        mMediaPlayer.setOnVideoSizeChangedListener(this);        mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);        mMediaPlayer.start();       } catch (IllegalArgumentException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (SecurityException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IllegalStateException e) {         // TODO Auto-generated catch block         e.printStackTrace();     } catch (IOException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }    }"
"public class Level01vraag01 extends Activity implements OnClickListener {      int playknopvariable = 0;     MediaPlayer mp;      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.vraaglayout);         setupButtonClickListeners();         mp = MediaPlayer.create(Level01vraag01.this, R.raw.mcdonalds);      }  private void setupButtonClickListeners() {     ImageView playsoundButton = (ImageView) findViewById(R.id.playsoundbutton);     playsoundButton.setOnClickListener(this); }"
"import net.rim.device.api.ui.Color; import net.rim.device.api.ui.Field; import net.rim.device.api.ui.FieldChangeListener; import net.rim.device.api.ui.Graphics; import net.rim.device.api.ui.Manager; import net.rim.device.api.ui.component.BasicEditField; import net.rim.device.api.ui.container.HorizontalFieldManager; import net.rim.device.api.ui.container.VerticalFieldManager; import net.rim.device.api.util.Arrays;  public class CustomTextField extends VerticalFieldManager {     private int textWidth = 0;    private int textHeight = 0;    private CustomHorizontalFieldManager hfm;     public CustomTextField(int width, int height) {       super();        textWidth = width;       textHeight = height;        hfm = new CustomHorizontalFieldManager();       add(hfm);    }     protected void sublayout(int maxWidth, int maxHeight) {       super.sublayout(textWidth, textHeight);       setExtent(textWidth, textHeight);    }     protected void paint(Graphics graphics) {       // TODO: change me!       super.paint(graphics);       graphics.setColor(Color.BLACK);       graphics.drawRect(0, 0, textWidth, textHeight);    }     private class CustomHorizontalFieldManager extends HorizontalFieldManager implements FieldChangeListener {        private BasicEditField basicEditField;       /** the maximum virtual width of the edit field, based on the max num of chars */       private int maxVirtualWidth;        public CustomHorizontalFieldManager() {          super(Manager.HORIZONTAL_SCROLL);           int maxNumChars = 200;          basicEditField = new BasicEditField("""", """", maxNumChars, BasicEditField.NO_NEWLINE);           // determine how wide the field would need to be to hold 'maxNumChars', with the font          //   in use ... just pick a long string of all W's, since that's usually the widest char          char[] buffer = new char[maxNumChars];          Arrays.fill(buffer, 'W');          String spacer = new String(buffer);          maxVirtualWidth = basicEditField.getFont().getAdvance(spacer);           // we need to listen as the user types in this field, so we can dynamically alter its          //   virtual width          basicEditField.setChangeListener(this);           add(basicEditField);       }        protected void sublayout(int maxWidth, int maxHeight) {          super.sublayout(maxWidth, maxHeight);          // extent is the visible size, virtual extent can be wider if we want scrolling          setExtent(textWidth, textHeight);          setVirtualExtent(maxVirtualWidth, textHeight);       }        public void fieldChanged(Field f, int context) {          if (f == basicEditField) {             // recalculate how much virtual width the edit field needs, based on the              //  current text content             int newWidth = basicEditField.getFont().getAdvance(basicEditField.getText());             setVirtualExtent(newWidth, textHeight);          }       }    }  }"
mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() { @Override public void onCompletion(MediaPlayer mp)  {    if(currentPosition&lt;sourceArray.size())    {         mediaPlayer.reset();        /* load the new source */        mediaPlayer.setDataSource(sourceArray[position]);        /* Prepare the mediaplayer */        mediaPlayer.prepare();        /* start */        mediaPlayer.start();    }    else    {        /* release mediaplayer */        mediaPlayer.release();    }  }
"public class mediaPlayer extends JFrame {     public mediaPlayer()     {         setLayout(new BorderLayout());          //file you want to play         URL mediaURL = //Whatever         //create the media player with the media url         Player mediaPlayer = Manager.createRealizedPlayer(mediaURL);         //get components for video and playback controls         Component video = mediaPlayer.getVisualComponent();         Component controls = mediaPlayer.getControlPanelComponent();         add(video,BorderLayout.CENTER);         add(controls,BorderLayout.SOUTH);     } }"
"import com.xuggle.mediatool.IMediaWriter; import com.xuggle.mediatool.ToolFactory; import com.xuggle.xuggler.IAudioSamples; import com.xuggle.xuggler.ICodec; import com.xuggle.xuggler.IContainer; import com.xuggle.xuggler.IPacket; import com.xuggle.xuggler.IStream; import com.xuggle.xuggler.IStreamCoder; import com.xuggle.xuggler.IVideoPicture;    /**  * This class is used to merge audio and video file.  *  * @author Arslaan Ejaz  */ public class DecodeAndSaveAudioVideo {   public static void main(String[] args)   {      String filenamevideo = ""f:/testvidfol/video.mp4""; //this is the input file for video. you can change extension     String filenameaudio = ""f:/testvidfol/audio.wav""; //this is the input file for audio. you can change extension       IMediaWriter mWriter = ToolFactory.makeWriter(""f:/testvidfol/audiovideooutput.flv""); //output file      IContainer containerVideo = IContainer.make();     IContainer containerAudio = IContainer.make();      if (containerVideo.open(filenamevideo, IContainer.Type.READ, null) &lt; 0)         throw new IllegalArgumentException(""Cant find "" + filenamevideo);      if (containerAudio.open(filenameaudio, IContainer.Type.READ, null) &lt; 0)         throw new IllegalArgumentException(""Cant find "" + filenameaudio);      int numStreamVideo = containerVideo.getNumStreams();     int numStreamAudio = containerAudio.getNumStreams();      System.out.println(""Number of video streams: ""+numStreamVideo + ""\n"" + ""Number of audio streams: ""+numStreamAudio );  int videostreamt = -1; //this is the video stream id int audiostreamt = -1;  IStreamCoder  videocoder = null;      for(int i=0; i&lt;numStreamVideo; i++){         IStream stream = containerVideo.getStream(i);         IStreamCoder code = stream.getStreamCoder();          if(code.getCodecType() == ICodec.Type.CODEC_TYPE_VIDEO)         {             videostreamt = i;             videocoder = code;             break;         }      }      for(int i=0; i&lt;numStreamAudio; i++){         IStream stream = containerAudio.getStream(i);         IStreamCoder code = stream.getStreamCoder();          if(code.getCodecType() == ICodec.Type.CODEC_TYPE_AUDIO)         {             audiostreamt = i;             break;         }      }      if (videostreamt == -1) throw new RuntimeException(""No video steam found"");     if (audiostreamt == -1) throw new RuntimeException(""No audio steam found"");      if(videocoder.open()&lt;0 ) throw new RuntimeException(""Cant open video coder"");     IPacket packetvideo = IPacket.make();      IStreamCoder audioCoder = containerAudio.getStream(audiostreamt).getStreamCoder();      if(audioCoder.open()&lt;0 ) throw new RuntimeException(""Cant open audio coder"");     mWriter.addAudioStream(1, 1, audioCoder.getChannels(), audioCoder.getSampleRate());      mWriter.addVideoStream(0, 0, videocoder.getWidth(), videocoder.getHeight());      IPacket packetaudio = IPacket.make();      while(containerVideo.readNextPacket(packetvideo) &gt;= 0 ||             containerAudio.readNextPacket(packetaudio) &gt;= 0){          if(packetvideo.getStreamIndex() == videostreamt){              //video packet             IVideoPicture picture = IVideoPicture.make(videocoder.getPixelType(),                     videocoder.getWidth(),                     videocoder.getHeight());             int offset = 0;             while (offset &lt; packetvideo.getSize()){                 int bytesDecoded = videocoder.decodeVideo(picture,                          packetvideo,                          offset);                 if(bytesDecoded &lt; 0) throw new RuntimeException(""bytesDecoded not working"");                 offset += bytesDecoded;                  if(picture.isComplete()){                     System.out.println(picture.getPixelType());                     mWriter.encodeVideo(0, picture);                  }             }         }           if(packetaudio.getStreamIndex() == audiostreamt){            //audio packet              IAudioSamples samples = IAudioSamples.make(512,                      audioCoder.getChannels(),                     IAudioSamples.Format.FMT_S32);               int offset = 0;             while(offset&lt;packetaudio.getSize())             {                 int bytesDecodedaudio = audioCoder.decodeAudio(samples,                          packetaudio,                         offset);                 if (bytesDecodedaudio &lt; 0)                     throw new RuntimeException(""could not detect audio"");                 offset += bytesDecodedaudio;                  if (samples.isComplete()){                      mWriter.encodeAudio(1, samples);          }             }      }    } } }"
"public class Player extends VideoView implements OnPreparedListener, OnCompletionListener, OnErrorListener {     private MediaPlayer mediaPlayer;      public Player(Context context, AttributeSet attributes) {         super(context, attributes);          this.setOnPreparedListener(this);         this.setOnCompletionListener(this);         this.setOnErrorListener(this);     }      @Override     public void onPrepared(MediaPlayer mediaPlayer) {         this.mediaPlayer = mediaPlayer;     }      @Override     public boolean onError(MediaPlayer mediaPlayer, int what, int extra) { ... }      @Override     public void onCompletion(MediaPlayer mediaPlayer) { ... }      public void mute() {         this.setVolume(0);     }      public void unmute() {         this.setVolume(100);     }      private void setVolume(int amount) {         final int max = 100;         final double numerator = max - amount &gt; 0 ? Math.log(max - amount) : 0;         final float volume = (float) (1 - (numerator / Math.log(max)));          this.mediaPlayer.setVolume(volume, volume);     } }"
"import net.rim.device.api.ui.*; import net.rim.device.api.ui.container.*; import net.rim.device.api.ui.component.*; import net.rim.device.api.system.*; import java.lang.*; import javax.microedition.media.*; import java.io.*; import javax.microedition.media.control.*;  public class VideoRecordingDemo extends UiApplication {     public static void main(String[] args)     {          VideoRecordingDemo app = new VideoRecordingDemo();          app.enterEventDispatcher();     }      public VideoRecordingDemo()     {          pushScreen(new VideoRecordingDemoScreen());     }      private class VideoRecordingDemoScreen extends MainScreen       {            private VideoRecorderThread _recorderThread;          public VideoRecordingDemoScreen()         {             setTitle(""Video recording demo"");              addMenuItem(new StartRecording());             addMenuItem(new StopRecording());         }          private class StartRecording extends MenuItem          {             public StartRecording()              {                 super(""Start recording"", 0, 100);             }              public void run()              {                 try                  {                     VideoRecorderThread newRecorderThread = new VideoRecorderThread();                     newRecorderThread.start();                     _recorderThread = newRecorderThread;                 }                   catch (Exception e)                  {                     Dialog.alert(e.toString());                 }             }         }          private class StopRecording extends MenuItem          {             public StopRecording()              {                 super(""Stop recording"", 0, 100);             }              public void run()              {                 try                  {                     if (_recorderThread != null)                      {                          _recorderThread.stop();                     }                 }                  catch (Exception e)                  {                     Dialog.alert(e.toString());                 }             }         }          private class VideoRecorderThread extends Thread implements javax.microedition.media.PlayerListener         {             private Player _player;             private RecordControl _recordControl;              VideoRecorderThread()             {             }              public void run()              {                 try                  {                     _player = javax.microedition.media.Manager.createPlayer(""capture://video?encoding=video/3gpp"");                      _player.addPlayerListener(this);                      _player.realize();                     VideoControl videoControl = (VideoControl) _player.getControl(""VideoControl"");                     _recordControl = (RecordControl) _player.getControl( ""RecordControl"" );                       Field videoField = (Field) videoControl.initDisplayMode(VideoControl.USE_GUI_PRIMITIVE, ""net.rim.device.api.ui.Field"");                      try                     {                         videoControl.setDisplaySize( Display.getWidth(), Display.getHeight() );                     }                     catch( MediaException me )                     {                         // setDisplaySize is not supported                     }                      add(videoField);                      _recordControl.setRecordLocation(""file:///store/home/user/VideoRecordingTest.3gpp"" );                         _recordControl.startRecord();                      _player.start();                  }                 catch( IOException e )                  {                     Dialog.alert(e.toString());                 }                 catch( MediaException e )                  {                     Dialog.alert(e.toString());                 }             }             public void stop()              {                 if (_player != null)                  {                      _player.close();                      _player = null;                 }                  if (_recordControl != null)                  {                     _recordControl.stopRecord();                      try                      {                         _recordControl.commit();                     }                      catch (Exception e)                      {                         Dialog.alert(e.toString());                     }                     _recordControl = null;                 }              }              public void playerUpdate(Player player, String event, Object eventData)              {                 Dialog.alert(""Player "" + player.hashCode() + "" got event "" + event + "": "" + eventData);             }         }     } }"
"package com.spmsoftware.plugin.listeners;  import com.atlassian.event.api.EventListener; import com.atlassian.event.api.EventPublisher; import com.atlassian.jira.component.ComponentAccessor; import com.atlassian.jira.event.issue.IssueEvent; import com.atlassian.jira.event.type.EventType; import com.atlassian.jira.issue.Issue; import com.atlassian.jira.issue.MutableIssue; import com.atlassian.jira.issue.customfields.manager.OptionsManager; import com.atlassian.jira.issue.customfields.option.Option; import com.atlassian.jira.issue.customfields.option.Options; import com.atlassian.jira.issue.fields.CustomField; import com.atlassian.jira.issue.fields.config.FieldConfig; import com.atlassian.jira.issue.fields.config.FieldConfigScheme; import org.apache.log4j.Logger; import org.springframework.beans.factory.DisposableBean; import org.springframework.beans.factory.InitializingBean;  import java.util.List; import java.util.Map;  /**  * User: adnan  * Date: 5/4/14  * Time: 4:49 PM  */ public class IssueUpdateListener  implements InitializingBean, DisposableBean {      private static final Logger LOGGER = Logger.getLogger(IssueUpdateListener.class);      private final EventPublisher eventPublisher;    // private final JiraAuthenticationContext authenticationContext;      public IssueUpdateListener(EventPublisher eventPublisher) {         this.eventPublisher = eventPublisher;        // this.authenticationContext = ComponentAccessor.getJiraAuthenticationContext();     }      @Override     public void afterPropertiesSet() throws Exception {         eventPublisher.register(this);     }      @Override     public void destroy() throws Exception {         eventPublisher.unregister(this);     }      @EventListener     public void onIssueEvent(IssueEvent issueEvent) {         Long eventTypeId = issueEvent.getEventTypeId();         Issue issue = issueEvent.getIssue();         if (eventTypeId.equals(EventType.ISSUE_RESOLVED_ID)) {             MutableIssue mutableIssue = getMutableIssue(issue);             CustomField customerNameCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""Customer Name"");             CustomField allCustomersCF = ComponentAccessor.getCustomFieldManager().getCustomFieldObjectByName(""All Customers"");             Object customerNameVal = mutableIssue.getCustomFieldValue(customerNameCF);             Option newOptions = addOptionToCustomField(allCustomersCF, customerNameVal.toString());             LOGGER.info(""New updated option {}"" + newOptions);         }     }      private MutableIssue getMutableIssue(Issue issue) {         MutableIssue mutableIssue;         if (issue instanceof MutableIssue)   {             mutableIssue = (MutableIssue)issue;         } else {             mutableIssue = ComponentAccessor.getIssueManager().getIssueObject(issue.getKey());         }         return mutableIssue;     }       public Option addOptionToCustomField(CustomField customField, String value) {         Option newOption = null;         if (customField != null) {             List&lt;FieldConfigScheme&gt; schemes = customField.getConfigurationSchemes();             if (schemes != null &amp;&amp; !schemes.isEmpty()) {                 FieldConfigScheme sc = schemes.get(0);                 Map configs = sc.getConfigsByConfig();                 if (configs != null &amp;&amp; !configs.isEmpty()) {                     FieldConfig config = (FieldConfig) configs.keySet().iterator().next();                     OptionsManager optionsManager = ComponentAccessor.getOptionsManager();                     Options l = optionsManager.getOptions(config);                     int nextSequence = l.isEmpty() ? 1 : l.getRootOptions().size() + 1;                     newOption = optionsManager.createOption(config, null, (long) nextSequence, value);                 }             }         }          return newOption;     }  }"
"RelatedResults results = t.getRelatedResults(tweetId); List&lt;Status&gt; conversations = results.getTweetsWithConversation(); ///////// Status originalStatus = t.showStatus(tweetId); if (conversations.isEmpty()) {     conversations = results.getTweetsWithReply(); }  if (conversations.isEmpty()) {     conversations = new ArrayList&lt;Status&gt;();     Status status = originalStatus;     while (status.getInReplyToStatusId() &gt; 0) {         status = t.showStatus(status.getInReplyToStatusId());         conversations.add(status);     } } // show the current message in the conversation, if there's such if (!conversations.isEmpty()) {     conversations.add(originalStatus); }"
"private void lockScreenControls() {      // Use the media button APIs (if available) to register ourselves for media button     // events      MediaButtonHelper.registerMediaButtonEventReceiverCompat(mAudioManager, mMediaButtonReceiverComponent);     // Use the remote control APIs (if available) to set the playback state     if (mRemoteControlClientCompat == null) {         Intent intent = new Intent(Intent.ACTION_MEDIA_BUTTON);         intent.setComponent(mMediaButtonReceiverComponent);         mRemoteControlClientCompat = new RemoteControlClientCompat(PendingIntent.getBroadcast(this /*context*/,0 /*requestCode, ignored*/, intent /*intent*/, 0 /*flags*/));         RemoteControlHelper.registerRemoteControlClient(mAudioManager,mRemoteControlClientCompat);     }     mRemoteControlClientCompat.setPlaybackState(RemoteControlClient.PLAYSTATE_PLAYING);     mRemoteControlClientCompat.setTransportControlFlags(             RemoteControlClient.FLAG_KEY_MEDIA_PAUSE |             RemoteControlClient.FLAG_KEY_MEDIA_PREVIOUS |             RemoteControlClient.FLAG_KEY_MEDIA_NEXT |             RemoteControlClient.FLAG_KEY_MEDIA_STOP);    //update remote controls     mRemoteControlClientCompat.editMetadata(true)             .putString(MediaMetadataRetriever.METADATA_KEY_ARTIST, ""NombreArtista"")             .putString(MediaMetadataRetriever.METADATA_KEY_ALBUM, ""Titulo Album"")             .putString(MediaMetadataRetriever.METADATA_KEY_TITLE, nombreCancion)             //.putLong(MediaMetadataRetriever.METADATA_KEY_DURATION,playingItem.getDuration())                     // TODO: fetch real item artwork             .putBitmap(RemoteControlClientCompat.MetadataEditorCompat.METADATA_KEY_ARTWORK, getAlbumArt())             .apply();     } }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"public class PlayerPanel extends JPanel {       private File vlcInstallPath = new File(""D:/vlc"");      private EmbeddedMediaPlayer player;       public PlayerPanel() {          NativeLibrary.addSearchPath(""libvlc"", vlcInstallPath.getAbsolutePath());          EmbeddedMediaPlayerComponent videoCanvas = new EmbeddedMediaPlayerComponent();          this.setLayout(new BorderLayout());          this.add(videoCanvas, BorderLayout.CENTER);          this.player = videoCanvas.getMediaPlayer();      }       public void play(String media) {          player.prepareMedia(media);          player.parseMedia();          player.play();      }  }   class VideoPlayer extends JFrame {       public VideoPlayer() {           PlayerPanel player = new PlayerPanel();           this.setTitle(""Swing Video Player"");           this.setDefaultCloseOperation(EXIT_ON_CLOSE);           this.setLayout(new BorderLayout());           this.setSize(640, 480);           this.setLocationRelativeTo(null);           this.add(player, BorderLayout.CENTER);           this.validate();           this.setVisible(true);            player.play(""http://174.132.240.162:8000/;stream.nsv"");      }        public static void main(String[] args) {           new VideoPlayer();       }  }"
"private static List&lt;InetAddress&gt; getIpAddress() {   try {     List&lt;InetAddress&gt; result = new ArrayList&lt;InetAddress&gt;();      Enumeration&lt;NetworkInterface&gt; interfaces = NetworkInterface.getNetworkInterfaces();     while (interfaces.hasMoreElements()) {       NetworkInterface intf = interfaces.nextElement();       Enumeration&lt;InetAddress&gt; addresses = intf.getInetAddresses();       while (addresses.hasMoreElements()) {         InetAddress address = addresses.nextElement();         if (!address.isLoopbackAddress() &amp;&amp; !address.isLinkLocalAddress()) {           result.add(address);         }       }     }     return result;   } catch (SocketException ex) {     Log.e(TAG, ""Failed to list network interfaces."", ex);     return null;   } }"
"mIntentFilter = new IntentFilter();   mIntentFilter.addAction(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);   mIntentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);   mIntentFilter.addAction(WifiManager.WIFI_STATE_CHANGED_ACTION);   mIntentFilter.addAction(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION);   registerReceiver(mReceiver, mIntentFilter);     public void onReceive(Context context, Intent intent)    {     String action  = intent.getAction();     if(action.equals(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION))     {     }else if(action.equals(WifiManager.WIFI_STATE_CHANGED_ACTION))     {      int iTemp = intent.getIntExtra(WifiManager.EXTRA_WIFI_STATE,        WifiManager.WIFI_STATE_UNKNOWN);      LogUtil.d(LOG_SET, ""+++++++-----------wifiStateReceiver------+++++++"", DEBUG);      checkState(iTemp);     }else if(action.equals(WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION))     {      DetailedState state =WifiInfo.getDetailedStateOf((SupplicantState)      intent.getParcelableExtra(WifiManager.EXTRA_SUPPLICANT_CONNECTED));      changeState(state);      LogUtil.d(LOG_SET, ""------------&gt;&gt;&gt;&gt;SUPPLICANT_STATE_CHANGED_ACTION&lt;&lt;&lt;&lt;&lt;&lt;-------"", DEBUG);     }     else if(action.equals(WifiManager.NETWORK_STATE_CHANGED_ACTION))     {         DetailedState state=        ((NetworkInfo)intent.getParcelableExtra(WifiManager.EXTRA_NETWORK_INFO)).getDetailedState();        changeState(state);      }    }    private void changeState(DetailedState aState)     {      LogUtil.d(LOG_SET, ""&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;changeState&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;""+aState, DEBUG);    if (aState == DetailedState.SCANNING)    {    Log.d(""wifiSupplicanState"", ""SCANNING"");    }    else if (aState == DetailedState.CONNECTING)    {    Log.d(""wifiSupplicanState"", ""CONNECTING"");    }else if(aState == DetailedState.OBTAINING_IPADDR)    {    Log.d(""wifiSupplicanState"", ""OBTAINING_IPADDR"");    }    else if (aState == DetailedState.CONNECTED)    {    Log.d(""wifiSupplicanState"", ""CONNECTED"");    }    else if (aState == DetailedState.DISCONNECTING)    {     Log.d(""wifiSupplicanState"", ""DISCONNECTING"");    }    else if (aState == DetailedState.DISCONNECTED)    {     Log.d(""wifiSupplicanState"", ""DISCONNECTTED"");    }    else if (aState == DetailedState.FAILED)    {    }   }    public void checkState(int aInt)   {    LogUtil.d(LOG_SET,""==&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;checkState&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;""+aInt, DEBUG);    if (aInt == WifiManager.WIFI_STATE_ENABLING)     {     Log.d(""WifiManager"", ""WIFI_STATE_ENABLING"");     }    else if (aInt== WifiManager.WIFI_STATE_ENABLED)    {    Log.d(""WifiManager"", ""WIFI_STATE_ENABLED"");     }     else if (aInt == WifiManager.WIFI_STATE_DISABLING)     {     Log.d(""WifiManager"", ""WIFI_STATE_DISABLING"");     }     else if (aInt == WifiManager.WIFI_STATE_DISABLED)     {     Log.d(""WifiManager"", ""WIFI_STATE_DISABLED"");     }   }"
"public class RolesAndServicesMapping {     private static final ImmutableMultimap&lt;Service, Authority&gt; SERVICES_TO_ROLES_MAPPING =           ImmutableMultimap.&lt;Service, Authority&gt;builder()             .put(Service.SFP1, Authority.ROLE_PREMIUM)             .put(Service.SFP, Authority.ROLE_PREMIUM)             .put(Service.SFE, Authority.ROLE_EXTRA)             .put(Service.SF, Authority.ROLE_STANDARD)             .put(Service.SK, Authority.ROLE_STANDARD)             .put(Service.SFP1, Authority.ROLE_ADMIN)             .put(Service.ADMIN, Authority.ROLE_ADMIN)             .put(Service.NONE, Authority.ROLE_DENY)             .build();      // Whole magic is here:     private static final ImmutableMultimap&lt;Authority, Service&gt; ROLES_TO_SERVICES_MAPPING =             SERVICES_TO_ROLES_MAPPING.inverse();     // before guava-11.0 it was: ImmutableMultimap.copyOf(Multimaps.invertFrom(SERVICES_TO_ROLES_MAPPING, HashMultimap.&lt;Authority, Service&gt;create()));      public static ImmutableSet&lt;Authority&gt; getRoles(final Service service) {         return Sets.immutableEnumSet(SERVICES_TO_ROLES_MAPPING.get(service));     }      public static ImmutableSet&lt;Service&gt; getServices(final Authority role) {         return Sets.immutableEnumSet(ROLES_TO_SERVICES_MAPPING.get(role));     } }"
"public static String addTracksToPlaylist(final long id, List&lt;MediaData&gt; tracks, final Context context) {     int count = getPlaylistSize(id, context);     ContentValues[] values = new ContentValues[tracks.size()];     for (int i = 0; i &lt; tracks.size(); i++) {         values[i] = new ContentValues();         values[i].put(MediaStore.Audio.Playlists.Members.PLAY_ORDER, i + count + 1);         values[i].put(MediaStore.Audio.Playlists.Members.AUDIO_ID, tracks.get(i).getId());     }     Uri uri = MediaStore.Audio.Playlists.Members.getContentUri(""external"", id);     ContentResolver resolver = context.getContentResolver();     int num = resolver.bulkInsert(uri, values);     resolver.notifyChange(Uri.parse(""content://media""), null);     return String.format(context.getString(R.string.ADDED_TO_PLAYLIST), num, context.getString(R.string.CURRENT));  }"
"import net.sourceforge.pmd.cpd.Tokens import net.sourceforge.pmd.cpd.TokenEntry import net.sourceforge.pmd.cpd.Tokenizer import net.sourceforge.pmd.cpd.CPDNullListener import net.sourceforge.pmd.cpd.MatchAlgorithm import net.sourceforge.pmd.cpd.SourceCode import net.sourceforge.pmd.cpd.SourceCode.StringCodeLoader import net.sourceforge.pmd.cpd.SimpleRenderer  // Prepare empty token data. TokenEntry.clearImages() def tokens = new Tokens()  // List all source files with text. def source = new TreeMap&lt;String, SourceCode&gt;() new File('.').eachFile { file -&gt;   if (file.isFile() &amp;&amp; file.name.endsWith('.txt')) {     def analyzedText = file.text     def sourceCode = new SourceCode(new StringCodeLoader(analyzedText, file.name))     source.put(sourceCode.fileName, sourceCode)     analyzedText.eachLine { line, lineNumber -&gt;       line.split('[\\W\\s\\t\\f]+').each { token -&gt;         token = token.trim()         if (token) {           tokens.add(new TokenEntry(token, sourceCode.fileName, lineNumber + 1))         }       }     }     tokens.add(TokenEntry.getEOF())   } }  // Run matching algorithm. def maxTokenChain = 15 def matchAlgorithm = new MatchAlgorithm(source, tokens, maxTokenChain, new CPDNullListener()) matchAlgorithm.findMatches()  // Produce report. matchAlgorithm.matches().each { match -&gt;   println ""  ========================================""   match.iterator().each { mark -&gt;     println ""  DUPLICATION ERROR: &lt;${mark.tokenSrcID}:${mark.beginLine}&gt; [DUPLICATION] Found a ${match.lineCount} line (${match.tokenCount} tokens) duplication!""   }   def indentedTextSlice = """"   match.sourceCodeSlice.eachLine { line -&gt;     indentedTextSlice += ""  $line\n""   }   println ""  ----------------------------------------""   println indentedTextSlice   println ""  ========================================"" }"
for (Iterator entries = logEntries.iterator(); entries.hasNext();) {                 SVNLogEntry logEntry = (SVNLogEntry) entries.next();                  if (logEntry.getChangedPaths().size() &gt; 0) {                     Set&lt;String&gt; changedPathsSet = logEntry.getChangedPaths().keySet();                      for (Iterator&lt;String&gt; changedPaths = changedPathsSet.iterator(); changedPaths                             .hasNext();) {                         SVNLogEntryPath entryPath = (SVNLogEntryPath) logEntry                                 .getChangedPaths().get(changedPaths.next());                         String path = entryPath.getPath();                         if (!path.startsWith(updatePath)) {                             continue;                         }
"public class SpinnerActivity extends Activity {      public static final int DIALOG_DOWNLOAD_PROGRESS = 0;     private ProgressDialog mProgressDialog;      Spinner spDownloadFrom;     private ArrayAdapter&lt;CharSequence&gt; spinnerArrayAdapter;     String url[] = {             ""http://www.becker.cl/bases.pdf"",             ""http://www.pitt.edu/documents/campusmap0607.pdf"",             ""http://www.aara.ca/reg3317/web_page_doc.pdf"",             ""http://www.dataprotection.ie/documents/guidance/GuidanceFinance.pdf"",             ""http://www.fmbb2012.com/JumpingQualifica1.pdf"",             ""http://www.consulatdumaroc.ca/coloniefh22012.pdf"",             ""http://www.rgrdlaw.com/media/cases/140_Complaint.pdf"" };     String name[] = { ""bases.pdf"", ""campusmap0607.pdf"", ""web_page_doc.pdf"",             ""GuidanceFinance.pdf"", ""JumpingQualifica1.pdf"",             ""coloniefh22012.pdf"", ""140_Complaint.pdf"", };     private boolean checkFlag = false;      public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.main);          mProgressDialog = new ProgressDialog(SpinnerActivity.this);         mProgressDialog.setMessage(""Please be patient, file downloading..."");         mProgressDialog.setIndeterminate(false);         mProgressDialog.setMax(100);         mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);          spDownloadFrom = (Spinner) findViewById(R.id.Spinner01);          spinnerArrayAdapter = new ArrayAdapter&lt;CharSequence&gt;(this,                 android.R.layout.simple_spinner_item, name);         spinnerArrayAdapter                 .setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);         spDownloadFrom.setAdapter(spinnerArrayAdapter);          SpinnerListener spListener = new SpinnerListener();         spDownloadFrom.setOnItemSelectedListener(spListener);     }      public class SpinnerListener implements OnItemSelectedListener {         public SpinnerListener() {         }          @Override         public void onItemSelected(AdapterView&lt;?&gt; arg0, View arg1,                 int position, long arg3) {             if(checkFlag){                 startDownload(position);             }             checkFlag = true;          }         @Override         public void onNothingSelected(AdapterView&lt;?&gt; arg0) {          }     }      private void startDownload(int position) {         DownloadFile downloadFile = new DownloadFile(position);         downloadFile.execute(url[position]);     }      class DownloadFile extends AsyncTask&lt;String, Integer, String&gt; { // put your                                                                     // download                                                                     // code         private int position;          public DownloadFile(int position) {             this.position = position;         }          @Override         protected void onPreExecute() {             super.onPreExecute();             mProgressDialog.show();         }          @Override         protected void onProgressUpdate(Integer... progress) {             super.onProgressUpdate(progress);             mProgressDialog.setProgress(progress[0]);         }          @Override         protected String doInBackground(String... aurl) {             try {                  URL url = new URL(aurl[0]);                 URLConnection connection = url.openConnection();                  connection.connect();                 int fileLength = connection.getContentLength();                 int tickSize = 2 * fileLength / 100;                 int nextProgress = tickSize;                  Log.d(                  ""ANDRO_ASYNC"", ""Lenght of file: "" + fileLength);                  InputStream input = new BufferedInputStream(url.openStream());                  String path = Environment.getExternalStorageDirectory()                         + ""/Android/Data/""                         + getApplicationContext().getPackageName() + ""/files/"";                 File file = new File(path);                 file.mkdirs();                 File outputFile = new File(file, name[position]);                  OutputStream output = new FileOutputStream(outputFile);                  byte data[] = new byte[1024 * 1024];                 long total = 0;                 int count;                 while ((count = input.read(data)) != -1) {                     total += count;                     if (total &gt;= nextProgress) {                         nextProgress = (int) ((total / tickSize + 1) * tickSize);                         this.publishProgress((int) (total * 100 / fileLength));                     }                     output.write(data, 0, count);                 }                  output.flush();                 output.close();                 input.close();                 mProgressDialog.dismiss();              } catch (Exception e) {                 Log.e(""Spinner"", ""exception"", e);             }             return null;         }          protected void onProgressUpdate(String... progress) {             Log.d(""Downloading"", progress[0]);          }          @Override         protected void onPostExecute(String unused) {              mProgressDialog.dismiss();              File file = new File(Environment.getExternalStorageDirectory()                     + ""/Android/Data/""                     + getApplicationContext().getPackageName() + ""/files/""                     + name[position]);             Intent testIntent = new Intent(Intent.ACTION_VIEW);             testIntent.setType(""application/pdf"");             Intent intent = new Intent();             intent.setAction(Intent.ACTION_VIEW);             Uri uri = Uri.fromFile(file);             intent.setDataAndType(uri, ""application/pdf"");             try {                 startActivity(intent);             } catch (ActivityNotFoundException e) {                 Toast.makeText(SpinnerActivity.this,                         ""No Application Available to View PDF"",                         Toast.LENGTH_LONG).show();             }         }     } }"
"import net.rim.device.api.system.Display; import net.rim.device.api.ui.UiApplication; import net.rim.device.api.ui.container.HorizontalFieldManager; import net.rim.device.api.ui.container.MainScreen;  public class CenterButtonPanelApp extends UiApplication {      public CenterButtonPanelApp() {         pushScreen(new Scr());     }      public static void main(String[] args) {         CenterButtonPanelApp app = new CenterButtonPanelApp();         app.enterEventDispatcher();     } }  class Scr extends MainScreen {     public Scr() {         CenterButtonPanel centerPanel = new CenterButtonPanel();         add(centerPanel);     } }  class CenterButtonPanel extends HorizontalFieldManager {     int mWidth = Display.getWidth();      public CenterButtonPanel() {         super(FIELD_HCENTER);     }      public int getPreferredWidth() {         return mWidth;     }      protected void sublayout(int maxWidth, int maxHeight) {         super.sublayout(mWidth, maxHeight);         setExtent(mWidth, maxHeight);     } }"
"tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText = (EditText) addView.findViewById(R.id.nrOfSharesInPortfolioEdit); tempEditText.setText(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); System.out.println(Portfolio.getPortfolio().getShareHolding(positionList).getNrOfSharesInPortfolio()); tempEditText = (EditText) addView.findViewById(R.id.currentCourseEdit); tempEditText.setText(Double.toString(Portfolio.getPortfolio().getShareHolding(positionList).getCurrentRate()));  new AlertDialog.Builder(DetailShareHoldingActivity.this)     .setTitle(""Köp "" + Portfolio.getPortfolio().getShareHolding(positionList).getName() +  "" Aktier"")     .setView(addView)     .setPositiveButton(""Köp"", new DialogInterface.OnClickListener() {         public void onClick(DialogInterface dialog, int whichButton) {             System.out.println(""Button pressed köp "");         }     })     .setNegativeButton(""Avbryt"", null)     .show();"
RestTemplate restTemplate = new RestTemplate(); List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = new ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(); Jaxb2RootElementHttpMessageConverter jaxbMessageConverter = new Jaxb2RootElementHttpMessageConverter(); List&lt;MediaType&gt; mediaTypes = new ArrayList&lt;MediaType&gt;(); mediaTypes.add(MediaType.TEXT_HTML); jaxbMessageConverter.setSupportedMediaTypes(mediaTypes); messageConverters.add(jaxbMessageConverter); restTemplate.setMessageConverters(messageConverters);
"listView.setOnItemClickListener(new OnItemClickListener() {             @Override             public void onItemClick(AdapterView&lt;?&gt; arg0, View view, int position,long id) {                                  TextView txtView=(TextView)view.findViewById(R.id.txt_view);                 String fname=txtView.getText().toString().toLowerCase();                                  int resID=getResources().getIdentifier(fname, ""raw"", getPackageName());                                MediaPlayer mediaPlayer=MediaPlayer.create(this,resID);                     mediaPlayer.start();             }         });"
"private final BroadcastReceiver mWifiScanReceiver = new BroadcastReceiver() {     @Override     public void onReceive(Context c, Intent intent) {         if (intent.getAction() == WifiManager.NETWORK_STATE_CHANGED_ACTION) {             Bundle extras = Intent.getExtras();             NetworkInfo ni = extras.get(EXTRA_NETWORK_INFO);             if (ni.getState() == State.CONNECTED) {                 //show button             } else {                 //hide button             }         } else if (intent.getAction() == WifiManager.SUPPLICANT_CONNECTION_CHANGE_ACTION) {             Bundle extras = Intent.getExtras();             SupplicantState ss = extras.get(EXTRA_NEW_STATE);             if (ss.getState() == COMPLETED) {                 //show button, note we may not have an IP address yet             } else {                 //hide button             }             SupplicantState.COMPLETED         }     } };"
"package com.mobinet.snmp;  import org.snmp4j.CommunityTarget; import org.snmp4j.PDU; import org.snmp4j.Snmp; import org.snmp4j.TransportMapping; import org.snmp4j.event.ResponseEvent; import org.snmp4j.mp.SnmpConstants; import org.snmp4j.smi.Address; import org.snmp4j.smi.GenericAddress; import org.snmp4j.smi.Integer32; import org.snmp4j.smi.OID; import org.snmp4j.smi.OctetString; import org.snmp4j.smi.VariableBinding; import org.snmp4j.transport.DefaultTcpTransportMapping;  /**  *  * @author batbayar  */ public class SnmpTest {     private String address = ""192.168.1.254/161""; // switch address and snmp port     private String writeCommunity = ""myCommunityWrite""; // write community name      private Snmp snmp;     private CommunityTarget target;      public SnmpTest() {         try {             TransportMapping transport = new DefaultTcpTransportMapping();             snmp = new Snmp(transport);              Address targetAddress = GenericAddress.parse(address);             target = new CommunityTarget();             target.setCommunity(new OctetString(writeCommunity));             target.setAddress(targetAddress);             target.setRetries(2);             target.setTimeout(1500);             target.setVersion(SnmpConstants.version2c);              PDU command = new PDU();             command.setType(PDU.SET);             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.1""), new Integer32(2))); // port 1 down             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.6""), new Integer32(1))); // port 6 up             ResponseEvent response = snmp.send(command, target);             System.out.println(""response: "" + response);         } catch(Exception e) {             e.printStackTrace();         }     }      public static void main(String[] args) {         SnmpTest test = new SnmpTest();     } }"
"private static Pointer getWindowPointer(Stage stage) {     try {         TKStage tkStage = stage.impl_getPeer();         Method getPlatformWindow = tkStage.getClass().getDeclaredMethod(""getPlatformWindow"" );         getPlatformWindow.setAccessible(true);         Object platformWindow = getPlatformWindow.invoke(tkStage);         Method getNativeHandle = platformWindow.getClass().getMethod( ""getNativeHandle"" );         getNativeHandle.setAccessible(true);         Object nativeHandle = getNativeHandle.invoke(platformWindow);         return new Pointer((Long) nativeHandle);     } catch (Throwable e) {         System.err.println(""Error getting Window Pointer"");         return null;     } }"
