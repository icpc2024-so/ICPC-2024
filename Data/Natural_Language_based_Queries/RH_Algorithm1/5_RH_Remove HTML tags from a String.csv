code
"public class HTMLPrinter implements Printable{     private final JEditorPane printPane;      public HTMLPrinter(JEditorPane editorPane){         printPane = editorPane;     }      public int print(Graphics graphics, PageFormat pageFormat, int pageIndex){         if (pageIndex &gt;= 1) return Printable.NO_SUCH_PAGE;          Graphics2D g2d = (Graphics2D)graphics;         g2d.setClip(0, 0, (int)pageFormat.getImageableWidth(), (int)pageFormat.getImageableHeight());         g2d.translate((int)pageFormat.getImageableX(), (int)pageFormat.getImageableY());          RepaintManager rm = RepaintManager.currentManager(printPane);         boolean doubleBuffer = rm.isDoubleBufferingEnabled();         rm.setDoubleBufferingEnabled(false);          printPane.setSize((int)pageFormat.getImageableWidth(), 1);         printPane.print(g2d);          rm.setDoubleBufferingEnabled(doubleBuffer);          return Printable.PAGE_EXISTS;     } }"
"int v = gl.glCreateShader(GL.GL_VERTEX_SHADER); int f = gl.glCreateShader(GL.GL_FRAGMENT_SHADER);  BufferedReader brv = new BufferedReader(new FileReader(""vertexshader.glsl"")); String vsrc = """"; String line; while ((line=brv.readLine()) != null) {   vsrc += line + ""\n""; } gl.glShaderSource(v, 1, vsrc, (int[])null); gl.glCompileShader(v);  BufferedReader brf = new BufferedReader(new FileReader(""fragmentshader.glsl"")); String fsrc = """"; String line; while ((line=brf.readLine()) != null) {   fsrc += line + ""\n""; } gl.glShaderSource(f, 1, fsrc, (int[])null); gl.glCompileShader(f);  int shaderprogram = gl.glCreateProgram(); gl.glAttachShader(shaderprogram, v); gl.glAttachShader(shaderprogram, f); gl.glLinkProgram(shaderprogram); gl.glValidateProgram(shaderprogram);  gl.glUseProgram(shaderprogram);"
"public class CharacterEncodingFilter implements Filter {      @Override     public void destroy() {         // TODO Auto-generated method stub     }      @Override     public void doFilter(ServletRequest request, ServletResponse response,         FilterChain chain) throws IOException, ServletException {         response.setCharacterEncoding(""UTF-8"");         request.setCharacterEncoding(""UTF-8"");         chain.doFilter(request, response);     }      @Override     public void init(FilterConfig arg0) throws ServletException {         // TODO Auto-generated method stub     }  }"
"public class HttpMethodFilter implements Filter {    public void init(FilterConfig filterConfig) throws ServletException    {     }     public void doFilter(ServletRequest request, ServletResponse response,        FilterChain filterChain) throws IOException, ServletException    {        HttpServletRequest httpRequest = (HttpServletRequest) request;                if(httpRequest.getMethod().equalsIgnoreCase(""POST"")){         }        filterChain.doFilter(request, response);    }     public void destroy()    {     } }"
"public static void eliminateCommon(String file1, String file2) throws IOException {     List&lt;String&gt; lines1 = readLines(file1);     List&lt;String&gt; lines2 = readLines(file2);      Iterator&lt;String&gt; linesItr = lines1.iterator();     while (linesItr.hasNext()) {         String checkLine = linesItr.next();         if (lines2.contains(checkLine)) {             linesItr.remove();             lines2.remove(checkLine);         }     }      //now lines1 will contain string that are not present in lines2     //now lines2 will contain string that are not present in lines1     System.out.println(lines1);     System.out.println(lines2);  }  public static List&lt;String&gt; readLines(String fileName) throws IOException {     List&lt;String&gt; lines = new ArrayList&lt;String&gt;();     FileInputStream fs = new FileInputStream(fileName);     BufferedReader br = new BufferedReader(new InputStreamReader(fs));     String line = null;     while ((line = br.readLine()) != null) {         String account = line.substring(0, 10);         lines.add(account);     }     return lines; }"
"public final class ExtractIpFilter implements Filter {     private FilterConfig filterConfig = null;      public void init(FilterConfig filterConfig) throws ServletException {         this.filterConfig = filterConfig;     }     public void destroy() {         this.filterConfig = null;     }      public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)          throws IOException, ServletException {       String ip = request.getRemoteAddr();       // do something with the IP    } }"
"public void appendFileInTarArchive(String tarPath, String tarFileName, String file2WriteName, String file2WriteContent) throws AuthenticationException, IOException {     if (tarPath == null || tarFileName == null || tarFileName.isEmpty()) {         LOG.warn(""The path or the name of the tar archive is null or empty."");         return;     }     final File tarFile = new File(tarPath, tarFileName);     final File fileToAdd = new File(tarPath, file2WriteName);     FileUtils.write(fileToAdd, file2WriteContent);      if (file2WriteName == null || file2WriteName.isEmpty()) {         LOG.warn(""The name of the file to append in the archive is null or empty."");         return;     }      ArchiveStreamFactory asf = new ArchiveStreamFactory();      File tempFile = new File(tarPath, ""tmpTar.tar"");     tempFile.createNewFile();      try {         FileInputStream fis = new FileInputStream(tarFile);         ArchiveInputStream ais = asf.createArchiveInputStream(ArchiveStreamFactory.TAR, fis);          FileOutputStream fos = new FileOutputStream(tempFile);         ArchiveOutputStream aos = asf.createArchiveOutputStream(ArchiveStreamFactory.TAR, fos);          // copy the existing entries             ArchiveEntry nextEntry;         while ((nextEntry = ais.getNextEntry()) != null) {             aos.putArchiveEntry(nextEntry);             IOUtils.copy(ais, aos);             aos.closeArchiveEntry();         }          // create the new entry         TarArchiveEntry entry = new TarArchiveEntry(file2WriteName);         entry.setSize(fileToAdd.length());         aos.putArchiveEntry(entry);         IOUtils.copy(new FileInputStream(fileToAdd), aos);         aos.closeArchiveEntry();          aos.finish();          ais.close();         aos.close();          // copies the new file over the old         tarFile.delete();         tempFile.renameTo(tarFile);      } catch (ArchiveException e) {         LOG.error(e.getMessage(), e);     } catch (IOException e) {         LOG.error(e.getMessage(), e);     } finally {         FileUtils.deleteQuietly(fileToAdd);     } }"
"public void clear(ViewGroup container){     if (mCurTransaction == null) {         mCurTransaction = mFragmentManager.beginTransaction();     }      for(int i = 0; i &lt; getCount(); i++){          final long itemId = getItemId(i);          // Do we already have this fragment?         String name = ""android:switcher:"" + container.getId() + "":"" + itemId;         Fragment fragment = mFragmentManager.findFragmentByTag(name);          if(fragment != null){             mCurTransaction.detach(fragment);         }     }     mCurTransaction.commitAllowingStateLoss();     mCurTransaction = null; }"
"public static void main(final String... args) {     final Map&lt;String, String&gt; map = new HashMap&lt;&gt;();     map.put(""hello"", ""world"");     map.put(""foo"", ""bar"");      // Create a map entry     final Map.Entry&lt;String, String&gt; entry         = new AbstractMap.SimpleEntry&lt;&gt;(""foo"", ""bar"");      // Remove it from the set     map.entrySet().remove(entry);     System.out.println(""after removing entry: "" + map);      // Remove a key     map.keySet().remove(""hello"");     System.out.println(""after removing key: "" + map); }"
"final AbstractDocument abstractDocument = (AbstractDocument) textArea.getDocument();    abstractDocument.setDocumentFilter(new DocumentFilter()     {       @Override       public void remove(final FilterBypass fb, final int offset, final int length) throws BadLocationException       {         super.remove(fb, offset, length);       }        @Override       public void insertString(final FilterBypass fb,                                final int offset,                                final String string,                                final AttributeSet attr) throws BadLocationException       {          if (getLineCountAsSeen(textArea) &lt; 4)         {           super.insertString(fb, offset, string, attr);         }       }        @Override       public void replace(final FilterBypass fb,                           final int offset,                           final int length,                           final String text,                           final AttributeSet attrs) throws BadLocationException       {         if (getLineCountAsSeen(textArea) &lt; 4)         {           super.replace(fb, offset, length, text, attrs);         }       }     });"
"public class RedirectionFilter implements Filter {      /**      * Default constructor.      */     public RedirectionFilter () {         // TODO Auto-generated constructor stub     }      /**      * @see Filter#destroy()      */     @Override     public void destroy() {         // TODO Auto-generated method stub     }      @Override     public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {              HttpServletRequest request = (HttpServletRequest) req;             HttpServletResponse response = (HttpServletResponse) res;              String servletPath = request.getServletPath();              if (servletPath.endsWith("".html"")) {                 response.sendRedirect(""http://secondwebsite.com"" + servletPath);             }             else {                 chain.doFilter(request, response);             } } @Override     public void init(FilterConfig fConfig) throws ServletException {         // TODO Auto-generated method stub      } }"
"public static void SaveWorkFlow() throws IOException     {         CloseableHttpClient httpClient = HttpClients.createDefault();         HttpPost post = new HttpPost(myURLgoesHERE);         List&lt;NameValuePair&gt; params = new ArrayList&lt;&gt;();         params.add(new BasicNameValuePair(""task"", ""savemodel""));         params.add(new BasicNameValuePair(""code"", generatedJSONString));         CloseableHttpResponse response = null;         Scanner in = null;         try         {             post.setEntity(new UrlEncodedFormEntity(params));             response = httpClient.execute(post);             // System.out.println(response.getStatusLine());             HttpEntity entity = response.getEntity();             in = new Scanner(entity.getContent());             while (in.hasNext())             {                 System.out.println(in.next());              }             EntityUtils.consume(entity);         } finally         {             in.close();             response.close();         }     }"
"protected void onActivityResult(int requestCode, int resultCode, Intent data)  {       if (requestCode == 1 &amp;&amp; data != null)        {          Log.v(""TAG"", data.getStringExtra(""Note""));          if(resultCode == RESULT_OK)          {                      listItems.add(data.getStringExtra(""Note""));              Log.v(""TAG"", data.getStringExtra(""Note""));              adapter.notifyDataSetChanged();              listView.invalidateViews();          }          if (resultCode == RESULT_CANCELED)           {              }       } }"
class BASE64HTMLEditorKit extends HTMLEditorKit {      private static HTMLFactory factory = null;      @Override     public ViewFactory getViewFactory() {         if (factory == null) {             factory = new HTMLFactory() {                  @Override                 public View create(Element elem) {                     AttributeSet attrs = elem.getAttributes();                     Object elementName = attrs.getAttribute(AbstractDocument.ElementNameAttribute);                     Object o = (elementName != null) ? null : attrs.getAttribute(StyleConstants.NameAttribute);                     if (o instanceof HTML.Tag) {                         HTML.Tag kind = (HTML.Tag) o;                         if (kind == HTML.Tag.IMG) {                             // HERE is the call to the special class...                             return new BASE64ImageView(elem);                         }                     }                     return super.create(elem);                 }             };         }         return factory;     }  }
"public static void main(String[] args) {   Person p = new Person();   Supplier&lt;String&gt; nameSupplier1 = () -&gt; ""MyName"";   Supplier&lt;String&gt; nameSupplier2 = () -&gt; { throw new RuntimeException(); };   set(p, Person::setName, nameSupplier1);   System.out.println(p.getName()); // prints MyName   set(p, Person::setName, nameSupplier2); // throws exception with message   System.out.println(p.getName()); // Does not execute }  interface DebuggableBiConsumer&lt;A, B&gt; extends BiConsumer&lt;A, B&gt;, Serializable {}  private static &lt;E, V&gt; void set(     E o, DebuggableBiConsumer&lt;E, V&gt; setter, Supplier&lt;V&gt; valueSupplier) {   try {     setter.accept(o, valueSupplier.get());   } catch (RuntimeException e) {     throw new RuntimeException(""Failed to set the value of ""+name(setter), e);   } }  private static String name(DebuggableBiConsumer&lt;?, ?&gt; setter) {   for (Class&lt;?&gt; cl = setter.getClass(); cl != null; cl = cl.getSuperclass()) {     try {       Method m = cl.getDeclaredMethod(""writeReplace"");       m.setAccessible(true);       Object replacement = m.invoke(setter);       if(!(replacement instanceof SerializedLambda))         break;// custom interface implementation       SerializedLambda l = (SerializedLambda) replacement;       return l.getImplClass() + ""::"" + l.getImplMethodName();     }     catch (NoSuchMethodException e) {}     catch (IllegalAccessException | InvocationTargetException e) {       break;     }   }   return ""unknown property""; }"
"package image;  import java.io.InputStream;  public class ImageLoader {     public static void main(String[] args ){         String cmd = null;         InputStream is = null;         final String image = ""save.png"";          if(""test1"".equals(args[0])){             cmd = ""ImageLoader.class.getClassLoader().getResourceAsStream(\""""+image+""\"")"";             is = ImageLoader.class.getClassLoader().getResourceAsStream(image);     //YES, FOUND           }else if(""test2"".equals(args[0])){             cmd = ""ImageLoader.class.getResourceAsStream(\""""+image+""\"")"";             is = ImageLoader.class.getResourceAsStream(image);                      //NOT FOUND          }else if(""test3"".equals(args[0])){             cmd = ""ImageLoader.class.getResourceAsStream(\""/""+image+""\"")"";             is = ImageLoader.class.getResourceAsStream(""/""+image);                  //YES, FOUND          }else if(""test4"".equals(args[0])){             cmd = ""ImageLoader.class.getClassLoader().getResourceAsStream(\""/""+image+""\"")"";             is = ImageLoader.class.getClassLoader().getResourceAsStream(""/""+image); //NOT FOUND          }else {             cmd = "" ? "";         }          System.out.println(""With ""+cmd+"", stream loaded: ""+(is != null));     } }"
"Element root = doc.createElement(""root"");  Element textNode = doc.createElement(""textNode""); Element emptyTextNode = doc.createElement(""emptyTextNode""); Element emptyNode = doc.createElement(""emptyNode""); Element nullNode = doc.createElement(""nullTextNode"");  textNode.appendChild(doc.createTextNode(""not empty"")); // &lt;textNode&gt;not empty&lt;/textNode&gt; emptyTextNode.appendChild(doc.createTextNode(""""));     // &lt;emptyTextNode&gt;&lt;/emptyTextNode&gt; // emptyNode: no child appended                           &lt;emptyNode /&gt;  nullNode.appendChild(null);                            // null child appended - causes NPE!!  root.appendChild(textNode); root.appendChild(emptyTextNode); root.appendChild(emptyNode); root.appendChild(nullNode);"
"public enum Direction {      UNKNOWN,     FORWARD,     BACKWARD;      public interface SwitchResult {         public void UNKNOWN();         public void FORWARD();         public void BACKWARD();     }      public void switchValue(SwitchResult result) {         switch (this) {             case UNKNOWN:                 result.UNKNOWN();                 break;             case FORWARD:                 result.FORWARD();                 break;             case BACKWARD:                 result.BACKWARD();                 break;         }     } }"
"if (imageCache.get(url) != null) {         //#debug         System.out.println(""Get cached image from: "" + url);          asyncImage.setImage((Image) imageCache.get(url));         asyncImage.setQueued(false);     } else {         //#debug         System.out.println(""Start download image from:"" + url);          map.put(url, asyncImage);          ImageDownloadService d = new ImageDownloadService(url, new ActionListener() {              public void actionPerformed(ActionEvent evt) {                  NetworkEvent n = (NetworkEvent) evt;                 Image image = (Image) n.getMetaData();                 String url = n.getConnectionRequest().getUrl();                 AsyncImage asyncImage = (AsyncImage) ImageManager.this.map.get(url);                 map.put(url, asyncImage);                 asyncImage.setImage(image);                 map.remove(url);                 imageCache.put(url, asyncImage.getImage());                 asyncImage.setQueued(false);                 if (Display.getInstance().getCurrent() instanceof AsyncLoadable) {                     ((AsyncLoadable) Display.getInstance().getCurrent()).asyncLoaded();                 } else {                     Display.getInstance().getCurrent().repaint();                 }                 //#debug                 System.out.println(""Retrieved image from:"" + url);             }         });         d.addResponseCodeListener(new ActionListener() {              public void actionPerformed(ActionEvent evt) {                 NetworkEvent n = (NetworkEvent) evt;                 String url = n.getConnectionRequest().getUrl();                 AsyncImage asyncImage = (AsyncImage) ImageManager.this.map.get(url);                 asyncImage.setQueued(false);                 map.remove(n.getConnectionRequest().getUrl());                 //#debug                 System.out.println(""Failed image from:"" + url);             }         });          NetworkManager.getInstance().addToQueue(d);"
"import java.util.regex.Matcher; import java.util.regex.Pattern;  public class Main {     public static void main(final String[] args)     {         final String input = args[0];         final Pattern pattern = Pattern.compile(""^.*\\\\(.*)\\.exe.*$"");         final Matcher matcher = pattern.matcher(input);         if (matcher.find())         {             System.out.println(""matcher.group(1) = "" + matcher.group(1));         }         else         {             System.out.format(""%s does not match %s\n"", input, pattern.pattern());         }     } }"
"public String dump(ThreadInfo info) {          StringBuilder sb = new StringBuilder(""\"""" + info.getThreadName() + ""\""""                 + "" Id="" + info.getThreadId() + "" "" + info.getThreadState());         if (info.getLockName() != null) {             sb.append("" on "" + info.getLockName());         }         if (info.getLockOwnerName() != null) {             sb.append("" owned by \"""" + info.getLockOwnerName() + ""\"" Id=""                     + info.getLockOwnerId());         }         if (info.isSuspended()) {             sb.append("" (suspended)"");         }         if (info.isInNative()) {             sb.append("" (in native)"");         }         sb.append('\n');         int i = 0;         for (; i &lt; info.getStackTrace().length; i++) {             StackTraceElement ste = info.getStackTrace()[i];             sb.append(""\tat "" + ste.toString());             sb.append('\n');             if (i == 0 &amp;&amp; info.getLockInfo() != null) {                 Thread.State ts = info.getThreadState();                 switch (ts) {                 case BLOCKED:                     sb.append(""\t-  blocked on "" + info.getLockInfo());                     sb.append('\n');                     break;                 case WAITING:                     sb.append(""\t-  waiting on "" + info.getLockInfo());                     sb.append('\n');                     break;                 case TIMED_WAITING:                     sb.append(""\t-  waiting on "" + info.getLockInfo());                     sb.append('\n');                     break;                 default:                 }             }              for (MonitorInfo mi : info.getLockedMonitors()) {                 if (mi.getLockedStackDepth() == i) {                     sb.append(""\t-  locked "" + mi);                     sb.append('\n');                 }             }         }         if (i &lt; info.getStackTrace().length) {             sb.append(""\t..."");             sb.append('\n');         }          LockInfo[] locks = info.getLockedSynchronizers();         if (locks.length &gt; 0) {             sb.append(""\n\tNumber of locked synchronizers = "" + locks.length);             sb.append('\n');             for (LockInfo li : locks) {                 sb.append(""\t- "" + li);                 sb.append('\n');             }         }         sb.append('\n');         return sb.toString();     }"
public boolean remove(String data){     Node previous = head;     Node current = head.getNext();     while (current != null) {         String dataOld = current.getData();         if ((dataOld == null &amp;&amp; data == null) || (dataOld != null &amp;&amp; dataOld.equals(data))) {             Node afterRemoved = current.getNext();             previous.setNext(afterRemoved);             if (afterRemoved == null) { // i.e. removing last element                 last = previous;             }             size--;             return true;         } else {             previous = current;             current = current.getNext();         }     }     return false; }
"package grimbo.url;  import java.net.MalformedURLException; import java.net.URL;  public class TestURL {     public static void main(String[] args) {         // context1         URL c1 = u(null, ""http://www.example.com/page.html"");         u(c1, ""http://www.example.com/page.html"");         u(c1, ""/page.html"");         u(c1, ""page.html"");         u(c1, ""../page.html"");         u(c1, ""#paragraphA"");          System.out.println();          // context2         URL c2 = u(null, ""http://www.example.com/path/to/page.html"");         u(c2, ""http://www.example.com/page.html"");         u(c2, ""/page.html"");         u(c2, ""page.html"");         u(c2, ""../page.html"");         u(c2, ""#paragraphA"");     }      public static URL u(URL context, String url) {         try {             URL u = null != context ? new URL(context, url) : new URL(url);             System.out.println(u);             return u;         } catch (MalformedURLException e) {             e.printStackTrace();             return null;         }     } }"
"public static class MyAdapter extends FragmentStatePagerAdapter {   ArrayList&lt;Fragment&gt; fragmentArray = new ArrayList&lt;Fragment();    public MyAdapter(FragmentManager fm) {        super(fm);    }     //didn't put in the function to populate the list with fragments    public void replaceItem(Fragment newFrag, int pos){        fragmentArray.remove(pos);        fragmentArray.add(pos,newFrag);        notifyDataSetChanged();   }     @Override    public int getCount() {        return fragmentArray.size();    }     @Override    public Fragment getItem(int position) {        return fragmentArray.get(position);    }"
"public class HTMLTest {            public static void main(String[] args) {         SwingUtilities.invokeLater(new Runnable() {           @Override           public void run() {             String html = ""&lt;ul&gt;&lt;li&gt;Cautious&lt;/li&gt;&lt;li&gt;Curious&lt;/li&gt;&lt;/ul&gt;"";             JEditorPane pane = new JEditorPane(""text/html"", html) {                public void paint(Graphics g) {                 Graphics2D g2d = (Graphics2D) g.create();                 g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);                 super.paint(g2d);                 g2d.dispose();               }              };             pane.setVisible(true);              JOptionPane.showMessageDialog(null, pane);           }         });           } }"
"public void handleSuccess(String result) {     result = result.trim();     log.info(""Result after trimming: '"" + result + ""'"");      result = result.substring(result.indexOf('\n') + 1);     log.info(""Result after substring: '"" + result + ""'"");      String returns = getReturns();     log.info(""Returns: '"" + returns + ""'"");      String action = getAction();     log.info(""Action: '"" + action + ""'"");      // It's not clear what this is meant to do. I suggest you remove it and     // use logging instead.     MessageBox.alert(""Information"", ""The selected action is "" + action, null);                   String finalResult = result + returns + action;     log.info(""Final result: '"" + finalResult + ""'"");"
"Bundle saveFragmentBasicState(Fragment f) {     Bundle result = null;      if (mStateBundle == null) {         mStateBundle = new Bundle();     }     f.onSaveInstanceState(mStateBundle);     if (!mStateBundle.isEmpty()) {         result = mStateBundle;         mStateBundle = null;     }      if (f.mView != null) {         saveFragmentViewState(f);     }     if (f.mSavedViewState != null) {         if (result == null) {             result = new Bundle();         }         result.putSparseParcelableArray(                 FragmentManagerImpl.VIEW_STATE_TAG, f.mSavedViewState);     }     if (!f.mUserVisibleHint) {         // Only add this if it's not the default value         // @@@ BUG, result may not have been created, can be null!         if (result == null) {             result = new Bundle();         }         result.putBoolean(FragmentManagerImpl.USER_VISIBLE_HINT_TAG, f.mUserVisibleHint);     }      return result; }"
"button2.setOnClickListener(new OnClickListener() {         public void onClick(View v) {                 if (editText19.getText() != null || editText18.getText() != null || editText17.getText() != null || editText16.getText() != null || editText15.getText() != null || editText14.getText() != null || editText13.getText() != null || editText12.getText() != null || editText11.getText() != null || editText10.getText() != null || editText9.getText() != null || editText8.getText() != null || editText7.getText() != null || editText6.getText() != null || editText5.getText() != null || editText4.getText() != null || editText3.getText() != null) {                     // Create a big decimal with your value                     BigDecimal bd = new BigDecimal(1.2 * ((11.67 * (Double.parseDouble(editText16.getText().toString())) + ((15.83 * (Double.parseDouble(editText17.getText().toString())) + ((18.33 * (Double.parseDouble(editText18.getText().toString())) + ((18.33 * (Double.parseDouble(editText18.getText().toString())) + ((24.17 * (Double.parseDouble(editText19.getText().toString())) + ((22.36 * (Double.parseDouble(editText15.getText().toString())) + ((4.17 * (Double.parseDouble(editText14.getText().toString())) + ((26.66 * (Double.parseDouble(editText13.getText().toString())) + ((4.17 * (Double.parseDouble(editText12.getText().toString())) + ((30.96 * (Double.parseDouble(editText11.getText().toString())) + ((4.17 * (Double.parseDouble(editText10.getText().toString())) + ((35.26 * (Double.parseDouble(editText9.getText().toString())) + ((4.17 * (Double.parseDouble(editText8.getText().toString())) + ((39.56 * (Double.parseDouble(editText7.getText().toString())) + ((4.17 * (Double.parseDouble(editText6.getText().toString())) + ((9.17 * (Double.parseDouble(editText5.getText().toString())) + ((13.33 * (Double.parseDouble(editText4.getText().toString())) + ((17.20 * (Double.parseDouble(editText3.getText().toString())))))))))))))))))))))))))))))))))))))));                     // Round value to 2 decimal                     bd = bd.setScale(2, RoundingMode.HALF_UP);                     editText1.setText(bd.toString());                  }             }         });"
"public static HtmlFileInput insertFileInputWithValue(String name, String value,      String contentType, HtmlPage page, DomElement parent) {   // Necessary, otherwise HtmlUnit doesn't generate HtmlFileInput, but HtmlTextInput by default   AttributesImpl ai = new AttributesImpl();   ai.addAttribute(null, null, ""type"", null, ""file"");   ai.addAttribute(null, null, ""name"", null, name);    HtmlFileInput input = (HtmlFileInput) HTMLParser.getFactory(""input"")     .createElementNS(page, null, ""input"", ai, true);   input.setValueAttribute(value);   input.setContentType(contentType);   parent.appendChild(input);    return input; }"
"public class NoCompatibilityMode implements Filter {      @Override     public void destroy() {     }      @Override     public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException,             ServletException {         if (((HttpServletRequest) req).getRequestURI().endsWith("".js.jsf"")                 || ((HttpServletRequest) req).getRequestURI().endsWith("".css.jsf"")) {             chain.doFilter(req, res);         } else {             HttpServletResponse response = (HttpServletResponse) res;             response.setHeader(""X-UA-Compatible"", ""IE=edge""); // No more Compatibility Mode             chain.doFilter(req, res);         }      }      @Override     public void init(FilterConfig arg0) throws ServletException {     }  }"
