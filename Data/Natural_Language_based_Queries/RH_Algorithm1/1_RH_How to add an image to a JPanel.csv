code
"final List&lt;Button&gt; subordinateButtons = Arrays.asList(new Button(), new Button(), new Button()); Button myButton = new Button(); myButton.addMouseListener(new MouseListener() {      public void mouseEntered(MouseEvent e) {         for (Button subordinateButton : subordinateButtons) {             subordinateButton.setBackground(Color.GRAY);         }     }      public void mouseExited(MouseEvent e) {         for (Button subordinateButton : subordinateButtons) {             subordinateButton.setBackground(Color.LIGHT_GRAY);         }     }      public void mouseClicked(MouseEvent e) {     }      public void mousePressed(MouseEvent e) {     }      public void mouseReleased(MouseEvent e) {     }  });"
"class makeArrayList extends ArrayList&lt;Integer&gt; {    ArrayList&lt;Integer&gt; myArrayList = new ArrayList&lt;Integer&gt;();     public makeArrayList(double[] myArray, int arrayLength) {       // NOTE: My actual code does many transformations to myArray. The       // resulting myArrayList       // contains only 1/1000 of the points in myArray. This code is just       // simplified for debugging.       for (int i = 0; i &lt; arrayLength; i++) {          myArrayList.add((int) Math.pow(myArray[i], 2));       }       System.out.println(""in makeArrayList, PeakList.size() is: ""             + myArrayList.size());    } }"
"final double cosTheta = Math.cos(theta); final double sinTheta = Math.sin(theta);  for (int distance = xFrom; distance &lt; len; distance += interval) {      double distance_x = distance * cosTheta;     double distance_y = distance * sinTheta;      //int x_circle_pixel = convertToPixelCircleX(FromX_pixel, distance_x);     //int y_circle_pixel = convertToPixelCircleY(y1_pixel, distance_y, y_ratio);     int x_circle_pixel = convertToPixelX((int) distance_x, x_ratio);     int y_circle_pixel = convertToPixelY(y1_pixel, (int) distance_y, y_ratio);      g2d.drawOval(x_circle_pixel, y_circle_pixel, 10, 10); }"
"import java.util.Random;  public class Quicksort {      private static Random rand = new Random();       public static void quicksort(int[] arr, int left, int right)      {           if (left &lt; right)           {                int pivot = randomizedPartition(arr, left, right);                quicksort(arr, left, pivot);                quicksort(arr, pivot + 1, right);           }      }       private static int randomizedPartition(int[] arr, int left, int right)      {           int swapIndex = left + rand.nextInt(right - left) + 1;           swap(arr, left, swapIndex);           return partition(arr, left, right);      }       private static int partition(int[] arr, int left, int right)      {           int pivot = arr[left];           int i = left - 1;           int j = right + 1;           while (true)           {                do                     j--;                while (arr[j] &gt; pivot);                 do                     i++;                while (arr[i] &lt; pivot);                 if (i &lt; j)                     swap(arr, i, j);                else                     return j;           }      }       private static void swap(int[] arr, int i, int j)      {           int tmp = arr[i];           arr[i] = arr[j];           arr[j] = tmp;      }       // Sort 100k elements that are in reversed sorted order      public static void main(String[] args)      {           int arr[] = new int[100000];           for (int i = 0; i &lt; arr.length; i++)                arr[i] = arr.length - i;            System.out.println(""First 20 elements"");           System.out.print(""Before sort: "");           for (int i = 0; i &lt; 20; i++)                System.out.print(arr[i] + "" "");           System.out.println();            quicksort(arr, 0, arr.length - 1);           System.out.print(""After sort: "");           for (int i = 0; i &lt; 20; i++)                System.out.print(arr[i] + "" "");           System.out.println();      }  }"
"import javax.swing.*;  public class SpinnerModelTest {      public static void main(String[] args) {         SwingUtilities.invokeLater(new Runnable() {              public void run() {                 new SpinnerModelTest().makeUI();             }         });     }      public void makeUI() {         SpinnerModel modeltau = new SpinnerNumberModel(0.0002, 0.0001, 100.0000, 0.0001);         JSpinner spinner = new JSpinner(modeltau);         ((JSpinner.NumberEditor) spinner.getEditor()).getFormat().setMaximumFractionDigits(4);         JFrame frame = new JFrame();         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.add(spinner);         frame.pack();         frame.setLocationRelativeTo(null);         frame.setVisible(true);     } }"
private static Set&lt;Class&lt;?&gt;&gt; getClassesBfs(Class&lt;?&gt; clazz) {     Set&lt;Class&lt;?&gt;&gt; classes = new LinkedHashSet&lt;Class&lt;?&gt;&gt;();     Set&lt;Class&lt;?&gt;&gt; nextLevel = new LinkedHashSet&lt;Class&lt;?&gt;&gt;();     nextLevel.add(clazz);     do {         classes.addAll(nextLevel);         Set&lt;Class&lt;?&gt;&gt; thisLevel = new LinkedHashSet&lt;Class&lt;?&gt;&gt;(nextLevel);         nextLevel.clear();         for (Class&lt;?&gt; each : thisLevel) {             Class&lt;?&gt; superClass = each.getSuperclass();             if (superClass != null &amp;&amp; superClass != Object.class) {                 nextLevel.add(superClass);             }             for (Class&lt;?&gt; eachInt : each.getInterfaces()) {                 nextLevel.add(eachInt);             }         }     } while (!nextLevel.isEmpty());     return classes; }  private static List&lt;Class&lt;?&gt;&gt; commonSuperClass(Class&lt;?&gt;... classes) {     // start off with set from first hierarchy     Set&lt;Class&lt;?&gt;&gt; rollingIntersect = new LinkedHashSet&lt;Class&lt;?&gt;&gt;(             getClassesBfs(classes[0]));     // intersect with next     for (int i = 1; i &lt; classes.length; i++) {         rollingIntersect.retainAll(getClassesBfs(classes[i]));     }     return new LinkedList&lt;Class&lt;?&gt;&gt;(rollingIntersect); }
"public CustomerInfo(String jsonTxt) { try {     JSONObject json = new JSONObject(jsonTxt);         JSONObject customer = new JSONObject(json.getString(""CustomerInfo""));         JSONObject client = new JSONObject(customer.getString(""clientDisplay""));         custNo = client.getString(""globalCustNum"");     custName = client.getString(""displayName"");         JSONObject cph = new JSONObject(customer.getString(""clientPerformanceHistory""));         JSONObject caddress = new JSONObject(customer.getString(""address""));     address = caddress.getString(""displayAddress"");     savAcctBal =  cph.getDouble(""totalSavingsAmount""); } catch (final JSONException je) {         je.printStackTrace(); } }"
"import java.awt.*; import java.awt.event.*; import javax.swing.*;  public class EventTest {      public static void main(String... args) {         SwingUtilities.invokeLater(new Runnable() {              @Override             public void run() {                 final JComponent outside = new JPanel();                 JComponent inside = new JPanel();                 inside.setBackground(Color.red);                 inside.setPreferredSize(new Dimension(200, 200));                 inside.addMouseMotionListener(new MouseAdapter() {                      @Override                     public void mouseDragged(MouseEvent e) {                         System.err.println(""dragged"");                     }                      @Override                     public void mouseMoved(MouseEvent e) {                         System.err.println(""moved inside"");                         outside.dispatchEvent(e);                     }                 });                  outside.add(inside);                 outside.setPreferredSize(new Dimension(300, 300));                 outside.addMouseMotionListener(new MouseAdapter() {                      @Override                     public void mouseMoved(MouseEvent arg0) {                         System.err.println(""moved outside"");                     }                 });                  JFrame frame = new JFrame();                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                 frame.add(outside);                 frame.pack();                 frame.setVisible(true);             }         });     } }"
"PrintRequestAttributeSet pras = new HashPrintRequestAttributeSet(); DocFlavor flavor = DocFlavor.INPUT_STREAM.AUTOSENSE; PrintService printService[] = PrintServiceLookup.lookupPrintServices(flavor, pras); PrintService defaultService = PrintServiceLookup.lookupDefaultPrintService(); PrintService service = ServiceUI.printDialog(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration(), 200, 200,                       printService, defaultService, flavor, pras); if (service != null) {     DocPrintJob job = service.createPrintJob();     FileInputStream fis = new FileInputStream(doc);     DocAttributeSet das = new HashDocAttributeSet();     Doc document = new SimpleDoc(fis, flavor, das);     job.print(document, pras); }"
"import java.awt.FlowLayout; import java.math.BigDecimal; import javax.swing.JFrame; import org.jfree.chart.ChartFactory; import org.jfree.chart.ChartPanel; import org.jfree.chart.JFreeChart; import org.jfree.chart.plot.PiePlot3D; import org.jfree.data.general.DefaultPieDataset; import org.jfree.data.general.PieDataset; import org.jfree.util.Rotation;  public class Report extends JFrame {      public int total_stations = 0, total_jobs = 0, total_parts = 0;     BigDecimal[] j1_systimebig, j1_worktimebig, j1_idletimebig, j1_queuetimebig,         j2_systimebig, j2_worktimebig, j2_idletimebig, j2_queuetimebig,         j3_systimebig, j3_worktimebig, j3_idletimebig, j3_queuetimebig;     public String sim_time;     BigDecimal systime = new BigDecimal(0);     BigDecimal worktime = new BigDecimal(0);     BigDecimal idletime = new BigDecimal(0);     BigDecimal queuetime = new BigDecimal(0);      private static final String title = ""Which operating system are you using?"";      /**     * Creates new form Report     */     public Report() {         initComponents();         jPanel2.removeAll();         jPanel2.setLayout(new FlowLayout(FlowLayout.LEFT));         jPanel2.add(createPieChart(title));         this.setLocationRelativeTo(null);     }      /*     * *************************************     * GRAPHICS ***********************************     */     private ChartPanel createPieChart(String chartTitle) {         System.out.println(""PieChart"");         PieDataset dataset = createDataset();         JFreeChart chart = createChart(dataset, chartTitle);         ChartPanel chartPanel = new ChartPanel(chart);         return chartPanel;     }      private PieDataset createDataset() {         System.out.println(""PieDataset"");         DefaultPieDataset result = new DefaultPieDataset();         result.setValue(""Linux"", 29);         result.setValue(""Mac"", 20);         result.setValue(""Windows"", 51);         return result;      }      private JFreeChart createChart(PieDataset dataset, String title) {         System.out.println(""Create Chart"");         JFreeChart chart = ChartFactory.createPieChart3D(             title, dataset, true, true, false);         PiePlot3D plot = (PiePlot3D) chart.getPlot();         plot.setStartAngle(290);         plot.setDirection(Rotation.CLOCKWISE);         plot.setForegroundAlpha(0.5f);         plot.setCircular(true);         return chart;      }      /*     * *************************************     * END GRAPHICS ***********************************     */     /**     * This method is called from within the constructor to initialize the form.     * WARNING: Do NOT modify this code. The content of this method is always     * regenerated by the Form Editor.     */     @SuppressWarnings(""unchecked"")     // &lt;editor-fold defaultstate=""collapsed"" desc=""Generated Code""&gt;     private void initComponents() {         // code elided     }// &lt;/editor-fold&gt;      private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {         this.dispose();     }      /**     * @param args the command line arguments     */     public static void main(String args[]) {         java.awt.EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 new Report().setVisible(true);             }         });     }     // Variables declaration - do not modify     public javax.swing.JPanel chartPanel1;     public javax.swing.JButton jButton1;     public javax.swing.JButton jButton2;     public javax.swing.JLabel jLabel1;     public javax.swing.JLabel jLabel10;     public javax.swing.JLabel jLabel11;     public javax.swing.JLabel jLabel12;     public javax.swing.JLabel jLabel13;     public javax.swing.JLabel jLabel14;     public javax.swing.JLabel jLabel15;     public javax.swing.JLabel jLabel16;     public javax.swing.JLabel jLabel17;     public javax.swing.JLabel jLabel18;     public javax.swing.JLabel jLabel19;     public javax.swing.JLabel jLabel2;     public javax.swing.JLabel jLabel20;     public javax.swing.JLabel jLabel21;     public javax.swing.JLabel jLabel22;     public javax.swing.JLabel jLabel23;     public javax.swing.JLabel jLabel24;     public javax.swing.JLabel jLabel25;     public javax.swing.JLabel jLabel26;     public javax.swing.JLabel jLabel27;     public javax.swing.JLabel jLabel28;     public javax.swing.JLabel jLabel29;     public javax.swing.JLabel jLabel30;     public javax.swing.JLabel jLabel4;     public javax.swing.JLabel jLabel7;     public javax.swing.JLabel jLabel8;     public javax.swing.JLabel jLabel9;     public javax.swing.JPanel jPanel1;     public javax.swing.JPanel jPanel2;     public javax.swing.JPanel jPanel3;     public javax.swing.JPanel jPanel4;     public javax.swing.JPanel jPanel6;     public javax.swing.JPanel jPanel7;     public javax.swing.JPanel jPanel8;     public javax.swing.JScrollPane jScrollPane1;     public javax.swing.JScrollPane jScrollPane3;     public javax.swing.JScrollPane jScrollPane5;     public javax.swing.JScrollPane jScrollPane6;     public javax.swing.JSeparator jSeparator1;     public javax.swing.JSeparator jSeparator3;     public javax.swing.JSeparator jSeparator4;     public javax.swing.JSeparator jSeparator5;     public javax.swing.JSeparator jSeparator6;     public javax.swing.JTabbedPane jTabbedPane1;     public javax.swing.JTable jTable1;     public javax.swing.JTable jTable2;     public javax.swing.JTable jTable3;     public javax.swing.JTable jTable4;     // End of variables declaration }"
"registerReceiver(batteryChangeReceiver, new IntentFilter(     Intent.ACTION_BATTERY_CHANGED)); // register in activity or service  public class BatteryChangeReceiver extends BroadcastReceiver {      int scale = -1;     int level = -1;     int voltage = -1;     int temp = -1;      @Override     public void onReceive(Context context, Intent intent) {         level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);         scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);         temp = intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, -1);         voltage = intent.getIntExtra(BatteryManager.EXTRA_VOLTAGE, -1);     } }  unregisterReceiver(batteryChangeReceiver);//unregister in the activity or service"
"import java.awt.*; import java.awt.event.*; import javax.swing.*;   public class EgToMove extends JApplet               implements KeyListener, FocusListener, MouseListener {  static final int SQUARE_SIZE = 40; int squareTop, squareLeft;  boolean focussed = false;  DisplayPanel canvas;  public void init() {     squareTop = getSize().height / 2 - SQUARE_SIZE / 2;   squareLeft = getSize().width / 2 - SQUARE_SIZE / 2;     canvas = new DisplayPanel();     setContentPane(canvas);         canvas.setBackground(Color.BLACK);   canvas.addFocusListener(this);   // Set up the applet to listen for events   canvas.addKeyListener(this);      canvas.addMouseListener(this);    }    public void keyTyped(KeyEvent e) {   //do nothing, if u want something  }  class DisplayPanel extends JPanel {    public void paintComponent(Graphics g) {       super.paintComponent(g);         if (focussed)         g.setColor(Color.cyan);      else         g.setColor(Color.lightGray);       int width = getSize().width;        int height = getSize().height;       g.drawRect(0,0,width-1,height-1);      g.drawRect(1,1,width-3,height-3);      g.drawRect(2,2,width-5,height-5);      g.fillRect(squareLeft, squareTop, SQUARE_SIZE, SQUARE_SIZE);         if (!focussed) {         g.setColor(Color.magenta);         g.drawString(""Click to activate"",7,20);      }   }     }    // --------- Event handling methods    public void focusGained(FocusEvent evt) {    focussed = true;   canvas.repaint();  // redraw with cyan border ///may b u had problem here   }    public void focusLost(FocusEvent evt) {    focussed = false;   canvas.repaint();  // redraw without cyan border///may b u had problem here   }      public void keyPressed(KeyEvent evt) {     int key = evt.getKeyCode();  // keyboard code for the key that was pressed    if (key == KeyEvent.VK_LEFT) {      squareLeft -= 8;      if (squareLeft &lt; 3)         squareLeft = 3;      canvas.repaint();   }   else if (key == KeyEvent.VK_RIGHT) {      squareLeft += 8;      if (squareLeft &gt; getSize().width - 3 - SQUARE_SIZE)         squareLeft = getSize().width - 3 - SQUARE_SIZE;      canvas.repaint();   }   else if (key == KeyEvent.VK_UP) {      squareTop -= 8;      if (squareTop &lt; 3)         squareTop = 3;      canvas.repaint();   }   else if (key == KeyEvent.VK_DOWN) {      squareTop += 8;      if (squareTop &gt; getSize().height - 3 - SQUARE_SIZE)         squareTop = getSize().height - 3 - SQUARE_SIZE;      canvas.repaint();   }    }     public void keyReleased(KeyEvent evt) {   // empty method, required by the KeyListener Interface  }    public void mousePressed(MouseEvent evt) {     // Request that the input focus be given to the     // canvas    canvas.requestFocus();  }    public void mouseEntered(MouseEvent evt) { }  public void mouseExited(MouseEvent evt) { }  public void mouseReleased(MouseEvent evt) { }  public void mouseClicked(MouseEvent evt) { }    }"
"public class Test5 implements MouseListener {      private JDesktopPane pane;     public int mouseCount;      public static void main(String[] args) {         new Test5();     }      private int xpos = 0;     private int ypos = 0;      public Test5() {         EventQueue.invokeLater(new Runnable() {             @Override             public void run() {                 try {                     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());                 } catch (Exception exp) {                     exp.printStackTrace();                 }                 pane = new Test5.DesktopPane() {                     @Override                     public Dimension getPreferredSize() {                         return new Dimension(400, 400);                     }                  };                 pane.add(newInternalFrame(), 10);                 pane.add(newInternalFrame(), 10);                 pane.add(newInternalFrame(), 10);                  JFrame frame = new JFrame();                 frame.add(pane);                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                 frame.pack();                 frame.setLocationRelativeTo(null);                 frame.setVisible(true);             }          });     }      public JInternalFrame newInternalFrame() {         final JInternalFrame inf = new JInternalFrame(""Blah"", false, false, false, true);         inf.setLocation(xpos, ypos);         inf.setSize(300, 300);         inf.setVisible(true);          xpos += 50;         ypos += 50;          JPanel jp = new JPanel();         JLabel jl = new JLabel(""panel"" + xpos);          JButton jb = new JButton(""_"");         JButton jb2 = new JButton(""[]"");         JButton jb3 = new JButton(""X"");          inf.setLayout(new GridLayout(2, 2));         jp.add(jl);         jp.add(jb);         jp.add(jb2);         jp.add(jb3);          inf.add(jp);         jb.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 try {                     inf.setIcon(true); //                    if (inf.getLayer() == JDesktopPane.FRAME_CONTENT_LAYER) { //                        pane.remove(inf); //                        pane.add(inf, JDesktopPane.DEFAULT_LAYER); //                        pane.revalidate(); //                        pane.repaint(); //                    } //                    inf.pack(); //                    inf.setIcon(true);                 } catch (PropertyVetoException ex) {                     ex.printStackTrace();                 }              }          });         jb2.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 try {                     inf.setMaximum(!inf.isMaximum());                     if (inf.isMaximum()) {                         ((JLayeredPane)inf.getParent()).setLayer(inf, 0);                     } else {                         ((JLayeredPane)inf.getParent()).setLayer(inf, 10);                     } //                    if (inf.isMaximum()) {//restore //                        inf.pack(); //                    } else {//maximize //                        inf.setMaximum(true); // //                    } //                    pane.remove(inf); //                    pane.add(inf, JDesktopPane.FRAME_CONTENT_LAYER); //                    pane.revalidate(); //                    pane.repaint();                 } catch (Exception e) {                     e.printStackTrace();                 }              }          });         jb3.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 Container parent = inf.getParent();                 inf.dispose();                 parent.remove(inf);                 //                try {                 //                    inf.dispose();                 //                } catch (Exception ex) {                 //                    ex.printStackTrace();                 //                }              }          });   //        BasicInternalFrameTitlePane titlePane = (BasicInternalFrameTitlePane) ((BasicInternalFrameUI) inf.getUI()).getNorthPane(); //        inf.remove(titlePane);         return inf;     }      public class DesktopPane extends JDesktopPane {          @Override         public void doLayout() {             super.doLayout();             List&lt;Component&gt; icons = new ArrayList&lt;Component&gt;(25);             int maxLayer = 0;              for (Component comp : getComponents()) {                 if (comp instanceof JInternalFrame.JDesktopIcon) {                     icons.add(comp);                     maxLayer = Math.max(getLayer(comp), maxLayer);                 }             }              maxLayer++;             int x = 0;             for (Component icon : icons) {                  int y = getHeight() - icon.getHeight();                 icon.setLocation(x, y);                 x += icon.getWidth();                 setLayer(icon, maxLayer);             }         }      }      @Override     public void mouseClicked(MouseEvent me) {         mouseCount = me.getClickCount();         if (mouseCount == 2) {             System.out.println(""clicked"" + mouseCount);         }         // TODO Auto-generated method stub      }      @Override     public void mouseEntered(MouseEvent arg0) {         System.out.println(""clicked"" + mouseCount);         // TODO Auto-generated method stub      }      @Override     public void mouseExited(MouseEvent arg0) {         // TODO Auto-generated method stub     }      @Override     public void mousePressed(MouseEvent arg0) {         // TODO Auto-generated method stub     }      @Override     public void mouseReleased(MouseEvent arg0) {         // TODO Auto-generated method stub     }  }"
"try (PDDocument doc = PDDocument.load(new File(file))) {     PDFont font = PDType1Font.HELVETICA_BOLD;     float fontSize = 36.0f;      for( PDPage page : doc.getPages() )     {         PDRectangle pageSize = page.getMediaBox();         float stringWidth = font.getStringWidth( message )*fontSize/1000f;         // calculate to center of the page         int rotation = page.getRotation();         boolean rotate = rotation == 90 || rotation == 270;         float pageWidth = rotate ? pageSize.getHeight() : pageSize.getWidth();         float pageHeight = rotate ? pageSize.getWidth() : pageSize.getHeight();         float centerX = rotate ? pageHeight/2f : (pageWidth - stringWidth)/2f;         float centerY = rotate ? (pageWidth - stringWidth)/2f : pageHeight/2f;          // append the content to the existing stream         try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true))         {             contentStream.beginText();             // set font and font size             contentStream.setFont( font, fontSize );             // set text color to red             contentStream.setNonStrokingColor(255, 0, 0);             if (rotate)             {                 // rotate the text according to the page rotation                 contentStream.setTextMatrix(Matrix.getRotateInstance(Math.PI / 2, centerX, centerY));             }             else             {                 contentStream.setTextMatrix(Matrix.getTranslateInstance(centerX, centerY));             }             contentStream.showText(message);             contentStream.endText();         }     }      doc.save( outfile ); }"
"ExtendedPropertyDefinition propDef_PidLidEmail1DisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8080, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1AddressType = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8082, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1EmailAddress = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8083, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalDisplayName = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8084, MapiPropertyType.String);  ExtendedPropertyDefinition propDef_PidLidEmail1OriginalEntryId = new ExtendedPropertyDefinition(//     UUID.fromString(""00062004-0000-0000-C000-000000000046""), 0x8085, MapiPropertyType.Binary);  ExchangeService mailbox = new ExchangeService(ExchangeVersion.Exchange2007_SP1); mailbox.setUrl(new URL(""https://remote.domain.com/EWS/exchange.asmx"").toURI()); ExchangeCredentials credentials = new WebCredentials(""user.name"", ""pw"", ""domain""); mailbox.setCredentials(credentials);  String FIRST = ""First""; String LAST = ""Last""; String FIRST_LAST = FIRST + "" "" + LAST; // ""First Last"" String EMAIL = ""first.last@email.com""; String DISPLAY_NAME = FIRST + "" "" + LAST + "" ("" + EMAIL + "")""; // ""First Last (first.last@email.com)""  Contact c = new Contact(mailbox); c.setGivenName(FIRST); c.setSurname(LAST); c.setFileAs(FIRST_LAST);  // don't use this //    c.getEmailAddresses().setEmailAddress(EmailAddressKey.EmailAddress1, new EmailAddress(EMAIL));  // Address book Name (seem to trigger the whole address book functionality) c.setSubject(FIRST_LAST); // Address book email address c.setExtendedProperty(propDef_PidLidEmail1OriginalDisplayName, EMAIL); // contact and address book display name c.setExtendedProperty(propDef_PidLidEmail1DisplayName, DISPLAY_NAME);  c.setExtendedProperty(propDef_PidLidEmail1AddressType, ""SMTP""); // constant c.setExtendedProperty(propDef_PidLidEmail1EmailAddress, EMAIL);  // not needed after all, exchange sets this automatically //    c.setExtendedProperty(propDef_PidLidEmail1OriginalEntryId, ???);  c.save(WellKnownFolderName.Contacts);  for(Item item : mailbox.findItems(WellKnownFolderName.Contacts, new ItemView(1000))) {   Contact result = (Contact) item;    PropertySet propertySet = new PropertySet(BasePropertySet.FirstClassProperties);   propertySet.add(propDef_PidLidEmail1AddressType);   propertySet.add(propDef_PidLidEmail1EmailAddress);   propertySet.add(propDef_PidLidEmail1OriginalDisplayName);   propertySet.add(propDef_PidLidEmail1DisplayName);   propertySet.add(propDef_PidLidEmail1OriginalEntryId);    result = Contact.bind(mailbox, result.getId(), propertySet);    LOGGER.info(""count: "" + result.getExtendedProperties().getCount());    for(ExtendedProperty p : result.getExtendedProperties())   {     LOGGER.info(p.toString());   } }"
"public static BufferedImage printScrAroundCursor(int width, int height) {     Toolkit tool = Toolkit.getDefaultToolkit();     Robot robot = new Robot();      PointerInfo a = MouseInfo.getPointerInfo();     Point b = a.getLocation();     int x = (int) b.getX();     int y = (int) b.getY();      int topLeftX = Math.max(0, x - (width / 2));     int topLeftY = Math.max(0, y - (height / 2));     if (topLeftX + width &gt; tool.getScreenSize().getWidth())         width = tool.getScreenSize().getWidth() - topLeftX;     if (topLeftX + width &gt; tool.getScreenSize().getHeight())         width = tool.getScreenSize().getHeight() - topLeftY;     return robot.createScreenCapture(new Rectangle(topLeftX , topLeftY , width, height)); }"
"for(int i = 0; i &lt; sheet.getLastRowNum(); i++){         if(sheet.getRow(i)==null){             sheet.shiftRows(i + 1, sheet.getLastRowNum(), -1);             i--;         continue;         }         for(int j =0; j&lt;sheet.getRow(i).getLastCellNum();j++){             if(sheet.getRow(i).getCell(j).toString().trim().equals("""")){                 isRowEmpty=true;             }else {                 isRowEmpty=false;                 break;             }         }         if(isRowEmpty==true){             sheet.shiftRows(i + 1, sheet.getLastRowNum(), -1);             i--;         }     }"
"ActiveXComponent wmi = new ActiveXComponent(""WbemScripting.SWbemLocator"");            Variant variantParameters[] = new Variant[4];   variantParameters[0] = new Variant(_IPADDRESS);   variantParameters[1] = new Variant(""root\\cimv2"");   variantParameters[2] = new Variant(""username"");   variantParameters[3] = new Variant(""password"");        ActiveXComponent axWMI; try {     Variant conRet = wmi.invoke(""ConnectServer"", variantParameters);             axWMI = new ActiveXComponent(conRet.toDispatch()); }catch(ComFailException e) {     axWMI = null; } if (axWMI == null)     return false;"
"pane.setOnMousePressed(new EventHandler&lt;MouseEvent&gt;() {     @Override     public void handle(MouseEvent event) {         circle.setCenterX(event.getX());         circle.setCenterY(event.getY());     } }); pane.setOnDragDetected(new EventHandler&lt;MouseEvent&gt;() {     @Override     public void handle(MouseEvent event) {         circle.startFullDrag();     } }); circle.addEventHandler(MouseDragEvent.ANY, new EventHandler&lt;MouseDragEvent&gt;() {     @Override     public void handle(MouseDragEvent event) {         circle.setCenterX(event.getX());         circle.setCenterY(event.getY());     } });"
"private int mouseX = 0; private int mouseY = 0; private float rotSpeed = 0.2f;  @Override public boolean mouseMoved(int screenX, int screenY) {     int magX = Math.abs(mouseX - screenX);     int magY = Math.abs(mouseY - screenY);      if (mouseX &gt; screenX) {         cam.rotate(Vector3.Y, 1 * magX * rotSpeed);         cam.update();     }      if (mouseX &lt; screenX) {         cam.rotate(Vector3.Y, -1 * magX * rotSpeed);         cam.update();     }      if (mouseY &lt; screenY) {         if (cam.direction.y &gt; -0.965)             cam.rotate(cam.direction.cpy().crs(Vector3.Y), -1 * magY * rotSpeed);         cam.update();     }      if (mouseY &gt; screenY) {          if (cam.direction.y &lt; 0.965)             cam.rotate(cam.direction.cpy().crs(Vector3.Y), 1 * magY * rotSpeed);         cam.update();     }      mouseX = screenX;     mouseY = screenY;      return false; }"
"import gnu.trove.iterator.TIntIntIterator; import gnu.trove.map.TIntIntMap; import gnu.trove.map.hash.TIntIntHashMap; import gnu.trove.procedure.TIntIntProcedure; import gnu.trove.set.TIntSet; import gnu.trove.set.hash.TIntHashSet;  import java.util.ArrayList; import java.util.List;  import org.apache.commons.math.MathException; import org.apache.commons.math.stat.inference.OneWayAnova; import org.apache.commons.math.stat.inference.OneWayAnovaImpl; import org.apache.commons.math.stat.inference.TestUtils;   public class TestMath {     private static final double SIGNIFICANCE_LEVEL = 0.001; // 99.9%      public static void main(String[] args) throws MathException {         double[][] observations = {            {150.0, 200.0, 180.0, 230.0, 220.0, 250.0, 230.0, 300.0, 190.0 },            {200.0, 240.0, 220.0, 250.0, 210.0, 190.0, 240.0, 250.0, 190.0 },            {100.0, 130.0, 150.0, 180.0, 140.0, 200.0, 110.0, 120.0, 150.0 },            {200.0, 230.0, 150.0, 230.0, 240.0, 200.0, 210.0, 220.0, 210.0 },            {200.0, 230.0, 150.0, 180.0, 140.0, 200.0, 110.0, 120.0, 150.0 }         };          final List&lt;double[]&gt; classes = new ArrayList&lt;double[]&gt;();         for (int i=0; i&lt;observations.length; i++) {             classes.add(observations[i]);         }          OneWayAnova anova = new OneWayAnovaImpl(); //      double fStatistic = anova.anovaFValue(classes); // F-value //      double pValue = anova.anovaPValue(classes);     // P-value          boolean rejectNullHypothesis = anova.anovaTest(classes, SIGNIFICANCE_LEVEL);         System.out.println(""reject null hipothesis "" + (100 - SIGNIFICANCE_LEVEL * 100) + ""% = "" + rejectNullHypothesis);          // differences are found, so make t-tests         if (rejectNullHypothesis) {             TIntSet aux = new TIntHashSet();             TIntIntMap fraud = new TIntIntHashMap();              // i vs j unpaired t-tests - O(n^2)             for (int i=0; i&lt;observations.length; i++) {                 for (int j=i+1; j&lt;observations.length; j++) {                     boolean different = TestUtils.tTest(observations[i], observations[j], SIGNIFICANCE_LEVEL);                     if (different) {                         if (!aux.add(i)) {                             if (fraud.increment(i) == false) {                                 fraud.put(i, 1);                             }                         }                         if (!aux.add(j)) {                             if (fraud.increment(j) == false) {                                 fraud.put(j, 1);                             }                         }                     }                            }             }              // TIntIntMap is sorted by value             final int max = fraud.get(0);             // Keep only those with a highest degree             fraud.retainEntries(new TIntIntProcedure() {                 @Override                 public boolean execute(int a, int b) {                     return b != max;                 }             });              // If more than half of the elements are different             // then they are not really different (?)             if (fraud.size() &gt; observations.length / 2) {                 fraud.clear();             }              // output             TIntIntIterator it = fraud.iterator();             while (it.hasNext()) {                 it.advance();                 System.out.println(""Element "" + it.key() + "" has significant differences"");                          }         }     } }"
"from math import sin, cos, radians, sqrt, atan2      def lldistance(a, b):    """"""    Calculates the distance between two GPS points (decimal)    @param a: 2-tuple of point A    @param b: 2-tuple of point B    @return: distance in m    """"""    r = 6367442.5             # average earth radius in m    dLat = radians(a[0]-b[0])    dLon = radians(a[1]-b[1])    x = sin(dLat/2) ** 2 + \        cos(radians(a[0])) * cos(radians(b[0])) *\        sin(dLon/2) ** 2    #original# y = 2 * atan2(sqrt(x), sqrt(1-x))    y = 2 * asin(sqrt(x))    d = r * y     return d"
"from math import atan2, sin, cos, sqrt, pi from matplotlib import pyplot  def calc_points(A, B, C):     dx = C[0]-A[0]     dy = C[1]-A[1]     line_angle = atan2(dy, dx)     radius = sqrt(dy*dy + dx*dx)     new_points = []     # now go around the circle and find the points     for i in range(3):         angle = line_angle + (i+1)*45*(pi/180)  # new angle in radians         x = radius*cos(angle) + C[0]         y = radius*sin(angle) + C[1]         new_points.append([x, y])     return new_points  # test this with some reasonable values pyplot.figure() for i, a in enumerate((-20, 20, 190)):     radius = 5     C = [2, 2]     # find an A and B on the circle and plot them     angle = a*(pi/180)     A = [radius*cos(pi+angle)+C[0], radius*sin(pi+angle)+C[1]]     B = [radius*cos(angle)+C[0], radius*sin(angle)+C[1]]     pyplot.subplot(1,3,i+1)     pyplot.plot([A[0], C[0]], [A[1], C[1]], 'r')     pyplot.plot([B[0], C[0]], [B[1], C[1]], 'r')     # now run these through the calc_points function and the new lines     new_points = calc_points(A, B, C)     for np in new_points:         pyplot.plot([np[0], C[0]], [np[1], C[1]], 'b')     pyplot.xlim(-8, 8)     pyplot.ylim(-8, 8)     for x, X in ((""A"", A), (""B"", B), (""C"", C)):         pyplot.text(X[0], X[1], x)  pyplot.show()"
"reducedFunction(int numRows, int numImages, bool[][] tracker) {     for (i = 0; i &lt; numRows; i++) {         for (j = 0; j &lt; numImages; j++) {             imageView[j].setOnClickListener(new OnClickListener(){                 public void onClick(View v) {                     if (tracker[i-1][j-1] == false) {                         tracker[i-1][j-1] = true;                         v.setBackgroundResource(R.drawable.launcher);                     } else {                         tracker[i-1][j-1] = false;                         v.setBackgroundResource(R.drawable.icon);                     }         }     } }  if(screenWidth &gt; screenHeight) {     reducedFunction(numLandscapeRows, numLandscapeImagesPerRow, imageViewLandscapeTracker) } else {     reducedFunction(numPortraitRows, numPortraitImagesPerRow, imageViewPortraitTracker) }"
"class Sudoku {     int[][] grid = {         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0},         {0, 0, 0, 0, 0, 0, 0, 0, 0}     };      void generateSudokuFromInput() {         // just set the values on grid, e.g. grid[0][0] = 9     }      void solveIt() {         generateSudokuFromInput();     } }"
"String str = ""100001111111111111111"";  // add enough space for an additional ""-"" for every 8 chars: char[] chars = new char[str.length() + (str.length() / 8)];  // this offset will give us the first ""-"" position from the LEFT: int offset = str.length() % 8; int idx = 0, strIdx = 0;  for (; strIdx &lt; str.length(); idx++, strIdx++) {     if (((strIdx % 8) == offset) &amp;&amp; (strIdx != 0))         chars[idx++] = '-';     chars[idx] = str.charAt(strIdx); }  String str2 = new String(chars);  System.out.println(str2);"
"import org.eclipse.swt.SWT; import org.eclipse.swt.graphics.GC; import org.eclipse.swt.layout.FillLayout; import org.eclipse.swt.widgets.Composite; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Event; import org.eclipse.swt.widgets.Listener; import org.eclipse.swt.widgets.Shell; import org.swtchart.Chart; import org.swtchart.IAxis; import org.swtchart.ILineSeries; import org.swtchart.ISeries; import org.swtchart.ISeries.SeriesType;  /**  * An example for area chart.  */ public class AreaChartExample {      private static final double[] ySeries1 = { 0.1, 0.38, 0.71, 0.92, 1.0 };      private static final double[] ySeries2 = { 1.2, 3.53, 3.1, 0.1, 0.5 };      /* Used to remember the location of the highlight point */     private static int highlightX;     private static int highlightY;      /**      * The main method.      *       * @param args      *            the arguments      */     public static void main(String[] args) {         Display display = new Display();         Shell shell = new Shell(display);         shell.setText(""Area Chart"");         shell.setSize(500, 400);         shell.setLayout(new FillLayout());          createChart(shell);          shell.open();         while (!shell.isDisposed()) {             if (!display.readAndDispatch()) {                 display.sleep();             }         }         display.dispose();     }      protected static boolean highlight;      /**      * create the chart.      *       * @param parent      *            The parent composite      * @return The created chart      */     static public Chart createChart(Composite parent) {          // create a chart         final Chart chart = new Chart(parent, SWT.NONE);          // set titles         chart.getTitle().setText(""Area Chart"");          // create line series         ILineSeries lineSeries1 = (ILineSeries) chart.getSeriesSet()                 .createSeries(SeriesType.LINE, ""line series 1"");         lineSeries1.setYSeries(ySeries1);         lineSeries1.setLineColor(Display.getDefault().getSystemColor(                 SWT.COLOR_RED));         lineSeries1.enableArea(true);          ILineSeries lineSeries2 = (ILineSeries) chart.getSeriesSet()                 .createSeries(SeriesType.LINE, ""line series 2"");         lineSeries2.setYSeries(ySeries2);         lineSeries2.enableArea(true);          // adjust the axis range         chart.getAxisSet().adjustRange();          /* Get the plot area and add the mouse listeners */         final Composite plotArea = chart.getPlotArea();          plotArea.addListener(SWT.MouseHover, new Listener() {              @Override             public void handleEvent(Event event) {                 IAxis xAxis = chart.getAxisSet().getXAxis(0);                 IAxis yAxis = chart.getAxisSet().getYAxis(0);                  double x = xAxis.getDataCoordinate(event.x);                 double y = yAxis.getDataCoordinate(event.y);                  ISeries[] series = chart.getSeriesSet().getSeries();                  double closestX = 0;                 double closestY = 0;                 double minDist = Double.MAX_VALUE;                  /* over all series */                 for (ISeries serie : series) {                     double[] xS = serie.getXSeries();                     double[] yS = serie.getYSeries();                      /* check all data points */                     for (int i = 0; i &lt; xS.length; i++) {                         /* compute distance to mouse position */                         double newDist = Math.sqrt(Math.pow((x - xS[i]), 2)                                 + Math.pow((y - yS[i]), 2));                          /* if closer to mouse, remember */                         if (newDist &lt; minDist) {                             minDist = newDist;                             closestX = xS[i];                             closestY = yS[i];                         }                     }                 }                  /* set tooltip of closest data point */                 plotArea.setToolTipText(closestX + "" "" + closestY);                  /* remember closest data point */                 highlightX = xAxis.getPixelCoordinate(closestX);                 highlightY = yAxis.getPixelCoordinate(closestY);                  highlight = true;                  /* trigger repaint (paint highlight) */                 plotArea.redraw();             }         });          plotArea.addListener(SWT.MouseMove, new Listener() {              @Override             public void handleEvent(Event arg0) {                 highlight = false;                  plotArea.redraw();             }         });          plotArea.addListener(SWT.Paint, new Listener() {              @Override             public void handleEvent(Event event) {                 if (highlight) {                     GC gc = event.gc;                      gc.setBackground(Display.getDefault().getSystemColor(                             SWT.COLOR_RED));                     gc.setAlpha(128);                      gc.fillOval(highlightX - 5, highlightY - 5, 10, 10);                 }             }         });          return chart;     } }"
"public static void main(String[] args) {     JFrame frame = new JFrame();     JPanel panel = new JPanel();      String columnNames[] = { ""Column 1"", ""Column 2"", ""Column 3"" };      String dataValues[][] = { { ""12"", ""234"", ""67"" }, { ""-123"", ""43"", ""853"" }, { ""93"", ""89.2"", ""109"" }, { ""279"", ""9033"", ""3092"" } };     JTable table = new JTable(dataValues, columnNames);      panel.add(table);      final JPopupMenu menu = new JPopupMenu();     JMenuItem item = new JMenuItem(""item"");     menu.add(item);     table.setComponentPopupMenu(menu);      table.addMouseListener(new MouseAdapter()     {         @Override         public void mouseReleased(MouseEvent e)         {             if (e.isPopupTrigger())             {                 menu.show(e.getComponent(), e.getX(), e.getY());             }         }          @Override         public void mouseClicked(MouseEvent e)         {             if (e.isPopupTrigger())             {                 menu.show(e.getComponent(), e.getX(), e.getY());             }         }     });      frame.setContentPane(panel);     frame.pack();     frame.setVisible(true); }"
private static NumberPanel current;  ... // create a static MouseListener instead of creating a new one for each // NumberPanel instance. private static final MouseAdapter mouseListener = new MouseAdapter(){      public void mousePressed(MouseEvent event) {         NumberPanel panel = (NumberPanel) event.getSource();          if(current != null) {              current.mouseClicked = false;         }         current = panel;         panel.mouseClicked = true;         // repaint number panels container     } } ... addMouseListener(mouseListener);
"String parentHandle = driver.getWindowHandle(); // get the current window handle driver.findElement(By.xpath(""//*[@id='someXpath']"")).click(); // click some link that opens a new window  for (String winHandle : driver.getWindowHandles()) {     driver.switchTo().window(winHandle); // switch focus of WebDriver to the next found window handle (that's your newly opened window) }  //code to do something on new window  driver.close(); // close newly opened window when done with it driver.switchTo().window(parentHandle); // switch back to the original window"
