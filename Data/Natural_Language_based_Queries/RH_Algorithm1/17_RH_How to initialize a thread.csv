code
Code
"final String select = ""select case when FHEIGHT_FLAG = 't' then 't' else 'f' end as FHEIGHT_FLAG, ....(all other columns) .... from tablename""; // database connection Class driverClass = Class.forName(""package.of.jdbcDriver""); Connection jdbcConnection = DriverManager.getConnection(         ""jdbc:url:of:db"", ""user"", ""pass""); IDatabaseConnection connection = new DatabaseConnection(jdbcConnection);  // partial database export QueryDataSet partialDataSet = new QueryDataSet(connection); partialDataSet.addTable(""Tablename"", select);  FlatXmlDataSet.write(partialDataSet, new FileOutputStream(""mydataset.xml""));"
"import java.util.*;  class BinarySearchWithComparator {   public static void main(String[] args)   {     // Please scroll down to see 'User' class implementation.     List&lt;User&gt; l = new ArrayList&lt;User&gt;();     l.add(new User(10, ""A""));     l.add(new User(20, ""B""));     l.add(new User(30, ""C""));      Comparator&lt;User&gt; c = new Comparator&lt;User&gt;() {       public int compare(User u1, User u2) {         return u1.getId().compareTo(u2.getId());       }     };      // Must pass in an object of type 'User' as the key.     // The key is an 'User' with the 'id' which is been searched for.     // The 'name' field is not used in the comparison for the binary search,     // so it can be a dummy value -- here it is omitted with a null.     //     // Also note that the List must be sorted before running binarySearch,     // in this case, the list is already sorted.      int index = Collections.binarySearch(l, new User(20, null), c);     System.out.println(index);    // Output: 1      index = Collections.binarySearch(l, new User(10, null), c);     System.out.println(index);    // Output: 0      index = Collections.binarySearch(l, new User(42, null), c);     System.out.println(index);    // Output: -4                                   // See javadoc for meaning of return value.   } }  class User {   private int id;   private String name;    public User(int id, String name) {     this.id = id;     this.name = name;   }    public Integer getId() {     return Integer.valueOf(id);   } }"
"public class MyFrame extends JFrame {      public MyFrame() {         super(""My Frame"");          // You can set the content pane of the frame to your custom class.         setContentPane(new DrawPane());         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         setSize(400, 400);         setVisible(true);     }     // Create a component that you can actually draw on.    class DrawPane extends JPanel {         public void paintComponent(Graphics g) {             g.fillRect(20, 20, 100, 200); // Draw on g here e.g.         }    }     public static void main(String args[]){         new MyFrame();    } }"
"ExpressionFactory factory = new ExpressionFactoryImpl();  // create a context and add a Person object to the context, this variable will be used // in the property replacement // objects of type Person have two fields: firstName and lastName  SimpleContext context = new SimpleContext(); Person person = new Person(""John"", ""Doe""); context.setVariable(""person"", factory.createValueExpression(person, Person.class));  // create the expression  String expr = ""My name is ${person.firstName} ${person.lastName}""; ValueExpression e = factory.createValueExpression(context, expr, String.class);  // evaluate the expression System.out.println(e.getValue(context));"
"public class MyServletContextListener implements ServletContextListener{   public void contextInitialized(ServletContextEvent event){     ArrayList list = new ArrayList();      //add to ServletContext     event.getServletContext().setAttribute(""list"", list);      JobDataMap map = new JobDataMap();     map.put(""list"", list);     JobDetail job = new JobDetail(..., MyJob.class);     job.setJobDataMap(map);     //execute job   }    public void contextDestroyed(ServletContextEvent event){} }  //Quartz job public class MyJob implements Job{   public void execute(JobExecutionContext context){     ArrayList list = (ArrayList)context.getMergedJobDataMap().get(""list"");     //...   } }"
"public int[][] loadBoard(int map) {     if (map == 1) {   return new int[][] {    {2,2,24,24,24,24,24,3,3,0,0,0,1 },   { 2,2,24,23,23,23,24,1,3,0,0,0,1 },   { 1,1,24,23,23,23,24,1,3,3,3,3,1 },   { 1,1,24,24,23,24,24,1,1,1,1,3,1 },   { 1,1,1,1,7,1,1,1,1,1,1,3,1 },   { 5,1,1,1,7,7,7,7,7,1,1,1,1 },   { 6,3,3,1,3,3,3,1,7,7,7,3,1 },   { 6,3,3,1,3,1,1,1,1,1,7,1,1 },   { 3,3,1,1,1,1,1,1,1,1,7,1,1 } };   }else{   return new int[][] {   { 1,1,1,1,1,24,1,1,1,1,1,1,1 },    { 1,1,1,1,1,24,1,1,1,1,1,1,1 },   { 1,1,1,1,1,24,1,1,24,1,1,1,1 },   { 1,1,1,1,1,24,1,1,24,1,1,1,1 },   { 1,1,7,1,1,24,24,24,24,1,1,1,1 },   { 1,1,7,1,1,24,1,24,1,1,1,1,1 },   { 1,1,1,1,1,24,1,1,1,1,1,1,1 },   { 1,1,1,1,1,24,1,1,1,1,1,1,1 },   { 1,3,3,1,1,24,1,1,1,1,1,1,1 },   }; }   }"
"public interface GenericListener {     public void handleMyEvent(Object sourceObj, int eventCode); }  //...later on there's some implementation public void handleMyEvent(Object sourceObj, int eventCode) {     if ( sourceObj == startDownloadButton &amp;&amp; eventCode == MyButton.CLICKED ) {         //... 20 lines of code to start download     } else if ( sourceObj instanceOf DownloadStatus &amp;&amp; eventCode == DownloadStatus.COMPLETE ) {         //... 10 lines of code to display status     } else //... and on and on... }"
private void getMyComponents() {     Component findList = getJList(chooser);     JList myList = (JList) findList;     //find fileName in the JList and move with ViewPort view to the expected Rectangle     Component myScrollPane = getJScrollPane(chooser);     JScrollPane scrollPane = (JScrollPane) myScrollPane;     JViewport vport = scrollPane.getViewport();     //move with ViewPort view to the expected Rectangle }  private Component getJList(Component comp) {     if (comp.getClass() == JList.class) {         return comp;     }     if (comp instanceof Container) {         Component[] components = ((Container) comp).getComponents();         for (int i = 0; i &lt; components.length; i++) {             Component child = getJList(components[i]);             if (child != null) {                 return child;             }         }     }     return null; }  private Component getJScrollPane(Component comp) {     if (comp.getClass() == JScrollPane.class) {         return comp;     }     if (comp instanceof Container) {         Component[] components = ((Container) comp).getComponents();         for (int i = 0; i &lt; components.length; i++) {             Component child = getJScrollPane(components[i]);             if (child != null) {                 return child;             }         }     }     return null; }
"private static final String command_cbo1 = ""ComboBox1""; // ...  public class YourClass implements ItemListener, ActionListener {     // ...      public YourClass()     {         // ...         qntbox1.addActionListener(this);         qntbox1.setActionCommand(command_cbo1);         // ...     }      // ...      public void itemStateChanged(ItemEvent e)             {         // ...     }      // ...      public void actionPerformed(ActionEvent e)     {         JComboBox cb = (JComboBox) e.getSource();         String s = (String) cb.getSelectedItem();          if(e.getActionCommand().equals(command_cbo1))         {             fprice1.setText("""" + (Integer.parseInt(price1.getText()) * Integer.parseInt(s)));         }         // ...     }      // ... }"
"JNIEXPORT jint JNICALL Java__Names1_GetMyNames(JNIEnv *env, jobject obj) { jfieldID myNamesID; /* store the field ID */ int i=0; jstring myStr; jobjectArray dev; char* myNames[] = {""Hello "", ""world!""};  // Get a reference to objâ€™s class  jclass cls = env-&gt;GetObjectClass(obj); // Get static field ID myNamesID = env-&gt;GetStaticFieldID(cls, ""myDevNames"", ""[Ljava/lang/String;""); // Get the object field dev = static_cast&lt;jobjectArray&gt;(env-&gt;GetStaticObjectField(cls,myNamesID));  for (i=0; i&lt;2; i++) { myStr = env-&gt;NewStringUTF(myNames[i]); env-&gt;SetObjectArrayElement(dev,i,myStr); } return 0; }"
"public class Reflection {      public void sayHello(String theClass){         //Since Mod classes are in package 'mod', we precede their name accordingly.         Class aClass = Class.forName(""mod."" + theClass);         aClass.getMethod(""sayHi"").invoke(aClass.newInstance());     }      public static void main(String[] args) {         //Get a list of the compiled classes in the 'mod' folder         String path = ""./bin/mod"";         String fileName;         File folder = new File(path);         List&lt;File&gt; fileList = Arrays.asList(folder.listFiles());         //Iterate through the list of classes to invoke their methods         Iterator&lt;File&gt; it = fileList.iterator();                 while(it.hasNext()){             fileName = it.next().getName();                  //When invoking the sayHello method, we remove the file extension             new Reflection().sayHello(fileName.replace("".class"", """"));         }      } }"
"public class ApplicationController implements Initializable {      @FXML     ComboBox cmb_locations;     ...     @Override     public void initialize(URL url, ResourceBundle rb) {         ...         List&lt;String&gt; list = new ArrayList&lt;String&gt;();         list.add(""Item A"");         list.add(""Item B"");         list.add(""Item C"");         ObservableList obList = FXCollections.observableList(list);         cmb_locations.getItems().clear();         cmb_locations.setItems(obList);         ...     } }"
"import java.util.HashMap;  class Program {     public static void main(String[] args)     {         String pattern = ""Q01 + Q02"";         String result = """";          HashMap&lt;String, String&gt; vals = new HashMap&lt;&gt;();          vals.put(""Q01"", ""123"");         vals.put(""Q02"", ""123"");          for(HashMap.Entry&lt;String, String&gt; val : vals.entrySet())         {             result = pattern.replace(val.getKey(), val.getValue());             pattern = result;         }          System.out.println(result);      } }"
"class CustomRenderer extends DefaultTableCellRenderer {       public void setValue(Object value)       {          setText(""- ""+value);       }   }  class MyCellEditor extends AbstractCellEditor                          implements TableCellEditor,                                     FocusListener,                                     ActionListener {     JTextField textFeild;     String currentValue;      JTable table;     int row, col;     public MyCellEditor(JTable table) {         this.table = table;         textFeild = new JTextField();         textFeild.addActionListener(this);         textFeild.addFocusListener(this);     }       @Override     public Object getCellEditorValue() {         return currentValue;     }      @Override     public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {          currentValue = (String)value;         return textFeild;      }      @Override     public void focusGained(FocusEvent e) {         textFeild.setText("""");         row = table.getSelectedRow();         col = table.getSelectedColumn();      }      @Override     public void focusLost(FocusEvent e) {          if(!textFeild.getText().equals(""""))            //currentValue = textFeild.getText();            table.setValueAt(textFeild.getText(), row, col);          fireEditingStopped();      }      @Override     public void actionPerformed(ActionEvent e) {        if(!textFeild.getText().trim().equals(""""))            currentValue = textFeild.getText();        fireEditingStopped();     }   }"
public interface Address {     String getAddress(); } class AddressImpl implements Address {     String address;     public AddressImpl(String address){         this.address = address;     }     public String getAddress() { return address; }     public void setAddress(String address) { this.address = address; } } ... public List&lt;Address&gt; getAddresses(){     List&lt;Address&gt; addressesToReturn = new ArrayList&lt;Address&gt;();     for(Address address : addresses){         addressesToReturn.add(address); //i.e. return the original object as is     }     return addressesToReturn; }
"package the.package;    public class ControllerName extends StackPane{    @FXML   ImageView imageId;    @Override   public void initialize(URL url, ResourceBundle resourceBundle) {     //You can add code here.       //With JavaFX2     widthProperty().addListener(new ChangeListener() {        @Override       public void changed(ObservableValue ov, Object t, Object t1) {                       myImageView.setFitWidth(stage.getWidth());       }     });       //With JavaFX8 Using Lambdas      widthProperty().addListener((ov, t, t1) -&gt;        myImageView.setFitWidth(getWidth()));             } }"
"Uri.Builder builder = new Uri.Builder(); builder.scheme(""http"")     .authority(""yehki.epagestore.in"")     .appendPath(""app_api"")     .appendPath(""order.php"")     .appendQueryParameter(""customer_id"", customer_id)     .appendQueryParameter(""address_id"", address_id);  for (int i = 0; i &lt; carts.length(); i++) {    builder.appendQueryParameter(""products[""+i+""][productName]"", cartList.get(i).get((Const.TAG_PRODUCT_NAME)));    builder.appendQueryParameter(""products[""+i+""][productId]"", cartList.get(i).get((Const.TAG_PRODUCT_ID)));    builder.appendQueryParameter(""products[""+i+""][quantity]"", cartList.get(i).get((Const.TAG_QUANTITY)));    builder.appendQueryParameter(""products[""+i+""][unit]"", cartList.get(i).get((Const.TAG_UNIT)));    builder.appendQueryParameter(""products[""+i+""][unitPrice]"", cartList.get(i).get((Const.TAG_RETAIL_PRICE)));  }  String myUrl = builder.build().toString();"
"public class MyUserDetailsService implements UserDetailsService{      private EntityManager entityManager;     @PersistenceContext     public void setEntityManager(EntityManager newEm){         this.entityManager = newEm;     }      public UserDetails loadUserByUsername(String username){          // assuming that you have a User class that implements UserDetails         return entityManager.createQuery(""from User where username = :username"", User.class)                             .setParameter(""username"", username)                             .getSingleResult();      } }"
"import java.lang.reflect.Method;   public class Test {       public String stringInstance = ""first;second"";      public void Foo() {           try {             Object instance = getClass().getDeclaredField(""stringInstance"").get(this);             Method m = instance.getClass().getMethod(""split"", String.class);              Object returnValue = m.invoke(instance, "";"");             if(returnValue instanceof String[])             {                 for(String s : (String[])returnValue )                 {                     System.out.println(s);                 }             }          } catch (Exception e) {             // TODO Auto-generated catch block             e.printStackTrace();         }     }      public static void main(String a[]){         new Test().Foo();     }    }"
"private void useList() {     String temp = getList().get(0); // access ""via accessor"" ----------+     System.out.println(temp);                                          | }                                                                      |                                                                        | public ArrayList&lt;String&gt; getList()                                     | {                                                                      |     return theList; // but you actually directly access it here...  &lt;--+ }"
"import javax.swing.*;  public class SimpleThreeTierMain {     /**      * @param args      */     public static void main(String[] args) {         // TODO Auto-generated method stub          // Doing some stuff here, like building rooms, etc...          // Here I start using images         DrawRoom drawRoom = new DrawRoom();         JFrame  frame;          frame = new JFrame(""The Current Image"");         frame.setContentPane(drawRoom);         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setSize(640,510);         frame.setVisible(true);          // Then in a while loop, I get user input from the console and process it.         // According to which room the user is in, I want to draw the corresponding         //image.           long  lTime = 2050;         int   iChange = 0;         try {             while (true) {                 Thread.sleep (lTime);                 if (iChange == 1)                     drawRoom.changeImage(""0112091252a.jpg"");                 else                     drawRoom.changeImage(""0112091251.jpg"");                 iChange = 1 - iChange;             }         } catch (InterruptedException iex) {}     } }"
"Document doc = Jsoup.connect(""http://stackoverflow.com/questions/14541740/java-program-to-download-images-from-a-website-and-display-the-file-sizes"").get();  Elements imgElements = doc.select(""img[src]""); Map&lt;String, String&gt; fileSizeMap = new HashMap&lt;String, String&gt;();  for(Element imgElement : imgElements){     String imgUrlString = imgElement.attr(""abs:src"");     URL imgURL = new URL(imgUrlString);     HttpURLConnection httpConnection = (HttpURLConnection) imgURL.openConnection();     String contentLengthString = httpConnection.getHeaderField(""Content-Length"");     if(contentLengthString == null)         contentLengthString = ""Unknown"";      fileSizeMap.put(imgUrlString, contentLengthString); }  for(Map.Entry&lt;String, String&gt; mapEntry : fileSizeMap.entrySet()){     String imgFileName = mapEntry.getKey();     System.out.println(imgFileName + "" ---&gt; "" + mapEntry.getValue() + "" bytes""); }"
class MyWorkflow extends Workflow {      public MyWorkflow() {         super();     }      public MyWorkflow(WorkflowEntity entity) {         super(entity);     } } public static Workflow factory(WorkflowEntity workflowEntity) {     try {         Class&lt;?&gt; clazz = Class.forName(workflowEntity.getClassName())                 .asSubclass(Workflow.class);         Constructor&lt;?&gt; c = clazz.getConstructor(WorkflowEntity.class);         Object workflowClass = c.newInstance(workflowEntity);         return (Workflow) workflowClass;     } catch (Exception e) {         e.printStackTrace();     }      return null; }
"public class ProcessBuildDemo {      public static void main(String [] args) throws IOException {          String[] command = {""CMD"", ""/C"", ""dir""};         ProcessBuilder probuilder = new ProcessBuilder( command );         //You can set up your work directory         probuilder.directory(new File(""c:\\xyzwsdemo""));          Process process = probuilder.start();          //Read out dir output         InputStream is = process.getInputStream();         InputStreamReader isr = new InputStreamReader(is);         BufferedReader br = new BufferedReader(isr);         String line;         System.out.printf(""Output of running %s is:\n"",                 Arrays.toString(command));         while ((line = br.readLine()) != null) {             System.out.println(line);         }          //Wait to get exit value         try {             int exitValue = process.waitFor();             System.out.println(""\n\nExit Value is "" + exitValue);         } catch (InterruptedException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }     } }"
"public void addListenerOnSpinnerItemSelection() {         mySpinner = (Spinner) findViewById(R.id.GPU_LAYOUT);           mySpinner.setOnItemSelectedListener(new myOnItemSelectedListener());     }  public class myOnItemSelectedListener implements OnItemSelectedListener {        @Override public void onItemSelected(AdapterView&lt;?&gt; parent, View arg1, int pos,long arg3)     {             int position=Arrays.asList(getResources().getStringArray(R.array.GPU_LAYOUT)).indexOf(fecha);           }  @Override public void onNothingSelected(AdapterView&lt;?&gt; arg0) {        }        }"
"public class ConcatenateStrings {     public static String concateLines(String[] s, String separator) {         String result = """";           StringBuilder sb = new StringBuilder();         if (s.length &gt; 0) {               sb.append(s[0]);             for (int i = 1; i &lt; s.length; i++) {                         sb.append(separator);                   sb.append(s[i]);               }         }         return sb.toString();     } }  public static void main(String[] args) {  String[] input = {""Test"", ""input""};  System.out.println(ConcatenateStrings.concateLines(input, "","")); }"
public class Driver {     public static void main(String[] args) throws Exception {         Class&lt;?&gt;[] classes = Driver.class.getDeclaredClasses();         System.out.println(Arrays.toString(classes));         for (Class&lt;?&gt; clazz : classes) {             if (clazz.isAnnotation()) {                 Method[] methods = clazz.getDeclaredMethods();                 for (Method method : methods) {                     System.out.println(method);                 }             }         }     }      @Retention(value=RetentionPolicy.RUNTIME)     @Target(value=ElementType.FIELD)     protected @interface Addition     {         String location();     } }
"import org.jooq.util.jaxb.*;  // [...]  Configuration configuration = new Configuration()     .withJdbc(new Jdbc()         .withDriver(""com.mysql.jdbc.Driver"")         .withUrl(""jdbc:mysql://localhost:3306/library"")         .withUser(""root"")         .withPassword(""root""))     .withGenerator(new Generator()         .withName(""org.jooq.util.DefaultGenerator"")         .withDatabase(new Database()             .withName(""org.jooq.util.mysql.MySQLDatabase"")             .withIncludes("".*"")             .withExcludes("""")             .withInputSchema(""library""))         .withTarget(new Target()             .withPackageName(""org.jooq.util.maven.example"")             .withDirectory(""target/generated-sources/jooq"")));  GenerationTool.main(configuration);"
"public class Server {      public static void main(String[] args) {         Spark.get(new VelocityRoute(""/hello"") {             @Override             public Object handle(final Request request, final Response response) {                 Map&lt;String, Object&gt; model = new HashMap&lt;String, Object&gt;();                 model.put(""hello"", ""Velocity World"");                 model.put(""person"", new Person(""Foobar""));                  // The wm files are located under the resources directory                 return modelAndView(model, ""hello.wm"");             }         });     }      public static class Person {         private String name;          public Person(String name) {             this.name = name;         }          public String getName() {             return name;         }          public void setName(String name) {             this.name = name;         }     } }"
