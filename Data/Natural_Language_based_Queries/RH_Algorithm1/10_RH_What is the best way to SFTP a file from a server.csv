code
"InputStream response = new ByteArrayInputStream(""&lt;Response&gt; &lt;aa&gt; ""         + ""&lt;Fromhere&gt; &lt;a1&gt;Content&lt;/a1&gt; &lt;a2&gt;Content&lt;/a2&gt; &lt;/Fromhere&gt; ""         + ""&lt;/aa&gt; &lt;/Response&gt;"".getBytes()); /* Or whatever. */  DocumentBuilder builder = DocumentBuilderFactory         .newInstance().newDocumentBuilder(); Document doc = builder.parse(response);  XPath xpath = XPathFactory.newInstance().newXPath(); XPathExpression expr = xpath.compile(""string(/Response/aa/FromHere)""); String result = (String)expr.evaluate(doc, XPathConstants.STRING);"
"import java.util.concurrent.CountDownLatch;  ...   // set the latch count to the nuber of callbacks to wait for  CountDownLatch latch = new CountDownLatch(2);   ServiceCallBackhandler callbackhandler =  new ServiceCallBackhandler() {       public void handleResponse(Response response) {            .... do real work ...            latch.countDown();       }  };   stub.startGetData(""Foo"",callbackhandler)  stub.startGetData(""bar"",callbackhanlder)   // wait for both callbacks to occur  latch.await();"
"{     ""entry"": ""132456"",     ""product"":      {         ""item"": ""123456"",         ""prompts"":          [             {                 ""promptId"": ""1"",                 ""promptNumber"": ""109"",                 ""promptType"": 4,                 ""promptTypeDesc"": ""desc1"",                 ""validations"":                 [                     {                         ""minLen"": 10,                         ""maxLen"": 10,                         ""required"": true                      }                  ]              }          ]      } }"
"public static boolean checkInternetConnection(Context context) {      ConnectivityManager conMgr = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);      // ARE WE CONNECTED TO THE NET?     if (conMgr.getActiveNetworkInfo() != null             &amp;&amp; conMgr.getActiveNetworkInfo().isAvailable()             &amp;&amp; conMgr.getActiveNetworkInfo().isConnected()) {         return true;     } else {         Log.w(TAG, ""Internet Connection NOT Present"");         return false;     } }     public static boolean isConnAvailAndNotRoaming(Context context) {      ConnectivityManager conMgr = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);      if (conMgr.getActiveNetworkInfo() != null             &amp;&amp; conMgr.getActiveNetworkInfo().isAvailable()             &amp;&amp; conMgr.getActiveNetworkInfo().isConnected()) {          if(!conMgr.getActiveNetworkInfo().isRoaming())             return true;         else             return false;     } else {         Log.w(TAG, ""Internet Connection NOT Present"");         return false;     } }     public static boolean isRoaming(Context context) {      ConnectivityManager conMgr = (ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);      return (conMgr.getActiveNetworkInfo()!=null &amp;&amp; conMgr.getActiveNetworkInfo().isRoaming()); }"
"log4j.rootLogger=DEBUG  # AdminFileAppender - used to log messages in the admin.log file. log4j.appender.AdminFileAppender=org.apache.log4j.FileAppender  log4j.appender.AdminFileAppender.File=admin.log  log4j.appender.AdminFileAppender.layout=org.apache.log4j.PatternLayout log4j.appender.AdminFileAppender.layout.ConversionPattern= %-4r [%t] %-5p %c %x - %m%n  # ReportFileAppender - used to log messages in the report.log file. log4j.appender.ReportFileAppender=org.apache.log4j.FileAppender  log4j.appender.ReportFileAppender.File=report.log  log4j.appender.ReportFileAppender.layout=org.apache.log4j.PatternLayout log4j.appender.ReportFileAppender.layout.ConversionPattern= %-4r [%t] %-5p %c %x - %m%n  log4j.logger.com.vaannila.admin=WARN,AdminFileAppender  log4j.logger.com.vaannila.report=DEBUG,ReportFileAppender"
"public void dbconnection() {      String name = """";     String port = ""3306"";     String user = ""systech"";     String pass = ""systech"";     String dbname = ""cascade_demo"";     String host=""192.168.1.61"";      try {         String url = ""jdbc:mysql://""+host+"":""+  port + ""/"" + dbname;         Class.forName(""com.mysql.jdbc.Driver"").newInstance ();         Connection con = DriverManager.getConnection(url, user, pass);         String qry2 = ""select * from item_master"";         Statement st = con.createStatement();         ResultSet rs = st.executeQuery(qry2);         while (rs.next()) {             System.out.println(""Name:"" + rs.getString(1));         }          rs.close();         st.close();         con.close();       } catch (Exception e) {         System.out.println(""Exception:"" + e);     } }"
"public ChannelPipeline getPipeline() throws Exception {     // Create a default pipeline implementation.     ChannelPipeline pipeline = pipeline();      // Uncomment the following line if you want HTTPS     SSLEngine engine = SecureChatSslContextFactory.getServerContext().createSSLEngine();     engine.setUseClientMode(false);     engine.setNeedClientAuth(true);     pipeline.addLast(""ssl"", new SslHandler(engine));      pipeline.addLast(""decoder"", new HttpRequestDecoder());     pipeline.addLast(""logger"", new RequestAuditLogger());     // Uncomment the following line if you don't want to handle HttpChunks.     pipeline.addLast(""aggregator"", new HttpChunkAggregator(1048576));     pipeline.addLast(""outputLogger"", new ResponseAuditLogger());     pipeline.addLast(""encoder"", new HttpResponseEncoder());     // Remove the following line if you don't want automatic content compression.     pipeline.addLast(""deflater"", new HttpContentCompressor());     pipeline.addLast(""handler"", new HttpSnoopServerHandler());     return pipeline; } }"
"KeyStore ks = KeyStore.getInstance(...); // Load the keystore ks.load(...); // Load as required from the inputstream of your choice, for example.  KeyStore ts = KeyStore.getInstance(...); // Load the truststore ts.load(...);  KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); kmf.init(ks, &lt;the key password&gt;);  TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); tmf.init(ts);  SSLContext sslContext = SSLContext.getInstance(""TLS""); sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);"
"try{    Class.forName(""com.mysql.jdbc.Driver"").newInstance();    Connection con=DriverManager.getConnection(""jdbc:mysql://localhost:8888/atmlivedetails"",""root"",""root"");               Statement st=con.createStatement();             ResultSet rs=st.executeQuery(""select atmbrno, atmbrname  from location_stat where act_brname='""+br_id+""'"");             int i=0;             JSONArray jArray = new JSONArray();             while(rs.next()){          String s = rs.getString(""atmbrno"");         String t = rs.getString(""atmbrname"");          JSONObject arrayObj = new JSONObject();          arrayObj.put(""atmbrno"",s);         arrayObj.put(""atmbrname"",t);          jArray.add(i,arrayObj);         i++;         }         rs.close ();         st.close ();         out.print(jArray);     }"
"Map&lt;String, String&gt; env = new HashMap&lt;String, String&gt;(); env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory""); env.put(Context.PROVIDER_URL, ""ldap://localhost:389/dc=jayway,dc=se""); env.put(Context.SECURITY_AUTHENTICATION, ""simple""); env.put(Context.SECURITY_PRINCIPAL, ""uid=""+ username +"",ou=system""); // replace with user DN env.put(Context.SECURITY_CREDENTIALS, password);  DirContext ctx; try {    ctx = new InitialDirContext(env); } catch (NamingException e) {    // handle } try {    SearchControls controls = new SearchControls();    controls.setSearchScope( SearchControls.SUBTREE_SCOPE);    ctx.search( """", ""(objectclass=person)"", controls);    // no need to process the results } catch (NameNotFoundException e) {    // The base context was not found.    // Just clean up and exit. } catch (NamingException e) {    // exception handling } finally {    // close ctx or do Java 7 try-with-resources http://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html }"
"public TestKeyBindings02() {     JPanel panel = new JPanel();     InputMap im = panel.getInputMap(JPanel.WHEN_IN_FOCUSED_WINDOW);     ActionMap am = panel.getActionMap();      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), ""RightArrow"");     im.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), ""LeftArrow"");     im.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), ""UpArrow"");     im.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), ""DownArrow"");      am.put(""RightArrow"", new ArrowAction(""RightArrow""));     am.put(""LeftArrow"", new ArrowAction(""LeftArrow""));     am.put(""UpArrow"", new ArrowAction(""UpArrow""));     am.put(""DownArrow"", new ArrowAction(""DownArrow"")); }  public class ArrowAction extends AbstractAction {      private String cmd;      public ArrowAction(String cmd) {         this.cmd = cmd;     }      @Override     public void actionPerformed(ActionEvent e) {         if (cmd.equalsIgnoreCase(""LeftArrow"")) {             System.out.println(""The left arrow was pressed!"");         } else if (cmd.equalsIgnoreCase(""RightArrow"")) {             System.out.println(""The right arrow was pressed!"");         } else if (cmd.equalsIgnoreCase(""UpArrow"")) {             System.out.println(""The up arrow was pressed!"");         } else if (cmd.equalsIgnoreCase(""DownArrow"")) {             System.out.println(""The down arrow was pressed!"");         }     } }"
"BlockingQueue&lt;Runnable&gt; blockingQueue   blockingQueue = new ArrayBlockingQueue&lt;WorkSheet_1&gt;(48);     ThreadPoolExecutor testExecutor = new ThreadPoolExecutor(6, 16, 1,             TimeUnit.SECONDS, blockingQueue, new CustomThreadFactory());      CompletionService&lt;String&gt; completionService = new ExecutorCompletionService&lt;String&gt;(             testExecutor);      for (int i = 0; i &lt; test.length; i++) {         completionService.submit(new WorkSheet_1(i));     }      for (int i = 0; i &lt; test.length; i++) {         try {             String result = completionService.take().get();             System.out.println(""Output Returned is : "" + result);         } catch (InterruptedException e) {             // TODO Auto-generated catch block             e.printStackTrace();         } catch (ExecutionException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }          // Compute the result     }"
"import org.junit.rules.TestWatcher; import org.junit.runner.Description; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  /**  * Log the currently running test.  *   * &lt;p&gt;Typical usage:  *   * &lt;p&gt;{@code @Rule public LogTestName logTestName = new LogTestName();}  *  * &lt;p&gt;See also:  * &lt;br&gt;{@link org.junit.Rule}  * &lt;br&gt;{@link org.junit.rules.TestWatcher}  */ public class LogTestName extends TestWatcher {      private final static Logger log = LoggerFactory.getLogger( ""junit.logTestName"" );      @Override     protected void starting( Description description ) {         log.debug( ""Test {}"", description.getMethodName() );     }  }"
"Uri.Builder builder = new Uri.Builder(); builder.scheme(""http"")     .authority(""yehki.epagestore.in"")     .appendPath(""app_api"")     .appendPath(""order.php"")     .appendQueryParameter(""customer_id"", customer_id)     .appendQueryParameter(""address_id"", address_id);  for (int i = 0; i &lt; carts.length(); i++) {    builder.appendQueryParameter(""products[""+i+""][productName]"", cartList.get(i).get((Const.TAG_PRODUCT_NAME)));    builder.appendQueryParameter(""products[""+i+""][productId]"", cartList.get(i).get((Const.TAG_PRODUCT_ID)));    builder.appendQueryParameter(""products[""+i+""][quantity]"", cartList.get(i).get((Const.TAG_QUANTITY)));    builder.appendQueryParameter(""products[""+i+""][unit]"", cartList.get(i).get((Const.TAG_UNIT)));    builder.appendQueryParameter(""products[""+i+""][unitPrice]"", cartList.get(i).get((Const.TAG_RETAIL_PRICE)));  }  String myUrl = builder.build().toString();"
"Calendar start = Calendar.getInstance(); Calendar end = Calendar.getInstance(); start.set(2010, 7, 23); end.set(2010, 8, 26); Date startDate = start.getTime(); Date endDate = end.getTime(); long startTime = startDate.getTime(); long endTime = endDate.getTime(); long diffTime = endTime - startTime; long diffDays = diffTime / (1000 * 60 * 60 * 24); DateFormat dateFormat = DateFormat.getDateInstance(); System.out.println(""The difference between ""+   dateFormat.format(startDate)+"" and ""+   dateFormat.format(endDate)+"" is ""+   diffDays+"" days."");"
"public aspect ExceptionReporterAspect {      /** The name of the used logger. */     public final static String LOGGER_NAME = ""AspectJExceptionLogger"";      /** Logger used to log messages. */     private static final Log LOGGER = LogFactory.getLog(LOGGER_NAME);      pointcut stringRequestHandler() :          execution (@RequestMapping Object the.package..*(..));      Object around(): objectRequestHandler(){         try {             return proceed();         } catch (Exception ex){             Signature sig = thisJoinPointStaticPart.getSignature();             Object[] args = thisJoinPoint.getArgs();              String location = sig.getDeclaringTypeName() + '.' + sig.getName() + "", args="" + Arrays.toString(args);             LOGGER.warn(""(AOP detected) exception within "" + location, ex);                 throw(ex)         }     }    }"
"LOG.debug(""Log4j Impl test started..."");         LOG.warn(""  Log4j Impl test warn..."");         LOG.info(""  Log4j Impl test info..."");         LOG.error(""  Log4j Impl test error...""); ... 2013-09-24 16:37:39,841 DEBUG [main] Log4jImplTest (Log4jImplTest.java:21) - Log4j Impl test started... 2013-09-24 16:37:39,843 WARN  [main] Log4jImplTest (Log4jImplTest.java:22) -   Log4j Impl test warn... 2013-09-24 16:37:39,843 INFO  [main] Log4jImplTest (Log4jImplTest.java:23) -   Log4j Impl test info... 2013-09-24 16:37:39,843 ERROR [main] Log4jImplTest (Log4jImplTest.java:24) -   Log4j Impl test error..."
