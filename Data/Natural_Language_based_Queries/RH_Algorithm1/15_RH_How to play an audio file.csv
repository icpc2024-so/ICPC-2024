code
"java.naming.factory.initial = org.apache.activemq.jndi.ActiveMQInitialContextFactory  # use the following property to configure the default connector java.naming.provider.url = failover:tcp://localhost:61616  # use the following property to specify the JNDI name the connection factory # should appear as.  #connectionFactoryNames = connectionFactory, queueConnectionFactory, topicConnectionFactry  # register some queues in JNDI using the form # queue.[jndiName] = [physicalName] queue.MyQueue = example.MyQueue   # register some topics in JNDI using the form # topic.[jndiName] = [physicalName] topic.MyTopic = example.MyTopic"
"public List&lt;String&gt; getFiles(String folder) {  List&lt;String&gt; list = new ArrayList&lt;String&gt;();         File dir = new File(folder);         if(dir.isDirectory()) {             FileFilter filter = new FileFilter() {                  public boolean accept(File file) {                     boolean flag = false;                     if(file.isFile() &amp;&amp; !file.isDirectory()) {                         String filename = file.getName();                         if(!filename.endsWith("".zip"")) {                             return true;                         }                         return false;                    }              };             File[] fileNames = dir.listFiles(filter);             for (File file : fileNames) {                 list.add(file.getName());             }             return list;"
myComponent.add&lt;Any&gt;Listener(new &lt;Appropriate&gt;Listener(){     @Override     public void &lt;AppropriateMethod&gt;(like KeyPress)&gt;(&lt;Appropriate&gt;Event e) {         int stateMask=e.stateMask;         if((stateMask & SWT.ALT)==SWT.ALT){             &lt;Do_appropriate_actions&gt;;         }         if((stateMask & SWT.CTRL)==SWT.CTRL){             &lt;Do_another_appropriate_actions&gt;;         }         if((stateMask & SWT.SHIFT)==SWT.SHIFT){             &lt;Do_an_even_more_appropriate_actions_cause_you_are_kind_of_a_code_roxxor_!&gt;;         }     }; };
"package name.seller.rich.maven.plugins.bootstrap;  import java.util.List;  import org.apache.maven.artifact.Artifact; import org.apache.maven.artifact.factory.ArtifactFactory; import org.apache.maven.artifact.repository.ArtifactRepository; import org.apache.maven.artifact.resolver.ArtifactNotFoundException; import org.apache.maven.artifact.resolver.ArtifactResolutionException; import org.apache.maven.artifact.resolver.ArtifactResolver; import org.apache.maven.plugin.AbstractMojo; import org.apache.maven.plugin.MojoExecutionException; import org.apache.maven.plugin.MojoFailureException;  /**  * Obtain the artifact defined by the groupId, artifactId, and version  * from the remote repository.  *   * @goal bootstrap  */ public class BootstrapAppMojo extends AbstractMojo {      /**      * Used to look up Artifacts in the remote repository.      *       * @parameter expression=      *  ""${component.org.apache.maven.artifact.factory.ArtifactFactory}""      * @required      * @readonly      */     protected ArtifactFactory factory;      /**      * Used to look up Artifacts in the remote repository.      *       * @parameter expression=      *  ""${component.org.apache.maven.artifact.resolver.ArtifactResolver}""      * @required      * @readonly      */     protected ArtifactResolver artifactResolver;      /**      * List of Remote Repositories used by the resolver      *       * @parameter expression=""${project.remoteArtifactRepositories}""      * @readonly      * @required      */     protected List remoteRepositories;      /**      * Location of the local repository.      *       * @parameter expression=""${localRepository}""      * @readonly      * @required      */     protected ArtifactRepository localRepository;      /**      * The target pom's artifactId      *       * @parameter expression=""${bootstrapArtifactId}""      * @required      */     private String bootstrapArtifactId;      /**      * The target pom's groupId      *       * @parameter expression=""${bootstrapGroupId}""      * @required      */     private String bootstrapGroupId;      /**      * The target pom's type      *       * @parameter expression=""${bootstrapType}""      * @required      */     private String bootstrapType;      /**      * The target pom's version      *       * @parameter expression=""${bootstrapVersion}""      * @required      */     private String bootstrapVersion;      public void execute() throws MojoExecutionException, MojoFailureException {         try {             Artifact pomArtifact = this.factory.createArtifact(                 bootstrapGroupId, bootstrapArtifactId, bootstrapVersion,                 """", bootstrapType);              artifactResolver.resolve(pomArtifact, this.remoteRepositories,                 this.localRepository);         } catch (ArtifactResolutionException e) {             getLog().error(""can't resolve parent pom"", e);         } catch (ArtifactNotFoundException e) {             getLog().error(""can't resolve parent pom"", e);         }     } }"
"public void setTimestamp(long value) {   if(log.idDebugEnabled) {     log.debug(""Setting the value to "" + value + "". Old value is "" + this.timestamp);     log.debug(""Thread is "" + Thread.currentThread().getName());     log.debug(""Stacktrace is"", new Throwable()); // we could also iterate on Thread.currentThread().getStackTrace()   }   // check for bad value   if(value &amp; 0xffffffff00000000L == 0L) {     log.warn(""Danger Will Robinson"", new IlegalValueException());   }   this.timestamp = value; }"
"public static boolean checkReversed(int[] x, int[] y) {     // For production code, possibly add nullity checks here (see comments)     if (x.length != y.length)     {         return false;     }     // Loop through x forwards and y backwards     for (int i = 0; i &lt; x.length; i++)     {         if (x[i] != y[y.length - 1 - i])         {             // As soon as we've found a ""mistake"" we can exit:             // This is simpler (IMO) than keeping a ""check"" variable             return false;         }     }     return true; }"
"log4j.rootLogger=ERROR, logfile  log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender log4j.appender.logfile.datePattern='-'dd'.log' log4j.appender.logfile.File=log/radius-prod.log log4j.appender.logfile.layout=org.apache.log4j.PatternLayout log4j.appender.logfile.layout.ConversionPattern=%-6r %d{ISO8601} %-5p %40.40c %x - %m\n  log4j.logger.foo.bar.Baz=DEBUG, myappender log4j.additivity.foo.bar.Baz=false  log4j.appender.myappender=org.apache.log4j.DailyRollingFileAppender log4j.appender.myappender.datePattern='-'dd'.log' log4j.appender.myappender.File=log/access-ext-dmz-prod.log log4j.appender.myappender.layout=org.apache.log4j.PatternLayout log4j.appender.myappender.layout.ConversionPattern=%-6r %d{ISO8601} %-5p %40.40c %x - %m\n"
"package blog.geocode;  import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlType;  import org.eclipse.persistence.oxm.annotations.XmlPath;  @XmlRootElement(name=""kml"") @XmlType(propOrder={""country"", ""state"", ""city"", ""street"", ""postalCode""}) public class Address {      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:Thoroughfare/ns:ThoroughfareName/text()"")     private String street;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:LocalityName/text()"")     private String city;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:AdministrativeAreaName/text()"")     private String state;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:CountryNameCode/text()"")     private String country;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:PostalCode/ns:PostalCodeNumber/text()"")     private String postalCode;  }"
"package blog.geocode;  import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlType;  import org.eclipse.persistence.oxm.annotations.XmlPath;  @XmlRootElement(name=""kml"") @XmlType(propOrder={""country"", ""state"", ""city"", ""street"", ""postalCode""}) public class Address {      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:Thoroughfare/ns:ThoroughfareName/text()"")     private String street;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:LocalityName/text()"")     private String city;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:AdministrativeAreaName/text()"")     private String state;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:CountryNameCode/text()"")     private String country;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:PostalCode/ns:PostalCodeNumber/text()"")     private String postalCode;  }"
"package com.troyware.inventoryItemManager;  import java.awt.Component; import java.awt.Container; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.event.MouseListener; import javax.swing.JButton; import javax.swing.JFileChooser; import javax.swing.JList;  /**   * This file chooser prevents users from changing file names and thus should facilitate navigating to the correct file   * by precluding the user from getting stuck when single clicking a folder name  *   * @author http://www.mikepot.com/1493.html  * slightly modified by Phil Troy, www.PhilTroy.com, to convert single click into double click  */ public class MyFileChooser extends JFileChooser {      public MyFileChooser()       { JList list = findFileList(this);             for (MouseListener l : list.getMouseListeners())             {   if (l.getClass().getName().indexOf(""FilePane"") &gt;= 0)                 {   list.removeMouseListener(l);                     list.addMouseListener(new MyMouseListener(l));                 }             }       }        private JList findFileList(Component comp)       { if (comp instanceof JList) return (JList)comp;             if (comp instanceof Container)             {   for (Component child : ((Container)comp).getComponents())                 {   JList list = findFileList(child);                     if (list != null) return list;                 }             }             return null;       }        private class MyMouseListener extends MouseAdapter       {         MyMouseListener(MouseListener listenerChain)         {   m_listenerChain = listenerChain;         }           public void mouseClicked(MouseEvent event)         {   if (event.getClickCount() &gt; 0)             {   m_listenerChain.mouseClicked(new MouseEvent(event.getComponent(),  event.getID(), event.getWhen(), event.getModifiers(), event.getX(), event.getY(), 2, false));              }         }          private MouseListener m_listenerChain;       }      private static final long serialVersionUID = 1L; }"
"lexer grammar JavaCommentLexer;  options {   filter=true; }  SingleLineComment   :  FSlash FSlash ~('\r' | '\n')*   ;  MultiLineComment   :  FSlash Star .* Star FSlash   ;  StringLiteral   :  DQuote      ( (EscapedDQuote)=&gt; EscapedDQuote      | (EscapedBSlash)=&gt; EscapedBSlash      | Octal      | Unicode      | ~('\\' | '""' | '\r' | '\n')      )*      DQuote {skip();}   ;  CharLiteral   :  SQuote      ( (EscapedSQuote)=&gt; EscapedSQuote      | (EscapedBSlash)=&gt; EscapedBSlash      | Octal      | Unicode      | ~('\\' | '\'' | '\r' | '\n')      )      SQuote {skip();}   ;  fragment EscapedDQuote   :  BSlash DQuote   ;  fragment EscapedSQuote   :  BSlash SQuote   ;  fragment EscapedBSlash   :  BSlash BSlash   ;  fragment FSlash   :  '/' | '\\' ('u002f' | 'u002F')   ;  fragment Star   :  '*' | '\\' ('u002a' | 'u002A')   ;  fragment BSlash   :  '\\' ('u005c' | 'u005C')?   ;  fragment DQuote   :  '""'    |  '\\u0022'   ;  fragment SQuote   :  '\''    |  '\\u0027'   ;  fragment Unicode   :  '\\u' Hex Hex Hex Hex   ;  fragment Octal   :  '\\' ('0'..'3' Oct Oct | Oct Oct | Oct)   ;  fragment Hex   :  '0'..'9' | 'a'..'f' | 'A'..'F'   ;  fragment Oct   :  '0'..'7'   ;"
"import org.apache.commons.httpclient.HttpClient; import org.jboss.resteasy.client.ClientRequest; import org.jboss.resteasy.client.ClientResponse; import org.jboss.resteasy.client.ProxyFactory; import org.jboss.resteasy.client.core.executors.ApacheHttpClientExecutor; import org.jboss.resteasy.plugins.providers.RegisterBuiltin; import org.jboss.resteasy.spi.ResteasyProviderFactory;  RegisterBuiltin.register(ResteasyProviderFactory.getInstance()); HttpClient httpClient = new HttpClient(); ApacheHttpClientExecutor executor = new ApacheHttpClientExecutor(httpClient) {     @Override     public ClientResponse execute(ClientRequest request) throws Exception {         request.header(""X-My-Header"", ""value"");         return super.execute(request);     }            };  SimpleClient client = ProxyFactory.create(SimpleClient.class, ""http://localhost:8081"", executor); client.putBasic(""hello world"");"
"JServer server = new JServer();          server.setUrl(""http://localhost:8080/jasperserver/services/repository"");          server.setUsername(""username"");          server.setPassword(""password"");          WSClient client = new WSClient(server);          ResourceDescriptor resourceDescriptor = new ResourceDescriptor();          resourceDescriptor.setUriString (""/reports/myreportname"");          Map&lt;String, Object&gt; parameterMap = new HashMap&lt;String, Object&gt;();          parameterMap.put(""MY_PARAMETER_NAME"", ""myparametervalue"");          JasperPrint printer = client.runReport(resourceDescriptor, parameterMap);          JasperViewer.viewReport(printer, false, Locale.GERMAN);"
final ResultSetMetaData meta = rs.getMetaData(); final int columnCount = meta.getColumnCount(); final List&lt;List&lt;String&gt;&gt; rowList = new LinkedList&lt;List&lt;String&gt;&gt;(); while (rs.next()) {     final List&lt;String&gt; columnList = new LinkedList&lt;String&gt;();     rowList.add(columnList);      for (int column = 1; column &lt;= columnCount; ++column)      {         final Object value = rs.getObject(column);         columnList.add(String.valueOf(value));     } }  // add the rowList to the request.
"String URL_LOGIN = ""http://localhost:9080/foo/j_security_check""; String URL_DATA = ""http://localhost:9080/foo/auth.html""; Client client = Client.create();  // add a filter to set cookies received from the server and to check if login has been triggered client.addFilter(new ClientFilter() {     private ArrayList&lt;Object&gt; cookies;      @Override     public ClientResponse handle(ClientRequest request) throws ClientHandlerException {         if (cookies != null) {             request.getHeaders().put(""Cookie"", cookies);         }         ClientResponse response = getNext().handle(request);         // copy cookies         if (response.getCookies() != null) {             if (cookies == null) {                 cookies = new ArrayList&lt;Object&gt;();             }             // A simple addAll just for illustration (should probably check for duplicates and expired cookies)             cookies.addAll(response.getCookies());         }         return response;     } });  String username = ""me""; String password = ""me"";  // Login: WebResource webResource = client.resource(URL_LOGIN);  com.sun.jersey.api.representation.Form form = new Form(); form.putSingle(""j_username"", username); form.putSingle(""j_password"", password); webResource.type(""application/x-www-form-urlencoded"").post(form);  // Get the protected web page: webResource = client.resource(URL_DATA); String response = webResource.get(String.class);"
"MyService myService = new MyService();         myPort = myService.getMyServiceHttpSoap11Endpoint();         // See http://cxf.apache.org/docs/transformationfeature.html         Client client = ClientProxy.getClient(myPort);          Map&lt;String, String&gt; outTransformMap = Collections.singletonMap(                 ""{http://myNamespace}*"",                 ""{http://myNamespace}*"");         org.apache.cxf.interceptor.transform.TransformOutInterceptor transformOutInterceptor =                 new org.apache.cxf.interceptor.transform.TransformOutInterceptor();         transformOutInterceptor.setOutTransformElements(outTransformMap);             client.getOutInterceptors().add(transformOutInterceptor);"
"String server = ""xxxxxxx"";         String username = ""xxxxxx"";         String password = ""xxxxxx"";         FTPClient client = new FTPClient();         FileInputStream fis = null;         try {             client.connect(server);             client.login(username, password);             client.enterLocalPassiveMode();             client.setFileType(FTP.BINARY_FILE_TYPE);              fis = new FileInputStream(localfile);              client.storeFile(destinationfile, fis);             fis.close();             client.logout();         } catch (IOException e) {             e.printStackTrace();         }"
"FTPClient client = new FTPClient(); FileInputStream fis = null;  try  {     client.connect(serverip);     client.login(""user, pass);     client.setFileType(FTPClient.BINARY_FILE_TYPE);      // change directory to serverip/file/     if (client.changeWorkingDirectory(""/file""))     {                // Create an InputStream of the file to be uploaded         String filename = Shared.saveLocation + Shared.saveAs;         fis = new FileInputStream(filename);          // Store file to server         client.storeFile(Shared.saveAs, fis);     }     client.logout(); }  catch (IOException e)  {     e.printStackTrace(); }  finally  {     try     {         if (fis != null)          {             fis.close();         }         client.disconnect();     }      catch (IOException e)      {         e.printStackTrace();     } }"
"String[] command = {     ""pscp"",     ""-q"", // quiet, don't show statistics     ""-pw"", // passw login with specified password     ""yourP4ssw0rd"", // the user password     ""username@yourhost:file.csv"",      ""c:\\the\\destination\\of\\your\\file.csv"" };  // command == pscp -q -pw yourP4ssw0rd username@yourhost:file.csv c:\\the\\destination\\of\\your\\file.csv Process p = Runtime.getRuntime().exec(command); p.waitFor();  BufferedReader reader =       new BufferedReader(new InputStreamReader(p.getInputStream()));  String line = """";            while ((line = reader.readLine())!= null) { sb.append(line + ""\n""); }  ..."
"import static groovy.io.FileType.FILES import info.magnolia.jcr.util.NodeUtil import org.apache.commons.lang.StringUtils import info.magnolia.cms.util.ContentUtil  class Globals {  static def folderName = '//some/folder/in/filesystem/on/server' }  def loadImageFolder() {  session = ctx.getJCRSession(""resources"")  parentFolder = session.getNode(""/templating-kit/jelinek-image/obrazky-produkty"")   new File(Globals.folderName).eachFileRecurse(FILES) {    name = it.name   // set file name   extension = StringUtils.substringAfterLast(name, '.')   name = StringUtils.substringBeforeLast(name, '.')    // persist   resource = NodeUtil.createPath(parentFolder,name , ""mgnl:content"")   // persistResource   resource.setProperty(""mgnl:template"", ""resources:binary"")   resource.setProperty(""extension"", extension)    binary = resource.addNode(""binary"", ""mgnl:resource"")   binary.setProperty(""jcr:data"", new FileInputStream(it.absolutePath))   binary.setProperty(""extension"", extension)   binary.setProperty(""fileName"", name)   binary.setProperty(""jcr:mimeType"", ""image/""+extension)   binary.setProperty(""size"", it.length())   }  session.save() }  loadImageFolder()  return 'done'"
public GUI() {   // class attributes   protected Component entered = null;   protected Border    defaultB    = BorderFactory...;   protected Border    highlighted = BorderFactory...;    ....   JPanel pDraw = new JPanel();   ....   for(Component component: pDraw.getComponents()){      JLabel lbl = (JLabel)component;       //add mouse listener to grid box which contained image      if (lbl.getIcon() != null)         lbl.addMouseListener(this);   }    public void mouseEntered(MouseEvent e) {      if (!(e.getSource() instanceof Component)) return;      exit();      enter((Component)e.getSource());   }    public void mouseExited(MouseEvent e) {      exit();   }    public void enter(Component c) {      //change cursor appearance to HAND_CURSOR when the mouse pointed on images      Cursor cursor = Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);       setCursor(cursor);      c.setBorder(highlighted);      entered = c;   }    public void exit() {      Cursor cursor = Cursor.getDefaultCursor();      setCursor(cursor);      if (entered != null) {         entered.setBorder(defaultB);         entered = null;      }   }
"public void download() throws IOException {     FacesContext facesContext = FacesContext.getCurrentInstance();     ExternalContext externalContext = facesContext.getExternalContext();     HttpServletResponse response = (HttpServletResponse) externalContext.getResponse();      response.reset(); // Some JSF component library or some Filter might have set some headers in the buffer beforehand. We want to get rid of them, else it may collide.     response.setContentType(""application/xml""); // Check http://www.iana.org/assignments/media-types for all types. Use if necessary ServletContext#getMimeType() for auto-detection based on filename.     response.setHeader(""Content-disposition"", ""attachment; filename=\""name.xml\""""); // The Save As popup magic is done here. You can give it any filename you want, this only won't work in MSIE, it will use current request URL as filename instead.      BufferedInputStream input = null;     BufferedOutputStream output = null;      try {         input = new BufferedInputStream(getYourXmlAsInputStream());         output = new BufferedOutputStream(response.getOutputStream());          byte[] buffer = new byte[10240];         for (int length; (length = input.read(buffer)) &gt; 0;) {             output.write(buffer, 0, length);         }     } finally {         close(output);         close(input);     }      facesContext.responseComplete(); // Important! Else JSF will attempt to render the response which obviously will fail since it's already written with a file and closed. }"
"package blog.geocode;  import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlType;  import org.eclipse.persistence.oxm.annotations.XmlPath;  @XmlRootElement(name=""kml"") @XmlType(propOrder={""country"", ""state"", ""city"", ""street"", ""postalCode""}) public class Address {      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:Thoroughfare/ns:ThoroughfareName/text()"")     private String street;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:LocalityName/text()"")     private String city;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:AdministrativeAreaName/text()"")     private String state;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:CountryNameCode/text()"")     private String country;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:PostalCode/ns:PostalCodeNumber/text()"")     private String postalCode;  }"
"package blog.geocode;  import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.XmlType;  import org.eclipse.persistence.oxm.annotations.XmlPath;  @XmlRootElement(name=""kml"") @XmlType(propOrder={""country"", ""state"", ""city"", ""street"", ""postalCode""}) public class Address {      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:Thoroughfare/ns:ThoroughfareName/text()"")     private String street;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:LocalityName/text()"")     private String city;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:AdministrativeAreaName/text()"")     private String state;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:CountryNameCode/text()"")     private String country;      @XmlPath(""Response/Placemark/ns:AddressDetails/ns:Country/ns:AdministrativeArea/ns:SubAdministrativeArea/ns:Locality/ns:PostalCode/ns:PostalCodeNumber/text()"")     private String postalCode;  }"
"import org.apache.catalina.Context; import org.apache.catalina.Lifecycle; import org.apache.catalina.LifecycleEvent; import org.apache.catalina.LifecycleListener; import org.apache.catalina.deploy.ContextEnvironment; import org.apache.commons.lang.StringUtils; import org.apache.juli.logging.Log; import org.apache.juli.logging.LogFactory;  public class LogbackContextNameListener implements LifecycleListener {      private static final Log logger = LogFactory             .getLog(LogbackContextNameListener.class);     private Context context;      private String name = ""logback/contextName"";      @Override     public void lifecycleEvent(LifecycleEvent le) {          if (le.getLifecycle() instanceof Context)             context = (Context) le.getLifecycle();         else             return;          if (le.getType().equals(Lifecycle.START_EVENT)) {             ContextEnvironment ce = new ContextEnvironment();             ce.setName(getName());             ce.setOverride(false);             ce.setType(""java.lang.String"");             String value = StringUtils.remove(context.getServletContext()                     .getContextPath(), '/');             ce.setValue(value);             logger.debug(String.format(""Adding env entry '%s' with value '%s'"",                     getName(), value));             context.getNamingResources().addEnvironment(ce);         }          if (le.getType().equals(Lifecycle.STOP_EVENT)) {             logger.debug(String.format(""Removing env entry '%s'"", getName()));             context.getNamingResources().removeEnvironment(name);         }      }      public String getName() {         return name;     }      public void setName(String name) {         if (StringUtils.isEmpty(name))             throw new IllegalArgumentException(                     ""Parameter 'name' cannot be empty"");          this.name = name;     }  }"
"package example;  import com.puppycrawl.tools.checkstyle.api.AnnotationUtility; import com.puppycrawl.tools.checkstyle.api.Check; import com.puppycrawl.tools.checkstyle.api.DetailAST; import com.puppycrawl.tools.checkstyle.api.TokenTypes;  public class AnnotationSameLineCheck extends Check {     @Override     public int[] getDefaultTokens() {         // PACKAGE_DEF and PARAMETER_DEF were left out of the list         return new int[] { TokenTypes.ANNOTATION_DEF, //                 TokenTypes.ANNOTATION_FIELD_DEF, //                 TokenTypes.CLASS_DEF, //                 TokenTypes.CTOR_DEF, //                 TokenTypes.ENUM_DEF, //                 TokenTypes.ENUM_CONSTANT_DEF, //                 TokenTypes.INTERFACE_DEF, //                 TokenTypes.METHOD_DEF, //                 TokenTypes.VARIABLE_DEF };     }      @Override     public void visitToken(DetailAST ast) {         if (AnnotationUtility.containsAnnotation(ast)) {             final DetailAST holder = AnnotationUtility.getAnnotationHolder(ast);             final DetailAST annotation = getAnnotationAst(holder);             final DetailAST prev = getPreviousSibling(annotation, holder, ast);             final DetailAST next = getNextSibling(annotation, holder, ast);             if (isPreviousSiblingOnSameLine(prev, annotation) || //                     isNextSiblingOnSameLine(annotation, next)) {                 log(annotation.getLineNo(), //                         annotation.getColumnNo(), //                         ""Annotations must exist on their own line"");             }         }     }      private static boolean isPreviousSiblingOnSameLine(DetailAST prev, DetailAST annotation) {         if (prev == null) {             return false;         } else if (prev.getLastChild() == null) {             return prev.getLineNo() == annotation.getLineNo();         }         return prev.getLastChild().getLineNo() == annotation.getLineNo();     }      private static boolean isNextSiblingOnSameLine(DetailAST annotation, DetailAST next) {         if (next == null) {             return false;         }         return annotation.getLineNo() == next.getLineNo();     }      private static DetailAST getAnnotationAst(DetailAST aHolderAst) {         if (aHolderAst.getType() == TokenTypes.ANNOTATIONS) {             return aHolderAst;         } else if (aHolderAst.getType() == TokenTypes.MODIFIERS) {             return aHolderAst.findFirstToken(TokenTypes.ANNOTATION);         }         throw new AssertionError(""aHolder must be one of TokenTypes.ANNOTATIONS or TokenTypes.MODIFIERS but was "" + aHolderAst);     }      private static DetailAST getPreviousSibling(DetailAST annotation, DetailAST holder, DetailAST ast) {         if (annotation.getPreviousSibling() != null) {             return annotation.getPreviousSibling();         } else if (holder.getPreviousSibling() != null) {             return holder.getPreviousSibling();         }         return ast.getPreviousSibling();     }      private static DetailAST getNextSibling(DetailAST annotation, DetailAST holder, DetailAST ast) {         if (annotation.getNextSibling() != null) {             return annotation.getNextSibling();         } else if (holder.getNextSibling() != null) {             return holder.getNextSibling();         }         return ast.getNextSibling();     } }"
"UPDATE USERS ""                             + ""SET ""                                 + ""USERID = ?, ""                                 + ""GROUPID = ?, ""                                 + ""SPECIALNUMBER = ?, ""                                 + ""USERNAME = ?, ""                                 + ""PASSWD = ?, ""                                 + ""DATETOCHANGEPASSWD = ?, ""                                 + ""ADDRESS = ?, ""                                 + ""STATEREGION = ?, ""                                 + ""COUNTRY = ?, ""                                 + ""USERSTATUS = ?, ""                                 + ""TELEPHONE = ?, ""                                 + ""DATEUSERADDED = ?, ""                                 + ""USEREXPIREDATE = ?, ""                                 + ""DATEUSERLOCKED = ?, ""                                 + ""CITY = ?, ""                                 + ""EMAIL = ?, ""                                 + ""DESCRIPTION = ? ""                     + ""WHERE USERID = ?"";"
"static def isModded(SvnConfig svn, File path, SVNRevision rev) {     SVNClientManager mgr = newInstance(null, svn.username, svn.password)     logger.debug(""Searching for modifications beneath $path.path @ $rev"")     mgr.statusClient.doStatus(path, rev, INFINITY, false, false, false, false, { SVNStatus status -&gt;         SVNStatusType statusType = status.contentsStatus         if (statusType != STATUS_NONE &amp;&amp; statusType != STATUS_NORMAL &amp;&amp; statusType != STATUS_IGNORED) {             lmodded = true             logger.debug(""$status.file.path --&gt; lmodded: $statusType"")         }     } as ISVNStatusHandler, null)     lmodded }"
"URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() {     public URLStreamHandler createURLStreamHandler(String protocol) {         if ( ""http"".equals(protocol) ) {             return new URLStreamHandler() {                 protected URLConnection openConnection(URL u) throws IOException {                     if ( isCached(u) ) {                         return new CachedStreamConnection(u);                     }                     return new MyURLConnection(u);                 }             };         }         // Don't handle a non-http protocol, so just return null and let         // the system return the default one.         return null;     } });"
"HttpPost httpPost = new HttpPost(urlString); List &lt;NameValuePair&gt; nvps = new ArrayList &lt;NameValuePair&gt;(); nvps.add(new BasicNameValuePair(""code"", code)); nvps.add(new BasicNameValuePair(""client_id"", client_id)); nvps.add(new BasicNameValuePair(""client_secret"", client_secret)); nvps.add(new BasicNameValuePair(""redirect_uri"", redirect_uri)); nvps.add(new BasicNameValuePair(""grant_type"", grant_type)); httpPost.setEntity(new UrlEncodedFormEntity(nvps)); HttpResponse response = httpclient.execute(httpPost);"
"private class MyAsyncTask extends AsyncTask&lt;String[], Void, Boolean&gt; {     //declare here local variables     @Override     protected void onPreExecute() {         super.onPreExecute();          //prepare your local variables for the computation     }  @Override protected Boolean doInBackground(String[]... arg0) {      String[] myStringArray = arg0[0];     // make your manipulation of myStringArray      return null; // return the result and set your local variable }      @Override     protected void onPostExecute(Boolean result) {         super.onPostExecute(result);          //update ui using result and/or local variable     } }"
"public class SpecialMessageSource extends ReloadableResourceBundleMessageSource {        @Override       protected MessageFormat resolveCode(String code, Locale locale) {          MessageFormat result = super.resolveCode(code, locale);          if (result.getPattern().isEmpty() &amp;&amp; locale == Locale.CHINESE) {             return super.resolveCode(code, Locale.ENGLISH);          }          return result;       }        @Override       protected String resolveCodeWithoutArguments(String code, Locale locale) {          String result= super.resolveCodeWithoutArguments(code, locale);          if ((result == null || result.isEmpty()) &amp;&amp; locale == Locale.CHINESE) {             return super.resolveCodeWithoutArguments(code, Locale.ENGLISH);          }          return result;       }    }"
