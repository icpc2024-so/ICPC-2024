code
"import java.io.ByteArrayOutputStream; import javax.xml.transform.Source; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; import javax.xml.ws.Provider; import javax.xml.ws.Service; import javax.xml.ws.ServiceMode; import javax.xml.ws.WebServiceProvider;  @ServiceMode(value=Service.Mode.PAYLOAD) @WebServiceProvider() public class SoapProvider implements Provider&lt;Source&gt; {     public Source invoke(Source msg)     {         StreamResult sr = new StreamResult();          ByteArrayOutputStream out = new ByteArrayOutputStream();         sr.setOutputStream(out);          try {             Transformer trans = TransformerFactory.newInstance().newTransformer();             trans.transform(msg, sr);              // Use out to your heart's desire.         }         catch (TransformerException e) {             e.printStackTrace();         }              return msg;     } }"
org.apache.myfaces.el.unified.resolver.ManagedBeanResolver.createManagedBean(ManagedBeanResolver.java:303) at     org.apache.myfaces.el.unified.resolver.ManagedBeanResolver.getValue(ManagedBeanResolver.java:266) at     javax.el.CompositeELResolver.getValue(CompositeELResolver.java:54) at     org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver.getValue(FacesCompositeELResolver.java:142) at     org.apache.myfaces.el.VariableResolverImpl.resolveVariable(VariableResolverImpl.java:65) at     org.apache.myfaces.el.convert.VariableResolverToELResolver.getValue(VariableResolverToELResolver.java:116) at     javax.el.CompositeELResolver.getValue(CompositeELResolver.java:54) at     org.apache.myfaces.el.unified.resolver.FacesCompositeELResolver.getValue(FacesCompositeELResolver.java:142) at     org.apache.el.parser.AstIdentifier.getValue(AstIdentifier.java:61) at     org.apache.el.parser.AstValue.getValue(AstValue.java:107) at     org.apache.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:186) at     org.apache.myfaces.view.facelets.el.TagValueExpression.getValue(TagValueExpression.java:85) at     javax.faces.component._DeltaStateHelper.eval(_DeltaStateHelper.java:243) at     javax.faces.component.UIOutput.getValue(UIOutput.java:71) at     javax.faces.component.UIInput.getValue(UIInput.java:143) at     javax.faces.component.UISelectBoolean.getValue(UISelectBoolean.java:148) at     org.apache.myfaces.shared_impl.renderkit.RendererUtils.getObjectValue(RendererUtils.java:238) at     org.apache.myfaces.shared_impl.renderkit.RendererUtils.getBooleanValue(RendererUtils.java:193) at     org.apache.myfaces.shared_impl.renderkit.html.HtmlCheckboxRendererBase.encodeEnd(HtmlCheckboxRendererBase.java:79) at     javax.faces.component.UIComponentBase.encodeEnd(UIComponentBase.java:519) at     javax.faces.component.UIComponent.encodeAll(UIComponent.java:626) at     javax.faces.component.UIComponent.encodeAll(UIComponent.java:622) at     javax.faces.component.UIComponent.encodeAll(UIComponent.java:622) at     org.apache.myfaces.view.facelets.FaceletViewDeclarationLanguage.renderView(FaceletViewDeclarationLanguage.java:1320) at     org.apache.myfaces.application.ViewHandlerImpl.renderView(ViewHandlerImpl.java:263) at     javax.faces.application.ViewHandlerWrapper.renderView(ViewHandlerWrapper.java:59) at     org.apache.myfaces.tomahawk.application.ResourceViewHandlerWrapper.renderView(ResourceViewHandlerWrapper.java:93) at     org.apache.myfaces.lifecycle.RenderResponseExecutor.execute(RenderResponseExecutor.java:85) at     org.apache.myfaces.lifecycle.LifecycleImpl.render(LifecycleImpl.java:239) at     javax.faces.webapp.FacesServlet.service(FacesServlet.java:191) at     org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) at     org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at     org.apache.myfaces.webapp.filter.ExtensionsFilter.doFilter(ExtensionsFilter.java:349) at     org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) at     org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) at     org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) at     org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) at     org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) at     org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) at     org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) at     org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293) at     org.apache.jk.server.JkCoyoteHandler.invoke(JkCoyoteHandler.java:190) at     org.apache.jk.common.HandlerRequest.invoke(HandlerRequest.java:291) at     org.apache.jk.common.ChannelSocket.invoke(ChannelSocket.java:769) at     org.apache.jk.common.ChannelSocket.processConnection(ChannelSocket.java:698) at     org.apache.jk.common.ChannelSocket$SocketConnection.runIt(ChannelSocket.java:891) at     org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:690) at     java.lang.Thread.run(Thread.java:619)
"package test;  import java.io.FileOutputStream; import java.io.IOException; import java.net.SocketException;  import org.apache.commons.net.ftp.FTPClient; import org.apache.commons.net.ftp.FTPFile;  public class FtpTransfer {  public static final void main(String[] args) throws SocketException, IOException {   FTPClient ftp = new FTPClient();   ftp.connect(""ftp.somedomain.com""); // or ""localhost"" in your case   System.out.println(""login: ""+ftp.login(""username"", ""pass""));    ftp.changeWorkingDirectory(""folder/subfolder/"");   // list the files of the current directory   FTPFile[] files = ftp.listFiles();     System.out.println(""Listed ""+files.length+"" files."");   for(FTPFile file : files) {    System.out.println(file.getName());   }    // lets pretend there is a JPEG image in the present folder that we want to copy to the desktop (on a windows machine)   ftp.setFileType(FTPClient.BINARY_FILE_TYPE); // don't forget to change to binary mode! or you will have a scrambled image!         FileOutputStream br = new FileOutputStream(""C:\\Documents and Settings\\casonkl\\Desktop\\my_downloaded_image_new_name.jpg"");    ftp.retrieveFile(""name_of_image_on_server.jpg"", br);   ftp.disconnect();   } }"
"public class MySqlDemo {  public static void main(String [] args) {          java.sql.Connection conn = null;          System.out.println(""SQL Test"");          try {                 Class.forName(""com.mysql.jdbc.Driver"").newInstance();                 conn = java.sql.DriverManager.getConnection(                         ""jdbc:mysql://localhost:3306/test?user=root&amp;password="");          }         catch (Exception e) {                 System.out.println(e);                 System.exit(0);                 }          System.out.println(""Connection established""); }"
"package comm;   import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.PrintWriter; import java.net.Inet4Address; import java.net.InetAddress; import java.net.Socket; import java.net.SocketException; import java.net.UnknownHostException;  public class TcpClient {      private InetAddress connectedAddress;     private Socket tcpSocket;     private BufferedReader inBuff;     private PrintWriter outPrint;     private int connectedPort;      public TcpClient(String host, int port){         try {             connectedAddress = Inet4Address.getByName(host);             connectedPort = port;             this.tcpSocket = new Socket(connectedAddress, connectedPort);             this.inBuff = new BufferedReader(new InputStreamReader(tcpSocket.getInputStream()));             this.outPrint = new PrintWriter(tcpSocket.getOutputStream());             (new Thread(new TcpListeningThread())).start();         } catch (SocketException e) {             e.printStackTrace();         } catch (UnknownHostException e) {             e.printStackTrace();         } catch (IOException e) {             e.printStackTrace();         }     }      public void sendMessage(String message){         synchronized(this) {             if(!this.tcpSocket.isConnected())                 return; // Or something more flexible...             this.outPrint.println(message);             this.outPrint.flush();         }        }       private class TcpListeningThread implements Runnable{          public TcpListeningThread() {             // Nothing to do...         }          @Override         public void run() {             try {                 while(true){                     String newLine = inBuff.readLine();                     System.out.println(newLine); // Replace this with any processing you want !                 }             } catch (IOException e) {                 System.err.println(""Connection problem"");             }         }     } }"
"package algorithms;  import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; import java.util.concurrent.FutureTask;  public class Java6MatrixMultiply implements Algorithm {      private static final int SIZE = 2048;     private static final int THRESHOLD = 64;     private static final int MAX_THREADS = Runtime.getRuntime().availableProcessors();      private final ExecutorService executor = Executors.newFixedThreadPool(MAX_THREADS);      private float[][] a = new float[SIZE][SIZE];     private float[][] b = new float[SIZE][SIZE];     private float[][] c = new float[SIZE][SIZE];      @Override     public void initialize() {         init(a, b, SIZE);     }      @Override     public void execute() {         MatrixMultiplyTask mainTask =  new MatrixMultiplyTask(a, 0, 0, b, 0, 0, c, 0, 0, SIZE);         Future future = executor.submit(mainTask);            try {             future.get();         } catch (Exception e) {             System.out.println(""Error: "" + e.getMessage());         }     }      @Override     public void printResult() {         check(c, SIZE);          for (int i = 0; i &lt; SIZE &amp;&amp; i &lt;= 10; i++) {             for (int j = 0; j &lt; SIZE &amp;&amp; j &lt;= 10; j++) {                          if(j == 10) {                     System.out.print(""..."");                 }                 else {                     System.out.print(c[i][j] + "" "");                 }             }              if(i == 10) {                 System.out.println();                 for(int k = 0; k &lt; 10; k++) System.out.print("" ... "");             }                 System.out.println();         }                 System.out.println();     }      // To simplify checking, fill with all 1's. Answer should be all n's.     static void init(float[][] a, float[][] b, int n) {         for (int i = 0; i &lt; n; ++i) {             for (int j = 0; j &lt; n; ++j) {                 a[i][j] = 1.0F;                 b[i][j] = 1.0F;             }         }     }      static void check(float[][] c, int n) {         for (int i = 0; i &lt; n; i++) {             for (int j = 0; j &lt; n; j++) {                 if (c[i][j] != n) {                     throw new Error(""Check Failed at ["" + i + ""]["" + j + ""]: "" + c[i][j]);                     //System.out.println(""Check Failed at ["" + i + ""]["" + j + ""]: "" + c[i][j]);                  }             }         }            }         public class Seq implements Runnable {          private final MatrixMultiplyTask a;         private final MatrixMultiplyTask b;          public Seq(MatrixMultiplyTask a, MatrixMultiplyTask b) {             this.a = a;             this.b = b;              }          public void run() {             a.run();             b.run();         }        }      private class MatrixMultiplyTask implements Runnable {         private final float[][] A; // Matrix A         private final int aRow; // first row of current quadrant of A         private final int aCol; // first column of current quadrant of A          private final float[][] B; // Similarly for B         private final int bRow;         private final int bCol;          private final float[][] C; // Similarly for result matrix C         private final int cRow;         private final int cCol;          private final int size;          public MatrixMultiplyTask(float[][] A, int aRow, int aCol, float[][] B,                 int bRow, int bCol, float[][] C, int cRow, int cCol, int size) {              this.A = A;             this.aRow = aRow;             this.aCol = aCol;             this.B = B;             this.bRow = bRow;             this.bCol = bCol;             this.C = C;             this.cRow = cRow;             this.cCol = cCol;             this.size = size;         }             public void run() {              //System.out.println(""Thread: "" + Thread.currentThread().getName());              if (size &lt;= THRESHOLD) {                 multiplyStride2();             } else {                  int h = size / 2;                          Seq seq1 = new Seq(new MatrixMultiplyTask(A,                                 aRow, aCol, // A11                                 B, bRow, bCol, // B11                                 C, cRow, cCol, // C11                                 h),                          new MatrixMultiplyTask(A, aRow, aCol + h, // A12                                 B, bRow + h, bCol, // B21                                 C, cRow, cCol, // C11                                 h));                          Seq seq2 = new Seq(new MatrixMultiplyTask(A,                                 aRow, aCol, // A11                                 B, bRow, bCol + h, // B12                                 C, cRow, cCol + h, // C12                                 h),                          new MatrixMultiplyTask(A, aRow, aCol + h, // A12                                 B, bRow + h, bCol + h, // B22                                 C, cRow, cCol + h, // C12                                 h));                          Seq seq3 = new Seq(new MatrixMultiplyTask(A, aRow                                 + h, aCol, // A21                                 B, bRow, bCol, // B11                                 C, cRow + h, cCol, // C21                                 h),                          new MatrixMultiplyTask(A, aRow + h, aCol + h, // A22                                 B, bRow + h, bCol, // B21                                 C, cRow + h, cCol, // C21                                 h));                          Seq seq4 = new Seq(new MatrixMultiplyTask(A, aRow                                 + h, aCol, // A21                                 B, bRow, bCol + h, // B12                                 C, cRow + h, cCol + h, // C22                                 h),                          new MatrixMultiplyTask(A, aRow + h, aCol + h, // A22                                 B, bRow + h, bCol + h, // B22                                 C, cRow + h, cCol + h, // C22                                 h));                                final FutureTask s1Task = new FutureTask(seq2, null);                 final FutureTask s2Task = new FutureTask(seq3, null);                 final FutureTask s3Task = new FutureTask(seq4, null);                  executor.execute(s1Task);                 executor.execute(s2Task);                 executor.execute(s3Task);                  seq1.run();                 s1Task.run();                 s2Task.run();                 s3Task.run();                  try {                     s1Task.get();                     s2Task.get();                     s3Task.get();                 } catch (Exception e) {                     System.out.println(""Error: "" + e.getMessage());                     executor.shutdownNow();                 }                    }                }                 public void multiplyStride2() {             for (int j = 0; j &lt; size; j += 2) {                 for (int i = 0; i &lt; size; i += 2) {                      float[] a0 = A[aRow + i];                     float[] a1 = A[aRow + i + 1];                      float s00 = 0.0F;                     float s01 = 0.0F;                     float s10 = 0.0F;                     float s11 = 0.0F;                      for (int k = 0; k &lt; size; k += 2) {                          float[] b0 = B[bRow + k];                          s00 += a0[aCol + k] * b0[bCol + j];                         s10 += a1[aCol + k] * b0[bCol + j];                         s01 += a0[aCol + k] * b0[bCol + j + 1];                         s11 += a1[aCol + k] * b0[bCol + j + 1];                          float[] b1 = B[bRow + k + 1];                          s00 += a0[aCol + k + 1] * b1[bCol + j];                         s10 += a1[aCol + k + 1] * b1[bCol + j];                         s01 += a0[aCol + k + 1] * b1[bCol + j + 1];                         s11 += a1[aCol + k + 1] * b1[bCol + j + 1];                     }                      C[cRow + i][cCol + j] += s00;                     C[cRow + i][cCol + j + 1] += s01;                     C[cRow + i + 1][cCol + j] += s10;                     C[cRow + i + 1][cCol + j + 1] += s11;                 }             }                    }     } }"
"import java.io.IOException; import java.net.InetSocketAddress; import java.net.SocketAddress; import java.nio.ByteBuffer; import java.nio.channels.*; import java.util.Set;  /**  * Socket Gateway for SO Question 7528528  * User: jhawk28  * Date: 9/26/11  * Time: 9:03 PM  * &lt;p/&gt;  * http://stackoverflow.com/questions/7528528/java-ports-sockets-piping-a-connection-through-a-programme  */ public class Gateway {   public static void main(String[] args) throws IOException   {     // Set up Server Socket and bind to the port 8000     ServerSocketChannel server = ServerSocketChannel.open();     SocketAddress endpoint = new InetSocketAddress(8000);     server.socket().bind(endpoint);      server.configureBlocking(false);      // Set up selector so we can run with a single thread but multiplex between 2 channels     Selector selector = Selector.open();     server.register(selector, SelectionKey.OP_ACCEPT);       ByteBuffer buffer = ByteBuffer.allocate(1024);      while (true)     {       // block until data comes in       selector.select();        Set&lt;SelectionKey&gt; keys = selector.selectedKeys();        for (SelectionKey key : keys)       {         if (!key.isValid())         {           // not valid or writable so skip           continue;         }          if (key.isAcceptable())         {           // Accept socket channel for client connection           ServerSocketChannel channel = (ServerSocketChannel) key.channel();           SocketChannel accept = channel.accept();           setupConnection(selector, accept);         }         else if (key.isReadable())         {           try           {             // Read into the buffer from the socket and then write the buffer into the attached socket.             SocketChannel recv = (SocketChannel) key.channel();             SocketChannel send = (SocketChannel) key.attachment();             recv.read(buffer);             buffer.flip();             send.write(buffer);             buffer.rewind();           } catch (IOException e)           {             e.printStackTrace();              // Close sockets             if (key.channel() != null)               key.channel().close();             if (key.attachment() != null)               ((SocketChannel) key.attachment()).close();           }         }       }        // Clear keys for next select       keys.clear();     }   }    public static void setupConnection(Selector selector, SocketChannel client) throws IOException   {     // Connect to the remote server     SocketAddress address = new InetSocketAddress(""192.168.1.74"", 8000);     SocketChannel remote = SocketChannel.open(address);      // Make sockets non-blocking (should be better performance)     client.configureBlocking(false);     remote.configureBlocking(false);      client.register(selector, SelectionKey.OP_READ, remote);     remote.register(selector, SelectionKey.OP_READ, client);   } }"
AS_INSTALL_ROOT/bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.is-connection-validation-required=true domain.resources.jdbc-connection-pool.DerbyPool.is-connection-validation-required = true  AS_INSTALL_ROOT/bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.connection-validation-method=table domain.resources.jdbc-connection-pool.DerbyPool.connection-validation-method = table  bin/asadmin set domain.resources.jdbc-connection-pool.DerbyPool.validation-table-name=sys.systables domain.resources.jdbc-connection-pool.DerbyPool.validation-table-name = sys.systables
"package model;  import java.util.Hashtable;  import javax.naming.Context; import javax.naming.NamingException; import javax.naming.directory.Attribute; import javax.naming.directory.Attributes; import javax.naming.directory.BasicAttribute; import javax.naming.directory.BasicAttributes; import javax.naming.ldap.InitialLdapContext; import javax.naming.ldap.LdapContext;  public class NewUser {      private static final String DOMAIN_NAME = ""Dom215-01"";     private static final String DOMAIN_ROOT = ""DC=Dom215-01,DC=local"";     private static final String DOMAIN_URL = ""ldap://10.18.215.112:389"";     private static final String ADMIN_NAME = ""CN=Administrator,CN=Users,DC=Dom215-01,DC=local"";     private static final String ADMIN_PASS = ""g18"";      private String userName, firstName, lastName, password, organisationUnit;     private LdapContext context;      public NewUser(String userName, String firstName, String lastName,                     String password, String organisationUnit) {          this.userName = userName;         this.firstName = firstName;         this.lastName = lastName;         this.password = password;         this.organisationUnit = organisationUnit;          Hashtable&lt;String, String&gt; env = new Hashtable&lt;String, String&gt;();          env.put(Context.INITIAL_CONTEXT_FACTORY, ""com.sun.jndi.ldap.LdapCtxFactory"");          // set security credentials, note using simple cleartext authentication         env.put(Context.SECURITY_AUTHENTICATION, ""simple"");         env.put(Context.SECURITY_PRINCIPAL, ADMIN_NAME);         env.put(Context.SECURITY_CREDENTIALS, ADMIN_PASS);          // connect to my domain controller         env.put(Context.PROVIDER_URL, DOMAIN_URL);          try {             this.context = new InitialLdapContext(env, null);         } catch (NamingException e) {             System.err.println(""Problem creating object: "");             e.printStackTrace();         }      }      public boolean addUser() throws NamingException {          // Create a container set of attributes         Attributes container = new BasicAttributes();          // Create the objectclass to add         Attribute objClasses = new BasicAttribute(""objectClass"");         objClasses.add(""top"");         objClasses.add(""person"");         objClasses.add(""organizationalPerson"");         objClasses.add(""user"");          // Assign the username, first name, and last name         String cnValue = new StringBuffer(firstName).append("" "").append(lastName).toString();         Attribute cn = new BasicAttribute(""cn"", cnValue);         Attribute sAMAccountName = new BasicAttribute(""sAMAccountName"", userName);         Attribute principalName = new BasicAttribute(""userPrincipalName"", userName                 + ""@"" + DOMAIN_NAME);         Attribute givenName = new BasicAttribute(""givenName"", firstName);         Attribute sn = new BasicAttribute(""sn"", lastName);         Attribute uid = new BasicAttribute(""uid"", userName);          // Add password         Attribute userPassword = new BasicAttribute(""userpassword"", password);          // Add these to the container         container.put(objClasses);         container.put(sAMAccountName);         container.put(principalName);         container.put(cn);         container.put(sn);         container.put(givenName);         container.put(uid);         container.put(userPassword);          // Create the entry         try {             context.createSubcontext(getUserDN(cnValue, organisationUnit), container);             return true;         } catch (Exception e) {             return false;         }     }      private static String getUserDN(String aUsername, String aOU) {         return ""cn="" + aUsername + "",ou="" + aOU + "","" + DOMAIN_ROOT;     } }"
"package com.primavera.ws.jaxws.provider;  import javax.annotation.Resource; import javax.xml.ws.BindingType; import javax.xml.ws.Provider; import javax.xml.ws.Service; import javax.xml.ws.ServiceMode; import javax.xml.ws.WebServiceContext; import javax.xml.ws.WebServiceProvider;  @WebServiceProvider(portName=""MyPort"", serviceName=""MyService"", targetNamespace=""http://mytargetlocation"", wsdlLocation=""WEB-INF/wsdl/My.wsdl"") @ServiceMode(value = Service.Mode.MESSAGE) @BindingType(HTTPBinding.HTTP_BINDING)  public class MyProvider implements Provider&lt;Source&gt; {      @Resource     private WebServiceContext context;       public MyProvider()     {     }      @Override     public Source invoke(Source request)     {         MessageContext mc = context.getMessageContext();         HttpSession session =    ((javax.servlet.http.HttpServletRequest)mc.get(MessageContext.SERVLET_REQUEST)).getSession();         if (session == null)             throw new WebServiceException(""No HTTP Session found"");          System.out.println(""SessionID: "" + session.getId());          return request;     } }"
"System.setProperty(""javax.net.ssl.keyStoreType"", ""pkcs12""); System.setProperty(""javax.net.ssl.trustStoreType"", ""jks""); System.setProperty(""javax.net.ssl.keyStore"",""C:/ClientKeyStore/ClientKeyStore.p12""); System.setProperty(""javax.net.ssl.trustStore"",""C:/ClientKeyStore/ClientKeyStore.keystore""); System.setProperty(""javax.net.debug"", ""ssl""); System.setProperty(""javax.net.ssl.keyStorePassword"", ""keystorepass""); System.setProperty(""javax.net.ssl.trustStorePassword"", ""truststorepass"");   SSLSocketFactory sslsocketfactory = (SSLSocketFactory) SSLSocketFactory.getDefault();"
"package example.nio;  import java.io.Closeable; import java.io.IOException; import java.net.InetSocketAddress; import java.nio.ByteBuffer; import java.nio.channels.ServerSocketChannel; import java.nio.channels.SocketChannel; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors;  public class NioEchoServer implements Runnable, Closeable {     private final ExecutorService service = Executors.newCachedThreadPool();     private final ServerSocketChannel ssc;     private volatile boolean closed = false;      public NioEchoServer(int port) throws IOException {         ssc = ServerSocketChannel.open();         ssc.socket().setReuseAddress(true);         ssc.bind(new InetSocketAddress(port));         service.submit(this);     }      @Override     public void run() {         try {             while (!closed) {                 SocketChannel sc = ssc.accept();                 service.submit(new EchoHandler(sc));             }         } catch (IOException e) {             if (!closed)                 e.printStackTrace();         } finally {             closeQuietly(ssc);         }     }      @Override     public void close() throws IOException {         closed = true;         service.shutdownNow();         closeQuietly(ssc);     }      static void closeQuietly(Closeable closeable) {         try {             if (closeable != null) closeable.close();         } catch (IOException ignored) {         }     }      public int getPort() {         return ssc.socket().getLocalPort();     }      static class EchoHandler implements Runnable {         private final SocketChannel sc;          public EchoHandler(SocketChannel sc) {             this.sc = sc;         }          @Override         public void run() {             ByteBuffer bb = ByteBuffer.allocateDirect(64 * 1024);             try {                 while (!Thread.interrupted() &amp;&amp; sc.read(bb) &gt; 0) {                     int len = bb.position();                     bb.flip();                     while (bb.remaining() &gt; 0)                        sc.write(bb);                     // write everything a second time.                     bb.position(0);                     bb.limit(len);                     while (bb.remaining() &gt; 0)                         sc.write(bb);                      bb.clear();                 }             } catch (IOException e) {                 e.printStackTrace();             } finally {                 System.out.println(""Server disconnected"");                 closeQuietly(sc);             }         }     } }"
"private void createTable() throws SQLException {     String sqlCreate = ""CREATE TABLE IF NOT EXISTS "" + this.getTableName()             + ""  (brand           VARCHAR(10),""             + ""   year            INTEGER,""             + ""   number          INTEGER,""             + ""   value           INTEGER,""             + ""   card_count           INTEGER,""             + ""   player_name     VARCHAR(50),""             + ""   player_position VARCHAR(20))"";      Statement stmt = conn.createStatement();     stmt.execute(sqlCreate); }"
"import javax.xml.bind.*; import javax.xml.bind.util.JAXBSource; import javax.xml.transform.Source; import javax.xml.ws.*;  @ServiceMode(Service.Mode.PAYLOAD) @WebServiceProvider(     portName = ""FindCustomerPort"",      serviceName = ""FindCustomerService"",      targetNamespace = ""http://service.jaxws.blog/"",      wsdlLocation = ""WEB-INF/wsdl/FindCustomerService.wsdl"") public class FindCustomerService implements Provider&lt;Source&gt; {      private JAXBContext jaxbContext;      public FindCustomerService() {         try {             jaxbContext = JAXBContext.newInstance(FindCustomerResponse.class,                     FindCustomerRequest.class);         } catch (JAXBException e) {             throw new WebServiceException(e);         }     }      @Override     public Source invoke(Source request) throws WebServiceException {         try {             Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();             FindCustomerRequest fcRequest = (FindCustomerRequest) unmarshaller                     .unmarshal(request);              Customer customer = new Customer();             customer.setId(fcRequest.getArg0());             customer.setFirstName(""Jane"");             customer.setLastName(""Doe"");              FindCustomerResponse response = new FindCustomerResponse();             response.setValue(customer);              return new JAXBSource(jaxbContext, response);         } catch (JAXBException e) {             throw new WebServiceException(e);         }     }  }"
"import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.ResultSetMetaData; import java.util.Vector; import java.util.concurrent.ExecutionException; import java.util.logging.Level; import java.util.logging.Logger; import javax.swing.JTable; import javax.swing.SwingWorker; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableModel; import sun.applet.Main;  public class DataLoadWorker extends SwingWorker&lt;TableModel, TableModel&gt; {      private final JTable table;      public DataLoadWorker(JTable table) {         this.table = table;     }      @Override     protected TableModel doInBackground() throws Exception {         Vector data = new Vector();         Vector columns = new Vector();         PreparedStatement ps = null;         ResultSet rs = null;         try {             String stmt = ""SELECT * FROM APP.DATAVAULT"";             ps = Main.getPreparedStatement(stmt);             rs = ps.executeQuery();             ResultSetMetaData md = rs.getMetaData();             int columnCount = md.getColumnCount();             //store column names               for (int i = 1; i &lt;= columnCount; i++) {                 columns.add(md.getColumnName(i));             }              columns.ensureCapacity(columnCount);              Vector row;             while (rs.next()) {                  row = new Vector(columnCount);                 for (int i = 1; i &lt;= columnCount; i++) {                     row.add(rs.getString(i));                 }                 data.add(row);                  //Debugging                             }              // List.setModel(tableModel);          } finally {             try {                 ps.close();             } catch (Exception e) {             }             try {                 rs.close();             } catch (Exception e) {             }         }          DefaultTableModel tableModel = new DefaultTableModel(data, columns);         return tableModel;     }      @Override     protected void done() {         try {             TableModel model = get();             table.setModel(model);         } catch (InterruptedException | ExecutionException ex) {             ex.printStackTrace();         }     } }"
"import java.io.FileInputStream; import java.io.FileOutputStream; import java.io.OutputStream;  import org.apache.commons.net.ftp.FTPClient; import org.apache.commons.net.ftp.FTPFile; import org.apache.commons.net.ftp.FTPReply;   public class FTPExample {      public static void main(String[] args) {         try {              //new ftp client             FTPClient ftp = new FTPClient();             //try to connect             ftp.connect(""MyHhostName"");             //login to server             if (!ftp.login(""username"", ""password"")) {                 ftp.logout();             }             int reply = ftp.getReplyCode();             //FTPReply stores a set of constants for FTP reply codes.              if (!FTPReply.isPositiveCompletion(reply)) {                 ftp.disconnect();             }              //enter passive mode             ftp.enterLocalPassiveMode();             //get system name             System.out.println(""Remote system is "" + ftp.getSystemType());             //change current directory             ftp.changeWorkingDirectory(""/App/PMIGENV/BACK/Finacle/FC/app/CDCI_LOGS/log/UBSADMIN"");             System.out.println(""Current directory is "" + ftp.printWorkingDirectory());              //get list of filenames             FTPFile[] ftpFiles = ftp.listFiles();              if (ftpFiles != null &amp;&amp; ftpFiles.length &gt; 0) {                 //loop thru files                 for (FTPFile file : ftpFiles) {                     if (!file.isFile()) {                         continue;                     }                     System.out.println(""File is "" + file.getName());                     //get output stream                     OutputStream output;                     output = new FileOutputStream(""FtpFiles"" + ""/"" + file.getName());                     //get the file from the remote system                     ftp.retrieveFile(file.getName(), output);                     //close output stream                     output.close();                      //delete the file                     // ftp.deleteFile(file.getName());                  }             }              ftp.logout();             ftp.disconnect();         } catch (Exception ex) {             ex.printStackTrace();         }     } }"
"import javax.imageio.ImageIO; import javax.imageio.ImageReader; import javax.imageio.event.IIOReadProgressListener; import javax.imageio.stream.ImageInputStream; import java.io.File; import java.util.Iterator; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.atomic.AtomicInteger;  class MultipleJPEGDecoding {     private static int threads = Runtime.getRuntime().availableProcessors();     private static ExecutorService executorService = Executors.newFixedThreadPool(threads * 4);      public static void main(final String[] args) throws InterruptedException {         for (int i = 0; i &lt; 100; i++) {             final int index = i;              executorService.submit(new Runnable() {                 public void run() {                     try {                         ImageInputStream stream = ImageIO.createImageInputStream(new File(args[index % args.length]));                         try {                             Iterator&lt;ImageReader&gt; readers = ImageIO.getImageReaders(stream);                             if (!readers.hasNext()) {                                 System.err.println(&quot;No reader!&quot;);                                 return;                             }                              ImageReader reader = readers.next();                             reader.setInput(stream);                             reader.addIIOReadProgressListener(new ProgressListener(index));                              try {                                 reader.read(0);                             }                             finally {                                 reader.dispose();                             }                         }                         finally {                             stream.close();                         }                     }                     catch (Exception e) {                         System.err.printf(&quot;Error reading %d\n&quot;, index);                         e.printStackTrace();                     }                 }             });         }          executorService.shutdown();     }      static class ProgressListener implements IIOReadProgressListener {         final static AtomicInteger simultaneous = new AtomicInteger(0);          final int index;         int nextProgress = 25;          public ProgressListener(int index) {             this.index = index;         }          public void imageStarted(ImageReader source, int imageIndex) {             int inProgress = simultaneous.incrementAndGet();             System.err.printf(&quot;Started reading image %d (now decoding %d images simultaneous)...\n&quot;, index, inProgress);         }          public void imageComplete(ImageReader source) {             int inProgress = simultaneous.decrementAndGet();             System.err.printf(&quot;Done reading image %d%s.\n&quot;, index, inProgress &gt; 0 ? String.format(&quot; (still decoding %d other images)&quot;, inProgress) : &quot;&quot;);         }          public void imageProgress(ImageReader source, float percentageDone) {             if (percentageDone &gt; nextProgress) {                 int inProgress = simultaneous.get();                 System.err.printf(&quot;Progress on image %d (now decoding %d images simultaneous)...\n&quot;, index, inProgress);                 nextProgress += 25;             }         }          public void sequenceStarted(ImageReader source, int minIndex) {         }          public void sequenceComplete(ImageReader source) {         }          public void thumbnailStarted(ImageReader source, int imageIndex, int thumbnailIndex) {         }          public void thumbnailProgress(ImageReader source, float percentageDone) {         }          public void thumbnailComplete(ImageReader source) {         }          public void readAborted(ImageReader source) {         }     } }"
"Transaction transaction = graphDb.beginTx(); try {   ReadableIndex&lt;Node&gt; autoNodeIndex = graphDb.index().getNodeAutoIndexer().getAutoIndex();   Node n = autoNodeIndex.get(""name"", ""Neo"").getSingle();   Node a = autoNodeIndex.get(""name"", ""The Architect"").getSingle();   tx.acquireWriteLock(n);   tx.acquireWriteLock(a);   Boolean created = false;   for(Relationship r : n.getRelationships(MyRels.SPEAKS_WITH) {     if(r.getOtherNode(n).equals(a)) { // put other conditions here, if needed       created = true;       break;     }   }   if(!created) {     n.createRelationshipTo(a, MyRels.SPEAKS_WITH);   }   tx.success(); } finally {   tx.finish(); }"
"import java.awt.image.BufferedImage; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.File; import java.io.IOException; import java.sql.Blob; import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import javax.imageio.ImageIO; import javax.swing.ImageIcon; import javax.swing.JLabel; import javax.swing.JOptionPane; import javax.swing.JScrollPane;  public class TestImageDatbase {      private Connection con;      public static void main(String[] args) {         new TestImageDatbase();     }      public TestImageDatbase() {         try {             clearDatabase();             saveImage();             loadImage();         } catch (ClassNotFoundException | SQLException | IOException exp) {             exp.printStackTrace();         }     }      protected Connection getConnection() throws ClassNotFoundException, SQLException {         Class.forName(""org.h2.Driver"");         return DriverManager.getConnection(""jdbc:h2:d:\\Image"", ""sa"", """");     }      protected void clearDatabase() throws IOException, ClassNotFoundException, SQLException {          Connection con = null;         PreparedStatement stmt = null;          try {              con = getConnection();             System.out.println(""Cleaning database"");             stmt = con.prepareStatement(""delete from images"");             int updated = stmt.executeUpdate();             System.out.println(""Updated "" + updated + "" rows"");          } finally {             try {                 stmt.close();             } catch (Exception e) {             }             try {                 con.close();             } catch (Exception e) {             }         }      }      protected void saveImage() throws IOException, ClassNotFoundException, SQLException {          Connection con = null;         PreparedStatement stmt = null;         ByteArrayOutputStream baos = null;         ByteArrayInputStream bais = null;          try {              baos = new ByteArrayOutputStream();              File source = new File(""/path/to/file"");             System.out.println(""Source size = "" + source.length());             BufferedImage img = ImageIO.read(source);             ImageIO.write(img, ""png"", baos);              baos.close();              bais = new ByteArrayInputStream(baos.toByteArray());              con = getConnection();             stmt = con.prepareStatement(""insert into images (image) values (?)"");             stmt.setBinaryStream(1, bais);             int updated = stmt.executeUpdate();             System.out.println(""Updated "" + updated + "" rows"");          } finally {             try {                 bais.close();             } catch (Exception e) {             }             try {                 baos.close();             } catch (Exception e) {             }             try {                 stmt.close();             } catch (Exception e) {             }             try {                 con.close();             } catch (Exception e) {             }         }      }      protected void loadImage() throws IOException, ClassNotFoundException, SQLException {          Connection con = null;         PreparedStatement stmt = null;         ResultSet rs = null;          try {              con = getConnection();             stmt = con.prepareStatement(""select image from images"");             rs = stmt.executeQuery();              while (rs.next()) {                  System.out.println(""Getting blob"");                 Blob blob = rs.getBlob(1);                 System.out.println(""Reading image"");                 BufferedImage img = ImageIO.read(blob.getBinaryStream());                 System.out.println(""img = "" + img);                 JOptionPane.showMessageDialog(null, new JScrollPane(new JLabel(new ImageIcon(img))));              }          } finally {             try {                 rs.close();             } catch (Exception e) {             }             try {                 stmt.close();             } catch (Exception e) {             }             try {                 con.close();             } catch (Exception e) {             }         }      }  }"
"import java.io.BufferedReader; import java.io.DataOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL; import java.util.Date; import java.util.Map; import java.util.Set;  import org.json.simple.JSONObject; import org.json.simple.parser.JSONParser; import org.json.simple.parser.ParseException;   try{                 URL url = new URL(basicPayPalPath+""/v1/oauth2/token"");                 HttpURLConnection uc = (HttpURLConnection) url.openConnection();                 uc.setRequestMethod(""POST"");                 uc.setDoOutput(true);                 String userpass = clientID + "":"" + clientSecret;                 String basicAuth = ""Basic "" + javax.xml.bind.DatatypeConverter.printBase64Binary(userpass.getBytes());                  uc.setRequestProperty(""Accept"", ""application/json"");                 uc.setRequestProperty(""Authorization"", basicAuth);                 uc.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded"");                 DataOutputStream wr = new DataOutputStream (uc.getOutputStream ());                 wr.writeBytes (""grant_type=client_credentials"");                 wr.flush ();                 wr.close ();                  InputStream is = uc.getInputStream();                 BufferedReader rd = new BufferedReader(new InputStreamReader(is));                 String line;                 StringBuffer response = new StringBuffer();                  while((line = rd.readLine()) != null) {                     response.append(line);                     response.append('\r');                 }                 rd.close();                 JSONParser jsonParser = new JSONParser();                 System.out.println(response.toString());                 JSONObject jsonObject = (JSONObject) jsonParser.parse(response.toString());                 Set&lt;Map.Entry&lt;String, String&gt;&gt; map = jsonObject.entrySet();                 for(Map.Entry&lt;String, String&gt; entry : map){                     System.out.println(entry.toString());                 }             }catch (IOException | ParseException e){                 e.printStackTrace();             }"
"import java.sql.Connection; import java.sql.ResultSet; import javafx.application.Application; import javafx.beans.property.SimpleStringProperty; import javafx.beans.value.ObservableValue; import javafx.collections.FXCollections; import javafx.collections.ObservableList; import javafx.scene.Scene; import javafx.scene.control.TableColumn; import javafx.scene.control.TableColumn.CellDataFeatures; import javafx.scene.control.TableView; import javafx.stage.Stage; import javafx.util.Callback;  /**  *   * @author Narayan  */  public class DynamicTable extends Application{      //TABLE VIEW AND DATA     private ObservableList&lt;ObservableList&gt; data;     private TableView tableview;      //MAIN EXECUTOR     public static void main(String[] args) {         launch(args);     }      //CONNECTION DATABASE     public void buildData(){           Connection c ;           data = FXCollections.observableArrayList();           try{             c = DBConnect.connect();             //SQL FOR SELECTING ALL OF CUSTOMER             String SQL = ""SELECT * from CUSTOMer"";             //ResultSet             ResultSet rs = c.createStatement().executeQuery(SQL);              /**********************************              * TABLE COLUMN ADDED DYNAMICALLY *              **********************************/             for(int i=0 ; i&lt;rs.getMetaData().getColumnCount(); i++){                 //We are using non property style for making dynamic table                 final int j = i;                                 TableColumn col = new TableColumn(rs.getMetaData().getColumnName(i+1));                 col.setCellValueFactory(new Callback&lt;CellDataFeatures&lt;ObservableList,String&gt;,ObservableValue&lt;String&gt;&gt;(){                                         public ObservableValue&lt;String&gt; call(CellDataFeatures&lt;ObservableList, String&gt; param) {                                                                                                                       return new SimpleStringProperty(param.getValue().get(j).toString());                                             }                                     });                  tableview.getColumns().addAll(col);                  System.out.println(""Column [""+i+""] "");             }              /********************************              * Data added to ObservableList *              ********************************/             while(rs.next()){                 //Iterate Row                 ObservableList&lt;String&gt; row = FXCollections.observableArrayList();                 for(int i=1 ; i&lt;=rs.getMetaData().getColumnCount(); i++){                     //Iterate Column                     row.add(rs.getString(i));                 }                 System.out.println(""Row [1] added ""+row );                 data.add(row);              }              //FINALLY ADDED TO TableView             tableview.setItems(data);           }catch(Exception e){               e.printStackTrace();               System.out.println(""Error on Building Data"");                        }       }         @Override       public void start(Stage stage) throws Exception {         //TableView         tableview = new TableView();         buildData();          //Main Scene         Scene scene = new Scene(tableview);                  stage.setScene(scene);         stage.show();       } }"
"java.util.Properties props = new java.util.Properties(); props.setProperty(""password"",""mypassword""); props.setProperty(""user"",""myusername""); props.put(""v$session.osuser"", System.getProperty(""user.name"").toString()); props.put(""v$session.machine"", InetAddress.getLocalHost().getCanonicalHostName()); props.put(""v$session.program"", ""My Program Name""); DriverManager.registerDriver (new oracle.jdbc.OracleDriver()); Connection conn=     DriverManager.getConnection(""jdbc:oracle:thin:@myhostname:1521:mysid"", props);"
"package ebay;  import java.io.ByteArrayInputStream; import java.io.InputStream; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.xpath.XPath; import javax.xml.xpath.XPathConstants; import javax.xml.xpath.XPathExpression; import javax.xml.xpath.XPathFactory; import org.w3c.dom.Document; import org.w3c.dom.Node; import org.w3c.dom.NodeList;  import ebay.URLReader;  /**  *  * @author rajeev jha (xxx@yyy.com)  *  */ public class EbayDriver {      public final static String EBAY_APP_ID = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxx"";     public final static String EBAY_FINDING_SERVICE_URI = ""http://svcs.ebay.com/services/search/FindingService/v1?OPERATION-NAME=""             + ""{operation}&amp;SERVICE-VERSION={version}&amp;SECURITY-APPNAME=""             + ""{applicationId}&amp;GLOBAL-ID={globalId}&amp;keywords={keywords}""             + ""&amp;paginationInput.entriesPerPage={maxresults}"";     public static final String SERVICE_VERSION = ""1.0.0"";     public static final String OPERATION_NAME = ""findItemsByKeywords"";     public static final String GLOBAL_ID = ""EBAY-US"";     public final static int REQUEST_DELAY = 3000;     public final static int MAX_RESULTS = 10;     private int maxResults;      public EbayDriver() {         this.maxResults = MAX_RESULTS;      }      public EbayDriver(int maxResults) {         this.maxResults = maxResults;     }      public String getName() {         return IDriver.EBAY_DRIVER;     }      public void run(String tag) throws Exception {          String address = createAddress(tag);         print(""sending request to :: "", address);         String response = URLReader.read(address);         print(""response :: "", response);         //process xml dump returned from EBAY         processResponse(response);         //Honor rate limits - wait between results         Thread.sleep(REQUEST_DELAY);       }      private String createAddress(String tag) {          //substitute token         String address = EbayDriver.EBAY_FINDING_SERVICE_URI;         address = address.replace(""{version}"", EbayDriver.SERVICE_VERSION);         address = address.replace(""{operation}"", EbayDriver.OPERATION_NAME);         address = address.replace(""{globalId}"", EbayDriver.GLOBAL_ID);         address = address.replace(""{applicationId}"", EbayDriver.EBAY_APP_ID);         address = address.replace(""{keywords}"", tag);         address = address.replace(""{maxresults}"", """" + this.maxResults);          return address;      }      private void processResponse(String response) throws Exception {           XPath xpath = XPathFactory.newInstance().newXPath();         InputStream is = new ByteArrayInputStream(response.getBytes(""UTF-8""));         DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();         DocumentBuilder builder = domFactory.newDocumentBuilder();           Document doc = builder.parse(is);         XPathExpression ackExpression = xpath.compile(""//findItemsByKeywordsResponse/ack"");         XPathExpression itemExpression = xpath.compile(""//findItemsByKeywordsResponse/searchResult/item"");          String ackToken = (String) ackExpression.evaluate(doc, XPathConstants.STRING);         print(""ACK from ebay API :: "", ackToken);         if (!ackToken.equals(""Success"")) {             throw new Exception("" service returned an error"");         }          NodeList nodes = (NodeList) itemExpression.evaluate(doc, XPathConstants.NODESET);          for (int i = 0; i &lt; nodes.getLength(); i++) {              Node node = nodes.item(i);              String itemId = (String) xpath.evaluate(""itemId"", node, XPathConstants.STRING);             String title = (String) xpath.evaluate(""title"", node, XPathConstants.STRING);             String itemUrl = (String) xpath.evaluate(""viewItemURL"", node, XPathConstants.STRING);             String galleryUrl = (String) xpath.evaluate(""galleryURL"", node, XPathConstants.STRING);              String currentPrice = (String) xpath.evaluate(""sellingStatus/currentPrice"", node, XPathConstants.STRING);              print(""currentPrice"", currentPrice);             print(""itemId"", itemId);             print(""title"", title);             print(""galleryUrl"", galleryUrl);          }          is.close();      }      private void print(String name, String value) {         System.out.println(name + ""::"" + value);     }      public static void main(String[] args) throws Exception {         EbayDriver driver = new EbayDriver();         String tag = ""Velo binding machine"";         driver.run(java.net.URLEncoder.encode(tag, ""UTF-8""));      } }"
cd /absolute/path/to/your/project  /usr/java6/bin/javac  -classpath :.:/usr/jdk/commons-net-3.0.1.jar:/usr/jdk/classes12.jar:/usr/jdk/mysql-connector-java-5.1.17-bin.jar:/usr/jdk/jtds-1.2.5.jar:/usr/jdk/mail.jar:/usr/jdk/joda-time-1.6.2.jar:/usr/jdk/commons-codec-1.4.jar:/usr/jdk/commons-logging-1.1.1.jar:/usr/jdk/httpclient-4.1.1.jar:/usr/jdk/httpclient-cache-4.1.1.jar:/usr/jdk/httpcore-4.1.jar:/usr/jdk/httpmime-4.1.1.jar:/usr/jdk/mailapi.jar:/usr/jdk/pop3.jar:/usr/jdk/smtp.jar:/usr/jdk/dsn.jar:/usr/jdk/imap.jar -d . daily_transmission.java  java -classpath :.:/usr/jdk/commons-net-3.0.1.jar:/usr/jdk/classes12.jar:/usr/jdk/mysql-connector-java-5.1.17-bin.jar:/usr/jdk/jtds-1.2.5.jar:/urs/jdk/mail.jar:/usr/jdk/joda-time-1.6.2.jar:/usr/jdk/commons-codec-1.4.jar:/usr/jdk/commons-logging-1.1.1.jar:/usr/jdk/httpclient-4.1.1.jar:/usr/jdk/httpclient-cache-4.1.1.jar:/usr/jdk/httpcore-4.1.jar:/usr/jdk/httpmime-4.1.1.jar:/usr/jdk/mailapi.jar:/usr/jdk/pop3.jar:/usr/jdk/smtp.jar:/usr/jdk/dsn.jar:/usr/jdk/imap.jar daily_transmission
"package test;  import java.sql.Connection; import java.sql.DriverManager; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; import java.sql.Statement; import java.util.Arrays;  public class SQLiteTest {  public static void main(String[] args) throws SQLException,         ClassNotFoundException {     Class.forName(""org.sqlite.JDBC"");     Connection connection = DriverManager             .getConnection(""jdbc:sqlite:test.db"");     Statement statement = connection.createStatement();     createTable(statement);     insertBlob(connection);     byte[] bytes = query(statement);     System.out.println(Arrays.toString(bytes));             statement.close();     connection.close(); }  private static void createTable(Statement statement) throws SQLException {     statement.execute(""CREATE TABLE test (data BLOB)""); }  private static void insertBlob(Connection connection) throws SQLException {     PreparedStatement pStatement = connection             .prepareStatement(""INSERT INTO test VALUES (?)"");     pStatement.setBytes(1, new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 });     pStatement.execute();     pStatement.close(); }  private static byte[] query(Statement statement) throws SQLException {     ResultSet rs = statement.executeQuery(""SELECT data FROM test"");     byte[] bytes = rs.getBytes(1);     return bytes; }  }"
"import java.io.*; import java.sql.*;  public class CountRows{     public static void main(String[] args) {         System.out.println(""Count number of rows in a specific table!"");         Connection con = null;         int count = 0;         try {             Class.forName(""com.mysql.jdbc.Driver"");             con = DriverManager.getConnection(""jdbc:mysql://localhost:3306/jdbctutorial"",""root"",""root"");             try {                 Statement st = con.createStatement();                 BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));                 System.out.println(""Enter table name:"");                 String table = bf.readLine();                 ResultSet res = st.executeQuery(""SELECT COUNT(*) FROM ""+table);                 while (res.next()){                     count = res.getInt(1);                 }                 System.out.println(""Number of row:""+count);             }             catch (SQLException s){                 System.out.println(""SQL statement is not executed!"");             }         }         catch (Exception e){             e.printStackTrace();         }     } }"
"class Demo{      public static java.lang.String getUser()                                           throws java.sql.SQLException {      java.sql.Statement stmt = null;     java.sql.ResultSet rs = null;      try{         java.sql.Connection con =                  java.sql.DriverManager.getConnection(""jdbc:default:connection"");          java.lang.String query =                    ""SELECT SYS_CONTEXT('USERENV', 'CURRENT_USER'),"" +                   ""SYS_CONTEXT('USERENV', 'SESSION_USER') FROM DUAL"";           stmt  = con.createStatement();         rs = stmt.executeQuery(query);          rs.next();          return ""Current User: ["" + rs.getString(1) + ""] ; "" +                ""Session User: ["" + rs.getString(2) + ""]"";     }     finally{         rs.close();         stmt.close();     }      }  }"
"try{    connection.setAutoCommit(false)     //get organisation id first    String nextOrgIdSql = ""select orgSeq.nextval from someVirtualTable"" //depends on database    ResultSet orgIdRs = statement.executeQuery( nextOrgIdSql)    int orgId = -1    if( orgIdRs.next())           orgId = orgIdRs.getInt(1)     //create organisation first    String orgSql =        ""Insert into ORGANISATION (ORGID, ...) values (""+ orgId + "",...)""     //create activities    for( Activity activity : organisation.getActivityList()){       String nextActvIdSql = ""select activitySeq.nextval from someVirtualTable""       ResultSet actvIdRs = statement.executeQuery( nextActvIdSql)       int actvId = -1       if( actIdRs.next())              actvId = actvIdRs.getInt(1)        statement.execute(         ""Insert INTO ACTIVITY (ACTVID, ORGID) values (""+actvId+"",""+orgId+"")""    }     connection.commit()  }catch(SQLException e){   connection.rollback() }"
"package com.company.annotations;  import java.util.Set; import javax.annotation.processing.AbstractProcessor; import javax.annotation.processing.RoundEnvironment; import javax.annotation.processing.SupportedAnnotationTypes; import javax.lang.model.SourceVersion; import javax.lang.model.element.Element; import javax.lang.model.element.ElementKind; import javax.lang.model.element.TypeElement; import javax.tools.Diagnostic;  @SupportedAnnotationTypes(""com.company.annotations.RequiredStore"") public class RequiredStoreProcessor extends AbstractProcessor {     @Override     public boolean process(             Set&lt;? extends TypeElement&gt; annotations,             RoundEnvironment roundEnv) {         for (Element element                  : roundEnv.getElementsAnnotatedWith(RequiredStore.class)) {             if (element.getKind().equals(ElementKind.METHOD)) {                 processingEnv.getMessager().printMessage(                     Diagnostic.Kind.WARNING,                     ""Using @RequiredStore on methods has been deprecated\n""                         + ""Class: "" + element.getEnclosingElement() + ""\n""                         + ""Method: "" + element.getSimpleName() + ""\n"");             }         }          // Other processing...          return false;     }      @Override     public SourceVersion getSupportedSourceVersion() {         return SourceVersion.latest();     } }"
"package restclient; import java.io.BufferedReader; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL;  public class NetClientGet {     public static void main(String[] args) {         try {              URL url = new URL(""http://localhost:3002/RestWebserviceDemo/rest/json/product/dynamicData?size=5"");//your url i.e fetch data from .             HttpURLConnection conn = (HttpURLConnection) url.openConnection();             conn.setRequestMethod(""GET"");             conn.setRequestProperty(""Accept"", ""application/json"");             if (conn.getResponseCode() != 200) {                 throw new RuntimeException(""Failed : HTTP Error code : ""                         + conn.getResponseCode());             }             InputStreamReader in = new InputStreamReader(conn.getInputStream());             BufferedReader br = new BufferedReader(in);             String output;             while ((output = br.readLine()) != null) {                 System.out.println(output);             }             conn.disconnect();          } catch (Exception e) {             System.out.println(""Exception in NetClientGet:- "" + e);         }     } }"
