code
"public LinkedHashMap sortHashMapByValuesD(HashMap passedMap) {     List mapKeys = new ArrayList(passedMap.keySet());     List mapValues = new ArrayList(passedMap.values());     Collections.sort(mapValues);     Collections.sort(mapKeys);      LinkedHashMap sortedMap =          new LinkedHashMap();      Iterator valueIt = mapValues.iterator();     while (valueIt.hasNext()) {         Object val = valueIt.next();         Iterator keyIt = mapKeys.iterator();          while (keyIt.hasNext()) {             Object key = keyIt.next();             String comp1 = passedMap.get(key).toString();             String comp2 = val.toString();              if (comp1.equals(comp2)){                 passedMap.remove(key);                 mapKeys.remove(key);                 sortedMap.put((String)key, (Double)val);                 break;             }         }     }      return sortedMap; }"
"public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException,ServletException   {     HttpServletRequest httpRequest=(HttpServletRequest)request;     HttpServletResponse httpResponse=(HttpServletResponse)response;        Enumeration headerNames = httpRequest.getHeaderNames();         while(headerNames.hasMoreElements()) {           String headerName = (String)headerNames.nextElement();           out.println(headerName);           out.println(request.getHeader(headerName));         }        chain.doFilter(request,response); }"
"try {         XmlPullParserFactory factory = XmlPullParserFactory.newInstance();         factory.setNamespaceAware(true);         XmlPullParser parser = factory.newPullParser();                              InputStream input = getResources().openRawResource(R.raw.test);         parser.setInput(input, HTTP.UTF_8);              int eventType = parser.getEventType();         while(eventType != XmlPullParser.END_DOCUMENT){                          if(eventType == XmlPullParser.START_TAG){                  String prefix = parser.getPrefix();                 String name   = parser.getName();                 Log.i(""XML"", String.format(""prefix=%s,name=%s"",prefix,name));                 if( ""dif"".equals(prefix)){                     handleDiff(parser);                 }else if (""res"".equals(prefix)){                     handleRes(parser);                 }             }              eventType = parser.next();         }     } catch (Exception e) {         Log.e(""XML"","""",e);     }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"import org.apache.commons.httpclient.HttpClient; import org.jboss.resteasy.client.ClientRequest; import org.jboss.resteasy.client.ClientResponse; import org.jboss.resteasy.client.ProxyFactory; import org.jboss.resteasy.client.core.executors.ApacheHttpClientExecutor; import org.jboss.resteasy.plugins.providers.RegisterBuiltin; import org.jboss.resteasy.spi.ResteasyProviderFactory;  RegisterBuiltin.register(ResteasyProviderFactory.getInstance()); HttpClient httpClient = new HttpClient(); ApacheHttpClientExecutor executor = new ApacheHttpClientExecutor(httpClient) {     @Override     public ClientResponse execute(ClientRequest request) throws Exception {         request.header(""X-My-Header"", ""value"");         return super.execute(request);     }            };  SimpleClient client = ProxyFactory.create(SimpleClient.class, ""http://localhost:8081"", executor); client.putBasic(""hello world"");"
"import java.util.Set; import javax.persistence.Entity; import javax.persistence.MappedSuperclass; import org.reflections.Reflections; import org.reflections.scanners.TypeAnnotationsScanner; import org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo; import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;  public class ReflectionsPersistenceUnitPostProcessor implements PersistenceUnitPostProcessor {      private String reflectionsRoot;     private Logger log = LoggerFactory.getLogger(ReflectionsPersistenceUnitPostProcessor.class);      @Override     public void postProcessPersistenceUnitInfo(MutablePersistenceUnitInfo pui) {             Reflections r = new Reflections(this.reflectionsRoot, new TypeAnnotationsScanner());             Set&lt;String&gt; entityClasses = r.getStore().getTypesAnnotatedWith(Entity.class.getName());             Set&lt;String&gt; mappedSuperClasses = r.getStore().getTypesAnnotatedWith(MappedSuperclass.class.getName());              for (String clzz : mappedSuperClasses)             {                     pui.addManagedClassName(clzz);             }               for (String clzz : entityClasses)             {                     pui.addManagedClassName(clzz);             }      }      public String getReflectionsRoot() {             return reflectionsRoot;     }      public void setReflectionsRoot(String reflectionsRoot) {             this.reflectionsRoot = reflectionsRoot;     } }"
"public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,       FilterChain filterChain)     throws java.io.IOException, javax.servlet.ServletException {    HttpServletRequest request = (HttpServletRequest) servletRequest;    HttpServletResponse response = (HttpServletResponse) servletResponse;    String currentURL = request.getRequestURI();    MaintenanceService maintenanceMode = new MaintenanceService();    if (!currentURL.equals(""/maintenance.jsp"")              &amp;&amp; maintenanceMode.getMaintenanceMode())    {     String urlNew = currentURL.concat(""maintenance.jsp"");     response.sendRedirect(urlNew);    }    filterChain.doFilter(servletRequest, servletResponse); }"
"final URL url = new URL(""http://localhost:8080/SearchPerson.aspx/PersonSearch""); final URLConnection urlConnection = url.openConnection(); urlConnection.setDoOutput(true); urlConnection.setRequestProperty(""Content-Type"", ""application/json; charset=utf-8""); urlConnection.connect(); final OutputStream outputStream = urlConnection.getOutputStream(); outputStream.write((""{\""fNamn\"": \"""" + stringData + ""\""}"").getBytes(""UTF-8"")); outputStream.flush(); final InputStream inputStream = urlConnection.getInputStream();"
"public class DownloadPDF extends HttpServlet {  public void doGet(HttpServletRequest req, HttpServletResponse res)         throws ServletException, IOException {          //Extract some request parameters, fetch your data and generate your document          String fileName = ""&lt;SomeFileName&gt;.pdf"";         res.setContentType(""application/pdf"");         res.setHeader(""Content-Disposition"", ""attachment;filename=\"""" + fileName + ""\"""");         writePDF(&lt;SomeObjectData&gt;, res.getOutputStream());     } }"
boolean isMultipart = ServletFileUpload.isMultipartContent(request);         if (isMultipart)         {             try              {                 List items = upload.parseRequest(request);                 Iterator iterator = items.iterator();                 while (iterator.hasNext())                  {                     FileItem item = (FileItem) iterator.next();                      if (item.isFormField()) //your code for getting form fields                     {                         String name = item.getFieldName();                         String value = item.getString();                         System.out.println(name+value);                     }                      if (!item.isFormField())                      {                        //your code for getting multipart                      }                 }             }
"for (Task tempTask : TasksListAppObj.getInstance().tasksRepository.getTasksRepository())                 {                     LatLng latlng = new LatLng(tempTask.getLatitude(), tempTask.getLongtitude());                     if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_WAITING))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_blue)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_IN_PROGRESS))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_bordo)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_ON_THE_WAY))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_turkiz)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_COMPLETE))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_orange)));                     }                     else if (tempTask.getStatus().contentEquals(TasksListActivity.STATUS_FAILED))                     {                         newmarker = map.addMarker(new MarkerOptions().position(latlng).title(tempTask.getTitle()).icon(BitmapDescriptorFactory.fromResource(R.drawable.marker_for_map_purpul)));                     } }"
"RepositoryConnection conn = rep.getConnection(); try {    // prepare the query    String queryString = ""SELECT * WHERE {?s ?p ?o . }"";    TupleQuery query = conn.prepareTupleQuery(QueryLanguage.SPARQL, queryString);     // open a file to write the result to it in JSON format    OutputStream out = new FileOutputStream(""/path/to/output.json"");    TupleQueryResultHandler writer = new SPARQLResultJSONWriter(out);     // execute the query and write the result directly to file    query.evaluate(writer);   } finally {    conn.close(); }"
"import org.jboss.resteasy.core.Dispatcher; import org.jboss.resteasy.mock.MockDispatcherFactory; import org.jboss.resteasy.mock.MockHttpRequest; import org.jboss.resteasy.mock.MockHttpResponse; import org.junit.Before; import org.junit.Test;  import javax.ws.rs.GET; import javax.ws.rs.Path; import javax.ws.rs.core.Context; import javax.ws.rs.core.HttpHeaders;  import static org.hamcrest.core.Is.is; import static org.junit.Assert.assertThat;  public class CookieTest {     static final String COOKIE_NAME = ""parameterCookie"";      Dispatcher dispatcher;      @Before     public void setUp() throws Exception {         dispatcher = MockDispatcherFactory.createDispatcher();         dispatcher.getRegistry().addSingletonResource(new Resource());     }      @Test     public void name_StateUnderTest_ExpectedBehavior() throws Exception {         String cookieValue = String.valueOf(System.currentTimeMillis());          MockHttpResponse response = new MockHttpResponse();         MockHttpRequest request = MockHttpRequest.get(""/"")                                     .cookie(COOKIE_NAME, cookieValue);          dispatcher.invoke(request, response);          assertThat(response.getContentAsString(), is(COOKIE_NAME + ""="" + cookieValue));     }      @Path(""/"")     public static class Resource {         @Context HttpHeaders headers;          @GET @Path(""/"")         public String getCookie(){             return headers.getCookies().get(COOKIE_NAME).toString();         }     } }"
"public void zoomIn() {     oldScale = saveScale;      if(saveScale&lt;=maxScale)     {         saveScale += .5;         matrix.setScale(saveScale, saveScale);         setImageMatrix(matrix);         invalidate();          // Center the image         // Center the image         if(bmHeight&gt;bmWidth)         {         redundantXSpace = width - (saveScale * bmWidth);         redundantXSpace /= 2;         }         else          {             redundantYSpace = height - (saveScale * bmHeight) ;             redundantYSpace /= 2;         }          matrix.postTranslate(redundantXSpace , redundantYSpace );         setImageMatrix(matrix);         invalidate();     } }  public void zoomOut() {      if(saveScale&gt;=minScale)     {         saveScale -= .5;         matrix.setScale(saveScale, saveScale);         setImageMatrix(matrix);         invalidate();          // Center the image         if(bmHeight&gt;bmWidth)         {         redundantXSpace = width - (saveScale * bmWidth);         redundantXSpace /= 2;         }         else          {             redundantYSpace = height - (saveScale * bmHeight) ;             redundantYSpace /= 2;         }         matrix.postTranslate(redundantXSpace , redundantYSpace );         setImageMatrix(matrix);         invalidate();     } }"
"public static void fetchDatafromDB(String startIndex, String finalIndex) {     try {         Class.forName(GlobalVariables.SQL_driver).newInstance();         Connection conn = DriverManager.getConnection(GlobalVariables.DB_url + GlobalVariables.DB_name, GlobalVariables.DB_Username, GlobalVariables.DB_password);         Statement st = conn.createStatement();         String query = ""SELECT  `FROM`, `To`, `IDno`, `TimeStamp` FROM `callsheet` WHERE TimeStamp BETWEEN '"" + startIndex + ""' AND '"" + finalIndex + ""'"";         ResultSet rs = st.executeQuery(query);         java.sql.ResultSetMetaData rsmd = rs.getMetaData();         int columnsNumber = rsmd.getColumnCount();          TableItem item;         while (rs.next()) {             // Create a new TableItem for each entry in the result set (each row)             item = new TableItem(table, SWT.NONE);             for (int i = 1; i &lt;= columnsNumber; i++) {                 // Populate the item (mind the index!!)                 item.setText(i - 1, rs.getString(i));             }         }     } catch (Exception e) {         e.printStackTrace();     } }"
"Queue queue = QueueFactory.getQueue(""backupQueue""); TaskOptions taskOptions = withUrl(""/_ah/datastore_admin/backup.create"")             .method(TaskOptions.Method.GET)             .param(""name"", 'Backuptask')             .param(""filesystem"", ""gs"")             .param(""gs_bucket_name"", BACKUP_BUCKET + '/' + DateTime.now().toString(""yyyy/MM/dd/'"" + nameSpace + ""'-HH-mm""))             .param(""namespace"", NamespaceManager.get();)             .param(""queue"", queue.getQueueName())             .param(""kind"", ""customer"")             .param(""kind"", ""address""); queue.add(taskOptions);"
"package com.mobinet.snmp;  import org.snmp4j.CommunityTarget; import org.snmp4j.PDU; import org.snmp4j.Snmp; import org.snmp4j.TransportMapping; import org.snmp4j.event.ResponseEvent; import org.snmp4j.mp.SnmpConstants; import org.snmp4j.smi.Address; import org.snmp4j.smi.GenericAddress; import org.snmp4j.smi.Integer32; import org.snmp4j.smi.OID; import org.snmp4j.smi.OctetString; import org.snmp4j.smi.VariableBinding; import org.snmp4j.transport.DefaultTcpTransportMapping;  /**  *  * @author batbayar  */ public class SnmpTest {     private String address = ""192.168.1.254/161""; // switch address and snmp port     private String writeCommunity = ""myCommunityWrite""; // write community name      private Snmp snmp;     private CommunityTarget target;      public SnmpTest() {         try {             TransportMapping transport = new DefaultTcpTransportMapping();             snmp = new Snmp(transport);              Address targetAddress = GenericAddress.parse(address);             target = new CommunityTarget();             target.setCommunity(new OctetString(writeCommunity));             target.setAddress(targetAddress);             target.setRetries(2);             target.setTimeout(1500);             target.setVersion(SnmpConstants.version2c);              PDU command = new PDU();             command.setType(PDU.SET);             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.1""), new Integer32(2))); // port 1 down             command.add(new VariableBinding(new OID(""1.3.6.1.2.1.2.2.1.7.6""), new Integer32(1))); // port 6 up             ResponseEvent response = snmp.send(command, target);             System.out.println(""response: "" + response);         } catch(Exception e) {             e.printStackTrace();         }     }      public static void main(String[] args) {         SnmpTest test = new SnmpTest();     } }"
"package transformation;  import java.io.StringReader;  import javax.xml.transform.Result; import javax.xml.transform.Source; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.stream.StreamResult; import javax.xml.transform.stream.StreamSource;  public class TransformerTest {      public static void main(String[] args) throws Exception {          final String xmlSample = ""&lt;?xml version=\""1.0\"" encoding=\""UTF-8\""?&gt;&lt;tag&gt;&lt;nested&gt;hello&lt;/nested&gt;&lt;/tag&gt;"";         final String stylesheet = ""&lt;?xml version=\""1.0\"" encoding=\""UTF-8\""?&gt;&lt;xsl:stylesheet version=\""1.0\"" xmlns:xsl=\""http://www.w3.org/1999/XSL/Transform\""&gt;&lt;xsl:output method=\""xml\"" version=\""1.0\"" indent=\""yes\""/&gt;&lt;xsl:template match=\""node()|@*\""&gt;&lt;xsl:copy&gt;&lt;xsl:apply-templates select=\""node()|@*\""/&gt;&lt;/xsl:copy&gt;&lt;/xsl:template&gt;&lt;/xsl:stylesheet&gt;"";          final TransformerFactory factory = TransformerFactory.newInstance();          final Source xslSource = new StreamSource(new StringReader(stylesheet));         final Transformer transformer = factory.newTransformer(xslSource);          final Source source = new StreamSource(new StringReader(xmlSample));         final Result result = new StreamResult(System.out);          transformer.transform(source, result);      }  }"
"import javax.xml.parsers.ParserConfigurationException; import javax.xml.parsers.SAXParser; import javax.xml.parsers.SAXParserFactory; //. . . public class MyXmlHandler extends DefaultHandler {     @Override     public void startDocument()     {         Log.i(TAG,""Starting to parse document."");     }     @Override     public void endDocument()     {             Log.i(TAG,""End of document."");     }     @Override     public void startElement(String uri,String localName,String qName,Attributes attributes)     {         if(localName.equals(""myxmltag""))         {                  //do something with myxmltag and attributes.         }     }     }     public void parseDocument() {     try {          URL myxmlUri = new URL(""file:///sdcard/appfolder/myxmldoc.xml"");          SAXParserFactory spf = SAXParserFactory.newInstance();          SAXParser sp = spf.newSAXParser();          XMLReader xr = sp.getXMLReader();          MyXmlHandler myxmlhandler = new MyXmlHandler();          xr.setContentHandler(myxmlhandler);          InputSource inputs = new InputSource(myxmlUri.openStream());          xr.parse(inputs);          // . . ."
"public class listView extends ListActivity {     ArrayList&lt;String&gt; items = new ArrayList&lt;String&gt;();      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.listViewLayout);         try {             /** Handling XML */             SAXParserFactory spf = SAXParserFactory.newInstance();             SAXParser sp = spf.newSAXParser();             XMLReader xr = sp.getXMLReader();              /** If using remote server for xml file */             URL sourceUrl = new URL(""http://www.server.com/fileToParse.xml"");              /** Create handler to handle XML Tags ( extends DefaultHandler ) */             ExampleHandler myXMLHandler = new ExampleHandler();             xr.setContentHandler(myXMLHandler);             /** if using remote file */             xr.parse(new InputSource(sourceUrl.openStream()));             /** if local file */             xr.parse(new InputSource(getContext().getResources().getXml(R.fileToParse.MyXml));         }catch(Exception e) {             Log.e(""XML Error ""+e.toString());         }          /** Get result from MyXMLHandler SitlesList Object */         sitesList = ExampleHandler.sitesList;         for(int i = 0; i &lt; sitesList.getName().size(); i++) {             items.add(sitesList.getName().get(i)+"" ""+sitesList.getLastName().get(i));         }          /** Set the layout view to display */         setListAdapter(new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_list_item_1, items));     }      public void onListItemClick(ListView parent, View v, int position, long id) {         /** puExtra method for if you want to pass variable to next activity */         Intent i = new Intent(this, listViewSub.class);         i.putExtra(""name"", sitesList.getName());         startActivity(i);     } }"
"Enumeration&lt;?&gt; e = getServletContext().getAttributeNames(); while (e.hasMoreElements()) {     String name = (String) e.nextElement();      // Get the value of the attribute     Object value = getServletContext().getAttribute(name);      if (value instanceof Map) {         for (Map.Entry&lt;?, ?&gt; entry : ((Map&lt;?, ?&gt;)value).entrySet()) {             System.out.println(entry.getKey() + ""="" + entry.getValue());         }     } else if (value instanceof List) {         for (Object element : (List)value) {             System.out.println(element);         }     } }"
"Path folder = Paths.get(System.getProperty(&quot;upload.location&quot;)); String filename = FilenameUtils.getBaseName(uploadedFile.getName());  String extension = FilenameUtils.getExtension(uploadedFile.getName()); Path file = Files.createTempFile(folder, filename + &quot;-&quot;, &quot;.&quot; + extension);  try (InputStream input = uploadedFile.getInputStream()) {     Files.copy(input, file, StandardCopyOption.REPLACE_EXISTING); }  String uploadedFileName = file.getFileName().toString(); // Now store it in DB."
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"package com.bullethq.jawr.postprocessor;  import net.jawr.web.resource.FileNameUtils; import net.jawr.web.resource.bundle.factory.util.PathNormalizer; import net.jawr.web.resource.bundle.postprocess.BundleProcessingStatus; import net.jawr.web.resource.bundle.postprocess.impl.CSSURLPathRewriterPostProcessor; import net.jawr.web.resource.bundle.postprocess.impl.PostProcessorCssImageUrlRewriter;  import java.io.IOException;  public class CustomCssUrlPathRewriterPostProcessor extends CSSURLPathRewriterPostProcessor {      public static final String CUSTOM_URL_PATH_REWRITER = ""customcsspathrewriter"";      public CustomCssUrlPathRewriterPostProcessor() {         super(CUSTOM_URL_PATH_REWRITER);     }      // ========================================================================     // ========================================================================     // ========================================================================     @Override     protected PostProcessorCssImageUrlRewriter createImageUrlRewriter(BundleProcessingStatus status) {         return new CustomPostProcessorCssImageUrlRewriter(status);     }      // ========================================================================     // ========================================================================     // ========================================================================     public class CustomPostProcessorCssImageUrlRewriter extends PostProcessorCssImageUrlRewriter {          public CustomPostProcessorCssImageUrlRewriter(BundleProcessingStatus status) {             super(status);         }          // ========================================================================         // ========================================================================         // ========================================================================         @Override         protected String getUrlPath(String match, String originalPath, String newCssPath) throws IOException {             String url = match.substring(match.indexOf('(') + 1, match.lastIndexOf(')')).trim();              // Remove any quotes if necessary.             String quoteStr = """";             if (url.startsWith(""'"") || url.startsWith(""\"""")) {                 quoteStr = String.valueOf(url.charAt(0));                 url = url.substring(1, url.length() - 1);             }              // We now check if the url ends in a known image file extension             // If not, the url is ignored.             if (FileNameUtils.hasImageExtension(url)) {                 return super.getUrlPath(match, originalPath, newCssPath);             } else {                 // We need to rewrite the path, as any relative URLs will                 // not resolve correctly if Jawr has changed the CSS path.                 url = PathNormalizer.concatWebPath(originalPath, url);                 url = PathNormalizer.getRelativeWebPath(PathNormalizer.getParentPath(newCssPath), url);                 return ""url("" + quoteStr + url + quoteStr + "")"";             }         }     } }"
"import java.io.IOException; import org.w3c.dom.*; import org.xml.sax.SAXException; import javax.xml.parsers.*; import javax.xml.xpath.*;  import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.TransformerException; import javax.xml.transform.TransformerConfigurationException; import javax.xml.transform.dom.DOMSource;  import javax.xml.transform.stream.StreamResult;  public class AddElementFromProp {    public static void main(String[] args)     throws ParserConfigurationException, SAXException, IOException,       XPathExpressionException, TransformerException, TransformerConfigurationException {      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();     factory.setNamespaceAware(true);      DocumentBuilder builder = factory.newDocumentBuilder();     Document doc = builder.parse(""demo.xml"");     //The XPath part.     XPathFactory xfactory = XPathFactory.newInstance();     XPath xpath = xfactory.newXPath();      Node result = (Node)xpath.evaluate(""/root/*[position()='3']"", doc, XPathConstants.NODE);     Element toInsert = doc.createElement(""X"");     result.getParentNode().insertBefore(toInsert, result);     //////////////////////////////////////////////////////     result = (Node)xpath.evaluate(""/root/*[position()='4']"", doc, XPathConstants.NODE);     toInsert = doc.createElement(""Y"");     Text txt = doc.createTextNode(""text"");     toInsert.appendChild(txt);     result.getParentNode().insertBefore(toInsert, result);     //////////////////////////////////////////////////////     result = (Node)xpath.evaluate(""/root/*[position()='5']"", doc, XPathConstants.NODE);     toInsert = doc.createElement(""Z"");     txt = doc.createTextNode(""text"");     toInsert.appendChild(txt);     result.getParentNode().appendChild(toInsert);     ////////////////////////////////////////////////////////     result = (Node)xpath.evaluate(""/root/X"", doc, XPathConstants.NODE); //If you know the name of the node     //result = (Node)xpath.evaluate(""/root/*[position()='3']"", doc, XPathConstants.NODE);//If you know the position of the node     toInsert = doc.createElement(""xchild"");     txt = doc.createTextNode(""text"");     toInsert.appendChild(txt);     result.appendChild(toInsert);     ////////////////////////////////////////////////////////     // Write out the final xml file     // Use a Transformer for output     TransformerFactory tFactory = TransformerFactory.newInstance();     Transformer transformer = tFactory.newTransformer();      DOMSource source = new DOMSource(doc);     StreamResult _result = new StreamResult(""demo1.xml"");     transformer.transform(source, _result);   } }"
"private Drawable getQuestionImageDrawable(int questionNumber) { Drawable image; URL imageUrl;  try {     // Create a Drawable by decoding a stream from a remote URL     imageUrl = new URL(getQuestionImageUrl(questionNumber));     HttpURLConnection conn = (HttpURLConnection) imageUrl.openConnection();     conn.setDoInput(true);     conn.connect();     InputStream stream = conn.getInputStream();     Bitmap bitmap = BitmapFactory.decodeStream(stream);     image = new BitmapDrawable(getResources(), bitmap); } catch (Exception e) {     Log.e(TAG, ""Decoding Bitmap stream failed"");     image = getResources().getDrawable(R.drawable.noquestion); } return image; }"
"import javax.xml.stream.*; import javax.xml.transform.stream.StreamSource; import javax.xml.bind.*;  public class Demo {      public static void main(String[] args) throws Exception {         XMLInputFactory xif = XMLInputFactory.newFactory();         StreamSource xml = new StreamSource(""src/forum14358769/input.xml"");         XMLStreamReader xsr = xif.createXMLStreamReader(xml);          // Advance to the ""To"" element.         while(xsr.hasNext()) {             if(xsr.isStartElement() &amp;&amp; ""To"".equals(xsr.getLocalName())) {                 break;             }             xsr.next();          }          // Unmarshal from the XMLStreamReader that has been advanced         JAXBContext jc = JAXBContext.newInstance(ToType.class);         Unmarshaller unmarshaller = jc.createUnmarshaller();         ToType toType = unmarshaller.unmarshal(xsr, ToType.class).getValue();     }  }"
"package test;  import java.text.MessageFormat; import java.util.Map;  import org.apache.synapse.config.xml.MediatorFactoryFinder; import org.apache.synapse.config.xml.MediatorSerializer; import org.apache.synapse.config.xml.MediatorSerializerFinder; import org.osgi.framework.BundleActivator; import org.osgi.framework.BundleContext;  import test.synapse.mediator.TestMediator; import test.synapse.mediator.TestMediatorFactory; import test.synapse.mediator.TestMediatorSerializer;  public class Activator implements BundleActivator {      public void start(BundleContext context) throws Exception {         {             Map&lt;javax.xml.namespace.QName, java.lang.Class&gt; mediatorFactoryMap = MediatorFactoryFinder.getInstance().getFactoryMap();             mediatorFactoryMap.put(TestMediatorFactory.QNAME, TestMediatorFactory.class);         }         {             Map&lt;String, MediatorSerializer&gt; mediatorSerializerMap = MediatorSerializerFinder.getInstance().getSerializerMap();             mediatorSerializerMap.put(TestMediator.class.getName(), TestMediatorSerializer.class.newInstance());         }     }      public void stop(BundleContext context) throws Exception {         // Maybe undo what was done in the start(BundleContext) method..?         System.out.println(this.getClass().getName() + "".stop(BundleContext) called"");     } }"
LOCAL_PATH := $(call my-dir)  # Prebuilt libssl include $(CLEAR_VARS) LOCAL_MODULE := ssl LOCAL_SRC_FILES := precompiled/libPrivateSsl.so include $(PREBUILT_SHARED_LIBRARY)  # Prebuilt libcrypto include $(CLEAR_VARS) LOCAL_MODULE := crypto LOCAL_SRC_FILES := precompiled/libPrivateCrypto.so include $(PREBUILT_SHARED_LIBRARY)  include $(CLEAR_VARS)  LOCAL_MODULE := PrivateSecurity LOCAL_C_INCLUDES := includes LOCAL_SRC_FILES := TestJNI2.cpp LOCAL_LDLIBS := -llog LOCAL_SHARED_LIBRARIES := ssl crypto  include $(BUILD_SHARED_LIBRARY)
"CloseableHttpClient client = HttpClients.custom()     .disableContentCompression()     .build();  HttpGet request = new HttpGet(urlSring); request.setHeader(HttpHeaders.ACCEPT_ENCODING, ""gzip"");  CloseableHttpResponse response = client.execute(request, context); HttpEntity entity = response.getEntity(); Header contentEncodingHeader = entity.getContentEncoding();  if (contentEncodingHeader != null) {     HeaderElement[] encodings =contentEncodingHeader.getElements();     for (int i = 0; i &lt; encodings.length; i++) {         if (encodings[i].getName().equalsIgnoreCase(""gzip"")) {             entity = new GzipDecompressingEntity(entity);             break;         }     } }  String output = EntityUtils.toString(entity, Charset.forName(""UTF-8"").name());"
