code
"import javax.mail.*; import javax.mail.internet.*;  // Set up the SMTP server. java.util.Properties props = new java.util.Properties(); props.put(""mail.smtp.host"", ""smtp.myisp.com""); Session session = Session.getDefaultInstance(props, null);  // Construct the message String to = ""you@you.com""; String from = ""me@me.com""; String subject = ""Hello""; Message msg = new MimeMessage(session); try {     msg.setFrom(new InternetAddress(from));     msg.setRecipient(Message.RecipientType.TO, new InternetAddress(to));     msg.setSubject(subject);     msg.setText(""Hi,\n\nHow are you?"");      // Send the message.     Transport.send(msg); } catch (MessagingException e) {     // Error. }"
"public class TokenReplacer {      private Pattern tokenPattern;      public TokenReplacer() {         tokenPattern = Pattern.compile(""\\{([^}]+)\\}"");     }      public String replaceTokens(String text, Map&lt;String, String&gt; valuesByKey) {         StringBuilder output = new StringBuilder();         Matcher tokenMatcher = tokenPattern.matcher(text);          int cursor = 0;         while (tokenMatcher.find()) {             // A token is defined as a sequence of the format ""{...}"".             // A key is defined as the content between the brackets.             int tokenStart = tokenMatcher.start();             int tokenEnd = tokenMatcher.end();             int keyStart = tokenMatcher.start(1);             int keyEnd = tokenMatcher.end(1);              output.append(text.substring(cursor, tokenStart));              String token = text.substring(tokenStart, tokenEnd);             String key = text.substring(keyStart, keyEnd);              if (valuesByKey.containsKey(key)) {                 String value = valuesByKey.get(key);                 output.append(value);             } else {                 output.append(token);             }              cursor = tokenEnd;         }         output.append(text.substring(cursor));          return output.toString();     }  }"
"public class TestCRM {    private static String endpointURL = ""http://server:port/MSCrmServices/2007/CrmService.asmx"";   private static String userName = ""username"";   private static String password = ""password"";   private static String host = ""server"";   private static int portport = port;    //To make sure you are using the correct domain open ie and try to reach the service. The same domain you entered there is needed here   private static String domain = ""DOMAIN"";     private static String orgName = ""THIS_IS_REQUIRED""; //this does the work....     public static void main(String[] args) {        CrmServiceStub stub;       try {           stub = new CrmServiceStub(endpointURL);           setOptions(stub._getServiceClient().getOptions());            RetrieveMultipleDocument rmd = RetrieveMultipleDocument.Factory.newInstance();           RetrieveMultiple rm = RetrieveMultiple.Factory.newInstance();            QueryExpression query = QueryExpression.Factory.newInstance();           query.setColumnSet(AllColumns.Factory.newInstance());           query.setEntityName(EntityName.######.toString());           //query.setFilter...            rm.setQuery(query);           rmd.setRetrieveMultiple(rm);            //Now this is required. Without it all i got was 401s errors           CrmAuthenticationTokenDocument catd = CrmAuthenticationTokenDocument.Factory.newInstance();           CrmAuthenticationToken token = CrmAuthenticationToken.Factory.newInstance();           token.setAuthenticationType(0);              token.setOrganizationName(orgName);           catd.setCrmAuthenticationToken(token);            boolean fetchNext = true;           while(fetchNext){               RetrieveMultipleResponseDocument rmrd = stub.RetrieveMultiple(rmd,  catd, null, null);               RetrieveMultipleResponse rmr = rmrd.getRetrieveMultipleResponse();               BusinessEntityCollection bec = rmr.getRetrieveMultipleResult();                String pagingCookie = bec.getPagingCookie();               fetchNext = bec.getMoreRecords();                ArrayOfBusinessEntity aobe = bec.getBusinessEntities();               BusinessEntity[] myEntitiesAtLast = aobe.getBusinessEntityArray();                for(int i=0; i&lt;myEntitiesAtLast.length; i++){                   //cast to whatever you asked for...                   ### myEntity = (###) myEntitiesAtLast[i];               }           }       }        catch (Exception e) {           e.printStackTrace();       }   }    private static void setOptions(Options options){       HttpTransportProperties.Authenticator auth = new HttpTransportProperties.Authenticator();        List authSchemes = new ArrayList();       authSchemes.add(HttpTransportProperties.Authenticator.NTLM);        auth.setAuthSchemes(authSchemes);         auth.setUsername(userName);       auth.setPassword(password);       auth.setHost(host);       auth.setPort(port);       auth.setDomain(domain);       auth.setPreemptiveAuthentication(false); //it doesnt matter...       options.setProperty(HTTPConstants.AUTHENTICATE, auth);       options.setProperty(HTTPConstants.REUSE_HTTP_CLIENT, ""true""); //i think this is good.. not required though   }"
"Properties properties = System.getProperties();     properties.put(""mail.smtp.host"", server);     properties.put(""mail.smtp.port"", """" + port);      Session session = Session.getInstance(properties);     Transport transport = session.getTransport(""smtp"");      transport.connect(server, username, password);      for (int i = 0; i &lt; count; i++) {          Message message = new MimeMessage(session);         message.setFrom(new InternetAddress(from));         InternetAddress[] address = {new InternetAddress(to)};         message.setRecipients(Message.RecipientType.TO, address);          message.setSubject(subject + ""JavaMail API"");         message.setSentDate(new Date());          setHTMLContent(message);         message.saveChanges();         transport.sendMessage(message, address);      }      transport.close();"
"FileConfiguration configuration = new FileConfiguration(); configuration.setConfigurationUrl(""hornetq-configuration.xml"");  configuration.start(); // &lt;&lt;&lt;-----------------  // Prepare configuration objects String netty = NettyAcceptorFactory.class.getName(); Map&lt;String, Object&gt; transportParams = new HashMap&lt;String, Object&gt;(); transportParams.put(TransportConstants.HOST_PROP_NAME, ""localhost""); transportParams.put(TransportConstants.PORT_PROP_NAME, 6446); TransportConfiguration transpConf = new TransportConfiguration(netty, transportParams);  configuration.getAcceptorconfigurations().clear(); // &lt;&lt;&lt;-----------------  // add configuration configuration.getAcceptorConfigurations().add(transpConf);"
"javax.mail.Multipart multipart = new MimeMultipart();  javax.mail.internet.MimeBodyPart messageBodyPart =   new  javax.mail.internet.MimeBodyPart();  multipart.addBodyPart(messageBodyPart);  javax.activation.DataSource source = new FileDataSource(""C:\\Notes\\new mail.msg"");  messageBodyPart.setDataHandler( new DataHandler(source)); messageBodyPart.setFileName(""new mail.msg"");  multipart.addBodyPart(messageBodyPart); msg.setContent(multipart);   MimeBodyPart part = new MimeBodyPart();  part.setText(text);  multipart.addBodyPart(part);"
"import org.apache.openejb.api.LocalClient;  @LocalClient public class ChatBeanTest extends TestCase {      @Resource     private ConnectionFactory connectionFactory;      @Resource(name = ""QuestionBean"")     private Queue questionQueue;      @Resource(name = ""AnswerQueue"")     private Queue answerQueue;      @EJB     private MyBean myBean;       @Override     protected void setUp() throws Exception {         Properties p = new Properties();         p.put(Context.INITIAL_CONTEXT_FACTORY, ""org.apache.openejb.client.LocalInitialContextFactory"");         InitialContext initialContext = new InitialContext(p);          initialContext.bind(""inject"", this); // here's the magic!     } }"
"JServer server = new JServer();          server.setUrl(""http://localhost:8080/jasperserver/services/repository"");          server.setUsername(""username"");          server.setPassword(""password"");          WSClient client = new WSClient(server);          ResourceDescriptor resourceDescriptor = new ResourceDescriptor();          resourceDescriptor.setUriString (""/reports/myreportname"");          Map&lt;String, Object&gt; parameterMap = new HashMap&lt;String, Object&gt;();          parameterMap.put(""MY_PARAMETER_NAME"", ""myparametervalue"");          JasperPrint printer = client.runReport(resourceDescriptor, parameterMap);          JasperViewer.viewReport(printer, false, Locale.GERMAN);"
JFileChooser chooser = new JFileChooser();  // Add listener on chooser to detect changes to selected file chooser.addPropertyChangeListener(new PropertyChangeListener() {     public void propertyChange(PropertyChangeEvent evt) {         if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY                 .equals(evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File oldFile = (File)evt.getOldValue();             File newFile = (File)evt.getNewValue();              // The selected file should always be the same as newFile             File curFile = chooser.getSelectedFile();         } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(                 evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File[] oldFiles = (File[])evt.getOldValue();             File[] newFiles = (File[])evt.getNewValue();              // Get list of selected files             // The selected files should always be the same as newFiles             File[] files = chooser.getSelectedFiles();         }     } }) ;
JFileChooser chooser = new JFileChooser();  // Add listener on chooser to detect changes to selected file chooser.addPropertyChangeListener(new PropertyChangeListener() {     public void propertyChange(PropertyChangeEvent evt) {         if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY                 .equals(evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File oldFile = (File)evt.getOldValue();             File newFile = (File)evt.getNewValue();              // The selected file should always be the same as newFile             File curFile = chooser.getSelectedFile();         } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(                 evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File[] oldFiles = (File[])evt.getOldValue();             File[] newFiles = (File[])evt.getNewValue();              // Get list of selected files             // The selected files should always be the same as newFiles             File[] files = chooser.getSelectedFiles();         }     } }) ;
"Redirect to:  ""https://graph.facebook.com/oauth/authorize?"" +             ""client_id="" + clientId + ""&amp;"" +             ""redirect_uri="" + URLEncoder.encode(returnUrl, ""utf-8"")  // After redirect to the return url do the following:  //Make a http request to  ""https://graph.facebook.com/oauth/access_token?client_id="" +             ""client_id="" + clientId + ""&amp;"" +             ""redirect_uri="" + URLEncoder.encode(returnUrl, ""utf-8"")  + ""&amp;""+             ""client_secret="" + clientSecret + ""&amp;""+             ""code="" + request.getParameter(""code"");"
"try {   // Create a default MimeMessage object.   new MimeMessage(session).with { message -&gt;     // From, Subject and Content     from = new InternetAddress( mailProp.from )     subject = ""My Subject!""     setContent createMessage(), 'text/html'      // Add recipients     addRecipient( Message.RecipientType.TO, new InternetAddress( mailProp.to ) )      // Send the message     Transport.send( message )      println ""Sent successfully""   } } catch( MessagingException mex ) {     mex.printStackTrace() }"
"private String token = ""&lt;token&gt;""; private String host = ""gateway.sandbox.push.apple.com""; private int port = 2195;  private String payload = ""{\""aps\"":{\""alert\"":\""Message from Java o_O\""}}"";  public APNSender() {     try {         KeyStore keyStore = KeyStore.getInstance(""PKCS12"");          keyStore.load(getClass().getResourceAsStream(""cert.p12""), ""&lt;password&gt;"".toCharArray());         KeyManagerFactory keyMgrFactory = KeyManagerFactory.getInstance(""SunX509"");         keyMgrFactory.init(keyStore, ""&lt;password&gt;"".toCharArray());          SSLContext sslContext = SSLContext.getInstance(""TLS"");         sslContext.init(keyMgrFactory.getKeyManagers(), null, null);         SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();          SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(host, port);         String[] cipherSuites = sslSocket.getSupportedCipherSuites();         sslSocket.setEnabledCipherSuites(cipherSuites);         sslSocket.startHandshake();          char[] t = token.toCharArray();         byte[] b = Hex.decodeHex(t);          OutputStream outputstream = sslSocket.getOutputStream();          outputstream.write(0);         outputstream.write(0);         outputstream.write(32);         outputstream.write(b);         outputstream.write(0);         outputstream.write(payload.length());         outputstream.write(payload.getBytes());          outputstream.flush();         outputstream.close();      } catch (Exception exception) {         exception.printStackTrace();     } }"
public class MyRestService {     private DataStoreService dataStoreService;      // constructor used on the server     public MyRestService() {         this.dataStoreService = DatastoreServiceFactory.getDatastoreService();     }      // constructor used by the unit tests     public MyRestService(DataStoreService dataStoreService) {         this.dataStoreService = dataStoreService;     }      public Response initialize(String DatabaseSchema) {          ...          // use this.dataStoreService instead of datastore     } }
"If you are using 3rd party jars for connection polling then you can enable their logging and set logAbandoned property to true. So it will log your all logAbandoned connections.  As shown below -  &lt;bean id=""dataSource"" class=""org.apache.tomcat.jdbc.pool.DataSource"" destroy-method=""close""&gt;         &lt;property name=""driverClassName"" value=""${dataSource.driverClassName}"" /&gt;         &lt;property name=""url"" value=""${dataSource.url}"" /&gt;         &lt;property name=""username"" value=""${dataSource.username}"" /&gt;         &lt;property name=""password"" value=""${dataSource.password}"" /&gt;         &lt;property name=""validationQuery"" value=""${datasource.validationQuery}"" /&gt;         &lt;property name=""maxActive"" value=""${datasource.maxActive}"" /&gt;         &lt;property name=""maxIdle"" value=""${datasource.maxIdle}"" /&gt;         &lt;property name=""maxWait"" value=""${datasource.maxWait}"" /&gt;         &lt;property name=""testOnBorrow"" value=""true"" /&gt;         &lt;property name=""testWhileIdle"" value=""true"" /&gt;               &lt;property name=""minIdle"" value=""${datasource.minIdle}"" /&gt;         &lt;property name=""initialSize"" value=""${datasource.initialSize}"" /&gt;         &lt;property name=""timeBetweenEvictionRunsMillis"" value=""${datasource.timeBetweenEvictionRunsMillis}"" /&gt;         &lt;property name=""logAbandoned"" value=""${datasource.logAbandoned}"" /&gt;     &lt;/bean&gt;"
"private final ServiceConnection connection = new ServiceConnection() {     @Override     public void onServiceConnected(ComponentName className, IBinder binder) {          Log.i(""BumpTest"", ""onServiceConnected"");         api = IBumpAPI.Stub.asInterface(binder);         new Thread() {             public void run() {                 try {                     api.configure(""API_KEY"",                             ""Bump User"");                 } catch (RemoteException e) {                     Log.w(""BumpTest"", e);                 }              }         }.start();          Log.d(""Bump Test"", ""Service connected"");     }      @Override     public void onServiceDisconnected(ComponentName className) {         Log.d(""Bump Test"", ""Service disconnected"");     } };"
"Git git = ... // you get it through a CloneCommand, InitCommand                // or through the file system  CheckoutCommand coCmd = git.checkout();  // Commands are part of the api module, which include git-like calls coCmd.setName(""master""); coCmd.setCreateBranch(false); // probably not needed, just to make sure coCmd.call(); // switch to ""master"" branch  MergeCommand mgCmd = git.merge(); mgCmd.include(""foo""); // ""foo"" is considered as a Ref to a branch MergeResult res = mgCmd.call(); // actually do the merge  if (res.getMergeStatus().equals(MergeResult.MergeStatus.CONFLICTING)){    System.out.println(res.getConflicts().toString());    // inform the user he has to handle the conflicts }"
"val mapRolesBucket = new JSSourceFunction(""""""       function(value){             var splitarr=value.key.split('-');              return [[ 'users', splitarr[1] ]];           }     """""") val mapUsersBucket = new JSSourceFunction(""""""       function(value){             var obj = Riak.mapValuesJson(value)[0];             return [ obj ];           }     """""")     DB.client.mapReduce(""rolesOfClientAdmins"")     .addKeyFilter(new TokenizeFilter(""-"", 1))     .addKeyFilter(new MatchFilter(clientId))     .addMapPhase(mapRolesBucket)     .addMapPhase(mapUsersBucket)     .execute().getResult(classOf[String])"
"javax.xml.ws.Service service = Service.create(      new URL(""http://example.org/stocks.wsdl""),      new QName(""http://example.org/stocks"", ""StockQuoteService""));  com.example.StockQuoteProvider proxy = service.getPort(portName,  com.example.StockQuoteProvider.class)  javax.xml.ws.BindingProvider bp = (javax.xml.ws.BindingProvider)proxy;  Map&lt;String,Object&gt; context = bp.getRequestContext();  context.setProperty(""javax.xml.ws.session.maintain"", Boolean.TRUE);  proxy.getLastTradePrice(""ACME"");"
"import collection.immutable._  class MyClass2 {   // ... }  // We can make the default constructor private, if we want to manage the // map ourselves instead of allowing users to pass arbitrary maps // (depends on your use case): class MyClass private (val myData: Map[String,MyClass2]) {   // A public constructor:   def this() = this(new HashMap[String,MyClass2]())    def someMethod(id: String): MyClass = {     if (myData.contains(id))       new MyClass(myData - id) // create a new, updated instance     else {       println(""Not found: "" + id)       this // no modification, we can return the current             // unmodified instance     }   }    // other methods for adding something to the map   // ... }"
"public class RequestGenerator  {      private WebTarget target;     private ClientConfig config;     private Client client;     private Response response;      public RequestGenerator(Method RequestSendingMethod) throws Exception     {                switch (RequestSendingMethod)             {                 case POST :                                  String payload = ""\r\n{\r\n\""query\"": \""google \"",\r\n\""rows\"": 50,\r\n\""return_docs\"": true,\r\n\""is_facet\"": true\r\n}""; //this is escapped json string in single line                     config = new ClientConfig();                     client = ClientBuilder.newClient(config);                     target = client.target(""http://localhost:7400/searchws/search/getresults"");                     response = target.request().accept(MediaType.APPLICATION_JSON).post(Entity.entity(payload, MediaType.APPLICATION_JSON), Response.class);                     processresponse(response); //This could be any method which processes your json response and gets you your desired data.                     System.out.println(response.readEntity(String.class));                     break;                 case GET :                     config = new ClientConfig();                     client = ClientBuilder.newClient(config);                     target = client.target(""http://localhost:7400/search-service/searchservice"").path(""search"").path(""results"").path(""tiger"");                     response = target.request().accept(MediaType.APPLICATION_JSON).get();                     processresponse(response); //This could be any method which processes your json response and gets you your desired data.                     System.out.println(response.readEntity(String.class));             }  }"
JFileChooser chooser = new JFileChooser();  // Add listener on chooser to detect changes to selected file chooser.addPropertyChangeListener(new PropertyChangeListener() {     public void propertyChange(PropertyChangeEvent evt) {         if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY                 .equals(evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File oldFile = (File)evt.getOldValue();             File newFile = (File)evt.getNewValue();              // The selected file should always be the same as newFile             File curFile = chooser.getSelectedFile();         } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(                 evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File[] oldFiles = (File[])evt.getOldValue();             File[] newFiles = (File[])evt.getNewValue();              // Get list of selected files             // The selected files should always be the same as newFiles             File[] files = chooser.getSelectedFiles();         }     } }) ;
JFileChooser chooser = new JFileChooser();  // Add listener on chooser to detect changes to selected file chooser.addPropertyChangeListener(new PropertyChangeListener() {     public void propertyChange(PropertyChangeEvent evt) {         if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY                 .equals(evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File oldFile = (File)evt.getOldValue();             File newFile = (File)evt.getNewValue();              // The selected file should always be the same as newFile             File curFile = chooser.getSelectedFile();         } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(                 evt.getPropertyName())) {             JFileChooser chooser = (JFileChooser)evt.getSource();             File[] oldFiles = (File[])evt.getOldValue();             File[] newFiles = (File[])evt.getNewValue();              // Get list of selected files             // The selected files should always be the same as newFiles             File[] files = chooser.getSelectedFiles();         }     } }) ;
"public class DownloadRequest&lt;T&gt; extends Request&lt;T&gt; {  private final Gson gson = new Gson(); private final Type type; private final Map&lt;String, String&gt; params; private final Response.Listener&lt;T&gt; listener;  public DownloadRequest(int method, String url, Map&lt;String, String&gt; params, Type type, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener) {     super(method, url, errorListener);     this.type = type;     this.params = params;     this.listener = listener; }  @Override protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse networkResponse) {      try {         String json = new String(networkResponse.data, HttpHeaderParser.parseCharset(networkResponse.headers));         T parseObject = gson.fromJson(json, type);         return Response.success(parseObject,HttpHeaderParser.parseCacheHeaders(networkResponse));     } catch (UnsupportedEncodingException e) {         e.printStackTrace();     }      return null; }  @Override protected void deliverResponse(T t) {     listener.onResponse(t); }"
"import javax.mail.*;   import javax.mail.internet.*;   import javax.activation.*;   import java.io.*;   import java.util.Properties;   public class MailClient   {         public void sendMail(String mailServer, String from, String to,                               String subject, String messageBody,                               String[] attachments) throws  MessagingException, AddressException       {           // Setup mail server           Properties props = System.getProperties();           props.put(""mail.smtp.host"", mailServer);            // Get a mail session           Session session = Session.getDefaultInstance(props, null);            // Define a new mail message           Message message = new MimeMessage(session);           message.setFrom(new InternetAddress(from));           message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));           message.setSubject(subject);            // Create a message part to represent the body text           BodyPart messageBodyPart = new MimeBodyPart();           messageBodyPart.setText(messageBody);            //use a MimeMultipart as we need to handle the file attachments           Multipart multipart = new MimeMultipart();            //add the message body to the mime message           multipart.addBodyPart(messageBodyPart);            // add any file attachments to the message           addAtachments(attachments, multipart);            // Put all message parts in the message           message.setContent(multipart);            // Send the message           Transport.send(message);         }        protected void addAtachments(String[] attachments, Multipart multipart)                       throws MessagingException, AddressException       {           for(int i = 0; i&lt;= attachments.length -1; i++)           {               String filename = attachments[i];               MimeBodyPart attachmentBodyPart = new MimeBodyPart();                //use a JAF FileDataSource as it does MIME type detection               DataSource source = new FileDataSource(filename);               attachmentBodyPart.setDataHandler(new DataHandler(source));                //assume that the filename you want to send is the same as the               //actual file name - could alter this to remove the file path               attachmentBodyPart.setFileName(filename);                //add the attachment               multipart.addBodyPart(attachmentBodyPart);           }       }        public static void main(String[] args)       {           try           {               MailClient client = new MailClient();               String server=""pop3.mydomain.com"";               String from=""myname@mydomain.com"";               String to = ""someuser@somewhere.com"";               String subject=""Test"";               String message=""Testing"";               String[] filenames =  {""c:\somefile.txt""};                client.sendMail(server,from,to,subject,message,filenames);           }           catch(Exception e)           {               e.printStackTrace(System.out);           }        }   }"
"ClientConfig config = new DefaultClientConfig(); Client client = Client.create(config); WebResource webResource = client.resource(""http://some.url/path1/path2"");  MultivaluedMapImpl values = new MultivaluedMapImpl(); values.add(""filename"", ""report.zip""); values.add(""text"", ""Test message""); values.add(""content"", new String(Base64.encode(FileUtils.readFileToByteArray(attachedLogs)))); ClientResponse response = webResource.type(MediaType.APPLICATION_FORM_URLENCODED).post(ClientResponse.class, values);"
"Transport transport = session.getTransport(""smtp""); transport.connect(this._properties.getProperty(""mail.smtp.host""),  Integer.parseInt(this._properties.getProperty(""mail.smtp.port"")),     this._properties.getProperty(""mail.smtp.user""),     this._properties.getProperty(""mail.smtp.password""));  Address[] addr = new Address[this._addresses.size()]; for (int i = 0, c = this._addresses.size(); i &lt; c; i++) {     addr[i] = new InternetAddress(this._addresses.get(i)); }  transport.sendMessage(message, addr);"
"URI website; try {     HttpClient client = new DefaultHttpClient();     website = new URI(""http://""+ IP+ "":8080/ServerName/ServletName"");     HttpPost request = new HttpPost();     request.setHeader(""Data Name"", Data Value);     request.setURI(website);     HttpResponse response = client.execute(request);     // Response From Server     Header[] headers = response.getAllHeaders();     for (int i = 0; i &lt; headers.length; i++) {     Header h = headers[i];     }     } catch (URISyntaxException e) {          e.printStackTrace();     } catch (ClientProtocolException e) {         e.printStackTrace();     } catch (IOException e) {         e.printStackTrace();    }"
"try {         MimeMessage message = new MimeMessage(session);         message.setFrom(new InternetAddress(""sender@emailID.com""));         message.addRecipient(Message.RecipientType.TO, new InternetAddress(""recepint@emailID.com""));         message.setSubject(""Hello iCal4j Meeting Invitation"");          // create the message part         MimeBodyPart messageBodyPart = new MimeBodyPart();          // fill message         messageBodyPart.setText(""Hi Sir, Please see the demo example to send meeting invitaiton from iCal4j API."");          Multipart multipart = new MimeMultipart();         multipart.addBodyPart(messageBodyPart);          // Part two is attachment         messageBodyPart = new MimeBodyPart();         DataSource source = new FileDataSource(calFile);         messageBodyPart.setDataHandler(new DataHandler(source));         messageBodyPart.setFileName(calFile);         multipart.addBodyPart(messageBodyPart);          // Put parts in message         message.setContent(multipart);          Transport.send(message);     //  System.out.println(meeting);      } catch (MessagingException e) {         throw new RuntimeException(e);     }"
"public class HibernateUtil {      private static final SessionFactory sessionFactory = buildSessionFactory();      private static SessionFactory buildSessionFactory() {         try {             // Create the SessionFactory from hibernate.cfg.xml             Configuration configuration = new Configuration();             configuration.configure();             ServiceRegistry serviceRegistry = new ServiceRegistryBuilder().applySettings(configuration.getProperties()).buildServiceRegistry();                     return configuration.buildSessionFactory(serviceRegistry);         }         catch (Throwable ex) {             // Make sure you log the exception, as it might be swallowed             System.err.println(""Initial SessionFactory creation failed."" + ex);             throw new ExceptionInInitializerError(ex);         }     }      public static SessionFactory getSessionFactory() {         return sessionFactory;     } }"
LOCAL_PATH := $(call my-dir)  # Prebuilt libssl include $(CLEAR_VARS) LOCAL_MODULE := ssl LOCAL_SRC_FILES := precompiled/libPrivateSsl.so include $(PREBUILT_SHARED_LIBRARY)  # Prebuilt libcrypto include $(CLEAR_VARS) LOCAL_MODULE := crypto LOCAL_SRC_FILES := precompiled/libPrivateCrypto.so include $(PREBUILT_SHARED_LIBRARY)  include $(CLEAR_VARS)  LOCAL_MODULE := PrivateSecurity LOCAL_C_INCLUDES := includes LOCAL_SRC_FILES := TestJNI2.cpp LOCAL_LDLIBS := -llog LOCAL_SHARED_LIBRARIES := ssl crypto  include $(BUILD_SHARED_LIBRARY)
"HttpClient client = new DefaultHttpClient();             HttpConnectionParams.setConnectionTimeout(client.getParams(), 60000);             HttpResponse response;      try     {              JSONObject j = new JSONObject();             j.put(""UserName"", ""hiqmaali"");             j.put(""Password"", ""qwerty"");         Messages.onLowmemory();         HttpPost post = new HttpPost(HOST_URL);          StringEntity stringEntity = new StringEntity(j.toString(), ""UTF-8"");         post.setEntity(stringEntity);          response = client.execute(post);"
