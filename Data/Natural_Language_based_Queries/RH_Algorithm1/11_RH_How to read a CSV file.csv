code
"void trythiscode(){    // An array specifying which columns to return.    String[] projection = new String[] {    People._ID,    People.NAME,    People.NUMBER, };     // Get the base URI for People table in Contacts content provider.    // which is: content://contacts/people/    Uri contactUri = People.CONTENT_URI;     // Best way to retrieve a query; returns a managed query.    Cursor peopleCursor = managedQuery (contactUri,      projection, //Which columns to return.      null, // WHERE clause--we won't specify.      null, // Selection Args??      People.DEFAULT_SORT_ORDER); // Order-by name     // go to the beginning of the list    peopleCursor.moveToFirst();      // So, here we have a contact. We need to get the contact ID (_id) then    // build the Uri to get the phones section of that user's record    // which is a subdirectory of a contact record     long personId = peopleCursor.getLong(peopleCursor.getColumnIndex(""_id""));     Uri personUri = ContentUris.withAppendedId(contactUri, personId );     // So now the URL looks like: content://contacts/people/_id(where the actual id of the record is here)    Uri phoneUri=     Uri.withAppendedPath(personUri, Contacts.People.Phones.CONTENT_DIRECTORY);     // Now the URL looks like: content://contacts/people/_id/phones (where phones is literally ""phones"")     // Now get all the phone numbers for this contact    Cursor phonesCursor = managedQuery(phoneUri,      null,      null,      null,      Phones.DEFAULT_SORT_ORDER);     // We now have a cursor for all the phone numbers for that User ID    // go to the beginning of the phone list.    phonesCursor.moveToFirst();   }"
"public static &lt;T&gt; T readFromInput(String message, Class&lt;T&gt; c) throws Exception{     System.out.println(message);     Scanner scanner = new Scanner(System.in);     try {         if(c == Integer.class)             // the next cast to Integer is safe             return c.cast(Integer.valueOf(scanner.nextInt()));         if(c == String.class)             // the next cast to String is safe             return c.cast(scanner.nextLine());         if(c == Double.class)             // the next cast to Double is safe             return c.cast(Double.valueOf(scanner.nextDouble()));         if(c == Float.class)             // the next cast to Float is safe             return c.cast(Float.valueOf(scanner.nextFloat()));     } catch (InputMismatchException e) {         throw new Exception(e);     }     return null; }"
"Pattern pattern1 = Pattern.compile(     ""([^|=,]*)"" +                // Group 1: The word. Zero or more characters.     ""=([^|=,]*)"" +               // Group 2: The part of speech.     "",?([^|=,]*(?:,[^|=,]*)*)"" + // Group 3: The p-params     ""=([^|=,]*(?:,[^|=,]*)*)""    // Group 4: The q-params ); Matcher matcher = pattern1.matcher(""word=PS1,p1,p2,p3=q1,q2|word2=PS3,p4,p5,p6=q3""); while (matcher.find()) {   String word = matcher.group(1);   String partOfSpeech = matcher.group(2);   String pParamString = matcher.group(3);   String qParamString = matcher.group(4);   String[] pParams = pParamString.split("","");   String[] qParams = qParamString.split("","");   // Do something with the above variables... }"
"public class ManageHyperV {     static final int RETURN_IMMEDIATE = 0x10;     static final int FORWARD_ONLY = 0x20;          private static final int STOP = 0;     private static final int START = 1;     static IJIDispatch msvmServices = null;       private static IJIDispatch createCOMServer(String namespace) { //root//virtualization         JIComServer comServer;         try {                        JISystem.getLogger().setLevel(Level.WARNING);             JISystem.setAutoRegisteration(true);              JISession session = JISession.createSession(domainName,userName,password);             session.useSessionSecurity(false);             comServer = new JIComServer(valueOf(""WbemScripting.SWbemLocator""),hostIP,session);              IJIDispatch wbemLocator = (IJIDispatch) narrowObject(comServer.createInstance().queryInterface(IID));             //parameters to connect to WbemScripting.SWbemLocator             Object[] params = new Object[] {                     new JIString(hostIP),//strServer                     new JIString(namespace),//strNamespace                     //                  new JIString(""ROOT\\CIMV2""),                     JIVariant.OPTIONAL_PARAM(),//strUser                      JIVariant.OPTIONAL_PARAM(),//strPassword                      JIVariant.OPTIONAL_PARAM(),//strLocale                      JIVariant.OPTIONAL_PARAM(),//strAuthority                     new Integer(0),//iSecurityFlags                      JIVariant.OPTIONAL_PARAM()//objwbemNamedValueSet             };             JIVariant results[] = wbemLocator.callMethodA(""ConnectServer"", params);             IJIDispatch wbemServices = (IJIDispatch) narrowObject(results[0].getObjectAsComObject());             return wbemServices;         } catch (JIException jie) {             System.out.println(jie.getMessage());             jie.printStackTrace();         } catch (JIRuntimeException jire) {             jire.printStackTrace();         } catch (Exception e) {             e.printStackTrace();         }         return null;     }      private static void getVMList() throws JIException {              String temp = ""select * from Msvm_ComputerSystem"";                       String[] arrQuery = new String[]{temp};              for (int k=0;k&lt;arrQuery.length;k++) {                  Object[] params = new Object[] {                         new JIString(arrQuery[k]),                         JIVariant.OPTIONAL_PARAM(),                         new JIVariant(new Integer(RETURN_IMMEDIATE + FORWARD_ONLY))                 };                  JIVariant[] servicesSet = msvmServices.callMethodA(""ExecQuery"", params);                 iterateEnum(servicesSet);              }            }      private  static void iterateEnum(JIVariant[] servicesSet) {         try {             IJIDispatch wbemObjectSet = (IJIDispatch) narrowObject(servicesSet[0].getObjectAsComObject());             JIVariant newEnumvariant = wbemObjectSet.get(""_NewEnum"");             IJIComObject enumComObject = newEnumvariant.getObjectAsComObject();             IJIEnumVariant enumVariant = (IJIEnumVariant) narrowObject(enumComObject.queryInterface(IJIEnumVariant.IID));             List&lt;Object[]&gt; respArr = getEnumIterations(enumVariant);              for (Object[] elements : respArr) {                 JIArray aJIArray = (JIArray) elements[0];                 JIVariant[] array = (JIVariant[]) aJIArray.getArrayInstance();                  for (JIVariant variant : array) {                     IJIDispatch wbemObjectDispatch = (IJIDispatch) narrowObject(variant.getObjectAsComObject());                      JIVariant[] v = wbemObjectDispatch.callMethodA(""GetObjectText_"", new Object[] {});                     System.out.println(""----------------------------------------------------------------------"");                     System.out.println(v[0].getObjectAsString().getString());                     System.out.println(""----------------------------------------------------------------------"");                 }             }         } catch (JIRuntimeException e) {             e.printStackTrace();         } catch (JIException e) {             e.printStackTrace();         } catch (Exception e) {             e.printStackTrace();         }     }      public static void main(String[] args) {             msvmServices = createCOMServer(""root\\virtualization"");         getVMList();     }  }  private static List&lt;Object[]&gt; getEnumIterations(IJIEnumVariant enumVariant) {     List&lt;Object[]&gt; list = new ArrayList&lt;Object[]&gt;();      int i=0;      for (i=0;i&lt;100;i++) {         try {             list.add(enumVariant.next(1));         }catch (JIRuntimeException jre) {             break;         }         catch (JIException jie) {             break;                       }         catch (Exception e) {             break;         }     }     return list; }"
"if (cmp instanceof JComboBox)         {             ((JComboBox)cmp).setRenderer(new DefaultListCellRenderer() {                 private ListCellRenderer superLCR = ((JComboBox)cmp).getRenderer();                 public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {                     Component comp = superLCR.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);                     if (isSelected)                         comp.setBackground(new Color(164,164,164));                     return comp;                 }             });         }"
objdump --help  ... &lt;SNIP A lot of --help text %&lt;&gt; ... The following i386/x86-64 specific disassembler options are supported for use with the -M switch (multiple options should be separated by commas):   x86-64      Disassemble in 64bit mode   i386        Disassemble in 32bit mode   i8086       Disassemble in 16bit mode   att         Display instruction in AT&amp;T syntax   intel       Display instruction in Intel syntax   att-mnemonic               Display instruction in AT&amp;T mnemonic   intel-mnemonic               Display instruction in Intel mnemonic   addr64      Assume 64bit address size   addr32      Assume 32bit address size   addr16      Assume 16bit address size   data32      Assume 32bit data size   data16      Assume 16bit data size   suffix      Always display instruction suffix in AT&amp;T syntax Report bugs to &lt;http://www.sourceware.org/bugzilla/&gt;.
"locationManagerNetwork = (LocationManager) getSystemService(Context.LOCATION_SERVICE);     Location location2 = locationManagerNetwork                     .getLastKnownLocation(LocationManager.NETWORK_PROVIDER);       if (location2 != null) {                        String message = String                         .format(""Yout location : \n Longitude: %1$s \n Latitude: %2$s"",                                 location2.getLongitude(), location2.getLatitude());                 Toast.makeText(getApplicationContext(), message, Toast.LENGTH_LONG)                         .show();       //use here file writer if you want to write the coordinates in a text file             }"
"for(int i=0; i&lt;length; i++) {     try {         String srcFile = ""file:///store/home/user/sample/www"" + resourseFileNames[i];         FileConnection srcConn = (FileConnection) Connector.open(srcFile, Connector.READ);         InputStream in = srcConn.openInputStream();          String dstFile = ""file:///SDCard/myAppName/www"" + resourseFileNames[i];         FileConnection dstConn = (FileConnection)Connector.open(dstFile, Connector.WRITE);         OutputStream out = dstConn.openOutputStream();          // Copy the bits from instream to outstream         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) &gt; 0) {            out.write(buf, 0, len);         }          in.close();         srcConn.close();          out.close();         dstConn.close();     } catch (IOException e) {         e.printStackTrace();     } }"
"List&lt;String&gt; matchList = new ArrayList&lt;String&gt;(); Pattern regex = Pattern.compile(     ""([\\p{Lu}_]+)  # one or more characters, all caps and underscores\n"" +     ""\\s*=\\s*      # equals sign, possibly surrounded by whitespace\n"" +     ""([^=]+)        # any letters except equals sign\n"" +     ""(?&lt;=\\p{Ll})   # but only until the last lowercase letter"",      Pattern.COMMENTS); Matcher regexMatcher = regex.matcher(subjectString); while (regexMatcher.find()) {     matchList.add(regexMatcher.group()); }"
"private void searchFor(String text) {     TextView prose=(TextView)findViewById(R.id.prose);     Spannable raw=new SpannableString(prose.getText());     BackgroundColorSpan[] spans=raw.getSpans(0,                                              raw.length(),                                              BackgroundColorSpan.class);      for (BackgroundColorSpan span : spans) {       raw.removeSpan(span);     }      int index=TextUtils.indexOf(raw, text);      while (index &gt;= 0) {       raw.setSpan(new BackgroundColorSpan(0xFF8B008B), index, index           + text.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);       index=TextUtils.indexOf(raw, text, index + text.length());     }      prose.setText(raw);   }"
final Set&lt;String&gt; pressedKeys = new HashSet&lt;String&gt;();      keyboard.setOnKeyPressed(new EventHandler&lt;KeyEvent&gt;() {          @Override         public void handle(KeyEvent t) {             String note = t.getText();             if (!pressedKeys.contains(note)) {                 // you may need to introduce synchronization here                 pressedKeys.add(note);                  playNote(note);             }         }     });     keyboard.setOnKeyReleased(new EventHandler&lt;KeyEvent&gt;() {          @Override         public void handle(KeyEvent t) {             pressedKeys.remove(t.getText());         }     });
"public String[] getSongIds(String whereClause) throws FetchSongException {   String countQuery = ""SELECT  songid FROM TABLE_INDEX WHERE "" + whereClause;   try {     Cursor cursor = db.rawQuery(countQuery, null);     int cursorSize = cursor.getCount();      int[] songIds = new int[cursorSize];     int count=0;     if (cursor != null) {       if (cursor.moveToFirst()) {         do {           songIds[count] = cursor.getInt(cursor.getColumnIndex(""songid""));           count++;         } while(cursor.moveToNext());       }       cursor.close(); // you should put this in a finally block       db.close();       return getSongTitles(songIds);     }   } catch (SQLException sqle) {     throw new FetchSongException(""Unable to fetch song ids."", sqle);   } }"
"URL url = new URL(strUrl);                conn = (HttpURLConnection) url.openConnection();             conn.setRequestMethod(""GET"");             conn.setRequestProperty(""Host"", ""myhost.com"");             conn.setRequestProperty(""Authorization"", ""Basic "" + Base64.encodeToString(toencode, Base64.DEFAULT));             conn.setRequestProperty(""User-Agent"", ""Mozilla/5.0 (Macintosh; U; PPC; en-US; rv:1.3.1)"");             conn.setRequestProperty(""Accept-Charset"", ""UTF-8"");              conn.setConnectTimeout (5000) ;              conn.setDoOutput(true);              conn.setDoInput(true);               BufferedInputStream in = new BufferedInputStream(conn.getInputStream());             result = Utilities.readStream(in);              status_code = conn.getResponseCode();              return result;           } catch (MalformedURLException e) {             return e.getMessage();           } catch (ProtocolException e) {                  try {                     status_code = conn.getResponseCode();                 } catch (IOException e1) {                     status_code = -1;                 }                 return e.getMessage();           } catch (IOException e) {                 try {                     status_code = conn.getResponseCode();                 } catch (IOException e1) {                     status_code = -1;                 }                return e.getMessage();           } catch ( Exception e ) {                 try {                     status_code = conn.getResponseCode();                 } catch (IOException e1) {                     status_code = -1;                 }               return e.getMessage();           }              finally             {                 conn = null;             }"
"enum ChartSubTypes{     PercentArea, StackedArea, ChartSubType3; }  enum ChartTypes{     AreaChart(ChartSubTypes.PercentArea, ChartSubTypes.StackedArea),      CharType2(ChartSubTypes.PercentArea, ChartSubTypes.ChartSubType3);      private List&lt;ChartSubTypes&gt; subTypes = new ArrayList&lt;ChartSubTypes&gt;();      private ChartTypes(ChartSubTypes ...chartSubTypes){         for(ChartSubTypes subType : chartSubTypes){             subTypes.add(subType);         }     }      public List&lt;ChartSubTypes&gt; getSubTypes(){         return Collections.unmodifiableList(subTypes);     }    }"
"private String getURL() {     Enumeration&lt;String&gt; lParameters;     String sParameter;     StringBuilder sbURL = new StringBuilder();     Object oRequest = FacesContext.getCurrentInstance().getExternalContext().getRequest();      try     {         if(oRequest instanceof HttpServletRequest)         {             sbURL.append(((HttpServletRequest)oRequest).getRequestURL().toString());              lParameters = ((HttpServletRequest)oRequest).getParameterNames();              if(lParameters.hasMoreElements())             {                 if(!sbURL.toString().contains(""?""))                 {                     sbURL.append(""?"");                 }                 else                 {                     sbURL.append(""&amp;"");                 }             }              while(lParameters.hasMoreElements())             {                 sParameter = lParameters.nextElement();                  sbURL.append(sParameter);                 sbURL.append(""="");                 sbURL.append(URLEncoder.encode(((HttpServletRequest)oRequest).getParameter(sParameter),""UTF-8""));                  if(lParameters.hasMoreElements())                 {                     sbURL.append(""&amp;"");                 }             }         }     }     catch(Exception e)     {         // Do nothing     }      return sbURL.toString(); }"
"String input = ""q={!tag=tagForType}(Type:(ABC OR XyZ OR ORT))(Type:(ABC))"";     Pattern findType = Pattern.compile(""Type:(\\([ \\w]+\\))"");     Pattern extractLists = Pattern.compile(""(\\(| OR )([\\w]+)"");     Matcher typeMatcher = findType.matcher(input);     while (typeMatcher.find()) {         System.out.println(typeMatcher.group(1));          Matcher listMatcher = extractLists.matcher(typeMatcher.group(1));         while (listMatcher.find()) {             System.out.println(listMatcher.group(2));         }     }"
"SortedMap&lt;Project, List&lt;Activity&gt;&gt; myMap = new TreeMap&lt;&gt;( new Comparator&lt;Project&gt;() {   public int compare( Project lhs, Project rhs) {      int r = lhs.unit.unitName.compareTo(rhs.unit.unitName); //note that null checks etc. are omitted for simplicity, don't forget them in your code unless you know for sure that unit and unitName can't be null        if( r == 0 &amp;&amp; !lhs.equals(rhs)) {       //take other properties into account for consistent behavior with equals()       //see ""Update 2"" below     }     return r;   } });"
"public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {      // We use this to get the String representation of the Text data type which is      // more suitable for distributed processing.     String line = value.toString();      // A tokenizer tokenizes (or divides) a sentence into individual words. It is      // deprecated though (not used anymore), so we should use line.split()     // String[] tokens = line.split();     StringTokenizer tokenizer = new StringTokenizer(line);      // The tokenizer gives out a boolean (true or false) based on whether it has      // more tokens (words) or not. If split() is used, we can use a for loop.     // for (String token : tokens) {     //    word.set(token);     while (tokenizer.hasMoreTokens()) {         // I am guessing word is of Text type. Since like I previously said, Text          // data type is more suitable for distributed computing, we are converting          // the String token we have into text type. We have to define the word          // variable somewhere though.         // If split() is used, we can write word.set(token);         word.set(tokenizer.nextToken());     }      // Context is something which lets you pass key-value pairs forward. Once you      // write them using a Context object, the shuffle is performed and after the      // shuffle, they are grouped by key and each key along with its values is      // passed to the reducer.     context.write(word, one); }"
"private ListView lv = (ListView) findViewById(R.id.your_list_view_id);  List&lt;String&gt; your_array_list = new ArrayList&lt;String&gt;(); String path = Environment.getExternalStorageDirectory().toString()+""/Church Application/"";  File f = new File(path); File[] files = f.listFiles(); for (File inFile : files) {     if (inFile.isDirectory()) {         // in here, you can add directory names into an ArrayList and populate your ListView.         your_array_list.add(inFile.getName());     } }   ArrayAdapter&lt;String&gt; arrayAdapter = new ArrayAdapter&lt;String&gt;(                  this,                   android.R.layout.simple_list_item_1,                  your_array_list );           lv.setAdapter(arrayAdapter);"
"File f = new File(""/path/imagefile.jpg"");      //Find a suitable ImageReader     Iterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");     ImageReader reader = null;     while(readers.hasNext()) {         reader = (ImageReader)readers.next();         if(reader.canReadRaster()) {             break;         }     }      //Stream the image file (the original CMYK image)     ImageInputStream input =   ImageIO.createImageInputStream(f);      reader.setInput(input);       //Read the image raster     Raster raster = reader.readRaster(0, null);       //Create a new RGB image     BufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(),      BufferedImage.TYPE_4BYTE_ABGR);       //Fill the new image with the old raster     bi.getRaster().setRect(raster);"
"LinearLayout row= new LinearLayout(context);     EditText input = new EditText(context);     Button submit = new Button(context);     submit.setText(""Submit"");     LayoutParams inputParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);     inputParams.weight = 1;     row.addView(input,inputParams);     LayoutParams buttonParams = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);     buttonParams.weight = 0;     row.addView(submit, buttonParams);"
"Action moveToSelectionStart = new AbstractAction(""moveCaret"") {          @Override         public void actionPerformed(ActionEvent e) {             int selectionStart = textComponent.getSelectionStart();             int selectionEnd = textComponent.getSelectionEnd();             if (selectionStart != selectionEnd) {                 textComponent.setCaretPosition(selectionEnd);                 textComponent.moveCaretPosition(selectionStart);             }         }          public boolean isEnabled() {             return textComponent.getSelectedText() != null;         }     };     Object actionMapKey = ""caret-to-start"";     textComponent.getInputMap().put(KeyStroke.getKeyStroke(""LEFT""), actionMapKey);     textComponent.getActionMap().put(actionMapKey, moveToSelectionStart);"
"public static boolean hasAllPhrasesInInput(List&lt;String&gt; phrases, String input) {     Set&lt;String&gt; phrasesToFind = new HashSet&lt;String&gt;();     StringBuilder sb = new StringBuilder();     for (String phrase : phrases) {         if (sb.length() &gt; 0) {             sb.append('|');         }         sb.append(Pattern.quote(phrase));         phrasesToFind.add(phrase.toLowerCase());     }     Pattern pattern = Pattern.compile(sb.toString(), Pattern.CASE_INSENSITIVE);     Matcher matcher = pattern.matcher(input);     while (matcher.find()) {         phrasesToFind.remove(matcher.group().toLowerCase());         if (phrasesToFind.isEmpty()) {             return true;         }     }     return false; }"
"public class PageByResourceAccessDeniedHandler extends AccessDeniedHandlerImpl {      //~ Instance fields ===================================      /**A Map of Path by Error Page*/     private Map&lt;String, String&gt; errorPagesByPaths;     /**The default error page if any of {@link #errorPagesByRole} matches */     private String defaultErrorPage;      //~ Main Methods ======================================      @Override     public void handle(HttpServletRequest request,             HttpServletResponse response,             AccessDeniedException accessDeniedException) throws IOException,             ServletException {         String errorPage = determineErrorPage(request);         setErrorPage(errorPage);         super.handle(request, response, accessDeniedException);     }      /**      * Searches into the property {@link #errorPagesByRole} for a matching error page      * for the current denied request path.      * @param request current request      * @return a matching error page found in {@link #errorPagesByRole} or {@link #defaultErrorPage}      * if none was found.      */     private String determineErrorPage(HttpServletRequest request) {         AntPathMatcher apm = new AntPathMatcher();          for (String key : errorPagesByPaths.keySet()) {             if(apm.match(key, request.getServletPath())) {                 return errorPagesByPaths.get(key);             }         }         return defaultErrorPage;     }      //~ Getters/Setters/Utilities =========================      public void setErrorPagesByPaths(Map&lt;String, String&gt; errorPagesByPaths) {         for (String key : errorPagesByPaths.keySet()) {             validateErrorPage(errorPagesByPaths.get(key));         }         this.errorPagesByPaths = errorPagesByPaths;     }      public void setDefaultErrorPage(String errorPage) {         validateErrorPage(errorPage);         this.defaultErrorPage = errorPage;     }      /**      * Simple validator based on {@link AccessDeniedHandlerImpl#setErrorPage(String)}      * code. Just verifies if the page doesn't starts with &lt;tt&gt;/&lt;/tt&gt;.      *       * @throws IllegalArgumentException if the errorPage doesn't starts with &lt;tt&gt;/&lt;/tt&gt;.      */     private void validateErrorPage(String errorPage) {         if ((errorPage != null) &amp;&amp; !errorPage.startsWith(""/"")) {             throw new IllegalArgumentException(""errorPage "" + errorPage + "" must begin with '/'"");         }     } }"
"g.setColor(Color.RED);         int scrollBottom = scroll.getInsets().bottom;         int lowerBorderTop = height - scrollBottom;         g.drawLine(x, height - scrollBottom - 1, width - 10,  height - scrollBottom - 1);         g.drawRect(x + 1,  height - scrollBottom, width - 10, 10);         Color oldColor = null;         Component cellRendererComponent = null;         int columnWidths = x ;//- scroll.getViewport().getViewRect().x;         for (int column = 0; column &lt; table.getColumnCount(); column++)         {             TableCellRenderer cellRenderer = table.getCellRenderer(0, column);             cellRendererComponent = cellRenderer.getTableCellRendererComponent(table,                      getFooterValueAt(column), false, false, 0, column);             if (oldColor == null)             {                 oldColor = cellRendererComponent.getBackground();             }             int columnWidth = table.getColumnModel().getColumn(column).getWidth();             cellRendererComponent.setForeground(Color.BLACK);             cellRendererComponent.setBackground(COLORS[column % COLORS.length]);             cellRendererPane.paintComponent(g, cellRendererComponent, scroll, columnWidths,                    lowerBorderTop , columnWidth, table.getRowHeight(), false);             columnWidths += columnWidth;         }         if (cellRendererComponent != null)         {             cellRendererComponent.setBackground(oldColor);         }"
"public static Spanned removeImageSpanObjects(String inStr) {     SpannableStringBuilder spannedStr = (SpannableStringBuilder) Html             .fromHtml(inStr.trim());     Object[] spannedObjects = spannedStr.getSpans(0, spannedStr.length(),             Object.class);     for (int i = 0; i &lt; spannedObjects.length; i++) {         if (spannedObjects[i] instanceof ImageSpan) {             ImageSpan imageSpan = (ImageSpan) spannedObjects[i];             spannedStr.replace(spannedStr.getSpanStart(imageSpan),                     spannedStr.getSpanEnd(imageSpan), """");         }     }     return spannedStr; }"
"public static void printAll(JsonNode node) {      Iterator&lt;String&gt; fieldNames = node.getFieldNames();      while(fieldNames.hasNext()){          String fieldName = fieldNames.next();          JsonNode fieldValue = node.get(fieldName);          if (fieldValue.isObject()) {             System.out.println(fieldName + "" :"");             printAll(fieldValue);          } else {             String value = fieldValue.asText();             System.out.println(fieldName + "" : "" + value);          }      } }"
"Connection.Response res = Jsoup.connect(""http://website.com/login?event=doLogin"")                                .execute();  ...  Document doc = Jsoup.connect(""http://website.com/login?event=doLogin"")                     .cookies(res.cookies())                     .data(""email"", ""my@email"")                     .data(""pass"", ""mypass"")                     .data(name[0], value[0])                     .data(name[1], value[1])                     .data(name[2], value[2])                     .post();"
"public org.docx4j.wml.P addParaAtIndex(MainDocumentPart mdp, String simpleText, int index) {      org.docx4j.wml.ObjectFactory factory = Context.getWmlObjectFactory();     org.docx4j.wml.P  para = factory.createP();      if (simpleText!=null) {         org.docx4j.wml.Text  t = factory.createText();         t.setValue(simpleText);          org.docx4j.wml.R  run = factory.createR();         run.getContent().add(t);           para.getContent().add(run);      }      mdp.getContent().add(index, para);      return para; }"
"public class MainMenu {     private CardLayout layout;     private Frame frame;      public MainMenu(final Frame frame) {          this.frame = frame;          this.layout = (CardLayout)frame.getLayout();           JButton buttonSingle = new JButton(""Single"");               buttonSingle.setAlignmentX(Component.CENTER_ALIGNMENT);          buttonSingle.addActionListener(new ActionListener(){              @Override              public void actionPerformed(ActionEvent e) {                  layout.show(frame, ""single"");              }          });     } }"
