code
"static boolean validEmail(String email) {     // editing to make requirements listed     // return email.matches(""[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}"");     return email.matches(""[A-Z0-9._%+-][A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{3}""); }  void checkEmails() {     for(String email : emailAddresses) {         if(validEmail(email)) {              // it's a good email - do something good with it         }         else {              // it's a bad email - do something... bad to it? sounds dirty...         }     } }"
"public String registerUser(UserRegistrationFormBean userRegistrationFormBean,                            RequestContext requestContext,                            ExternalContext externalContext) {      try {         Locale userLocale = requestContext.getExternalContext().getLocale();         this.userService.createNewUser(userRegistrationFormBean, userLocale, Constants.SYSTEM_USER_ID);         String emailAddress = userRegistrationFormBean.getChooseEmailAddressFormBean().getEmailAddress();         String password = userRegistrationFormBean.getChoosePasswordFormBean().getPassword();         doAutoLogin(emailAddress, password, (HttpServletRequest) externalContext.getNativeRequest());         return ""success"";      } catch (EmailAddressNotUniqueException e) {         MessageResolver messageResolvable                  = new MessageBuilder().error()                                       .source(UserRegistrationFormBean.PROPERTYNAME_EMAIL_ADDRESS)                                       .code(""userRegistration.emailAddress.not.unique"")                                       .build();         requestContext.getMessageContext().addMessage(messageResolvable);         return ""error"";     }  }   private void doAutoLogin(String username, String password, HttpServletRequest request) {      try {         // Must be called from request filtered by Spring Security, otherwise SecurityContextHolder is not updated         UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, password);         token.setDetails(new WebAuthenticationDetails(request));         Authentication authentication = this.authenticationProvider.authenticate(token);         logger.debug(""Logging in with [{}]"", authentication.getPrincipal());         SecurityContextHolder.getContext().setAuthentication(authentication);     } catch (Exception e) {         SecurityContextHolder.getContext().setAuthentication(null);         logger.error(""Failure in autoLogin"", e);     }  }"
"class EnumUtils {     String getTemplate(type) {       ""template"" + type            }      String getFrom(type) {             }      String getTo(type) {             }      String getBcc(type) {             } }  enum EmailTypeAdministration {     REMINDER_ADMIN('reminderForAdmin'),     REMINDER_PRODUCTION('reminderForProduction')      @Delegate EnumUtils enumUtils = new EnumUtils()     EmailTypeAdministration(str) {}  }  enum EmailTypeClients {     REMINDER_MANAGEMENT('reminderForManagement'),     REMINDER_CUSTOMER('reminderForCustomer')      @Delegate EnumUtils enumUtils = new EnumUtils()     EmailTypeClients(str) {} }  EmailTypeAdministration emailTypeAdmin = EmailTypeAdministration.REMINDER_ADMIN assert 'templateParam' == emailTypeAdmin.getTemplate('Param')"
"String url = ""http://www.website.net/folder/connect.php""; HttpPost method = new HttpPost(url); HttpClient httpClient = new DefaultHttpClient(); List&lt;BasicNameValuePair&gt; formparams = new ArrayList&lt;BasicNameValuePair&gt;(); formparams.add(new BasicNameValuePair(""email"", email.toString())); formparams.add(new BasicNameValuePair(""password"", password.toString())); formparams.add(new BasicNameValuePair(""reporter"", senderName)); formparams.add(new BasicNameValuePair(""reported"", targetName)); formparams.add(new BasicNameValuePair(""reason"", reasonString)); UrlEncodedFormEntity entity = null; try {     entity = new UrlEncodedFormEntity(formparams, ""UTF-8""); } catch (UnsupportedEncodingException e) {     e.printStackTrace(); } method.setEntity(entity); HttpResponse httpResponse = httpClient.execute(method);"
"select person.id, person.name, email.email from person person left join email on person.id = email.person_id  ...  Map&lt;Long, Person&gt; personsById = new HashMap&lt;&gt;(); while (rs.next()) {     Long id = rs.getLong(""id"");     String name = rs.getString(""name"");     String email = rs.getString(""email"");     Person person = personsById.get(id);     if (person == null) {         person = new Person(id, name);         personsById.put(person.getId(), person);     }     person.addEmail(email); } Collection&lt;Person&gt; persons = personsById.values();"
"private String outgoingMailServer = ""smtp.mail.yahoo.com"";     boolean debug = false;  //set the host outgoing mail smtp server. Properties properties = new Properties(); properties.put(""mail.smtp.host"", outgoingMailServer); properties.put(""mail.smtps.auth"", ""true"");  Authenticator authenticator = new SMTPAuthentication(); Session session = Session.getDefaultInstance(properties, authenticator); session.setDebug(debug);  //create a message session Message msg = new MimeMessage(session);  //set the addresses, to and from InternetAddress fromAddress; fromAddress = new InternetAddress(emailFromAddress); msg.setFrom(fromAddress);  //since mail can be sent to more than one recipient, create loop //to add all addresses into InternetAddress, addressTo. //InternetAddress[] toAddress = new InternetAddress[recipients.length]; InternetAddress[] toAddress = new InternetAddress[recipients.size()]; for (int i = 0; i &lt; recipients.size(); i++) {     toAddress[i] = new InternetAddress(recipients.get(i)); } msg.setRecipients(Message.RecipientType.TO, toAddress);  //set the subject and content type msg.setSubject(emailSubject); msg.setContent(actualMessage, ""text/html; charset=utf-8"");  //send the email Transport transport = session.getTransport(""smtps""); transport.connect(outgoingMailServer, 465, emailUserName, emailPassword); transport.sendMessage(msg, msg.getAllRecipients()); transport.close();  //email sent //note, this does not necessarily mean the email was delivered. The //sysetm has no control over that emailSent = true;"
"final SpannableString s = new SpannableString(""Please send any questions to email@fake.com"");  //added a TextView        final TextView tx1=new TextView(this); tx1.setText(s); tx1.setAutoLinkMask(RESULT_OK); tx1.setMovementMethod(LinkMovementMethod.getInstance());  Linkify.addLinks(s, Linkify.EMAIL_ADDRESSES); AlertDialog.Builder builder = new AlertDialog.Builder(this); builder.setTitle(""Warning!"")   .setCancelable(false)   .setPositiveButton(""Accept"", new DialogInterface.OnClickListener() {       public void onClick(DialogInterface dialog, int id) {        }       })   .setNegativeButton(""Decline"", new DialogInterface.OnClickListener() {       public void onClick(DialogInterface dialog, int id) {                finish();       }      })   .setView(tx1)   .show();"
"String host = ""smtp.gmail.com"";     String from = ""username"";     String pass = ""password"";     Properties props = System.getProperties();     props.put(""mail.smtp.starttls.enable"", ""true""); // added this line     props.put(""mail.smtp.host"", host);     props.put(""mail.smtp.user"", from);     props.put(""mail.smtp.password"", pass);     props.put(""mail.smtp.port"", ""587"");     props.put(""mail.smtp.auth"", ""true"");      String[] to = {""to@gmail.com""}; // added this line      Session session = Session.getDefaultInstance(props, null);     MimeMessage message = new MimeMessage(session);     message.setFrom(new InternetAddress(from));      InternetAddress[] toAddress = new InternetAddress[to.length];      // To get the array of addresses     for( int i=0; i &lt; to.length; i++ ) { // changed from a while loop         toAddress[i] = new InternetAddress(to[i]);     }     System.out.println(Message.RecipientType.TO);      for( int i=0; i &lt; toAddress.length; i++) { // changed from a while loop         message.addRecipient(Message.RecipientType.TO, toAddress[i]);     }     message.setSubject(""sending in a group"");     message.setText(""Welcome to JavaMail"");     Transport transport = session.getTransport(""smtp"");     transport.connect(host, from, pass);     transport.sendMessage(message, message.getAllRecipients());     transport.close();"
"Connection.Response res = Jsoup.connect(""http://website.com/login?event=doLogin"")                                .execute();  ...  Document doc = Jsoup.connect(""http://website.com/login?event=doLogin"")                     .cookies(res.cookies())                     .data(""email"", ""my@email"")                     .data(""pass"", ""mypass"")                     .data(name[0], value[0])                     .data(name[1], value[1])                     .data(name[2], value[2])                     .post();"
"public class RemoteDBAdapter {       public String register(String email, String password) throws Exception     {         RestClient c = new RestClient(""http://myurl/Account/Register"");         c.AddHeader(""Accept"", ""application/json"");         c.AddHeader(""Content-type"", ""application/json"");         c.AddParam(""Email"", email);         c.AddParam(""Password"", password);          c.Execute(RequestMethod.POST);          JSONObject key = new JSONObject(c.getResponse());          return key.getString(""status"");       }  }"
"HtmlEmail email = new HtmlEmail();     //email.setDebug(debugMode);     email.setBounceAddress(""bouce@domain.biz"");     email.setHostName(""mySMTPHost"");       email.setFrom(""myAddress@mydomain.com"");     email.addTo(emailAddress);     email.addBcc(""bccAddres"");      email.setSubject(""Your Subject"");     email.setAuthentication(""recipient@snailmail.org"", ""password"");     email.setSSL(true);     email.setSmtpPort(465);     email.setHtmlMsg(html);  public static void sendMail(org.apache.commons.mail.HtmlEmail email) {            email.send(); }"
"public String receiveCall(CellPhone sender) {             // returns a String of the form:             // owner's name "" is receiving a call from "" sender's name             String receivingCall = ownerName + "" is receiving a call from "" + sender.getName();             return receivingCall;     }  public String call(CellPhone receiver) {             // returns a String by using the receiver to invoke receiveCall             // while passing in the current phone             String invokingReceiveCall = receiver.receiveCall(this);             return invokingReceiveCall;     }  public String getName() {     return ownerName; }"
"public boolean isEmailValid(String email)     {          String regExpn =              ""^(([\\w-]+\\.)+[\\w-]+|([a-zA-Z]{1}|[\\w-]{2,}))@""                  +""((([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?""                    +""[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.""                    +""([0-1]?[0-9]{1,2}|25[0-5]|2[0-4][0-9])\\.([0-1]?""                    +""[0-9]{1,2}|25[0-5]|2[0-4][0-9])){1}|""                    +""([a-zA-Z]+[\\w-]+\\.)+[a-zA-Z]{2,4})$"";       CharSequence inputStr = email;       Pattern pattern = Pattern.compile(regExpn,Pattern.CASE_INSENSITIVE);      Matcher matcher = pattern.matcher(inputStr);       if(matcher.matches())         return true;      else         return false; }"
"public int sendMail(String reciever_email, String subject, String body) {     final String username = ""YOUR USER EMAIL"";     final String password = ""PASSWORD"";     Properties props = new Properties();     props.put(""mail.smtp.user"", username);     props.put(""mail.smtp.host"", ""smtp.gmail.com"");     props.put(""mail.smtp.port"", ""25"");     props.put(""mail.debug"", ""true"");     props.put(""mail.smtp.auth"", ""true"");     props.put(""mail.smtp.starttls.enable"", ""true"");     props.put(""mail.smtp.EnableSSL.enable"", ""true"");     props.setProperty(""mail.smtp.socketFactory.class"", ""javax.net.ssl.SSLSocketFactory"");     props.setProperty(""mail.smtp.socketFactory.fallbac k"", ""false"");     props.setProperty(""mail.smtp.port"", ""465"");     props.setProperty(""mail.smtp.socketFactory.port"", ""465"");     Session session = Session.getInstance(props,             new javax.mail.Authenticator() {         protected PasswordAuthentication getPasswordAuthentication() {             return new PasswordAuthentication(username, password);         }     });      try {         Message message = new MimeMessage(session);         message.setFrom(new InternetAddress(username));         message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(reciever_email));         message.setSubject(subject);         message.setText(body);         Multipart multipart = new MimeMultipart(""related"");         BodyPart htmlPart = new MimeBodyPart();         htmlPart.setContent(""&lt;html&gt;HELLO&lt;/html&gt;"", ""text/html"");          multipart.addBodyPart(htmlPart);         message.setContent(multipart);         Transport.send(message);         return 1;     } catch (Exception e) {         return 0;      } }"
"using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Net; using System.IO;  namespace ConsoleApplication2 {     class Program     {          static void Main(string[] args)         {             getAuth();              Console.ReadLine();         }          public static void getAuth()         {              //put in the username and password             string postData = ""Email=YOURUSERNAME@gmail.com&amp;Passwd=YOURPASSWORD&amp;service=reader&amp;source=some-uniqueapp-v1"";              WebRequest authReq = WebRequest.Create(""https://www.google.com/accounts/ClientLogin"");             authReq.ContentType = ""application/x-www-form-urlencoded"";             authReq.Method = ""POST"";              byte[] bytes = Encoding.ASCII.GetBytes(postData);             authReq.ContentLength = bytes.Length;             Stream os = authReq.GetRequestStream();             os.Write(bytes, 0, bytes.Length);              WebResponse resp = authReq.GetResponse();              StreamReader sr = new StreamReader(resp.GetResponseStream());              string responseContent = sr.ReadToEnd().Trim();              string[] responseSpilt = responseContent.Split('=');              string authticket = responseSpilt[3];              Console.WriteLine(""Auth = "" + authticket);              sr.Close();              getToken(authticket);          }          public static void getToken(string auth)         {              WebRequest tokenReq = WebRequest.Create(""https://www.google.com/reader/api/0/token"");             tokenReq.ContentType = ""application/x-www-form-urlendcoded"";             tokenReq.Method = ""GET"";              tokenReq.Headers.Add(""Authorization"", ""GoogleLogin auth="" + auth);              WebResponse response = tokenReq.GetResponse();             if (response == null) return;              StreamReader sr = new StreamReader(response.GetResponseStream());             string respContent = sr.ReadToEnd().Trim();              string[] respSplit = respContent.Split('/');              string token = respSplit[2];              Console.WriteLine("" "");              Console.WriteLine(""Token = "" + token);              sr.Close();          }     } }"
"Transport transport = session.getTransport(""smtp""); transport.connect(this._properties.getProperty(""mail.smtp.host""),  Integer.parseInt(this._properties.getProperty(""mail.smtp.port"")),     this._properties.getProperty(""mail.smtp.user""),     this._properties.getProperty(""mail.smtp.password""));  Address[] addr = new Address[this._addresses.size()]; for (int i = 0, c = this._addresses.size(); i &lt; c; i++) {     addr[i] = new InternetAddress(this._addresses.get(i)); }  transport.sendMessage(message, addr);"
"try {   // Create a default MimeMessage object.   new MimeMessage(session).with { message -&gt;     // From, Subject and Content     from = new InternetAddress( mailProp.from )     subject = ""My Subject!""     setContent createMessage(), 'text/html'      // Add recipients     addRecipient( Message.RecipientType.TO, new InternetAddress( mailProp.to ) )      // Send the message     Transport.send( message )      println ""Sent successfully""   } } catch( MessagingException mex ) {     mex.printStackTrace() }"
"String uid = """";         String name = """";         String display = """";         String email = """";         String pw = """";         String created = """";         String updated = """";          if(c.has(TAG_ID))            uid = c.getString(TAG_ID);          if(c.has(TAG_NAME))            name = c.getString(TAG_NAME);          if(c.has(TAG_DISPLAY))            display = c.getString(TAG_DISPLAY);          if(c.has(TAG_EMAIL))            email = c.getString(TAG_EMAIL);          if(c.has(TAG_PW))            pw = c.getString(TAG_PW);          if(c.has(TAG_CREATED))            created = c.getString(TAG_CREATED);          if(c.has(TAG_UPDATED))            updated = c.getString(TAG_UPDATED);"
"Address[] address = new Address[1];                     try {                         address[0] = new Address(email,name);                     } catch (AddressException e1) {                         // TODO Auto-generated catch block                         e1.printStackTrace();                     }                     byte[] data = readFile();                     Multipart multipart = new Multipart();                     SupportedAttachmentPart attach = new SupportedAttachmentPart(multipart,                             ""application/x-example"", ""test.txt"", data);                     multipart.addBodyPart(attach);                     Message msg = new Message();                     // add the recipient list to the message                     try {                         msg.addRecipients(Message.RecipientType.TO, address);                          // set a subject for the message                         msg.setSubject(""Mail from mobile"");                         msg.setContent(multipart);                     } catch (MessagingException e1) {                         // TODO Auto-generated catch block                         e1.printStackTrace();                     }                       try {                         Transport.send(msg);                     } catch (MessagingException e) {                         System.out.println(e.getMessage());                     } private static byte[] readFile() {     String fName =""file:///store/home/user/test.txt"";     byte[] data = null;     FileConnection fconn = null;     DataInputStream is = null;     try {             fconn = (FileConnection) Connector.open(fName, Connector.READ_WRITE);             is = fconn.openDataInputStream();                          data = IOUtilities.streamToBytes(is);     } catch (IOException e) {             System.out.println(e.getMessage());     } finally {             try {                     if (null != is)                              is.close();                     if (null != fconn)                             fconn.close();             } catch (IOException e) {                     System.out.println(e.getMessage());             }     }     return data; }"
"String emailaddress = request.getParameter(""emailaddress""); String projectid = request.getParameter(""projectid""); String charset = ""UTF-8""; String query = String.format(""emailaddress=%s&amp;projectid=%s"",      URLEncoder.encode(emailaddress, charset),     URLEncoder.encode(projectid, charset));  URLConnection connection = new URL(""http://abhishek:15070/abc/login.action"").openConnection(); connection.setDoOutput(true); connection.setRequestProperty(""Accept-Charset"", charset); connection.setRequestProperty(""Content-Type"", ""application/x-www-form-urlencoded;charset="" + charset); try {     connection.getOutputStream().write(query.getBytes(charset)); } finally {     connection.getOutputStream().close(); } InputStream response = connection.getInputStream(); // ..."
"Properties properties = System.getProperties();     properties.put(""mail.smtp.host"", server);     properties.put(""mail.smtp.port"", """" + port);      Session session = Session.getInstance(properties);     Transport transport = session.getTransport(""smtp"");      transport.connect(server, username, password);      for (int i = 0; i &lt; count; i++) {          Message message = new MimeMessage(session);         message.setFrom(new InternetAddress(from));         InternetAddress[] address = {new InternetAddress(to)};         message.setRecipients(Message.RecipientType.TO, address);          message.setSubject(subject + ""JavaMail API"");         message.setSentDate(new Date());          setHTMLContent(message);         message.saveChanges();         transport.sendMessage(message, address);      }      transport.close();"
"String json = ""[{\""username\"":\""Hello\"",\""email\"":\""hello@email.com\"",\""credits\"":\""100\"",\""twitter_username\"":\""\""},{\""username\"":\""Goodbye\"",\""email\"":\""goodbye@email.com\"",\""credits\"":\""0\"",\""twitter_username\"":\""\""}]""; JsonArray jArray = new JsonParser().parse(json).getAsJsonArray(); for (int i=0;i&lt;jArray.size();i++) {     JsonObject jsonObject = jArray.get(i).getAsJsonObject();     System.out.println(jsonObject.get(""username""));     System.out.println(jsonObject.get(""email""));     System.out.println(jsonObject.get(""credits""));     System.out.println(jsonObject.get(""twitter_username""));     System.out.println(""*********""); }"
"String emailpath = ""//emailAddress""; String emailvalue = "".//value"";  XPathFactory xPathFactory = XPathFactory.newInstance(); XPath xpath = xPathFactory.newXPath(); Document document; public XpathStuff(String file) throws ParserConfigurationException, IOException, SAXException {     DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();     DocumentBuilder builder = docFactory.newDocumentBuilder();      BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));     document = builder.parse(bis);      NodeList nodeList = getNodeList(document, emailpath);     for(int i = 0; i &lt; nodeList.getLength(); i++){         System.out.println(getValue(nodeList.item(i), emailvalue));     }     bis.close();         }  public NodeList getNodeList(Document doc, String expr) {     try {         XPathExpression pathExpr = xpath.compile(expr);         return (NodeList) pathExpr.evaluate(doc, XPathConstants.NODESET);     } catch (XPathExpressionException e) {         e.printStackTrace();     }     return null; }   //extracts the String value for the given expression private String getValue(Node n, String expr) {     try {         XPathExpression pathExpr = xpath.compile(expr);         return (String) pathExpr.evaluate(n,                 XPathConstants.STRING);     } catch (XPathExpressionException e) {         e.printStackTrace();     }     return null; }"
"import javax.mail.*;   import javax.mail.internet.*;   import javax.activation.*;   import java.io.*;   import java.util.Properties;   public class MailClient   {         public void sendMail(String mailServer, String from, String to,                               String subject, String messageBody,                               String[] attachments) throws  MessagingException, AddressException       {           // Setup mail server           Properties props = System.getProperties();           props.put(""mail.smtp.host"", mailServer);            // Get a mail session           Session session = Session.getDefaultInstance(props, null);            // Define a new mail message           Message message = new MimeMessage(session);           message.setFrom(new InternetAddress(from));           message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));           message.setSubject(subject);            // Create a message part to represent the body text           BodyPart messageBodyPart = new MimeBodyPart();           messageBodyPart.setText(messageBody);            //use a MimeMultipart as we need to handle the file attachments           Multipart multipart = new MimeMultipart();            //add the message body to the mime message           multipart.addBodyPart(messageBodyPart);            // add any file attachments to the message           addAtachments(attachments, multipart);            // Put all message parts in the message           message.setContent(multipart);            // Send the message           Transport.send(message);         }        protected void addAtachments(String[] attachments, Multipart multipart)                       throws MessagingException, AddressException       {           for(int i = 0; i&lt;= attachments.length -1; i++)           {               String filename = attachments[i];               MimeBodyPart attachmentBodyPart = new MimeBodyPart();                //use a JAF FileDataSource as it does MIME type detection               DataSource source = new FileDataSource(filename);               attachmentBodyPart.setDataHandler(new DataHandler(source));                //assume that the filename you want to send is the same as the               //actual file name - could alter this to remove the file path               attachmentBodyPart.setFileName(filename);                //add the attachment               multipart.addBodyPart(attachmentBodyPart);           }       }        public static void main(String[] args)       {           try           {               MailClient client = new MailClient();               String server=""pop3.mydomain.com"";               String from=""myname@mydomain.com"";               String to = ""someuser@somewhere.com"";               String subject=""Test"";               String message=""Testing"";               String[] filenames =  {""c:\somefile.txt""};                client.sendMail(server,from,to,subject,message,filenames);           }           catch(Exception e)           {               e.printStackTrace(System.out);           }        }   }"
"public insertUser(String name, String email) {    Connection conn = null;    PreparedStatement stmt = null;    try {       conn = setupTheDatabaseConnectionSomehow();       stmt = conn.prepareStatement(""INSERT INTO person (name, email) values (?, ?)"");       stmt.setString(1, name);       stmt.setString(2, email);       stmt.executeUpdate();    }    finally {       try {          if (stmt != null) { stmt.close(); }       }       catch (Exception e) {          // log this error       }       try {          if (conn != null) { conn.close(); }       }       catch (Exception e) {          // log this error       }    } }"
"private String getTextFromMessage(Message message) throws MessagingException, IOException {     String result = """";     if (message.isMimeType(""text/plain"")) {         result = message.getContent().toString();     } else if (message.isMimeType(""multipart/*"")) {         MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();         result = getTextFromMimeMultipart(mimeMultipart);     }     return result; }  private String getTextFromMimeMultipart(         MimeMultipart mimeMultipart)  throws MessagingException, IOException{     String result = """";     int count = mimeMultipart.getCount();     for (int i = 0; i &lt; count; i++) {         BodyPart bodyPart = mimeMultipart.getBodyPart(i);         if (bodyPart.isMimeType(""text/plain"")) {             result = result + ""\n"" + bodyPart.getContent();             break; // without break same text appears twice in my tests         } else if (bodyPart.isMimeType(""text/html"")) {             String html = (String) bodyPart.getContent();             result = result + ""\n"" + org.jsoup.Jsoup.parse(html).text();         } else if (bodyPart.getContent() instanceof MimeMultipart){             result = result + getTextFromMimeMultipart((MimeMultipart)bodyPart.getContent());         }     }     return result; }"
"if (this.authenticationService.authenticationExists(userName) == false) {    this.authenticationService.createAuthentication(userName, password.toCharArray());     PropertyMap ppOne = new PropertyMap(4);    ppOne.put(ContentModel.PROP_USERNAME, userName);    ppOne.put(ContentModel.PROP_FIRSTNAME, ""firstName"");    ppOne.put(ContentModel.PROP_LASTNAME, ""lastName"");    ppOne.put(ContentModel.PROP_EMAIL, userName+""@example.com"");    ppOne.put(ContentModel.PROP_JOBTITLE, ""jobTitle"");     this.personService.createPerson(ppOne); }"
"public class SendMail {     public SendMail() throws MessagingException {         String host = ""smtp.gmail.com"";         String Password = ""............"";         String from = ""XXXXXXXXXX@gmail.com"";         String toAddress = ""YYYYYYYYYYYYY@gmail.com"";         String filename = ""C:/SendAttachment.java"";         // Get system properties         Properties props = System.getProperties();         props.put(""mail.smtp.host"", host);         props.put(""mail.smtps.auth"", ""true"");         props.put(""mail.smtp.starttls.enable"", ""true"");         Session session = Session.getInstance(props, null);          MimeMessage message = new MimeMessage(session);          message.setFrom(new InternetAddress(from));          message.setRecipients(Message.RecipientType.TO, toAddress);          message.setSubject(""JavaMail Attachment"");          BodyPart messageBodyPart = new MimeBodyPart();          messageBodyPart.setText(""Here's the file"");          Multipart multipart = new MimeMultipart();          multipart.addBodyPart(messageBodyPart);          messageBodyPart = new MimeBodyPart();          DataSource source = new FileDataSource(filename);          messageBodyPart.setDataHandler(new DataHandler(source));          messageBodyPart.setFileName(filename);          multipart.addBodyPart(messageBodyPart);          message.setContent(multipart);          try {             Transport tr = session.getTransport(""smtps"");             tr.connect(host, from, Password);             tr.sendMessage(message, message.getAllRecipients());             System.out.println(""Mail Sent Successfully"");             tr.close();          } catch (SendFailedException sfe) {              System.out.println(sfe);         }     }     public static void main(String args[]){         try {             SendMail sm = new SendMail();         } catch (MessagingException ex) {             Logger.getLogger(SendMail.class.getName()).log(Level.SEVERE, null, ex);         }     } }"
"import org.apache.commons.mail.*;  public class GmailEmailWorking {      public static void main(String[] args) {         String myEmailId = ""xyz@gmail.com"";         String myPassword = ""password"";         String senderId = ""xyz@yahoo.com"";         try {             MultiPartEmail email = new MultiPartEmail();             email.setSmtpPort(587);             email.setAuthenticator(new DefaultAuthenticator(myEmailId, myPassword));             email.setDebug(true);             email.setHostName(""smtp.gmail.com"");             email.setFrom(myEmailId);             email.setSubject(""Hi"");             email.setMsg(""This is a test mail ... :-)\n\nPlease check attachements that I have sent.\n\nThanks,\nFahim"");             email.addTo(senderId);             email.setTLS(true);              EmailAttachment attachment = new EmailAttachment();             attachment.setPath(""/Users/fahadparkar/Desktop/Fahim/tables.xlsx"");             attachment.setDisposition(EmailAttachment.ATTACHMENT);             attachment.setDescription(""Excel"");             attachment.setName(""tables.xlsx"");             email.attach(attachment);              email.send();             System.out.println(""Mail sent!"");         } catch (Exception e) {             System.out.println(""Exception :: "" + e);         }     } }"
"javax.mail.Multipart multipart = new MimeMultipart();  javax.mail.internet.MimeBodyPart messageBodyPart =   new  javax.mail.internet.MimeBodyPart();  multipart.addBodyPart(messageBodyPart);  javax.activation.DataSource source = new FileDataSource(""C:\\Notes\\new mail.msg"");  messageBodyPart.setDataHandler( new DataHandler(source)); messageBodyPart.setFileName(""new mail.msg"");  multipart.addBodyPart(messageBodyPart); msg.setContent(multipart);   MimeBodyPart part = new MimeBodyPart();  part.setText(text);  multipart.addBodyPart(part);"
