code
"String data = ""temp/*.jpg, usr/*.pdf, var/lib/*.so, tmp/*, usr/*, usr/*.*"";  Pattern p = Pattern         .compile(""(?&lt;path&gt;(\\w+/)+)((?&lt;name&gt;\\w+|[*]))?([.](?&lt;extension&gt;\\w+|[*]))?"");  Matcher m = p.matcher(data); while (m.find()) {     System.out.println(""data="" + m.group());     System.out.println(""path="" + m.group(""path""));     System.out.println(""name="" + m.group(""name""));     System.out.println(""extension="" + m.group(""extension""));     System.out.println(""------------""); }"
"Path p = Paths.get(""/your/file""); // where you want to write FileSystem fileSystem = FileSystems.getDefault(); Iterable&lt;FileStore&gt; iterable = fileSystem.getFileStores();  Iterator&lt;FileStore&gt; it = iterable.iterator(); // iterate the FileStore instances while(it.hasNext()) {     FileStore fileStore = it.next();     long sizeAvail = fileStore.getUsableSpace(); // or maybe getUnallocatedSpace()     if (Files.getFileStore(p).equals(fileStore) { // your Path belongs to this FileStore         if (sizeAvail &gt; theSizeOfBytesYouWantToWrite) {             // do your thing         }     } }"
"public void readFile(String absoluteFilePath){     ByteBuffer buf = ByteBuffer.allocate(2+4+8) // creating a buffer that is suited for data you are reading     Path path = Paths.get(absoluteFilePath);      try(FileChannel fileChannel = (FileChannel)Files.newByteChannel(path,Enum.setOf(READ))){         while(true){             int bytesRead = fileChannel.read(buf);             if(bytesRead==-1){                 break;             }             buf.flip(); //get the buffer ready for reading.             char c = buf.asCharBuffer().readChar(); // create a view buffer and read char             buf.position(buf.position() + 2); //now, lets go to the int             int i = buf.asIntBuffer().readInt(); //read the int             buf.position(buf.position()+ 4); //now, lets go for the double.             double d = buf.asDoubleBuffer().readDouble();             System.out.println(""Character: "" + c + "" Integer: "" + i + "" Double: "" + d);             buf.clear();         }     }catch(IOException e){         e.printStackTrace();     }// AutoClosable so no need to explicitly close }"
"try{         WebElement byId = driver.findElement(By.id(""by-id""));          System.out.println(byId.getTagName());          System.out.println(""get the text for web element with id='by-id' "");         System.out.println(""------------------------------------------------------------"");         System.out.println(byId.getText());         System.out.println(""------------------------------------------------------------"");         System.out.println(byId.getAttribute(""id""));         System.out.println(byId.getCssValue(""font-size""));     } }"
"public void readFromFile(String fileName, ListInterface&lt;User&gt; userList) {         String oneLine, oneLine2;         User user;         try {             /*              * Create a FileWriter object that handles the low-level details of              * reading              */             FileReader theFile = new FileReader(fileName);              /*              * Create a BufferedReader object to wrap around the FileWriter              * object              */             /* This allows the use of high-level methods like readline */             BufferedReader fileIn = new BufferedReader(theFile);              /* Read the first line of the file */             oneLine = fileIn.readLine();             /*              * Read the rest of the lines of the file and output them on the              * screen              */             while (oneLine != null) /* A null string indicates the end of file */             {                 oneLine2 = fileIn.readLine();                 user = new User(oneLine, oneLine2);                 oneLine = fileIn.readLine();                 userList.append(user);             }              /* Close the file so that it is no longer accessible to the program */             fileIn.close();         }          /*          * Handle the exception thrown by the FileReader constructor if file is          * not found          */         catch (FileNotFoundException e) {             System.out.println(""Unable to locate the file: "" + fileName);         }          /* Handle the exception thrown by the FileReader methods */         catch (IOException e) {             System.out.println(""There was a problem reading the file: ""                     + fileName);         }     } /* End of method readFromFile */       public void writeToFile(String fileName, ListInterface&lt;User&gt; userList) {         try {             /*              * Create a FileWriter object that handles the low-level details of              * writing              */             FileWriter theFile = new FileWriter(fileName);              /* Create a PrintWriter object to wrap around the FileWriter object */             /* This allows the use of high-level methods like println */             PrintWriter fileOut = new PrintWriter(theFile);              /* Print some lines to the file using the println method */             for (int i = 1; i &lt;= userList.size(); i++) {                 fileOut.println(userList.get(i).getUsername());                 fileOut.println(userList.get(i).getPassword());             }             /* Close the file so that it is no longer accessible to the program */             fileOut.close();         }          /* Handle the exception thrown by the FileWriter methods */         catch (IOException e) {             System.out.println(""Problem writing to the file"");         }     } /* End of method writeToFile */"
"import static java.nio.file.FileVisitResult.*;  public static class PrintFiles     extends SimpleFileVisitor&lt;Path&gt; {      // Print information about     // each type of file.     @Override     public FileVisitResult visitFile(Path file,                                    BasicFileAttributes attr) {         if (attr.isSymbolicLink()) {             System.out.format(""Symbolic link: %s "", file);         } else if (attr.isRegularFile()) {             System.out.format(""Regular file: %s "", file);         } else {             System.out.format(""Other: %s "", file);         }         System.out.println(""("" + attr.size() + ""bytes)"");         return CONTINUE;     }      // Print each directory visited.     @Override     public FileVisitResult postVisitDirectory(Path dir,                                           IOException exc) {         System.out.format(""Directory: %s%n"", dir);         return CONTINUE;     }      // If there is some error accessing     // the file, let the user know.     // If you don't override this method     // and an error occurs, an IOException      // is thrown.     @Override     public FileVisitResult visitFileFailed(Path file,                                        IOException exc) {         System.err.println(exc);         return CONTINUE;     } }"
"Path folder = Paths.get(System.getProperty(&quot;upload.location&quot;)); String filename = FilenameUtils.getBaseName(uploadedFile.getName());  String extension = FilenameUtils.getExtension(uploadedFile.getName()); Path file = Files.createTempFile(folder, filename + &quot;-&quot;, &quot;.&quot; + extension);  try (InputStream input = uploadedFile.getInputStream()) {     Files.copy(input, file, StandardCopyOption.REPLACE_EXISTING); }  String uploadedFileName = file.getFileName().toString(); // Now store it in DB."
"package mypackage;  import org.opencms.file.*; import org.opencms.main.*; import org.opencms.scheduler.I_CmsScheduledJob; import java.text.SimpleDateFormat; import java.util.*;   public class BuildTagCloud implements I_CmsScheduledJob {    private final String indexaddress = ""address/of/your/index/folder""; // something like ../webapps/opencms/WEB-INF/index/nameOfIndex   private final String tagsFile = ""address""; // part of my template; it's where I store the tag cloud   private final int numTerms = 10; // number of terms in the tag cloud                                                                        public String launch(CmsObject object, java.util.Map parameters) throws java.lang.Exception {       Cloud cloud = new Cloud(indexaddress, numTerms);        Calendar cal = Calendar.getInstance();       SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");       String data;       data = ""&lt;div style=\""border-top: 3px solid #000099; padding-top: 6px; margin-top: 17px;\""&gt;&lt;span style=\""font-weight: bold; font-size: 11px; color: #000099;\""&gt;Tag cloud&lt;/span&gt;&lt;br /&gt;"";       data += sdf.format(cal.getTime()) + ""&lt;br /&gt;"";        try {           List&lt;TermInfo&gt; list = cloud.getCloud();            for(int i = 0; i&lt;list.size(); i++) {               data += ""&lt;br /&gt;"" + i + "". "" + list.get(i).term.text() + "" ... "" + list.get(i).docFreq; // list.get(i).docFreq           }        } catch (Exception e) {            data += e.getMessage();           data += ""&lt;br /&gt;"";        } finally {            data+=""&lt;/div&gt;"";       }        writeAndPublishResource(object, tagsFile, data);        return ""OK"";   }    private void writeAndPublishResource(CmsObject object, String resouce, String data) throws java.lang.Exception {       object.loginUser(""administrator's user name"", ""and his password"");        CmsRequestContext cmsContext = object.getRequestContext();       CmsProject curProject = cmsContext.currentProject();        if(curProject.isOnlineProject()){             CmsProject offlineProject = object.readProject(""Name of the project"");             cmsContext.setCurrentProject(offlineProject);       }       CmsResource res = object.readResource(resouce);       object.lockResource(resouce);       CmsFile file = object.readFile(res);       file.setContents(data.getBytes());       object.writeFile(file);       OpenCms.getPublishManager().publishResource(object, resouce);       object.unlockResource(resouce);     }  }"
"public class DownloadPDF extends HttpServlet {  public void doGet(HttpServletRequest req, HttpServletResponse res)         throws ServletException, IOException {          //Extract some request parameters, fetch your data and generate your document          String fileName = ""&lt;SomeFileName&gt;.pdf"";         res.setContentType(""application/pdf"");         res.setHeader(""Content-Disposition"", ""attachment;filename=\"""" + fileName + ""\"""");         writePDF(&lt;SomeObjectData&gt;, res.getOutputStream());     } }"
"import org.icepdf.ri.common.SwingController; import org.icepdf.ri.common.SwingViewBuilder;  import javax.swing.*;  /**  * The &lt;code&gt;ViewerComponentExample&lt;/code&gt; class is an example of how to use  * &lt;code&gt;SwingController&lt;/code&gt; and &lt;code&gt;SwingViewBuilder&lt;/code&gt;  * to build a PDF viewer component.  A file specified at the command line is  * opened in a JFrame which contains the viewer component.  *  * @since 2.0  */ public class ViewerComponentExample {     public static void main(String[] args) {         // Get a file from the command line to open         String filePath = args[0];          // build a component controller         SwingController controller = new SwingController();          SwingViewBuilder factory = new SwingViewBuilder(controller);          JPanel viewerComponentPanel = factory.buildViewerPanel();          // add interactive mouse link annotation support via callback         controller.getDocumentViewController().setAnnotationCallback(                 new org.icepdf.ri.common.MyAnnotationCallback(                         controller.getDocumentViewController()));          JFrame applicationFrame = new JFrame();         applicationFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         applicationFrame.getContentPane().add(viewerComponentPanel);          // Now that the GUI is all in place, we can try openning a PDF         controller.openDocument(filePath);          // show the component         applicationFrame.pack();         applicationFrame.setVisible(true);     } }"
private void getMyComponents() {     Component findList = getJList(chooser);     JList myList = (JList) findList;     //find fileName in the JList and move with ViewPort view to the expected Rectangle     Component myScrollPane = getJScrollPane(chooser);     JScrollPane scrollPane = (JScrollPane) myScrollPane;     JViewport vport = scrollPane.getViewport();     //move with ViewPort view to the expected Rectangle }  private Component getJList(Component comp) {     if (comp.getClass() == JList.class) {         return comp;     }     if (comp instanceof Container) {         Component[] components = ((Container) comp).getComponents();         for (int i = 0; i &lt; components.length; i++) {             Component child = getJList(components[i]);             if (child != null) {                 return child;             }         }     }     return null; }  private Component getJScrollPane(Component comp) {     if (comp.getClass() == JScrollPane.class) {         return comp;     }     if (comp instanceof Container) {         Component[] components = ((Container) comp).getComponents();         for (int i = 0; i &lt; components.length; i++) {             Component child = getJScrollPane(components[i]);             if (child != null) {                 return child;             }         }     }     return null; }
"public interface MyLibrary extends Library { /* StdCallLibrary if using __stdcall__ */     interface MyCallback extends Callback { /* StdCallCallback if using __stdcall__ */         void invoke(/* fill your parameters here*/);      }     DWORD RegisterCallback(HANDLE handle, int type, MyCallback callback); }  ... MyLibrary lib = (MyLibrary)Native.loadLibrary(""mylib"", MyLibrary.class/*, options*/); MyCallback callback = new MyCallback() {     public void invoke() {         System.out.println(""Success!"");     } }; HANDLE h = ...; int type = ...; lib.RegisterCallback(h, type, callback); ..."
"try {         BufferedReader in = new BufferedReader(new FileReader(""plaintext.txt""));         String inputDataLine;         while ((inputDataLine = in.readLine()) != null) {             if (!(inputDataLine.contentEquals("" ""))) {                 System.out.println(""What you want to do with a paragraph line"");             } else {                 System.out.println(""What you want to do with a paragraph seperator"");             }         }         in.close();     } catch (IOException e) {     }"
package namepackage;  import com.panayotis.gnuplot.JavaPlot; import com.panayotis.gnuplot.plot.DataSetPlot; import com.panayotis.gnuplot.style.PlotStyle; import com.panayotis.gnuplot.style.Style;  /**  * on NetBeans add library -&gt; jar -&gt;   * package namepackage;  *  * import com.panayotis.gnuplot.JavaPlot;  * import com.panayotis.gnuplot.plot.DataSetPlot;  * import com.panayotis.gnuplot.style.PlotStyle;  * import com.panayotis.gnuplot.style.Style;  * @author mkwest  *  */ public class Main {      /**      * @param args the command line arguments      */     public static void main(String[] args) {         // TODO code application logic here         JavaPlot p = new JavaPlot();         double tab[][];          tab = new double[2][2];         tab[0][0] = 0.0000;         tab[0][1] = 2.0000;         tab[1][0] = 1.0000;         tab[1][1] = 6.0000;         PlotStyle myPlotStyle = new PlotStyle();         myPlotStyle.setStyle(Style.LINES);         DataSetPlot s = new DataSetPlot(tab);         myPlotStyle.setLineWidth(1);         DataSetPlot testDataSetPlot = new DataSetPlot(tab);         //DataSetPlot.setPlotStyle(myPlotStyle);         s.setPlotStyle(myPlotStyle);         //p.newGraph();         p.addPlot(s);         p.newGraph();         p.plot();     } }
"CSVReader reader = ...; CSVWriter writer = ...;  Multimap&lt;String, String&gt; results = TreeMultimap.create();  // read the file String[] line; for ((line = reader.readNext()) != null) {     results.put(line[0], line[1]); }  // output the file Map&lt;String, Collection&lt;String&gt;&gt; mapView = results.asMap(); for (Map.Entry&lt;String, Collection&lt;String&gt; entry : mapView.entries()) {     String[] nextLine = new String[2];     nextLine[0] = entry.getKey();     nextLine[1] = formatCollection(entry.getValue());     writer.writeNext(nextLine); }"
"List&lt;GarbageCollectorMXBean&gt; gcList = ManagementFactory.getGarbageCollectorMXBeans();     for(GarbageCollectorMXBean tmpGC : gcList){          System.out.println(""\nName: "" + tmpGC.getName());         System.out.println(""Collection count: "" + tmpGC.getCollectionCount());         System.out.println(""Collection time: "" + tmpGC.getCollectionTime());         System.out.println(""Memory Pools: "");          String[] memoryPoolNames = tmpGC.getMemoryPoolNames();         for(String mpnTmp : memoryPoolNames){             System.out.println(""\t"" + mpnTmp);         }      }      System.out.println( ""Memory Pools Info"" );     List&lt;MemoryPoolMXBean&gt; memoryList = ManagementFactory.getMemoryPoolMXBeans();     for(MemoryPoolMXBean tmpMem : memoryList){          System.out.println(""\nName: "" + tmpMem.getName());         System.out.println(""Usage: "" + tmpMem.getUsage());         System.out.println(""Collection Usage: "" + tmpMem.getCollectionUsage());         System.out.println(""Peak Usage: "" + tmpMem.getPeakUsage());         System.out.println(""Type: "" + tmpMem.getType());         System.out.println(""Memory Manager Names: "") ;          String[] memManagerNames = tmpMem.getMemoryManagerNames();         for(String mmnTmp : memManagerNames){             System.out.println(""\t"" + mmnTmp);         }         System.out.println(""\n"");     }      MemoryUsage mu =ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();     MemoryUsage muNH =ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();     System.out.println(             ""Init :""+mu.getInit()+             ""\nMax :""+mu.getMax()+             ""\nUsed :""+mu.getUsed()+             ""\nCommited :""+mu.getCommitted()+             ""\nInit NH :""+muNH.getInit()+             ""\nMax NH :""+muNH.getMax()+             ""\nUsed NH:""+muNH.getUsed()+             ""\nCommited NH:""+muNH.getCommitted());"
"OutputStream os = conn.getOutputStream(); os.write(input.getBytes()); // The input you need to pass to the webservice os.flush(); ... BufferedReader br = new BufferedReader(new InputStreamReader(         (conn.getInputStream()))); // Getting the response from the webservice  String output; System.out.println(""Output from Server .... \n""); while ((output = br.readLine()) != null) {     System.out.println(output); // Instead of this, you could append all your response to a StringBuffer and use `toString()` to get the entire JSON response as a String.     // This string json response can be parsed using any json library. Eg. GSON from Google. }"
"Git git = ... // you get it through a CloneCommand, InitCommand                // or through the file system  CheckoutCommand coCmd = git.checkout();  // Commands are part of the api module, which include git-like calls coCmd.setName(""master""); coCmd.setCreateBranch(false); // probably not needed, just to make sure coCmd.call(); // switch to ""master"" branch  MergeCommand mgCmd = git.merge(); mgCmd.include(""foo""); // ""foo"" is considered as a Ref to a branch MergeResult res = mgCmd.call(); // actually do the merge  if (res.getMergeStatus().equals(MergeResult.MergeStatus.CONFLICTING)){    System.out.println(res.getConflicts().toString());    // inform the user he has to handle the conflicts }"
"Path file = ...; BasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);  System.out.println(""creationTime: "" + attr.creationTime()); System.out.println(""lastAccessTime: "" + attr.lastAccessTime()); System.out.println(""lastModifiedTime: "" + attr.lastModifiedTime());  System.out.println(""isDirectory: "" + attr.isDirectory()); System.out.println(""isOther: "" + attr.isOther()); System.out.println(""isRegularFile: "" + attr.isRegularFile()); System.out.println(""isSymbolicLink: "" + attr.isSymbolicLink()); System.out.println(""size: "" + attr.size());"
"import org.w3c.dom.Node; import org.w3c.dom.bootstrap.DOMImplementationRegistry; import org.w3c.dom.ls.DOMImplementationLS; import org.w3c.dom.ls.LSSerializer; import org.xml.sax.InputSource;  import javax.xml.parsers.DocumentBuilderFactory; import java.io.StringReader;  /**  * Pretty-prints xml, supplied as a string.  * &lt;p/&gt;  * eg.  * &lt;code&gt;  * String formattedXml = new XmlFormatter().format(""&lt;tag&gt;&lt;nested&gt;hello&lt;/nested&gt;&lt;/tag&gt;"");  * &lt;/code&gt;  */ public class XmlFormatter {      public String format(String xml) {          try {             final InputSource src = new InputSource(new StringReader(xml));             final Node document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(src).getDocumentElement();             final Boolean keepDeclaration = Boolean.valueOf(xml.startsWith(""&lt;?xml""));          //May need this: System.setProperty(DOMImplementationRegistry.PROPERTY,""com.sun.org.apache.xerces.internal.dom.DOMImplementationSourceImpl"");               final DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();             final DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(""LS"");             final LSSerializer writer = impl.createLSSerializer();              writer.getDomConfig().setParameter(""format-pretty-print"", Boolean.TRUE); // Set this to true if the output needs to be beautified.             writer.getDomConfig().setParameter(""xml-declaration"", keepDeclaration); // Set this to true if the declaration is needed to be outputted.              return writer.writeToString(document);         } catch (Exception e) {             throw new RuntimeException(e);         }     }      public static void main(String[] args) {         String unformattedXml =                 ""&lt;?xml version=\""1.0\"" encoding=\""UTF-8\""?&gt;&lt;QueryMessage\n"" +                         ""        xmlns=\""http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message\""\n"" +                         ""        xmlns:query=\""http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query\""&gt;\n"" +                         ""    &lt;Query&gt;\n"" +                         ""        &lt;query:CategorySchemeWhere&gt;\n"" +                         ""   \t\t\t\t\t         &lt;query:AgencyID&gt;ECB\n\n\n\n&lt;/query:AgencyID&gt;\n"" +                         ""        &lt;/query:CategorySchemeWhere&gt;\n"" +                         ""    &lt;/Query&gt;\n\n\n\n\n"" +                         ""&lt;/QueryMessage&gt;"";          System.out.println(new XmlFormatter().format(unformattedXml));     } }"
"task copyDependenciesToTarget(type: Copy) {     println 'Copying dependencies to target...'      configurations.compile.collect().each { compileDependency -&gt;         copy {             with from (compileDependency.getPath()) {                 include '*'             }             into 'target/libs/libs'         }     } }  build.dependsOn(copyDependenciesToTarget)   jar {     manifest.attributes(             ""Main-Class"": ""Main"",             ""Class-Path"": configurations.compile.collect { 'libs/' + it.getName()}.join(' ')     ) }"
"InputStream stream = new FileInputStream(""C:\\Thumbs.db""); POIFSFileSystem fs = new POIFSFileSystem(stream); DirectoryEntry root = fs.getRoot(); Entry entry = root.getEntry(""2""); DocumentInputStream is = fs.createDocumentInputStream(entry.getName());  //Added to read the header lines and fix the ImageFormatException int header_len = is.read(); for (int i = 1; i &lt; header_len; i++) {         is.read(); }  JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(is); JPEGDecodeParam param = JPEGCodec.getDefaultJPEGEncodeParam(4,JPEGDecodeParam.COLOR_ID_RGBA); decoder.setJPEGDecodeParam(param); BufferedImage originalBufferedImage = decoder.decodeAsBufferedImage();"
"Path file = Paths.get(""C:\\Users\\Ali Y. Akgul\\Desktop\\150004_15122012_G.txt"");  ArrayList&lt;String&gt; lines = Files.readAllLines(file, Charset.defaultCharset()); ArrayList&lt;String []&gt; columns = new ArrayList&lt;&gt;(); for(String line : lines){     columns.add(line.split('\|')); }  // Now for each line you have columns. for(String [] s : columns){      System.out.println(Arrays.toString(s)); }  // To get only the values for column 8 onwards (in response to your comment) for(String [] s : columns){      String [] sublist = Arrays.copyOfRange(s, 8, s.length);     System.out.println(Arrays.toString(sublist)); }  // To get only the columns from line 8 onwards for(int i = 0; i &lt; columns.size(); i++){     System.out.println(Arrays.toString(columns.get(i))); }"
"import java.io.File;  import org.apache.commons.vfs2.FileObject; import org.apache.commons.vfs2.FileSystemException; import org.apache.commons.vfs2.FileSystemOptions; import org.apache.commons.vfs2.Selectors; import org.apache.commons.vfs2.impl.StandardFileSystemManager; import org.apache.commons.vfs2.provider.sftp.SftpFileSystemConfigBuilder;  /**  * The class SFTPUtil containing uploading, downloading, checking if file exists  * and deleting functionality using Apache Commons VFS (Virtual File System)  * Library  *   * @author Ashok  *   */ public class SFTPUtility {      public static void main(String[] args) {         String hostName = ""PutYourHostNameHere"";         String username = ""PutYourUserNameForHostHere"";         String password = ""PutYourPasswordForHostHere"";          String localFilePath = ""C:\\FakePath\\FakeFile.txt"";         String remoteFilePath = ""/FakeRemotePath/FakeRemoteFile.txt"";                String remoteTempFilePath = ""/FakeRemoteTempPath/FakeRemoteTempFile.txt"";          upload(hostName, username, password, localFilePath, remoteFilePath);         exist(hostName, username, password, remoteFilePath);         download(hostName, username, password, localFilePath,remoteFilePath);         move(hostName, username, password, remoteFilePath, remoteTempFilePath);         delete(hostName, username, password, remoteFilePath);     }      /**      * Method to upload a file in Remote server      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param localFilePath      *            LocalFilePath. Should contain the entire local file path -      *            Directory and Filename with \\ as separator      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      */     public static void upload(String hostName, String username, String password, String localFilePath, String remoteFilePath) {          File file = new File(localFilePath);         if (!file.exists())             throw new RuntimeException(""Error. Local file not found"");          StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create local file object             FileObject localFile = manager.resolveFile(file.getAbsolutePath());              // Create remote file object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());             /*              * use createDefaultOptions() in place of fsOptions for all default              * options - Ashok.              */              // Copy local file to sftp server             remoteFile.copyFrom(localFile, Selectors.SELECT_SELF);              System.out.println(""File upload success"");         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      public static boolean move(String hostName, String username, String password, String remoteSrcFilePath, String remoteDestFilePath){         StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create remote object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteSrcFilePath), createDefaultOptions());             FileObject remoteDestFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteDestFilePath), createDefaultOptions());              if (remoteFile.exists()) {                 remoteFile.moveTo(remoteDestFile);;                 System.out.println(""Move remote file success"");                 return true;             }             else{                 System.out.println(""Source file doesn't exist"");                 return false;             }         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      /**      * Method to download the file from remote server location      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param localFilePath      *            LocalFilePath. Should contain the entire local file path -      *            Directory and Filename with \\ as separator      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      */     public static void download(String hostName, String username, String password, String localFilePath, String remoteFilePath) {          StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Append _downlaod_from_sftp to the given file name.             //String downloadFilePath = localFilePath.substring(0, localFilePath.lastIndexOf(""."")) + ""_downlaod_from_sftp"" + localFilePath.substring(localFilePath.lastIndexOf("".""), localFilePath.length());              // Create local file object. Change location if necessary for new downloadFilePath             FileObject localFile = manager.resolveFile(localFilePath);              // Create remote file object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());              // Copy local file to sftp server             localFile.copyFrom(remoteFile, Selectors.SELECT_SELF);              System.out.println(""File download success"");         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      /**      * Method to delete the specified file from the remote system      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param localFilePath      *            LocalFilePath. Should contain the entire local file path -      *            Directory and Filename with \\ as separator      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      */     public static void delete(String hostName, String username, String password, String remoteFilePath) {         StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create remote object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());              if (remoteFile.exists()) {                 remoteFile.delete();                 System.out.println(""Delete remote file success"");             }         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      // Check remote file is exist function:     /**      * Method to check if the remote file exists in the specified remote      * location      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      * @return Returns if the file exists in the specified remote location      */     public static boolean exist(String hostName, String username, String password, String remoteFilePath) {         StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create remote object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());              System.out.println(""File exist: "" + remoteFile.exists());              return remoteFile.exists();         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      /**      * Generates SFTP URL connection String      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      * @return concatenated SFTP URL string      */     public static String createConnectionString(String hostName, String username, String password, String remoteFilePath) {         return ""sftp://"" + username + "":"" + password + ""@"" + hostName + ""/"" + remoteFilePath;     }      /**      * Method to setup default SFTP config      *       * @return the FileSystemOptions object containing the specified      *         configuration options      * @throws FileSystemException      */     public static FileSystemOptions createDefaultOptions() throws FileSystemException {         // Create SFTP options         FileSystemOptions opts = new FileSystemOptions();          // SSH Key checking         SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(opts, ""no"");          /*          * Using the following line will cause VFS to choose File System's Root          * as VFS's root. If I wanted to use User's home as VFS's root then set          * 2nd method parameter to ""true""          */         // Root directory set to user home         SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts, false);          // Timeout is count by Milliseconds         SftpFileSystemConfigBuilder.getInstance().setTimeout(opts, 10000);          return opts;     } }"
"public class QuickSearchProvider extends SearchRecentSuggestionsProvider {    public final static String AUTHORITY = ""com.example.testapp.providers.QuickSearchProvider"";   public final static int MODE = DATABASE_MODE_QUERIES | DATABASE_MODE_2LINES;    public QuickSearchProvider() {     setupSuggestions(AUTHORITY, MODE);   }    public Cursor query(Uri uri, String[] projection, String sel,       String[] selArgs, String sortOrder) {        MatrixCursor cursor = new MatrixCursor(new String[] {            BaseColumns._ID,           SearchManager.SUGGEST_COLUMN_TEXT_1,           SearchManager.SUGGEST_COLUMN_TEXT_2,           SearchManager.SUGGEST_COLUMN_ICON_1,           SearchManager.SUGGEST_COLUMN_QUERY,           SearchManager.SUGGEST_COLUMN_INTENT_ACTION});        cursor.addRow(new Object[] { 0, ""Plants"", ""Search Plants"", android.R.drawable.ic_menu_search, selArgs[0], Search.SEARCH_PLANTS_ACTION});       cursor.addRow(new Object[] { 1, ""Birds"", ""Search Birds"", android.R.drawable.ic_menu_search, selArgs[0], Search.SEARCH_BIRDS_ACTION });        return new MergeCursor(new Cursor[] { cursor });   }  }"
"public void captureView(int viewId,String filename){     //Find the view we are after     View    view = (View) findViewById(viewId);     //Create a Bitmap with the same dimensions      Bitmap image = Bitmap.createBitmap(view.getWidth(),                                         view.getHeight(),                                         Bitmap.Config.RGB_565);     //Draw the view inside the Bitmap     view.draw(new Canvas(image));       //Store to sdcard     try {        String path = Environment.getExternalStorageDirectory().toString();        File myFile = new File(path,filename);        FileOutputStream out = new FileOutputStream(myFile);         image.compress(Bitmap.CompressFormat.PNG, 90, out); //Output     } catch (Exception e) {        e.printStackTrace();     } }"
"try {     OutputStream servletOutputStream = httpServletResponse.getOutputStream(); // retrieve OutputStream from HttpServletResponse     ZipOutputStream zos = new ZipOutputStream(servletOutputStream); // create a ZipOutputStream from servletOutputStream      List&lt;String[]&gt; csvFileContents  = getContentToZIP(); // get the list of csv contents. I am assuming the CSV content is generated programmatically     int count = 0;     for (String[] entries : csvFileContents) {         String filename = ""file-"" + ++count  + "".csv"";         ZipEntry entry = new ZipEntry(filename); // create a zip entry and add it to ZipOutputStream         zos.putNextEntry(entry);          CSVWriter writer = new CSVWriter(new OutputStreamWriter(zos));  // There is no need for staging the CSV on filesystem or reading bytes into memory. Directly write bytes to the output stream.         writer.writeNext(entries);  // write the contents         writer.flush(); // flush the writer. Very important!         zos.closeEntry(); // close the entry. Note : we are not closing the zos just yet as we need to add more files to our ZIP     }      zos.close(); // finally closing the ZipOutputStream to mark completion of ZIP file } catch (Exception e) {     log.error(e); // handle error }"
"import java.io.*; public class temp {     public static void main(String[] args) {         // define the path to your text file         String myFilePath = ""temp.txt"";          // read and parse the file         try {             BufferedReader br = new BufferedReader(new FileReader(new File(myFilePath)));             String line, name, email;             // read through the first two lines to get to the data             line = br.readLine();             line = br.readLine();             while ((line = br.readLine()) != null) {                 if (line.contains(""|"")) {                     // do line by line parsing here                     line = line.trim();                     // split the line                     String[] parts = line.split(""[|]"");                     // parse out the name and email                     name = parts[1].trim();                     email = parts[2].trim();                     // rearrange the name                     String[] nParts = name.split(""  *"");                     if (nParts.length == 3) {                         name = nParts[1] + "" "" + nParts[2] + "" "" + nParts[0];                     } else {                         name = nParts[1] + "" "" + nParts[0];                     }                     // all done now, let's print the name and email                     System.out.println(email + "" "" + name);                 }             }             br.close();         } catch (Exception e) {             System.out.println(""There was an issue parsing the file."");         }     } }"
"String inCommonMDFile = ""/data/org/opensaml/saml2/metadata/InCommon-metadata.xml"";  // Initialize the library DefaultBootstrap.bootstrap();   // Get parser pool manager BasicParserPool ppMgr = new BasicParserPool(); ppMgr.setNamespaceAware(true);  // Parse metadata file InputStream in = MetadataTest.class.getResourceAsStream(inCommonMDFile); Document inCommonMDDoc = ppMgr.parse(in); Element metadataRoot = inCommonMDDoc.getDocumentElement();  // Get apropriate unmarshaller UnmarshallerFactory unmarshallerFactory = Configuration.getUnmarshallerFactory(); Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(metadataRoot);  // Unmarshall using the document root element, an EntitiesDescriptor in this case EntitiesDescriptor inCommonMD = (EntitiesDescriptor) unmarshaller.unmarshall(metadataRoot);"
"public Stack&lt;File&gt; getFilesInFolder(String startPath) {     File startFolder = new File(startPath);     Stack&lt;File&gt; picturestack = new Stack&lt;File&gt;();      String extension;     int dotindex;      // Go through the folder     for (File file : startFolder.listFiles()) {         extension = """";         dotindex = file.getName().lastIndexOf('.'); // Get the index of the dot in the filename          if (dotindex &gt; 0) {             extension = file.getName().substring(dotindex + 1);              // Iterate all valid file types and check it             for (String filetype : validpicturetypes) {                 if (extension.equals(filetype)) {                     picturestack.add(file);                 }             }         }     }     return picturestack; }"
