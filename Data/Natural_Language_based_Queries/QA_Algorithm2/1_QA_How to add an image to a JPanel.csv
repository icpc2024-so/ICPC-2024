code
"File myFilename; chooser = new JFileChooser(); chooser.addChoosableFileFilter(new OpenFileFilter(""jpeg"",""Photo in JPEG format"") ); chooser.addChoosableFileFilter(new OpenFileFilter(""jpg"",""Photo in JPEG format"") ); chooser.addChoosableFileFilter(new OpenFileFilter(""png"",""PNG image"") ); chooser.addChoosableFileFilter(new OpenFileFilter(""svg"",""Scalable Vector Graphic"") ); int returnVal = chooser.showSaveDialog(mainWindow); if (returnVal == JFileChooser.APPROVE_OPTION) {      myFilename = chooser.getSelectedFile();      //do something with the file }"
"BufferedImage image = ImageIO.read(new File(path)); JPEGImageEncoder jpegEncoder = JPEGCodec.createJPEGEncoder(new FileOutputStream(new File(path))); JPEGEncodeParam jpegEncodeParam = jpegEncoder.getDefaultJPEGEncodeParam(image); jpegEncodeParam.setDensityUnit(JPEGEncodeParam.DENSITY_UNIT_DOTS_INCH); jpegEncoder.setJPEGEncodeParam(jpegEncodeParam); jpegEncodeParam.setQuality(0.75f, false); jpegEncodeParam.setXDensity(300); jpegEncodeParam.setYDensity(300); jpegEncoder.encode(image, jpegEncodeParam); image.flush();"
"public void imageToMP4(BufferedImage bi) {     // A transform to convert RGB to YUV colorspace     RgbToYuv420 transform = new RgbToYuv420(0, 0);      // A JCodec native picture that would hold source image in YUV colorspace     Picture toEncode = Picture.create(bi.getWidth(), bi.getHeight(), ColorSpace.YUV420);      // Perform conversion     transform.transform(AWTUtil.fromBufferedImage(bi), yuv);      // Create MP4 muxer     MP4Muxer muxer = new MP4Muxer(sink, Brand.MP4);      // Add a video track     CompressedTrack outTrack = muxer.addTrackForCompressed(TrackType.VIDEO, 25);      // Create H.264 encoder     H264Encoder encoder = new H264Encoder(rc);      // Allocate a buffer that would hold an encoded frame     ByteBuffer _out = ByteBuffer.allocate(ine.getWidth() * ine.getHeight() * 6);      // Allocate storage for SPS/PPS, they need to be stored separately in a special place of MP4 file     List&lt;ByteBuffer&gt; spsList = new ArrayList&lt;ByteBuffer&gt;();     List&lt;ByteBuffer&gt; ppsList = new ArrayList&lt;ByteBuffer&gt;();      // Encode image into H.264 frame, the result is stored in '_out' buffer     ByteBuffer result = encoder.encodeFrame(_out, toEncode);      // Based on the frame above form correct MP4 packet     H264Utils.encodeMOVPacket(result, spsList, ppsList);      // Add packet to video track     outTrack.addFrame(new MP4Packet(result, 0, 25, 1, 0, true, null, 0, 0));      // Push saved SPS/PPS to a special storage in MP4     outTrack.addSampleEntry(H264Utils.createMOVSampleEntry(spsList, ppsList));      // Write MP4 header and finalize recording     muxer.writeHeader();  }"
"public void imageToMP4(BufferedImage bi) {     // A transform to convert RGB to YUV colorspace     RgbToYuv420 transform = new RgbToYuv420(0, 0);      // A JCodec native picture that would hold source image in YUV colorspace     Picture toEncode = Picture.create(bi.getWidth(), bi.getHeight(), ColorSpace.YUV420);      // Perform conversion     transform.transform(AWTUtil.fromBufferedImage(bi), yuv);      // Create MP4 muxer     MP4Muxer muxer = new MP4Muxer(sink, Brand.MP4);      // Add a video track     CompressedTrack outTrack = muxer.addTrackForCompressed(TrackType.VIDEO, 25);      // Create H.264 encoder     H264Encoder encoder = new H264Encoder(rc);      // Allocate a buffer that would hold an encoded frame     ByteBuffer _out = ByteBuffer.allocate(ine.getWidth() * ine.getHeight() * 6);      // Allocate storage for SPS/PPS, they need to be stored separately in a special place of MP4 file     List&lt;ByteBuffer&gt; spsList = new ArrayList&lt;ByteBuffer&gt;();     List&lt;ByteBuffer&gt; ppsList = new ArrayList&lt;ByteBuffer&gt;();      // Encode image into H.264 frame, the result is stored in '_out' buffer     ByteBuffer result = encoder.encodeFrame(_out, toEncode);      // Based on the frame above form correct MP4 packet     H264Utils.encodeMOVPacket(result, spsList, ppsList);      // Add packet to video track     outTrack.addFrame(new MP4Packet(result, 0, 25, 1, 0, true, null, 0, 0));      // Push saved SPS/PPS to a special storage in MP4     outTrack.addSampleEntry(H264Utils.createMOVSampleEntry(spsList, ppsList));      // Write MP4 header and finalize recording     muxer.writeHeader(); }"
"InputStream stream = new FileInputStream(""C:\\Thumbs.db""); POIFSFileSystem fs = new POIFSFileSystem(stream); DirectoryEntry root = fs.getRoot(); Entry entry = root.getEntry(""2""); DocumentInputStream is = fs.createDocumentInputStream(entry.getName());  //Added to read the header lines and fix the ImageFormatException int header_len = is.read(); for (int i = 1; i &lt; header_len; i++) {         is.read(); }  JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(is); JPEGDecodeParam param = JPEGCodec.getDefaultJPEGEncodeParam(4,JPEGDecodeParam.COLOR_ID_RGBA); decoder.setJPEGDecodeParam(param); BufferedImage originalBufferedImage = decoder.decodeAsBufferedImage();"
"PreparedStatement statement = getSession().prepare(                                ""INSERT INTO pixelstore.image "" +                                ""(image_name, "" +                                "" upload_time, "" +                                 "" upload_by, "" +                                 "" file_type, "" +                                 "" file_size"" +                                "") VALUES (?, ?, ?, ?, ?);"");   // create the bound statement and initialise it with your prepared statement BoundStatement boundStatement = new BoundStatement(statement);  session.execute( // this is where the query is executed   boundStatement.bind( // here you are binding the 'boundStatement'     ""background"", TimeUtil.getTimeUUID(),  ""lyubent"", ""png"", ""130527""));"
"class MyPanel extends JPanel {   ImageIcon icon;   JTextArea textArea;    MyPanel(ImageIcon icon, String text)   {     this.icon = icon;     this.setPreferredSize(/*max size of your panel */)     textArea = new JTextArea(10, 50);     textArea.append(text);      //the default manager will be a flow layout for single jpanels     this.add(icon);     JScrollPane sp = new JScrollPane(textArea);     sp.setPreferredSize(new Dimension(/* size of your text label */));     this.add(new JScrollPtextArea);   } }  class MyContainer extends JFrame {   JPanel container;   JScrollPane spContainer;    MyContainer()   {      container = new JPanel()      container.setGridLayout(100,1); //100 elements max      spContainer = new JScrollPane(container);      spContainer.setPreferredSize(/* max size of whole thing */)      this.add(spContainer);      pack();   }    void addElement(MyPanel panel)   {     container.add(panel);     this.pack();   } }"
"if (new File(destination).listFiles().length &lt;= 1) {     return ""/GUI/printServerSide.xhtml""; } else if(""txt"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else if (""jpeg"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else if (""jpg"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else if (""png"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else if (""gif"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else if (""pdf"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else if (""html"".equalsIgnoreCase(extension)) {     return ""/GUI/submittedFilePreview.xhtml""; } else {     return ""/GUI/printServerSide.xhtml""; }"
"public interface ProductTrader&lt;P, S&gt; {    public P create(S specification);  }  public interface ImageCreator {    public boolean canProcess(File file);    public Image createImage(File file);  }  public class PNGImageCreator implements ImageCreator {    public boolean canProcess(File file) {     return (file.isFile() &amp;&amp; file.canRead() &amp;&amp; file.getName().endsWith("".png""));   }    public Image createImag(File file) {     //Image I/O code goes here   }  }  public class FileToImageProductTrader implements ProductTrader&lt;Image, File&gt; {    private List&lt;ImageCreator&gt; imageCreators = new ArrayList&lt;ImageCreator&gt;();    public void registerCreator(ImageCreator creator) {     imageCreators.add(creator);   }    public Image create(File specification) {     for(ImageCreator creator : imageCreators) {       if(creator.canProcess(specification)) {         return creator.createImage(specification);       }     }     //No creator for given file     return null;   }  }  public class Main {    public static void main(String [] args) {     FileToImageProductTrader trader = new FileToImageProductTrader();     PNGCreator pngCreator = new PNGCreator();     trader.registerCreator(pngCreator);     File imageFile = new File(""/tmp/foo.png"");     Image image = trader.create(imageFile);   }  }"
"DisplayImageOptions defaultOptions = new DisplayImageOptions.Builder()         .showImageForEmptyUri(R.drawable.content_picture)         .showImageOnFail(R.drawable.content_picture)          .resetViewBeforeLoading(false)         .delayBeforeLoading(1000)         .cacheOnDisc(true)         .bitmapConfig(Bitmap.Config.RGB_565)         .imageScaleType(ImageScaleType.IN_SAMPLE_INT)         .build();          ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(getActivity())         .discCacheExtraOptions(480, 800, CompressFormat.JPEG, 75, null)         .threadPoolSize(5)         .defaultDisplayImageOptions(defaultOptions)         .denyCacheImageMultipleSizesInMemory()         .discCacheSize(50 * 1024 * 1024)         .writeDebugLogs()         .build();           ImageLoader.getInstance().init(config);          ImageLoader.getInstance().handleSlowNetwork(true);"
"public void seeBMPImage(String BMPFileName) throws IOException {     BufferedImage image = ImageIO.read(getClass().getResource(BMPFileName));      int[][] array2D = new int[image.getWidth()][image.getHeight()];      for (int xPixel = 0; xPixel &lt; image.getWidth(); xPixel++)         {             for (int yPixel = 0; yPixel &lt; image.getHeight(); yPixel++)             {                 int color = image.getRGB(xPixel, yPixel);                 if (color==Color.BLACK.getRGB()) {                     array2D[xPixel][yPixel] = 1;                 } else {                     array2D[xPixel][yPixel] = 0; // ?                 }             }         }     }"
"BufferedImage jpg = ImageIO.read(new File(""myjpg.jpg""));      //Convert the image to a byte array      DataBufferUShort buff = (DataBufferUShort) jpg.getData().getDataBuffer();     short[] data = buff.getData();     ByteBuffer byteBuf = ByteBuffer.allocate(2*data.length);     int i = 0;     while (data.length &gt; i) {         byteBuf.putShort(data[i]);         i++;     }      //Copy a header      DicomInputStream dis = new DicomInputStream(new File(""fileToCopyheaderFrom.dcm""));     Attributes meta = dis.readFileMetaInformation();     Attributes attribs = dis.readDataset(-1, Tag.PixelData);     dis.close();      //Change the rows and columns     attribs.setInt(Tag.Rows, VR.US, jpg.getHeight());     attribs.setInt(Tag.Columns, VR.US, jpg.getWidth());     System.out.println(byteBuf.array().length);     //Attributes attribs = new Attributes();      //Write the file     attribs.setBytes(Tag.PixelData, VR.OW, byteBuf.array());     DicomOutputStream dcmo = new DicomOutputStream(new File(""myDicom.dcm""));     dcmo.writeFileMetaInformation(meta);     attribs.writeTo(dcmo);     dcmo.close();"
"import java.awt.*; import java.awt.event.*; import java.util.*; import java.io.*; import javax.swing.*; import java.awt.image.*; import javax.imageio.ImageIO;  public class Picture{     JFileChooser fileChooser = new JFileChooser();     final JFrame frame = new JFrame(""Edit Image"");     Container content;     static BufferedImage image;     BufferedImage image2;     JLabel imageLabel;      public Picture() {         //asks for image file as input         fileChooser.setDialogTitle(""Choose an image file to begin:"");         fileChooser.showOpenDialog(frame);         File selectedFile = fileChooser.getSelectedFile();         if (fileChooser.getSelectedFile() != null) {             try {                 //reads File as image                 image = ImageIO.read(selectedFile);             }             catch (IOException e) {                 System.out.println(""Invalid image file: "" + selectedFile);                 System.exit(0);             }         }         else {             System.out.println(""No File Selected!"");         }     }      public int width() {         //returns width of present image         int width = image.getWidth();         return width;     }      public int height() {         //returns height of present image         int height = image.getHeight();         return height;     } /*     public void getImage() {         this.image2 = image;     } */     public void saveImage() {         //saves current image as JPEG         fileChooser.setDialogTitle(""Save this image?"");         fileChooser.showSaveDialog(frame);         try {             //writes new file             ImageIO.write(this.image, ""JPG"", fileChooser.getSelectedFile());         }         catch (IOException f) {             System.out.println(""Saving failed! Could not save image."");         }     }      public void show() {         //set frame title, set it visible, etc         content = frame.getContentPane();         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setResizable(false);          //add the image to the frame         ImageIcon icon = new ImageIcon(image);         imageLabel = new JLabel(icon);         frame.setContentPane(imageLabel);          //add a menubar on the frame with a single option: saving the image         JMenuBar menuBar = new JMenuBar();         frame.setJMenuBar(menuBar);         JMenu progName = new JMenu(""Edit Image"");         progName.setBackground(Color.RED);         menuBar.add(progName);         JMenu fileMenu = new JMenu(""File"");         menuBar.add(fileMenu);         JMenu editMenu = new JMenu(""Edit"");         menuBar.add(editMenu);          ImageIcon exitIcon = new ImageIcon(""app-exit.png"");         JMenuItem exitAction = new JMenuItem(""Exit"", exitIcon);         progName.add(exitAction);         exitAction.addActionListener(new ActionListener() {                 public void actionPerformed(ActionEvent e) {                     ImageIcon saveIcon = new ImageIcon(""save-icon.png"");                     int askSave = JOptionPane.showConfirmDialog(null,""Save current image?"", """", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, saveIcon);                     if (askSave == JOptionPane.YES_OPTION) {                         //opens save image method, then exits                         saveImage();                         System.exit(0);                     }                     else {                         //exits without saving                         System.exit(0);                     }                 }             });          ImageIcon newIcon = new ImageIcon(""new-image.png"");         JMenuItem newAction = new JMenuItem(""Open Image"", newIcon);         fileMenu.add(newAction);         newAction.addActionListener(new ActionListener() {                 public void actionPerformed(ActionEvent e) {                     ImageIcon saveIcon = new ImageIcon(""save-icon.png"");                     int askSave = JOptionPane.showConfirmDialog(null,""Save current image?"", """", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, saveIcon);                     if (askSave == JOptionPane.YES_OPTION) {                         //opens save image method, then asks asks for new image file                         saveImage();                         Picture p = new Picture();                         imageLabel.setIcon(new ImageIcon(image));                         //resizes canvas to fit new image                         frame.setSize(width(), height());                     }                     else {                         //asks for new image file since user did not want to save original                         Picture p = new Picture();                         imageLabel.setIcon(new ImageIcon(image));                         //resizes canvas to fit new image                         frame.setSize(width(), height());                     }                 }             });          ImageIcon saveIcon = new ImageIcon(""save-image.png"");         JMenuItem saveAction = new JMenuItem(""Save Image As..."", saveIcon);         fileMenu.add(saveAction);         saveAction.addActionListener(new ActionListener() {                 public void actionPerformed(ActionEvent e) {                     //opens save image method                     saveImage();                 }             });         ImageIcon gsIcon = new ImageIcon(""grayscale-image.png"");         JMenuItem grayScale = new JMenuItem(""Grayscale"", gsIcon);         editMenu.add(grayScale);         grayScale.addActionListener(new ActionListener() {                 public void actionPerformed(ActionEvent e) {                     //grabs height and width of image, then grayscales it                     grayscale(width(), height());                 }             });          ImageIcon scaleIcon = new ImageIcon(""scale-image.png"");         JMenuItem scaleImg = new JMenuItem(""Scale Image"", scaleIcon);         editMenu.add(scaleImg);         scaleImg.addActionListener(new ActionListener() {                 public void actionPerformed(ActionEvent e) {                     //asks for height and width to create new image                     ImageIcon widthIcon = new ImageIcon(""LR-arrows.png"");                     String scaleWidth = (String)JOptionPane.showInputDialog(null,""What should the new width be?"", """", JOptionPane.QUESTION_MESSAGE, widthIcon, null, null);                     ImageIcon heightIcon = new ImageIcon(""UD-arrows.png"");                     String scaleHeight = (String)JOptionPane.showInputDialog(null,""What should the new height be?"", """", JOptionPane.QUESTION_MESSAGE, widthIcon, null, null);                     //turns user input strings into doubles                     double x = Double.parseDouble(scaleWidth);                     double y = Double.parseDouble(scaleHeight);                     //casts doubles as ints                     int newWidth = (int)x;                     int newHeight = (int)y;                     //resizes frame to fit new image dimensions                     frame.setSize(newWidth, newHeight);                     //calls scale method to resize image using given dimensions                     scale(newWidth, newHeight);                 }             });         ImageIcon rotateIcon = new ImageIcon(""rotate-image.png"");         JMenuItem rotateImg = new JMenuItem(""Rotate Image"", rotateIcon);         editMenu.add(rotateImg);         rotateImg.addActionListener(new ActionListener() {                 public void actionPerformed(ActionEvent e) {                  }             });          //paint the frame         frame.pack();         frame.repaint();         frame.setVisible(true);     }      // convert to grayscale     public void grayscale(int width, int height) {         // create a grayscale image with original dimensions         image2 = new BufferedImage(width, height, BufferedImage.TYPE_BYTE_GRAY);          // convert colored image to grayscale         ColorConvertOp grayScale = new ColorConvertOp(image.getColorModel().getColorSpace(),image2.getColorModel().getColorSpace(),null);         grayScale.filter(image,image2);         imageLabel.setIcon(new ImageIcon(image2));         //getImage();         image = image2;     }      //scales image by a given factor     public void scale(int width, int height){         //uses user-input dimensions to create new image         image2 = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);         Graphics g = image2.createGraphics();         //gets new dimensions and resizes image         g.drawImage(image, 0, 0, image2.getWidth(), image2.getHeight(), 0, 0, width(), height(), null);         imageLabel.setIcon(new ImageIcon(image2));         //getImage();         image = image2;     }      //rotates the image     public void rotate(int width, int height, int theta) {      }      public static void main(String[] args) {         Picture p = new Picture();         p.show();     } }"
"public BufferedImage combine(final BufferedImage image1, final BufferedImage image2, final BufferedImage image3){     final BufferedImage image = new BufferedImage(image1.getWidth(), image1.getHeight(), image1.getType());     for(int x = 0; x &lt; image.getWidth(); x++)         for(int y = 0; y &lt; image.getHeight(); y++)             image.setRGB(x, y, new Color(new Color(image1.getRGB(x, y)).getRed(), new Color(image2.getRGB(x, y)).getGreen(), new Color(image3.getRGB(x, y)).getBlue()).getRGB());     return image; }"
"BufferedImage createResizedCopy(Image originalImage,              int scaledWidth, int scaledHeight,              boolean preserveAlpha)     {         System.out.println(""resizing..."");         int imageType = preserveAlpha ? BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;         BufferedImage scaledBI = new BufferedImage(scaledWidth, scaledHeight, imageType);         Graphics2D g = scaledBI.createGraphics();         if (preserveAlpha) {             g.setComposite(AlphaComposite.Src);         }         g.drawImage(originalImage, 0, 0, scaledWidth, scaledHeight, null);          g.dispose();         return scaledBI;     }"
"ImageInputStream stream = ImageIO.createImageInputStream(res); Iterator&lt;ImageReader&gt; readers = ImageIO.getImageReaders(stream);  if (readers.hasNext()) {     ImageReader reader = readers.next();     reader.setInput(reader);      int w = reader.getWidth(0);     int h = reader.getHeight(0);      ImageReadParam param = reader.getDefaultReadParam();      NamedImage image = new NamedImage(w, h, BufferedImage.TYPE_INT_ARGB);     param.setDestination(image);      /*image = (NamedImage)*/ reader.read(0, param); }"
"DiffFormatter formatter = new DiffFormatter( System.out ); formatter.setRepository( git.getRepository() ); AbstractTreeIterator commitTreeIterator = prepareTreeParser( git.getRepository(),  Constants.HEAD ); FileTreeIterator workTreeIterator = new FileTreeIterator( git.getRepository() ); List&lt;DiffEntry&gt; diffEntries = formatter.scan( commitTreeIterator, workTreeIterator );  for( DiffEntry entry : diffEntries ) {   System.out.println( ""Entry: "" + entry + "", from: "" + entry.getOldId() + "", to: "" + entry.getNewId() );   formatter.format( entry ); }"
"Field jrViewerField;             try {                 jrViewerField = viewer.getClass().getDeclaredField(""viewer"");                  jrViewerField.setAccessible(true);                 JRViewer jrViewer = (JRViewer) jrViewerField.get(viewer);                 List&lt;JRSaveContributor&gt; savers = new ArrayList&lt;JRSaveContributor&gt;();                 for (JRSaveContributor sc : jrViewer.getSaveContributors()) {                          savers.add(sc);                  }                  for (JRSaveContributor sc : savers) {                     if (! sc.getClass().getName().toLowerCase().contains(""pdf"")) {                         jrViewer.removeSaveContributor(sc);                     }                 }               } catch (Exception ex) {               ex.printStackTrace();             }"
"import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.plugins.jpeg.JPEGImageWriteParam; import javax.imageio.stream.ImageOutputStream;  //----  float quality = 0.85f; File outfile = new File( ""MyImage.jpg"" ); BufferedImage image = ...;  ImageWriter imgWriter = ImageIO.getImageWritersByFormatName( ""jpg"" ).next(); ImageOutputStream ioStream = ImageIO.createImageOutputStream( outfile ); imgWriter.setOutput( ioStream );  JPEGImageWriteParam jpegParams = new JPEGImageWriteParam( Locale.getDefault() ); jpegParams.setCompressionMode( ImageWriteParam.MODE_EXPLICIT ); jpegParams.setCompressionQuality( quality );  imgWriter.write( null, new IIOImage( image, null, null ), jpegParams );  ioStream.flush(); ioStream.close(); imgWriter.dispose();"
"SAXTransformerFactory stf = (SAXTransformerFactory)TransformerFactory.newInstance();  // These templates objects could be reused and obtained from elsewhere. Templates templates1 = stf.newTemplates(new StreamSource(   getClass().getResourceAsStream(""MyStylesheet1.xslt""))); Templates templates2 = stf.newTemplates(new StreamSource(   getClass().getResourceAsStream(""MyStylesheet1.xslt"")));  TransformerHandler th1 = stf.newTransformerHandler(templates1); TransformerHandler th2 = stf.newTransformerHandler(templates2);  th1.setResult(new SAXResult(th2)); th2.setResult(new StreamResult(System.out));  Transformer t = stf.newTransformer(); t.transform(new StreamSource(System.in), new SAXResult(th1));  // th1 feeds th2, which in turn feeds System.out."
"public JButtonO() {     super(""the button"");     this.setSize(400, 200);      // Create a panel with a borderlayout     JPanel jpanel = new JPanel(new BorderLayout());      JLabel label = new JLabel(""Output Items:"");     label.setAlignmentX(1);     label.setAlignmentY(1);     // Add Label to top of layout     jpanel.add(label, BorderLayout.NORTH);      JList conList = new JList(values);     conList.setVisibleRowCount(3);     JScrollPane scroller = new JScrollPane(conList);     //AddScroll to center     jpanel.add(scroller);      //Add Panel to JFrame     this.add(jpanel);     this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     this.setVisible(true);    }"
"int winX = ...  //the x coordinate of the Click, given Parameter int winY = ... //the y Coordinate of the Click, given Parameter FloatBuffer winZ = BufferUtils.createFloatBuffer(1); //the x coordinate of the click, will be calculated FloatBuffer pos = BufferUtils.createFloatBuffer(3); // the final position of the click FloatBuffer modelview = BufferUtils.createFloatBuffer(16);  FloatBuffer projection = BufferUtils.createFloatBuffer(16);  IntBuffer viewport = BufferUtils.createIntBuffer(16);   GL11.glGetInteger(GL11.GL_VIEWPORT, viewport); GL11.glGetFloat(GL11.GL_MODELVIEW_MATRIX, modelview); GL11.glGetFloat(GL11.GL_PROJECTIONMATRIX, projection);  GL11.glReadPixels(winX, winY, 1,1, GL11._GL_DEPTH_COMPONENT, GL11.GL_FLOAT, winZ) //calculate the Z Coordinate of the Click GLU.gluUnProject((float)(winX), (float)(winY), (float)(winZ.get(0)), modelview, projection, viewport, pos); //Calculating the 3D Position of the click, saved in pos"
FragmentPagerAdapter fragmentPagerAdapter = (FragmentPagerAdapter) viewPager.getAdapter();     for(int i = 0; i &lt; fragmentPagerAdapter.getCount(); i++) {         ExamsListFragment viewPagerFragment = (ExamsListFragment) fragmentPagerAdapter.getItem(i);         if(viewPagerFragment != null) {             // Do something with your Fragment             // Check viewPagerFragment.isResumed() if you intend on interacting with any views.             if(viewPagerFragment.isResumed())                 viewPagerFragment.refreshExams(classType.getClassTypeId());         }     }
"BufferedImage bufferedImage = ImageIO.read(...);  ImageWriter writer = (ImageWriter)ImageIO.getImageWritersByFormatName(""jpeg"").next(); ImageWriteParam iwp = writer.getDefaultWriteParam(); iwp.setCompressionMode(ImageWriteParam.MODE_EXPLICIT); iwp.setCompressionQuality(...);  File file = new File(...); FileImageOutputStream output = new FileImageOutputStream(file); writer.setOutput(output); IIOImage image = new IIOImage(bufferedImage, null, null); writer.write(null, image, iwp); writer.dispose();"
"GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice(); Rectangle bounds = gd.getDefaultConfiguration().getBounds(); Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gd.getDefaultConfiguration());  Rectangle safeBounds = new Rectangle(bounds); safeBounds.x += insets.left; safeBounds.y += insets.top; safeBounds.width -= (insets.left + insets.right); safeBounds.height -= (insets.top + insets.bottom);  System.out.println(""Bounds = "" + bounds); System.out.println(""SafeBounds = "" + safeBounds);  Area area = new Area(bounds); area.subtract(new Area(safeBounds)); System.out.println(""Area = "" + area.getBounds());"
"public void checkImages(String imagePath) {     String path = """";     if (imagePath.equals(""""))         path = ""file:///SDCard/"";     else         path = imagePath;     try {         FileConnection fileConnection = (FileConnection)Connector.open(path);         if (fileConnection.isDirectory()) {             Enumeration directoryEnumerator = fileConnection.list(""*"", true);             Vector contentVector = new Vector();             while(directoryEnumerator.hasMoreElements()) {                 contentVector.addElement(directoryEnumerator.nextElement());             }             fileConnection.close();             for (int i = 0 ; i &lt; contentVector.size() ; i ++) {                 String name = (String) contentVector.elementAt(i);                 checkImages(path + name);             }         }         else {             if (path.toLowerCase().endsWith("".jpg"")) {                 imm.addElement(path); // your Vector                 fileConnection.close();             }         }     } catch (Exception ex) { } }"
"public static BufferedImage exampleForSO(BufferedImage image) {     BufferedImage imageIn = image;     BufferedImage imageOut =      new BufferedImage(imageIn.getWidth(), imageIn.getHeight(), BufferedImage.TYPE_4BYTE_ABGR);     int width = imageIn.getWidth();     int height = imageIn.getHeight();     int[] imageInPixels = imageIn.getRGB(0, 0, width, height, null, 0, width);     int[] imageOutPixels = new int[imageInPixels.length];     for (int i = 0; i &lt; imageInPixels.length; i++) {         int alpha = (imageInPixels[i] &amp; 0xFF000000) &gt;&gt; 24;         int red = (imageInPixels[i] &amp; 0x00FF0000) &gt;&gt; 16;         int green = (imageInPixels[i] &amp; 0x0000FF00) &gt;&gt; 8;         int blue = (imageInPixels[i] &amp; 0x000000FF) &gt;&gt; 0;          // Make any change to the colors.         if (  conditionCheckerForRedGreenAndBlue  ){             // bla bla bla         } else {             // yada yada yada         }          // At last, store in output array:         imageOutPixels[i] = (alpha &amp; 0xFF) &lt;&lt; 24                         | (red &amp; 0xFF) &lt;&lt; 16                         | (green &amp; 0xFF) &lt;&lt; 8                         | (blue &amp; 0xFF);      }     imageOut.setRGB(0, 0, width, height, imageOutPixels, 0, width);     return imageOut; }"
"String filePath = request.getParameter(""action"");         System.out.println(filePath);         // URL url = new         // URL(""http://localhost:8080/Works/images/abt.jpg"");         response.setContentType(""image/jpeg"");         response.setHeader(""Content-Disposition"", ""attachment; filename=icon"" + "".jpg"");         URL url = new URL(filePath);         URLConnection connection = url.openConnection();         InputStream stream = connection.getInputStream();          BufferedOutputStream outs = new BufferedOutputStream(response.getOutputStream());         int len;         byte[] buf = new byte[1024];         while ((len = stream.read(buf)) &gt; 0) {             outs.write(buf, 0, len);         }         outs.close();     }"
"opencv_core.IplImage img = cvLoadImage(""/sdcard/folder/img1.jpg""); FFmpegFrameRecorder recorder = new FFmpegFrameRecorder(""/sdcard/folder/test.mpeg"",200,150);      try {        recorder.setCodecID( CODEC_ID_MPEG1VIDEO);        recorder.setFrameRate(30);        recorder.setPixelFormat(  PIX_FMT_YUV420P);        recorder.start();         for (int i=0;i&lt;100;i++)        {           recorder.record(image[x]);        }        recorder.stop();     }     catch (Exception e){        e.printStackTrace();     }"
"JComponent dropTargetComponent = ...; new DropTarget(dropTargetComponent , DnDConstants.ACTION_COPY,     new DropTargetListener() {          public void drop(DropTargetDropEvent dtde) {             Transferable tr = dtde.getTransferable();             if(tr.isDataFlavorSupported(java.awt.datatransfer.DataFlavor.imageFlavor)) {                  Image image = (Image) tr.getTransferData(java.awt.datatransfer.DataFlavor.imageFlavor);                  // Do something with image             }          }           ...    }"
