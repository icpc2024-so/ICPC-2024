code
"import java.security.SecureRandom;  public class StringUtils {   private static final SecureRandom RANDOMSOURCE;   private static String CANDIDATES = ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"";    static   {     RANDOMSOURCE = new SecureRandom();   }   /**   * Generate a random string of alphanumeric characters.   * &lt;p&gt;   * The string returned will contain characters randomly   * selected from upper- and lower-case a through z as   * well as the digits 0 through 9.   * @param length the length of the string to generate   * @return a string of random alphanumeric characters of the requested length   */   public static String generateRandomString(int length)   {     final StringBuffer sb = new StringBuffer(length);     for (int i = 0; i &lt; length; i++)     {       sb.append(CANDIDATES.charAt(RANDOMSOURCE.nextInt(62)));     }     return sb.toString();   } }"
"public static void main(String args[]) {     try     {         ...         // assuming your string is ""2,5,6,10,5,30""         String[] tokens = strLine.split("","");         // tokens will be [2,5,6,10,5,30], size = 6         Random r = new Random();         for (int a = 1 ; a &lt; 3 ; a++) //a++ is a short way of writing a = a + 1         {             int randomInt = r.nextInt(tokens.length); // an integer between 0 and 5             System.out.println(tokens[randomInt]);         }     }     ... }"
"public static void main(String[] args){     int N;     System.out.println();     System.out.print(""Enter an integer number: "");     N = input.nextInt();     int[] a = new int[N];     Random generator = new Random();     for (int i = 0; i &lt; a.length; i++) {         float n = generator.nextFloat();         if (n &lt;= 0.4) {             a[i] = 1;         } else if (n &lt;= 0.7) {             a[i] = 3;         } else if (n &lt;= 0.9) {             a[i] = 4;         } else {             a[i] = 2;         }     } }"
"if (array[randomIndexA] &gt; array[randomIndexB]) {   if (array[randomIndexB] &gt; array[randomIndexC]) {     return ""b is the middle value"";   } else if (array[randomIndexA] &gt; array[randomIndexC]) {     return ""c is the middle value"";   } else {     return ""a is the middle value"";   } } else {   if (array[randomIndexA] &gt; array[randomIndexC]) {     return ""a is the middle value"";   } else if (array[randomIndexB] &gt; array[randomIndexC]) {     return ""c is the middle value"";   } else {     return ""b is the middle value"";   } }"
"int count = 0;     String guessString = Integer.toString(4455);     String randomValueString = Integer.toString(5509);      char [] randomValueCharacter = randomValueString.toCharArray();     char [] guessCharacter = guessString.toCharArray();       while(guessString.length() &lt; 4)     {         guessString = ""0"" + guessString;     }      while(randomValueString.length() &lt; 4)     {         randomValueString = ""0"" + randomValueString;     }      for (int i = 0; i &lt; 4; i++)     {         if (guessCharacter[i] == randomValueCharacter[i])         {             randomValueCharacter[i] = 'X';             guessCharacter[i] = 'O';         }     }      for (int i = 0; i &lt; 4; i++)     {         for (int j = 0; j &lt; 4; j++)         {             if (guessCharacter[j] == randomValueCharacter[i])             {                 count++;                 randomValueCharacter[i] = 'X';                 guessCharacter[j] = 'O';             }          }     }      return count; }"
"public class Test {      public static void main(String[] args)      {//create array of 1,000 random numbers       int[] randomNumbers = new int[1000];        for(int i = 0; i &lt; randomNumbers.length; i++)       randomNumbers[i] =1 +(int)(Math.random() * 6);       { //initialize count        int[] counts = countInts(randomNumbers);        displayIntCount(counts);       }      }      public static int[] countInts(int[] ints)         { //creat new array to hold occurence values          int[] counts = new int[6];          for(int i = 1; i &lt;=counts.length; i++)              for(int j=0;j&lt;ints.length;j++)                  if(ints[j] == i)                      counts[i-1]++;            return counts;         }       public static void displayIntCount(int[] counts)       {//display the occurrences          for (int i = 0; i &lt; counts.length; i++)              System.out.println(""The number ""+ (i+1) +"" occurs ""+counts[i]+ "" times"");     }  }"
"public static List&lt;String&gt; descriptorToBinary(List&lt;Double&gt; desc){      List&lt;String&gt; binary_desc = new ArrayList&lt;String&gt;();      String desc_bin= """";     for(int i = 0; i &lt; desc.size(); i++){          String binary_str_tmp = Integer.toBinaryString((int)((double)desc.get(i)));         if (binary_str_tmp.length() &lt; 16)         {             int number_of_zeros = 16 - binary_str_tmp.length();             String str_tmp = """";             for(int t = 0; t &lt; number_of_zeros; t++){                 str_tmp += ""0"";             }             binary_str_tmp = str_tmp + binary_str_tmp;         }          desc_bin+= binary_str_tmp;         binary_desc.add(final_binary_str);      }      return binary_desc;  }"
"Map&lt;String, Number&gt; strToNum = new HashMap&lt;String, Number&gt;(); strToNum.put(""one"", Integer.valueOf(1));  // OK  Map&lt;String, String&gt; strToStr = new HashMap&lt;String, String&gt;(); strToStr.put(""one"", ""1"");  // OK  Map&lt;String, ? extends Object&gt; strToUnk = randomBoolean() ? strToNum : strToStr; strToUnk.put(""null"", null);  // OK.  null is an instance of every reference type. strToUnk.put(""two"", Integer.valueOf(2));  // NOT OK.  strToUnk might be a string to string map strToUnk.put(""two"", ""2"");  // NOT OK.  strToUnk might be a string to number map"
"public static void addToList(int num, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; list)     //Splits the two parts of the number and inserts the arraylist into the proper arraylist     {       //  temp.clear();// this is the issue do below         ArrayList&lt;Integer&gt; temp = new ArrayList&lt;Integer&gt;();         int numInt_one = Integer.parseInt(String.valueOf(num).substring(0,2));           int numInt_two = Integer.parseInt(String.valueOf(num).substring(2,4));           temp.add(numInt_one);         temp.add(numInt_two);         list.add(temp);     }"
"public class RandomString {      /**      * Generate a random string.      */     public String nextString() {         for (int idx = 0; idx &lt; buf.length; ++idx)             buf[idx] = symbols[random.nextInt(symbols.length)];         return new String(buf);     }      public static final String upper = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"";      public static final String lower = upper.toLowerCase(Locale.ROOT);      public static final String digits = ""0123456789"";      public static final String alphanum = upper + lower + digits;      private final Random random;      private final char[] symbols;      private final char[] buf;      public RandomString(int length, Random random, String symbols) {         if (length &lt; 1) throw new IllegalArgumentException();         if (symbols.length() &lt; 2) throw new IllegalArgumentException();         this.random = Objects.requireNonNull(random);         this.symbols = symbols.toCharArray();         this.buf = new char[length];     }      /**      * Create an alphanumeric string generator.      */     public RandomString(int length, Random random) {         this(length, random, alphanum);     }      /**      * Create an alphanumeric strings from a secure generator.      */     public RandomString(int length) {         this(length, new SecureRandom());     }      /**      * Create session identifiers.      */     public RandomString() {         this(21);     }  }"
"private static DecimalFormat oneDecimal = new DecimalFormat(&quot;0.0&quot;);    /**    * Given an integer, return a string that is in an approximate, but human     * readable format.     * It uses the bases 'k', 'm', and 'g' for 1024, 1024**2, and 1024**3.    * @param number the number to format    * @return a human readable form of the integer    */   public static String humanReadableInt(long number) {     long absNumber = Math.abs(number);     double result = number;     String suffix = &quot;&quot;;     if (absNumber &lt; 1024) {       // nothing     } else if (absNumber &lt; 1024 * 1024) {       result = number / 1024.0;       suffix = &quot;k&quot;;     } else if (absNumber &lt; 1024 * 1024 * 1024) {       result = number / (1024.0 * 1024);       suffix = &quot;m&quot;;     } else {       result = number / (1024.0 * 1024 * 1024);       suffix = &quot;g&quot;;     }     return oneDecimal.format(result) + suffix;   }"
"public static String formatTest(int areaCode, int exchangeCode, int number) {     DecimalFormat nf3 = new DecimalFormat(""#000"");     DecimalFormat nf4 = new DecimalFormat(""#0000"");     if( areaCode != 0)         return nf3.format(areaCode) + ""-"" + nf3.format(exchangeCode) + ""-"" + nf4.format(number);     else         return nf3.format(exchangeCode) + ""-"" + nf4.format(number); }   public static void main(String[] args) {     System.out.println(formatTest(12, 90, 8));     System.out.println(formatTest(1, 953, 1932)); }"
"public class Pair {   public int left;   public int right;    Pair(int left, int right) {     this.left = left;     this.right = right;   }    public boolean equals(Object otherObj) {     if (otherObj == null || !(otherObj instanceof Pair)) {       return false;     }     Pair otherPair = (Pair) otherObj;     return (this.left == otherPair.left &amp;&amp; this.right == otherPair.right);   }   public int hashCode() {     return new Integer(this.left).hashCode() + new Integer(this.right).hashCode();   } }"
public static UUID randomUUID() {         SecureRandom ng = numberGenerator;         if (ng == null) {             numberGenerator = ng = new SecureRandom();         }          byte[] randomBytes = new byte[16];         ng.nextBytes(randomBytes);         randomBytes[6]  &amp;= 0x0f;  /* clear version        */         randomBytes[6]  |= 0x40;  /* set to version 4     */         randomBytes[8]  &amp;= 0x3f;  /* clear variant        */         randomBytes[8]  |= 0x80;  /* set to IETF variant  */         return new UUID(randomBytes);     }
"public class SomeClass {   Point p1;   Point p2;    public void actionPerformed(ActionEvent e) {      // some code....      int m1 = Integer.parseInt(point1.getElementsByTagName(""X"").item(0).getTextContent());     int n1 = Integer.parseInt(point1.getElementsByTagName(""Y"").item(0).getTextContent());     int m2 = Integer.parseInt(point2.getElementsByTagName(""X"").item(0).getTextContent());     int n2 = Integer.parseInt(point2.getElementsByTagName(""Y"").item(0).getTextContent());      p1 = new Point(m1, n1);     p2 = new Point(m2, n2);   }    public Point getP1() {     return p1;   }    public Point getP2() {     return p2;   }  }"
"jstring string; string = env-&gt;NewStringUTF(item-&gt;get_id().c_str()); env-&gt;SetObjectArrayElement( data,0,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_number().c_str()); env-&gt;SetObjectArrayElement( data,1,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_fullname().c_str()); env-&gt;SetObjectArrayElement( data,2,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_mf().c_str()); env-&gt;SetObjectArrayElement( data,3,string); env-&gt;DeleteLocalRef(string); string = env-&gt;NewStringUTF(item-&gt;get_dob().c_str()); env-&gt;SetObjectArrayElement( data,4,string); env-&gt;DeleteLocalRef(string); env-&gt;CallVoidMethod(dao, jsaveItem, data, jtype);"
"for (i = 0; i &lt; N; i++) { // **** you use ""i"" it here      for (j = 0; j &lt; N; j++) { // **** and ""j"" here         if (Grid[i][j] == 0) {             ArrayList&lt;Integer&gt; possible = create();             for (i = 0; i &lt; N; i++) { // **** and again here               for (j = 0; j &lt; N; j++) { // **** and again here                  if (Grid[i][0] == possible.get(i)) {                     possible.set(i, 0);                  }               }            }             for (i = 0; i &lt; N; i++) { // **** and again here               for (j = 0; j &lt; N; j++) { // **** and again here                  if (Grid[0][j] == possible.get(i)) {                     possible.set(i, 0);                  }               }            }             // ....             Grid[i][j] = value;         }      }   }"
"public void addDictionary(HashMap&lt;String, Integer&gt; incomingDictionary) {     if (incomingDictionary == null) {         return; // or throw runtime exception     }     if (totalDictionary == null) {         return;// or throw runtime exception     }     if (totalDictionary.isEmpty()) {         totalDictionary.putAll(incomingDictionary);     } else {         for (Entry&lt;String, Integer&gt; incomingIter : incomingDictionary.entrySet()) {             String incomingKey = incomingIter.getKey();             Integer incomingValue = incomingIter.getValue();             Integer totalValue = totalDictionary.get(incomingKey);             // If total dictionary contains null for the incoming key it is             // as good as replacing it with incoming value.             Integer sum = (totalValue == null ?                                              incomingValue : incomingValue == null ?                                                      totalValue : totalValue + incomingValue                           );             totalDictionary.put(incomingKey, sum);         }     } }"
;; original prime? function (defn prime? [n]   (or (= n 2)        (not (some #(zero? (rem n %))                   (conj (range 3                                (inc (Math/sqrt n))                                2)                         2)))))  ;; prime? function using recur (defn prime?-recur [num]   (cond (&lt; num 2) false         (= num 2) true         (zero? (mod num 2)) false         :else (loop [n num                      i 3]                 (cond (&gt;= i (inc (Math/sqrt n))) true                       (zero? (mod n i)) false                       (&lt; i (inc (Math/sqrt n))) (recur n (+ i 2))))))  ;; original printPrimes with option for testing both prime? funs ;; note I changed this to start on 2 since 1 is not prime (defn printPrimes [n fn] (take n (filter fn (iterate inc 2))))  ;; printPrimes using recursion (defn printPrimes-recur [num fn]   (loop [n num i 2 primes []]     (cond (and (fn i) (&lt; (count primes) n)) (recur n (+ i 1) (conj primes i))           (&lt; (count primes) n) (recur n (+ i 1) primes)           :else primes)))
"public class DoubleEncoding {     public static void main(String[] args) throws Exception {         byte[] encoding1 = &quot;你好吗&quot;.getBytes(&quot;UTF-8&quot;);         String string1 = new String(encoding1, &quot;ISO8859-1&quot;);         for (byte b : encoding1) {             System.out.printf(&quot;%2x &quot;, b);         }         System.out.println();         byte[] encoding2 = string1.getBytes(&quot;UTF-8&quot;);         for (byte b : encoding2) {             System.out.printf(&quot;%2x &quot;, b);         }         System.out.println();     } }"
"import java.math.BigInteger; import java.util.Random;  public class FermatTestExample {      private final static Random rand = new Random();      private static BigInteger getRandomFermatBase(BigInteger n)     {         // Rejection method: ask for a random integer but reject it if it isn't         // in the acceptable set.          while (true)         {             final BigInteger a = new BigInteger (n.bitLength(), rand);             // must have 1 &lt;= a &lt; n             if (BigInteger.ONE.compareTo(a) &lt;= 0 &amp;&amp; a.compareTo(n) &lt; 0)             {                 return a;             }         }     }      public static boolean checkPrime(BigInteger n, int maxIterations)     {         if (n.equals(BigInteger.ONE))             return false;          for (int i = 0; i &lt; maxIterations; i++)         {             BigInteger a = getRandomFermatBase(n);             a = a.modPow(n.subtract(BigInteger.ONE), n);              if (!a.equals(BigInteger.ONE))                 return false;         }          return true;     }      public static void main(String[] args)     {         System.out.printf(""checkprime(2) is %b%n"", checkPrime(BigInteger.valueOf(2L), 20));         System.out.printf(""checkprime(5) is %b%n"", checkPrime(BigInteger.valueOf(5L), 20));         System.out.printf(""checkprime(7) is %b%n"", checkPrime(BigInteger.valueOf(7L), 20));         System.out.printf(""checkprime(9) is %b%n"", checkPrime(BigInteger.valueOf(9L), 20));     } }"
"for (int i = 0; i &lt; n; i++) { // Begin For Loop          if (i == 0)              System.out.println(""Enter First Number: "");          else if (i &gt; 0 &amp;&amp; i &lt; (n - 1))             System.out.println(""Enter Next Number: \n"");          else if (i == (n - 1))              System.out.println(""Enter Final Number: "");          while (!input.hasNextDouble()) {                 System.out.println(""Please enter a number for array data!"");                 input.next();         }         Double D = input.nextDouble();         anArray[i] = D;      } // End For Loop"
"public static String byteToHexString(byte b) {     String result = """";     result += Integer.toHexString((int)(b &gt;&gt; 4) &amp; 0xf);     result += Integer.toHexString((int)(b) &amp; 0xf);     return result; }  public static String bytesToHexString(final byte[] byteArray) {     if (byteArray == null) {         return null;     }     String result = """";     for (int i = 0; i &lt; byteArray.length; ++i) {         result += byteToHexString(byteArray[i]);     }     return result; }  public static byte[] hexStringToBytes(final String hexString) {     if (hexString == null) {         return null;     }     byte[] result = new byte[hexString.length() / 2];     for (int idx = 0; idx &lt; result.length; ++idx) {         int strIdx = idx * 2;         result[idx] = (byte) ((Character.digit(hexString.charAt(strIdx), 16) &lt;&lt; 4)                 + Character.digit(hexString.charAt(strIdx + 1), 16));     }     return result; }"
"public static void qsort(int[] a, int si, int ei){     //base case     if(ei&lt;=si || si&gt;=ei){}      else{          int pivot = a[si];          int i = si+1; int tmp;           //partition array          for(int j = si+1; j&lt;= ei; j++){             if(pivot &gt; a[j]){                 tmp = a[j];                  a[j] = a[i];                  a[i] = tmp;                   i++;              }         }          //put pivot in right position         a[si] = a[i-1];          a[i-1] = pivot;           //call qsort on right and left sides of pivot         qsort(a, si, i-2);          qsort(a, i, ei);      } }"
"import java.util.HashMap; import java.util.Map;  class A {     String name;     Integer number;      public A(String name, Integer number) {     super();     this.name = name;     this.number = number;     }  }  class B {     String name;     Integer number;      public B(String name, Integer number) {     super();     this.name = name;     this.number = number;     }      @Override     public boolean equals(Object obj) {     if (obj instanceof B) {         return obj == this || (name.equals(((B) obj).name) &amp;&amp; number.equals(((B) obj).number));     }     return false;     }      @Override     public int hashCode() {     return name.hashCode() + number.hashCode();     } }  public class TestHashMap {      public static void main(String... args) {         A a1 = new A(""a"", 1);         A anotherA1 = new A(""a"", 1);          Map&lt;A, String&gt; as = new HashMap&lt;A, String&gt;();          as.put(a1, ""a1"");          System.out.println(as.get(anotherA1)); // prints null          B b1 = new B(""b"", 1);         B anotherB1 = new B(""b"", 1);          Map&lt;B, String&gt; bs = new HashMap&lt;B, String&gt;();          bs.put(b1, ""b1"");          System.out.println(bs.get(anotherB1)); // prints b1      }  }"
"public ArrayList&lt;HashMap&lt;String,Object&gt;&gt; convertDynaBeanListToArrayList(List&lt;DynaBean&gt; theList) {     ArrayList&lt;HashMap&lt;String,Object&gt;&gt; result = new ArrayList&lt;HashMap&lt;String,Object&gt;&gt;();     DynaProperty[] dynaProperties = null;     for (Integer i=0;i&lt;theList.size();i++) {         DynaBean row = theList.get(i);         HashMap&lt;String,Object&gt; resultRow=new HashMap&lt;String,Object&gt;();         // each raw got the same column names, no need to fetch this for every line         if (dynaProperties == null) {             dynaProperties = row.getDynaClass().getDynaProperties();         }         for (Integer j=0;j&lt;dynaProperties.length;j++) {             String columnName=dynaProperties[j].getName();             resultRow.put(columnName, row.get(columnName));         }         result.add(resultRow);     }      return result; }"
"421       /* Returns a string representation of this collection.  The string   422        * representation consists of a list of the collection's elements in the   423        * order they are returned by its iterator, enclosed in square brackets   424        * (&lt;tt&gt;""[]""&lt;/tt&gt;).  Adjacent elements are separated by the characters   425        * &lt;tt&gt;"", ""&lt;/tt&gt; (comma and space).  Elements are converted to strings as   426        * by {@link String#valueOf(Object)}.   427        *   428        * @return a string representation of this collection   429        */   430       public String toString() {   431           Iterator&lt;E&gt; i = iterator();   432           if (! i.hasNext())   433               return ""[]"";   434      435           StringBuilder sb = new StringBuilder();   436           sb.append('[');   437           for (;;) {   438               E e = i.next();   439               sb.append(e == this ? ""(this Collection)"" : e);   440               if (! i.hasNext())   441                   return sb.append(']').toString();   442               sb.append("", "");   443           }"
"String[] numbersToEvaluate = new String[]{""11100111"", ""100101"", ""10101101""};  for (String num: numbersToEvaluate) {     number = Integer.parseInt(num);      digit1 = ((number % 100000000) - (number % 10000000 % 10000000)) / 10000000;     digit2 = ((number % 10000000) - (number % 10000000 % 1000000)) / 1000000;     digit3 = ((number % 1000000) - (number % 1000000 % 100000)) / 100000;     digit4 = ((number % 100000) - (number % 100000 % 10000)) / 10000;     digit5 = ((number % 10000) - (number % 10000 % 1000)) / 1000;     digit6 = ((number % 1000) - (number % 1000 % 100)) / 100;     digit7 = ((number % 100) - (number % 100 % 10)) / 10;     digit8 = (number % 10);      result = (digit1 * -128) + (digit2 * 64) + (digit3 * 32) + (digit4 * 16) + (digit5 * 8) + (digit6 * 4) + (digit7 * 2) + (digit8 * 1);      System.out.println ( ""Binary number: "" + num + ""\nDecimal Number: "" + result); }"
"public static void main(String[] args) {         String number1 = ""108"";         String number2 = ""84"";          char[] n1 = number1.toCharArray();         char[] n2 = number2.toCharArray();          int result = 0;          for (int i = 0; i &lt; n1.length; i++) {             for (int j = 0; j &lt; n2.length; j++) {                 result += (n1[i] - '0') * (n2[j] - '0')                         * (int) Math.pow(10, n1.length + n2.length - (i + j + 2));             }         }         System.out.println(result);     }"
"import java.util.*; public class Rand20_200{    int number20[]=new int[20]; //numbers in random order    int number200[]=new int[200];     public Rand20_200(){     int n=0;     int ngen[]=new int[20]; //to store which random numbers are generated     while(n&lt;20){       int rnd=1 + (getrand100()-1) / 5;       if (ngen[rnd-1]==0){         ngen[rnd-1]=1;         number20[n++]=rnd;       }     }     System.out.println(""Random 20 numbers"");     print(number20);      ngen=new int[200]; //to store which random numbers are generated     int numoff[]={-1,0}; //offset to add     n=0;     while(n&lt;200){       int rnd=numoff[(getrand100()-1)/50]+ (getrand100()*2);       if (ngen[rnd-1]==0){      ngen[rnd-1]=1;      number200[n++]=rnd;       }     }        System.out.println(""\nRandom 200 numbers"");     print(number200);    }     int getrand100(){     Random rand = new Random();     return (1+rand.nextInt(100));          }     void print(int arr[]){      for(int i=0;i&lt;arr.length;i++){        System.out.print(arr[i]+"" "");      }    }     public static void main(String args[]){      new Rand20_200();    }   }"
