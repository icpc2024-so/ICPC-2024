code
"Document doc = Jsoup.connect(""http://stackoverflow.com/questions/14541740/java-program-to-download-images-from-a-website-and-display-the-file-sizes"").get();  Elements imgElements = doc.select(""img[src]""); Map&lt;String, String&gt; fileSizeMap = new HashMap&lt;String, String&gt;();  for(Element imgElement : imgElements){     String imgUrlString = imgElement.attr(""abs:src"");     URL imgURL = new URL(imgUrlString);     HttpURLConnection httpConnection = (HttpURLConnection) imgURL.openConnection();     String contentLengthString = httpConnection.getHeaderField(""Content-Length"");     if(contentLengthString == null)         contentLengthString = ""Unknown"";      fileSizeMap.put(imgUrlString, contentLengthString); }  for(Map.Entry&lt;String, String&gt; mapEntry : fileSizeMap.entrySet()){     String imgFileName = mapEntry.getKey();     System.out.println(imgFileName + "" ---&gt; "" + mapEntry.getValue() + "" bytes""); }"
"ClientConfig config = new DefaultClientConfig(); Client client = Client.create(config); WebResource webResource = client.resource(""http://some.url/path1/path2"");  MultivaluedMapImpl values = new MultivaluedMapImpl(); values.add(""filename"", ""report.zip""); values.add(""text"", ""Test message""); values.add(""content"", new String(Base64.encode(FileUtils.readFileToByteArray(attachedLogs)))); ClientResponse response = webResource.type(MediaType.APPLICATION_FORM_URLENCODED).post(ClientResponse.class, values);"
"private BlobKey saveToBlobstore(String contentType, String imageName, byte[] imageData) throws IOException {     // Get a file service     FileService fileService = FileServiceFactory.getFileService();      // Create a new Blob file and set the name to contain ref to UserImage     AppEngineFile file = fileService.createNewBlobFile(contentType, imageName);      // Open a channel to write to it     FileWriteChannel writeChannel = fileService.openWriteChannel(file, true);      writeChannel.write(ByteBuffer.wrap(imageData));     writeChannel.closeFinally();      // return the BlobKey     return fileService.getBlobKey(file); }"
"CloseableHttpClient httpClient = HttpClients.createDefault(); HttpPost uploadFile = new HttpPost(""...""); MultipartEntityBuilder builder = MultipartEntityBuilder.create(); builder.addTextBody(""field1"", ""yes"", ContentType.TEXT_PLAIN);  // This attaches the file to the POST: File f = new File(""[/path/to/upload]""); builder.addBinaryBody(     ""file"",     new FileInputStream(f),     ContentType.APPLICATION_OCTET_STREAM,     f.getName() );  HttpEntity multipart = builder.build(); uploadFile.setEntity(multipart); CloseableHttpResponse response = httpClient.execute(uploadFile); HttpEntity responseEntity = response.getEntity();"
"import java.io.File;  import org.apache.commons.vfs2.FileObject; import org.apache.commons.vfs2.FileSystemException; import org.apache.commons.vfs2.FileSystemOptions; import org.apache.commons.vfs2.Selectors; import org.apache.commons.vfs2.impl.StandardFileSystemManager; import org.apache.commons.vfs2.provider.sftp.SftpFileSystemConfigBuilder;  /**  * The class SFTPUtil containing uploading, downloading, checking if file exists  * and deleting functionality using Apache Commons VFS (Virtual File System)  * Library  *   * @author Ashok  *   */ public class SFTPUtility {      public static void main(String[] args) {         String hostName = ""PutYourHostNameHere"";         String username = ""PutYourUserNameForHostHere"";         String password = ""PutYourPasswordForHostHere"";          String localFilePath = ""C:\\FakePath\\FakeFile.txt"";         String remoteFilePath = ""/FakeRemotePath/FakeRemoteFile.txt"";                String remoteTempFilePath = ""/FakeRemoteTempPath/FakeRemoteTempFile.txt"";          upload(hostName, username, password, localFilePath, remoteFilePath);         exist(hostName, username, password, remoteFilePath);         download(hostName, username, password, localFilePath,remoteFilePath);         move(hostName, username, password, remoteFilePath, remoteTempFilePath);         delete(hostName, username, password, remoteFilePath);     }      /**      * Method to upload a file in Remote server      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param localFilePath      *            LocalFilePath. Should contain the entire local file path -      *            Directory and Filename with \\ as separator      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      */     public static void upload(String hostName, String username, String password, String localFilePath, String remoteFilePath) {          File file = new File(localFilePath);         if (!file.exists())             throw new RuntimeException(""Error. Local file not found"");          StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create local file object             FileObject localFile = manager.resolveFile(file.getAbsolutePath());              // Create remote file object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());             /*              * use createDefaultOptions() in place of fsOptions for all default              * options - Ashok.              */              // Copy local file to sftp server             remoteFile.copyFrom(localFile, Selectors.SELECT_SELF);              System.out.println(""File upload success"");         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      public static boolean move(String hostName, String username, String password, String remoteSrcFilePath, String remoteDestFilePath){         StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create remote object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteSrcFilePath), createDefaultOptions());             FileObject remoteDestFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteDestFilePath), createDefaultOptions());              if (remoteFile.exists()) {                 remoteFile.moveTo(remoteDestFile);;                 System.out.println(""Move remote file success"");                 return true;             }             else{                 System.out.println(""Source file doesn't exist"");                 return false;             }         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      /**      * Method to download the file from remote server location      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param localFilePath      *            LocalFilePath. Should contain the entire local file path -      *            Directory and Filename with \\ as separator      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      */     public static void download(String hostName, String username, String password, String localFilePath, String remoteFilePath) {          StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Append _downlaod_from_sftp to the given file name.             //String downloadFilePath = localFilePath.substring(0, localFilePath.lastIndexOf(""."")) + ""_downlaod_from_sftp"" + localFilePath.substring(localFilePath.lastIndexOf("".""), localFilePath.length());              // Create local file object. Change location if necessary for new downloadFilePath             FileObject localFile = manager.resolveFile(localFilePath);              // Create remote file object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());              // Copy local file to sftp server             localFile.copyFrom(remoteFile, Selectors.SELECT_SELF);              System.out.println(""File download success"");         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      /**      * Method to delete the specified file from the remote system      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param localFilePath      *            LocalFilePath. Should contain the entire local file path -      *            Directory and Filename with \\ as separator      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      */     public static void delete(String hostName, String username, String password, String remoteFilePath) {         StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create remote object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());              if (remoteFile.exists()) {                 remoteFile.delete();                 System.out.println(""Delete remote file success"");             }         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      // Check remote file is exist function:     /**      * Method to check if the remote file exists in the specified remote      * location      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      * @return Returns if the file exists in the specified remote location      */     public static boolean exist(String hostName, String username, String password, String remoteFilePath) {         StandardFileSystemManager manager = new StandardFileSystemManager();          try {             manager.init();              // Create remote object             FileObject remoteFile = manager.resolveFile(createConnectionString(hostName, username, password, remoteFilePath), createDefaultOptions());              System.out.println(""File exist: "" + remoteFile.exists());              return remoteFile.exists();         } catch (Exception e) {             throw new RuntimeException(e);         } finally {             manager.close();         }     }      /**      * Generates SFTP URL connection String      *       * @param hostName      *            HostName of the server      * @param username      *            UserName to login      * @param password      *            Password to login      * @param remoteFilePath      *            remoteFilePath. Should contain the entire remote file path -      *            Directory and Filename with / as separator      * @return concatenated SFTP URL string      */     public static String createConnectionString(String hostName, String username, String password, String remoteFilePath) {         return ""sftp://"" + username + "":"" + password + ""@"" + hostName + ""/"" + remoteFilePath;     }      /**      * Method to setup default SFTP config      *       * @return the FileSystemOptions object containing the specified      *         configuration options      * @throws FileSystemException      */     public static FileSystemOptions createDefaultOptions() throws FileSystemException {         // Create SFTP options         FileSystemOptions opts = new FileSystemOptions();          // SSH Key checking         SftpFileSystemConfigBuilder.getInstance().setStrictHostKeyChecking(opts, ""no"");          /*          * Using the following line will cause VFS to choose File System's Root          * as VFS's root. If I wanted to use User's home as VFS's root then set          * 2nd method parameter to ""true""          */         // Root directory set to user home         SftpFileSystemConfigBuilder.getInstance().setUserDirIsRoot(opts, false);          // Timeout is count by Milliseconds         SftpFileSystemConfigBuilder.getInstance().setTimeout(opts, 10000);          return opts;     } }"
"Path folder = Paths.get(System.getProperty(&quot;upload.location&quot;)); String filename = FilenameUtils.getBaseName(uploadedFile.getName());  String extension = FilenameUtils.getExtension(uploadedFile.getName()); Path file = Files.createTempFile(folder, filename + &quot;-&quot;, &quot;.&quot; + extension);  try (InputStream input = uploadedFile.getInputStream()) {     Files.copy(input, file, StandardCopyOption.REPLACE_EXISTING); }  String uploadedFileName = file.getFileName().toString(); // Now store it in DB."
"import static groovy.io.FileType.FILES import info.magnolia.jcr.util.NodeUtil import org.apache.commons.lang.StringUtils import info.magnolia.cms.util.ContentUtil  class Globals {  static def folderName = '//some/folder/in/filesystem/on/server' }  def loadImageFolder() {  session = ctx.getJCRSession(""resources"")  parentFolder = session.getNode(""/templating-kit/jelinek-image/obrazky-produkty"")   new File(Globals.folderName).eachFileRecurse(FILES) {    name = it.name   // set file name   extension = StringUtils.substringAfterLast(name, '.')   name = StringUtils.substringBeforeLast(name, '.')    // persist   resource = NodeUtil.createPath(parentFolder,name , ""mgnl:content"")   // persistResource   resource.setProperty(""mgnl:template"", ""resources:binary"")   resource.setProperty(""extension"", extension)    binary = resource.addNode(""binary"", ""mgnl:resource"")   binary.setProperty(""jcr:data"", new FileInputStream(it.absolutePath))   binary.setProperty(""extension"", extension)   binary.setProperty(""fileName"", name)   binary.setProperty(""jcr:mimeType"", ""image/""+extension)   binary.setProperty(""size"", it.length())   }  session.save() }  loadImageFolder()  return 'done'"
"public String convertFile(HttpServletRequest request, HttpSession session) {     // cast request     MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;     // You can get your file from request     CommonsMultipartFile multipartFile =  null; // multipart file class depends on which class you use assuming you are using org.springframework.web.multipart.commons.CommonsMultipartFile      Iterator&lt;String&gt; iterator = multipartRequest.getFileNames();      while (iterator.hasNext()) {         String key = (String) iterator.next();         // create multipartFile array if you upload multiple files         multipartFile = (CommonsMultipartFile) multipartRequest.getFile(key);     }      // logic for conversion }"
"Path p = Paths.get(""/your/file""); // where you want to write FileSystem fileSystem = FileSystems.getDefault(); Iterable&lt;FileStore&gt; iterable = fileSystem.getFileStores();  Iterator&lt;FileStore&gt; it = iterable.iterator(); // iterate the FileStore instances while(it.hasNext()) {     FileStore fileStore = it.next();     long sizeAvail = fileStore.getUsableSpace(); // or maybe getUnallocatedSpace()     if (Files.getFileStore(p).equals(fileStore) { // your Path belongs to this FileStore         if (sizeAvail &gt; theSizeOfBytesYouWantToWrite) {             // do your thing         }     } }"
"FTPClient client = new FTPClient(); FileInputStream fis = null;  try  {     client.connect(serverip);     client.login(""user, pass);     client.setFileType(FTPClient.BINARY_FILE_TYPE);      // change directory to serverip/file/     if (client.changeWorkingDirectory(""/file""))     {                // Create an InputStream of the file to be uploaded         String filename = Shared.saveLocation + Shared.saveAs;         fis = new FileInputStream(filename);          // Store file to server         client.storeFile(Shared.saveAs, fis);     }     client.logout(); }  catch (IOException e)  {     e.printStackTrace(); }  finally  {     try     {         if (fis != null)          {             fis.close();         }         client.disconnect();     }      catch (IOException e)      {         e.printStackTrace();     } }"
"OutputStream os = conn.getOutputStream(); os.write(input.getBytes()); // The input you need to pass to the webservice os.flush(); ... BufferedReader br = new BufferedReader(new InputStreamReader(         (conn.getInputStream()))); // Getting the response from the webservice  String output; System.out.println(""Output from Server .... \n""); while ((output = br.readLine()) != null) {     System.out.println(output); // Instead of this, you could append all your response to a StringBuffer and use `toString()` to get the entire JSON response as a String.     // This string json response can be parsed using any json library. Eg. GSON from Google. }"
"RepositoryConnection conn = rep.getConnection(); try {    // prepare the query    String queryString = ""SELECT * WHERE {?s ?p ?o . }"";    TupleQuery query = conn.prepareTupleQuery(QueryLanguage.SPARQL, queryString);     // open a file to write the result to it in JSON format    OutputStream out = new FileOutputStream(""/path/to/output.json"");    TupleQueryResultHandler writer = new SPARQLResultJSONWriter(out);     // execute the query and write the result directly to file    query.evaluate(writer);   } finally {    conn.close(); }"
"public class DownloadPDF extends HttpServlet {  public void doGet(HttpServletRequest req, HttpServletResponse res)         throws ServletException, IOException {          //Extract some request parameters, fetch your data and generate your document          String fileName = ""&lt;SomeFileName&gt;.pdf"";         res.setContentType(""application/pdf"");         res.setHeader(""Content-Disposition"", ""attachment;filename=\"""" + fileName + ""\"""");         writePDF(&lt;SomeObjectData&gt;, res.getOutputStream());     } }"
"class MappedS3Image[T&lt;:Mapper[T]](owner: T, val path:String, maxWidth: String, maxHeight:String) extends MappedString[T](owner, 36) {    def url:String = MappedS3Image.fullImgPath(path, is)    def setFromUpload(fileHolder: Box[FileParamHolder]) = {       S3Sender.uploadImageToS3(path, fileHolder).map(this.set(_))   }    override def asHtml:Node = &lt;img src={url} style={""max-width:"" + maxWidth + "";max-height:""+maxHeight} /&gt;   override def _toForm: Box[Elem] = Full(SHtml.fileUpload(fu=&gt;setFromUpload(Full(fu))))  }   import java.awt.Image  import java.awt.image.BufferedImage import javax.imageio.ImageIO import java.awt.Graphics2D import java.awt.AlphaComposite  object ImageResizer {      def resize(is:java.io.InputStream, maxWidth:Int, maxHeight:Int):BufferedImage = {         val originalImage:BufferedImage = ImageIO.read(is)          val height = originalImage.getHeight         val width = originalImage.getWidth          if (width &lt;= maxWidth &amp;&amp; height &lt;= maxHeight)             originalImage         else {             var scaledWidth:Int = width             var scaledHeight:Int = height             val ratio:Double = width/height             if (scaledWidth &gt; maxWidth){                 scaledWidth = maxWidth                 scaledHeight = (scaledWidth.doubleValue/ratio).intValue             }             if (scaledHeight &gt; maxHeight){                 scaledHeight = maxHeight                 scaledWidth = (scaledHeight.doubleValue*ratio).intValue             }             val scaledBI = new BufferedImage(scaledWidth, scaledHeight,  BufferedImage.TYPE_INT_RGB)             val g = scaledBI.createGraphics             g.setComposite(AlphaComposite.Src)             g.drawImage(originalImage, 0, 0, scaledWidth, scaledHeight, null);             g.dispose             scaledBI         }     } }"
"try{         WebElement byId = driver.findElement(By.id(""by-id""));          System.out.println(byId.getTagName());          System.out.println(""get the text for web element with id='by-id' "");         System.out.println(""------------------------------------------------------------"");         System.out.println(byId.getText());         System.out.println(""------------------------------------------------------------"");         System.out.println(byId.getAttribute(""id""));         System.out.println(byId.getCssValue(""font-size""));     } }"
"ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();      // This URL for a directory will be searched *recursively*     URL classes =         new URL( ""file:///D:/code/myCustomClassesAreUnderThisFolder/"" );      ClassLoader custom =          new URLClassLoader( new URL[] { classes }, systemClassLoader );      // this class should be loaded from your directory     Class&lt; ? &gt; clazz = custom.loadClass( ""my.custom.class.Name"" );      // this class will be loaded as well, because you specified the system      // class loader as the parent     Class&lt; ? &gt; clazzString = custom.loadClass( ""java.lang.String"" );"
"package com.mycompany;  import org.apache.http.*; import org.apache.http.entity.StringEntity; import org.apache.http.protocol.HttpContext; import org.apache.http.protocol.HttpRequestHandler; import org.apache.http.util.EntityUtils; import org.omg.CORBA.Request;  import java.io.IOException; import java.io.InputStream; import java.io.OutputStream;  /**  * Created by IntelliJ IDEA.  * User: Piotrek  * To change this template use File | Settings | File Templates.  */ public class LoggingHandler implements HttpRequestHandler {     public void handle(HttpRequest httpRequest, HttpResponse httpResponse, HttpContext httpContext) throws HttpException, IOException {          System.out.println(""""); // empty line before each request         System.out.println(httpRequest.getRequestLine());         System.out.println(""-------- HEADERS --------"");         for(Header header: httpRequest.getAllHeaders()) {             System.out.println(header.getName() + "" : "" + header.getValue());         }         System.out.println(""--------"");          HttpEntity entity = null;         if (httpRequest instanceof HttpEntityEnclosingRequest)             entity = ((HttpEntityEnclosingRequest)httpRequest).getEntity();          // For some reason, just putting the incoming entity into         // the response will not work. We have to buffer the message.         byte[] data;         if (entity == null) {             data = new byte [0];         } else {             data = EntityUtils.toByteArray(entity);         }          System.out.println(new String(data));          httpResponse.setEntity(new StringEntity(""dummy response""));     } }"
"mButton.setOnClickListener( new View.OnClickListener()          {             public void onClick(View view)              {                 collectionID = mEdit.getText().toString();                  Log.d(""EditText"", collectionID);                  // save value here in SharedPreferences                  SharedPreferences settings =                              ConfigPage.this.getSharedPreferences(PREFS_NAME, 0);                  SharedPreferences.Editor editor = settings.edit();                  editor.putString(collectionID, collectionID);                  editor.commit();                }          });"
"try {     // Set up the socket address     InetSocketAddress address = new InetSocketAddress(InetAddress.getLocalHost(), config.getHttpsPort());      // Initialise the HTTPS server     HttpsServer httpsServer = HttpsServer.create(address, 0);     SSLContext sslContext = SSLContext.getInstance(""TLS"");      // Initialise the keystore     char[] password = ""simulator"".toCharArray();     KeyStore ks = KeyStore.getInstance(""JKS"");     FileInputStream fis = new FileInputStream(""lig.keystore"");     ks.load(fis, password);      // Set up the key manager factory     KeyManagerFactory kmf = KeyManagerFactory.getInstance(""SunX509"");     kmf.init(ks, password);      // Set up the trust manager factory     TrustManagerFactory tmf = TrustManagerFactory.getInstance(""SunX509"");     tmf.init(ks);      // Set up the HTTPS context and parameters     sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);     httpsServer.setHttpsConfigurator(new HttpsConfigurator(sslContext) {         public void configure(HttpsParameters params) {             try {                 // Initialise the SSL context                 SSLContext c = SSLContext.getDefault();                 SSLEngine engine = c.createSSLEngine();                 params.setNeedClientAuth(false);                 params.setCipherSuites(engine.getEnabledCipherSuites());                 params.setProtocols(engine.getEnabledProtocols());                  // Get the default parameters                 SSLParameters defaultSSLParameters = c.getDefaultSSLParameters();                 params.setSSLParameters(defaultSSLParameters);             } catch (Exception ex) {                 ILogger log = new LoggerFactory().getLogger();                 log.exception(ex);                 log.error(""Failed to create HTTPS port"");             }         }     });     LigServer server = new LigServer(httpsServer);     joinableThreadList.add(server.getJoinableThread()); } catch (Exception exception) {     log.exception(exception);     log.error(""Failed to create HTTPS server on port "" + config.getHttpsPort() + "" of localhost""); }"
"try {     OutputStream servletOutputStream = httpServletResponse.getOutputStream(); // retrieve OutputStream from HttpServletResponse     ZipOutputStream zos = new ZipOutputStream(servletOutputStream); // create a ZipOutputStream from servletOutputStream      List&lt;String[]&gt; csvFileContents  = getContentToZIP(); // get the list of csv contents. I am assuming the CSV content is generated programmatically     int count = 0;     for (String[] entries : csvFileContents) {         String filename = ""file-"" + ++count  + "".csv"";         ZipEntry entry = new ZipEntry(filename); // create a zip entry and add it to ZipOutputStream         zos.putNextEntry(entry);          CSVWriter writer = new CSVWriter(new OutputStreamWriter(zos));  // There is no need for staging the CSV on filesystem or reading bytes into memory. Directly write bytes to the output stream.         writer.writeNext(entries);  // write the contents         writer.flush(); // flush the writer. Very important!         zos.closeEntry(); // close the entry. Note : we are not closing the zos just yet as we need to add more files to our ZIP     }      zos.close(); // finally closing the ZipOutputStream to mark completion of ZIP file } catch (Exception e) {     log.error(e); // handle error }"
boolean isMultipart = ServletFileUpload.isMultipartContent(request);         if (isMultipart)         {             try              {                 List items = upload.parseRequest(request);                 Iterator iterator = items.iterator();                 while (iterator.hasNext())                  {                     FileItem item = (FileItem) iterator.next();                      if (item.isFormField()) //your code for getting form fields                     {                         String name = item.getFieldName();                         String value = item.getString();                         System.out.println(name+value);                     }                      if (!item.isFormField())                      {                        //your code for getting multipart                      }                 }             }
"CloseableHttpClient httpClient = HttpClients.createDefault(); try {     FileBody bin = new FileBody(file);     HttpEntity reqEntity = MultipartEntityBuilder.create().addPart(""bin"", bin).build();     HttpPost httpPost = new HttpPost(url);     httpPost.setEntity(reqEntity);      CloseableHttpResponse postResponse = httpClient.execute(httpPost);     try {         writer.println(postResponse.getStatusLine());         HttpEntity postResponseEntity = postResponse.getEntity();         if (postResponseEntity != null) {             writer.println(EntityUtils.toString(postResponseEntity));         }     } finally {         postResponse.close();     } } finally {     httpClient.close(); }"
"public DDHLogger(String filePath, String yourfilename)  {     System.out.println(""filePath: "" + filePath);     System.out.println(""yourfilename: "" + yourfilename);      //String fileName = ""C:\\Users\\home-1\\Desktop\\"" + yourfilename;      String fileName = filePath + yourfilename;      System.out.println(""fileName::--&gt; "" + fileName);     // file = new File(fileName);//Creates the file      file = new File(fileName);//Creates the file      System.out.println(""file: "" + file);      try {         fw = new FileWriter(file, true);         //INSTANTIATE PRINTWRITER HERE         pw = new PrintWriter(fw);     } catch (IOException e) {         e.printStackTrace();     }//allows append to the file without over writing. The TRUE keyword is used for append  }"
"public void getStoreInfoFromProvider (BlobStore blobStore) {     ListContainerOptions listOptions = new ListContainerOptions ();     // returns a string containing all info of the filesystem on the cloud     String temp = blobStore.list (&quot;&quot;, listOptions.recursive ()).toString ();       temp = temp.replaceFirst(&quot;\\[\\[&quot;, &quot;&quot;);     temp = temp.replaceFirst(&quot;\\]\\]&quot;, &quot;&quot;);     String[] parts = temp.split(&quot;\\[t&quot;);       for (String part: parts)      {         String[] elements = part.split(&quot;, &quot;);         System.out.println(elements.length);         // ..."
"Injector injector = Guice.createInjector(new Module() {         @Override         public void configure(Binder binder) {             @SuppressWarnings(""rawtypes"")             Multibinder&lt;Converter&gt; converterBinder = Multibinder.newSetBinder(binder, Converter.class);             converterBinder.addBinding().to(StringBooleanConverter.class);             converterBinder.addBinding().to(BooleanStringConverter.class);         }     });     ConverterRegistryImpl registry = injector.getInstance(ConverterRegistryImpl.class);"
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
"public Downloader(String path) throws IOException {     int len = 0;     URL url = new URL(path);     URLConnection connectUrl = url.openConnection();     System.out.println(len = connectUrl.getContentLength());     System.out.println(connectUrl.getContentType());      InputStream input = connectUrl.getInputStream();     int i = len;     int c = 0;     System.out.println(""=== Content ==="");      while (((c = input.read()) != -1) &amp;&amp; (--i &gt; 0)) {         System.out.print((char) c);     }     input.close();  }"
public interface IArgumentParser {     Configuration Parse(string[] arguments); }  public static class ArgumentParsers {     public static IArgumentParser(string file)     {         return new FileArgumentParser(file);     } }  internal class FileArgumentParser : IArgumentParser {     private readonly string file;      internal FileArgumentParser(string file)     {         this.file = file;     }      public Configuration Parse(string[] arguments)     {         // Presumably use the file somewhere...     } }
"import org.w3c.dom.Node; import org.w3c.dom.bootstrap.DOMImplementationRegistry; import org.w3c.dom.ls.DOMImplementationLS; import org.w3c.dom.ls.LSSerializer; import org.xml.sax.InputSource;  import javax.xml.parsers.DocumentBuilderFactory; import java.io.StringReader;  /**  * Pretty-prints xml, supplied as a string.  * &lt;p/&gt;  * eg.  * &lt;code&gt;  * String formattedXml = new XmlFormatter().format(""&lt;tag&gt;&lt;nested&gt;hello&lt;/nested&gt;&lt;/tag&gt;"");  * &lt;/code&gt;  */ public class XmlFormatter {      public String format(String xml) {          try {             final InputSource src = new InputSource(new StringReader(xml));             final Node document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(src).getDocumentElement();             final Boolean keepDeclaration = Boolean.valueOf(xml.startsWith(""&lt;?xml""));          //May need this: System.setProperty(DOMImplementationRegistry.PROPERTY,""com.sun.org.apache.xerces.internal.dom.DOMImplementationSourceImpl"");               final DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();             final DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(""LS"");             final LSSerializer writer = impl.createLSSerializer();              writer.getDomConfig().setParameter(""format-pretty-print"", Boolean.TRUE); // Set this to true if the output needs to be beautified.             writer.getDomConfig().setParameter(""xml-declaration"", keepDeclaration); // Set this to true if the declaration is needed to be outputted.              return writer.writeToString(document);         } catch (Exception e) {             throw new RuntimeException(e);         }     }      public static void main(String[] args) {         String unformattedXml =                 ""&lt;?xml version=\""1.0\"" encoding=\""UTF-8\""?&gt;&lt;QueryMessage\n"" +                         ""        xmlns=\""http://www.SDMX.org/resources/SDMXML/schemas/v2_0/message\""\n"" +                         ""        xmlns:query=\""http://www.SDMX.org/resources/SDMXML/schemas/v2_0/query\""&gt;\n"" +                         ""    &lt;Query&gt;\n"" +                         ""        &lt;query:CategorySchemeWhere&gt;\n"" +                         ""   \t\t\t\t\t         &lt;query:AgencyID&gt;ECB\n\n\n\n&lt;/query:AgencyID&gt;\n"" +                         ""        &lt;/query:CategorySchemeWhere&gt;\n"" +                         ""    &lt;/Query&gt;\n\n\n\n\n"" +                         ""&lt;/QueryMessage&gt;"";          System.out.println(new XmlFormatter().format(unformattedXml));     } }"
"import org.jboss.system.ServiceControllerMBean; import org.jboss.system.ServiceMBeanSupport;  public class MyService extends ServiceMBeanSupport {      public void workWithEar()      {         ServiceControllerMBean serviceController = (ServiceControllerMBean) MBeanProxy.get(                     ServiceControllerMBean.class,                     ServiceControllerMBean.OBJECT_NAME, server);         // server is ServiceMBeanSupport member          ClassLoader cl = serviceController.getClass().getClassLoader();          String path = cl.getResource(""META-INF/jboss-service.xml"").getPath()         InputStream file = cl.getResourceAsStream(""META-INF/jboss-service.xml"");     } }"
