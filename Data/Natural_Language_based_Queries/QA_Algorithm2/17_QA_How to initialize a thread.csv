code
"protected Object loadFromDatasource(         final LoadEvent event,         final EntityPersister persister,         final EntityKey keyToLoad,         final LoadEventListener.LoadType options) {     final SessionImplementor source = event.getSession();     Object entity = persister.load(             event.getEntityId(),             event.getInstanceToLoad(),             event.getLockMode(),             source     );      if ( event.isAssociationFetch() &amp;&amp; source.getFactory().getStatistics().isStatisticsEnabled() ) {         source.getFactory().getStatisticsImplementor().fetchEntity( event.getEntityClassName() );     }      return entity; }"
"public aspect ValidationAspect {      pointcut serviceMethodCall() : execution(public * com.yourcompany.**.*(..));      Object around(final Object[] args) : serviceMethodCall() &amp;&amp; args(args){         Signature signature = thisJoinPointStaticPart.getSignature();         if(signature instanceof MethodSignature){             MethodSignature ms = (MethodSignature) signature;             Method method = ms.getMethod();             Annotation[][] parameterAnnotations =                  method.getParameterAnnotations();             String[] parameterNames = ms.getParameterNames();             for(int i = 0; i &lt; parameterAnnotations.length; i++){                 Annotation[] annotations = parameterAnnotations[i];                 validateParameter(parameterNames[i], args[i],annotations);             }         }         return proceed(args);     }      private void validateParameter(String paramName, Object object,         Annotation[] annotations){          // validate object against the annotations         // throw a RuntimeException if validation fails     }  }"
try {                    IEditorPart part = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();     if ( part instanceof ITextEditor ) {         final ITextEditor editor = (ITextEditor)part;         IDocumentProvider prov = editor.getDocumentProvider();         IDocument doc = prov.getDocument( editor.getEditorInput() );         ISelection sel = editor.getSelectionProvider().getSelection();         if ( sel instanceof TextSelection ) {              // Here is your String             final TextSelection textSel = (TextSelection)sel;          }     } } catch ( Exception ex ) {     ex.printStackTrace(); }
"OperatingSystemMXBean operatingSystemMXBean =      ManagementFactory.getOperatingSystemMXBean();  for (Method method: operatingSystemMXBean.getClass ().getMethods ())  {     method.setAccessible (true);     String methodName = method.getName ();     if (methodName.startsWith (""get"")         &amp;&amp; Modifier.isPublic (method.getModifiers ())         &amp;&amp; OperatingSystemMXBean.class.isAssignableFrom (             method.getDeclaringClass ())) {         try         {             System.out.println (                 methodName.substring (3) + "": "" +                  method.invoke (operatingSystemMXBean));         }         catch (Throwable ex)         {             // Ignore         }     } }"
"try {         String insertTableSQL = ""INSERT INTO DBUSER""+ ""fcltyName,CommunicationOral,Communicationwritten,Leadership,AnalyticalAbilities,Interpersonalskills,DecisionMakingSkills,SelfConfidence,Creativity,Punctualityregularity,GeneralAwareness,Commitment,HardWork) VALUES""+ ""(?,?,?,?,?,?,?,?,?,?,?,?,?)"";          dbConnection = getDBConnection();         preparedStatement = dbConnection.prepareStatement(insertTableSQL);          preparedStatement.setStringt(1, fcltyName);         preparedStatement.setInt(2, 0);         preparedStatement.setInt(3, 0);         preparedStatement.setInt(4,0);         preparedStatement.setInt(5, 0);         preparedStatement.setInt(6, 0);         preparedStatement.setInt(7,0);         preparedStatement.setInt(8, 0);         preparedStatement.setInt(9, 0);         preparedStatement.setInt(10,0);         preparedStatement.setInt(11, 0);         preparedStatement.setInt(12, 0);         preparedStatement.setInt(13,0);          // execute insert SQL stetement         preparedStatement.executeUpdate();}'"
"try {   // Create a connection factory   JmsFactoryFactory ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER);   JmsConnectionFactory cf = ff.createConnectionFactory();    // Set the properties   cf.setStringProperty(WMQConstants.WMQ_HOST_NAME, ""localhost"");   cf.setIntProperty(WMQConstants.WMQ_PORT, 1414);   cf.setStringProperty(WMQConstants.WMQ_CHANNEL, ""SYSTEM.DEF.SVRCONN"");   cf.setIntProperty(WMQConstants.WMQ_CONNECTION_MODE, WMQConstants.WMQ_CM_CLIENT);   cf.setStringProperty(WMQConstants.WMQ_QUEUE_MANAGER, ""QM1"");"
"VariableElement parameterElement; ProcessingEnvironment processingEnv;  TypeMirror parameterType = parameterElement.asType(); Types typeUtils = processingEnv.getTypeUtils(); TypeElement typeElement = (TypeElement) typeUtils.asElement(parameterType); Elements elementUtils = processingEnv.getElementUtils() List&lt;? extends Element&gt; elementMembers = elementUtils.getAllMembers(typeElement); List&lt;ExecutableElement&gt; elementMethods = ElementFilter.methodsIn(elementMembers); for(ExecutableElement methodElement : elementMethods) {     if (methodElement.getParameters().size()==0 &amp;&amp; methodElement.getSimpleName().toString().startsWith(""get"")) {       // do something     } }"
ApplicationPermissions permRequest = new ApplicationPermissions();   permRequest.addPermission(ApplicationPermissions.PERMISSION_MEDIA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_LOCATION_DATA);   permRequest.addPermission(ApplicationPermissions.PERMISSION_RECORDING);   permRequest.addPermission(ApplicationPermissions.PERMISSION_INPUT_SIMULATION);   permRequest.addPermission(ApplicationPermissions.PERMISSION_DEVICE_SETTINGS);   permRequest.addPermission(ApplicationPermissions.PERMISSION_CROSS_APPLICATION_COMMUNICATION);    permRequest.addPermission(ApplicationPermissions.PERMISSION_INTERNET);   permRequest.addPermission(ApplicationPermissions.PERMISSION_SERVER_NETWORK);   permRequest.addPermission(ApplicationPermissions.PERMISSION_EMAIL);
"import java.net.NetworkInterface;  ...  for (     final Enumeration&lt; NetworkInterface &gt; interfaces =         NetworkInterface.getNetworkInterfaces( );     interfaces.hasMoreElements( ); ) {     final NetworkInterface cur = interfaces.nextElement( );      if ( cur.isLoopback( ) )     {         continue;     }      System.out.println( ""interface "" + cur.getName( ) );      for ( final InterfaceAddress addr : cur.getInterfaceAddresses( ) )     {         final InetAddress inet_addr = addr.getAddress( );          if ( !( inet_addr instanceof Inet4Address ) )         {             continue;         }          System.out.println(             ""  address: "" + inet_addr.getHostAddress( ) +             ""/"" + addr.getNetworkPrefixLength( )         );          System.out.println(             ""  broadcast address: "" +                 addr.getBroadcast( ).getHostAddress( )         );     } }"
"String locationPrefix = ""classpath*:META-INF/spring/""; String locationSiffix = ""/*.xml"";  List&lt;String&gt; configLocations = new ArrayList&lt;String&gt;(); configLocations.add(locationPrefix + ""core"" + locationSiffix);  List&lt;String&gt; pluginsTurnedOn = getPluginsTurnedOnFromConfiguration(); for (String pluginName : pluginsTurnedOn) {     configLocations.add(locationPrefix + pluginName + locationSiffix); }  applicationContext.setConfigLocations(configLocations.toArray(new String[configLocations.size()]));"
"public String getLocalIpAddress() {     try {         for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {             NetworkInterface intf = en.nextElement();             for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {                 InetAddress inetAddress = enumIpAddr.nextElement();                 if (!inetAddress.isLoopbackAddress()) {                     return inetAddress.getHostAddress().toString();                 }             }         }     } catch (SocketException ex) {         Log.e(LOG_TAG, ex.toString());     }     return null; }"
"public String getLocalIpAddress() {         try {             for (Enumeration&lt;NetworkInterface&gt; en = NetworkInterface                     .getNetworkInterfaces(); en.hasMoreElements();) {                 NetworkInterface intf = en.nextElement();                 for (Enumeration&lt;InetAddress&gt; enumIpAddr = intf                         .getInetAddresses(); enumIpAddr.hasMoreElements();) {                     InetAddress inetAddress = enumIpAddr.nextElement();                     if (!inetAddress.isLoopbackAddress()) {                         return inetAddress.getHostAddress().toString();                     }                 }             }         } catch (SocketException ex) {             Log.e(tag, ex.toString());         }         return """";     }"
"{     ""entry"": ""132456"",     ""product"":      {         ""item"": ""123456"",         ""prompts"":          [             {                 ""promptId"": ""1"",                 ""promptNumber"": ""109"",                 ""promptType"": 4,                 ""promptTypeDesc"": ""desc1"",                 ""validations"":                 [                     {                         ""minLen"": 10,                         ""maxLen"": 10,                         ""required"": true                      }                  ]              }          ]      } }"
"String sourceUrl = ""http://www.example.com/mysite/whatever/somefolder/bar/unsecure!+?#whätyöühäv€it/site.html""; // your current site     String targetUrl = ""http://www.example.com/mysite/whatever/otherfolder/other.html""; // the link target     String expectedTarget = ""../../../otherfolder/other.html"";     String[] sourceElements = sourceUrl.split(""/"");     String[] targetElements = targetUrl.split(""/""); // keep in mind that the arrays are of different length!     StringBuilder uniquePart = new StringBuilder();     StringBuilder relativePart = new StringBuilder();     boolean stillSame = true;     for(int ii = 0; ii &lt; sourceElements.length || ii &lt; targetElements.length; ii++) {         if(ii &lt; targetElements.length &amp;&amp; ii &lt; sourceElements.length &amp;&amp;                  stillSame &amp;&amp; sourceElements[ii].equals(targetElements[ii]) &amp;&amp; stillSame) continue;         stillSame = false;         if(targetElements.length &gt; ii)           uniquePart.append(""/"").append(targetElements[ii]);         if(sourceElements.length &gt; ii +1)             relativePart.append(""../"");     }      String result = relativePart.toString().substring(0, relativePart.length() -1) + uniquePart.toString();     System.out.println(""result: "" + result);"
"UIManager.LookAndFeelInfo[] lookAndFeelInfos = UIManager.getInstalledLookAndFeels();     for (int i = 0; i &lt; lookAndFeelInfos.length; i++) {         UIManager.LookAndFeelInfo lookAndFeelInfo = lookAndFeelInfos[i];          //         // Get the name of the look and feel         //         String name = lookAndFeelInfo.getName();         System.out.println(""name = "" + name);          //         // Get the implementation class for the look and feel         //         String className = lookAndFeelInfo.getClassName();         System.out.println(""className = "" + className);     }"
"int[][] map = {     {1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}  };"
"Server server = ServerFactory.getServer();         Service[] services = server.findServices();         for (Service service : services) {             for (Connector connector : service.findConnectors()) {                 ProtocolHandler protocolHandler = connector.getProtocolHandler();                 if (protocolHandler instanceof Http11Protocol                     || protocolHandler instanceof Http11AprProtocol                     || protocolHandler instanceof Http11NioProtocol) {                     serverPort = connector.getPort();                     System.out.println(""HTTP Port: "" + connector.getPort());                 }             }           }"
for (Iterator entries = logEntries.iterator(); entries.hasNext();) {                 SVNLogEntry logEntry = (SVNLogEntry) entries.next();                  if (logEntry.getChangedPaths().size() &gt; 0) {                     Set&lt;String&gt; changedPathsSet = logEntry.getChangedPaths().keySet();                      for (Iterator&lt;String&gt; changedPaths = changedPathsSet.iterator(); changedPaths                             .hasNext();) {                         SVNLogEntryPath entryPath = (SVNLogEntryPath) logEntry                                 .getChangedPaths().get(changedPaths.next());                         String path = entryPath.getPath();                         if (!path.startsWith(updatePath)) {                             continue;                         }
public class VisitorUpdateModelWithoutValidation implements FormComponent.IVisitor {  public Object formComponent(IFormVisitorParticipant formComponent) {         if (formComponent instanceof FormComponent) {             final FormComponent&lt;?&gt; formComponent1 = (FormComponent&lt;?&gt;) formComponent;             boolean required = formComponent1.isRequired();             if (required) {                 formComponent1.setRequired(false);             }             formComponent1.modelChanging();             formComponent1.validate();             formComponent1.updateModel();             formComponent1.modelChanged();             if (required) {                 formComponent1.setRequired(true);             }         }          return Component.IVisitor.CONTINUE_TRAVERSAL;     } }
"Resources res = getResources(); // Resource object to get Drawables    tabHost = getTabHost();  // The activity TabHost   TabHost.TabSpec spec;  // Resusable TabSpec for each tab     Intent intent;  // Reusable Intent for each tab     intent = new Intent().setClass(this, First.class);       spec = tabHost.newTabSpec(""First Tab"").setIndicator(""First Tab"",res.getDrawable(R.drawable.icon)).setContent(intent);  tabHost.addTab(spec);     intent = new Intent().setClass(this, Second.class);  spec = tabHost.newTabSpec(""Second Tab"").setIndicator(""Second Tab"",res.getDrawable(R.drawable.icon)).setContent(intent);  tabHost.addTab(spec);   tabHost.setCurrentTab(1);"
"IExtensionRegistry registry = Platform.getExtensionRegistry();     IExtensionPoint extensionPoint = registry             .getExtensionPoint(""myplugin.myextension"");     IConfigurationElement points[] = extensionPoint             .getConfigurationElements();     for (IConfigurationElement point : points) {         if (""myextensionFactory"".equals(point.getName())) {             Object impl = point.createExecutableExtension(""class"");             if (impl instanceof IMyExtension) {                 ((IMyExtension) impl).foo();             }         }     } }"
public static &lt;T&gt; IModel&lt;? extends List&lt;T&gt;&gt; convertToListViewModel(List&lt;T&gt; objects) {      final Class&lt;? extends List&gt; listClass = objects.getClass();      // NOTE: you will need to implement the toLoadableDetachableModels method     List&lt;IModel&lt;T&gt;&gt; asModels = toLoadableDetachableModels(objects);      return new LoadableDetachableModel&lt;List&lt;T&gt;&gt;() {         @Override         protected List&lt;T&gt; load() {             List&lt;T&gt; results = ClassUtils.newInstance(listClass);             for(IModel&lt;T&gt; model : asModels) {                 results.add(model.getObject());             }             return results;         }     }; }
"Class&lt;?&gt; handlerCl = Class.forName(""sun.misc.SignalHandler"");         Class&lt;?&gt; signalCl = Class.forName(""sun.misc.Signal"");          Constructor signalCtor = signalCl.getConstructor(String.class);         Method signalHandle = signalCl.getMethod(""handle"", signalCl, handlerCl);          // Create a proxy class that implements SignalHandler         Class&lt;?&gt; proxyClass = Proxy.getProxyClass(signalCl.getClassLoader(),             handlerCl);          // This is used by the instance of proxyClass to dispatch method calls         InvocationHandler invHandler = new InvocationHandler()         {             public Object invoke(Object proxy,                 Method method, Object[] args) throws Throwable             {                 // proxy is the SignalHandler's ""this"" rederence                 // method will be the handle(Signal) method                 // args[0] will be an instance of Signal                 // If you're using this object for multiple signals, you'll                 // you'll need to use the ""getName"" method to determine which                 // signal you have caught.                 return null;             }         };          // Get the constructor and create an instance of proxyClass         Constructor&lt;?&gt; proxyCtor = proxyClass.getConstructor(InvocationHandler.class);         Object handler = proxyCtor.newInstance(invHandler);          // Create the signal and call Signal.handle to bind handler to signal         Object signal = signalCtor.newInstance(""TERM"");         signalHandle.invoke(null, signal, handler);"
"int offset, length; //The value of the first 2 parameters in the setParagraphAttributes() call  Element section = doc.getDefaultRootElement(); int index0 = section.getElementIndex(offset); int index1 = section.getElementIndex(offset + ((length &gt; 0) ? length - 1 : 0)); for (int i = index0; i &lt;= index1; i++) {     Element paragraph = section.getElement(i);     AttributeSet attributeSet = paragraph.getAttributes();     Enumeration keys = attributeSet.getAttributeNames();     while (keys.hasMoreElements())     {         Object key = keys.nextElement();         Object attribute = attributeSet.getAttribute(key);         //System.out.println(""key = "" + key); //For other AttributeSet classes this line is useful because it shows the actual parameter, like ""Bold""         System.out.println(attribute.getClass());         System.out.println(attribute);     } }"
import org.codehaus.groovy.grails.web.servlet.GrailsApplicationAttributes import org.codehaus.groovy.grails.web.context.ServletContextHolder import org.springframework.context.ApplicationContext  public class SpringUtils {      static getSpringBean(String name) {         getApplicationContext().getBean(name);     }      static ApplicationContext getApplicationContext() {         return ServletContextHolder.getServletContext().getAttribute(GrailsApplicationAttributes.APPLICATION_CONTEXT);     }     }
"MultiSelectListPreference listPreference = new MultiSelectListPreference(context);     listPreference.setTitle(R.string.configure_category_title);     listPreference.setDialogTitle(R.string.configure_category_title);     listPreference.setSummary(R.string.configure_category_summary);     listPreference.setEntries(R.array.configure_category_array);     listPreference.setEntryValues(new CharSequence[]{             ProcessList.PREF_SERVICES + mAppWidgetId,             ProcessList.PREF_INACTIVE + mAppWidgetId,             ProcessList.PREF_INTERNAL + mAppWidgetId     });      //Create a Set&lt;String&gt; with list items that should be selected     SharedPreferences sharedPref = PreferenceManager.getDefaultSharedPreferences(context);     boolean showServices = sharedPref.getBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, true);     boolean showInactive = sharedPref.getBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, true);     boolean showInternal = sharedPref.getBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, true);      String[] strings = new String[3];     int cnt = 0;     if (showServices)         strings[cnt++] = ProcessList.PREF_SERVICES + mAppWidgetId;     if (showInactive)         strings[cnt++] = ProcessList.PREF_INACTIVE + mAppWidgetId;     if (showInternal)         strings[cnt] = ProcessList.PREF_INTERNAL + mAppWidgetId;      Set&lt;String&gt; mySet = new HashSet&lt;String&gt;();     Collections.addAll(mySet, strings);      //Add the set     listPreference.setValues(mySet);      //Listen for changes, I'm not sure if this is how it's meant to work, but it does :/     listPreference.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {         public boolean onPreferenceChange(Preference preference, Object o) {              HashSet hashSet = (HashSet) o;             Iterator stringIterator = hashSet.iterator();             boolean[] states = {false, false, false};             String prefString;              while (stringIterator.hasNext()) {                  prefString = (String) stringIterator.next();                  if (prefString == null)                     continue;                  if (prefString.compareTo(ProcessList.PREF_SERVICES + mAppWidgetId) == 0)                     states[0] = true;                 else if (prefString.compareTo(ProcessList.PREF_INACTIVE + mAppWidgetId) == 0)                     states[1] = true;                 else if (prefString.compareTo(ProcessList.PREF_INTERNAL + mAppWidgetId) == 0)                     states[2] = true;              }              PreferenceManager                     .getDefaultSharedPreferences(getActivity())                     .edit()                     .putBoolean(ProcessList.PREF_SERVICES + mAppWidgetId, states[0])                     .putBoolean(ProcessList.PREF_INACTIVE + mAppWidgetId, states[1])                     .putBoolean(ProcessList.PREF_INTERNAL + mAppWidgetId, states[2])                     .commit();              return true;         }     });      preferenceCategory.addPreference(listPreference);"
"HttpClient createClient() {     HttpParams params = new BasicHttpParams();     params.setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);     params.setParameter(CoreProtocolPNames.HTTP_CONTENT_CHARSET, HTTP.DEFAULT_CONTENT_CHARSET);     params.setBooleanParameter(CoreProtocolPNames.USE_EXPECT_CONTINUE, true);     params.setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, 30 * 1000);     params.setParameter(CoreConnectionPNames.SO_TIMEOUT, 30 * 1000);      SchemeRegistry schReg = new SchemeRegistry();     schReg.register(new Scheme(""http"", PlainSocketFactory.getSocketFactory(), 80));     schReg.register(new Scheme(""https"", SSLSocketFactory.getSocketFactory(), 443));     ClientConnectionManager conMgr = new ThreadSafeClientConnManager(params, schReg);      return new DefaultHttpClient(conMgr, params); }"
"public class AClassAdapter  implements JsonSerializer&lt;A&gt;, JsonDeserializer&lt;A&gt; {   @Override   public JsonElement serialize(A src, Type typeOfSrc, JsonSerializationContext context) {       JsonObject result = new JsonObject();       result.add(""type"", new JsonPrimitive(src.getClass().getSimpleName()));       result.add(""properties"", context.serialize(src, src.getClass()));        return result;   }     @Override   public A deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)         throws JsonParseException {     JsonObject jsonObject = json.getAsJsonObject();     String type = jsonObject.get(""type"").getAsString();     JsonElement element = jsonObject.get(""properties"");      try {                     String fullName = typeOfT.getTypeName();         String packageText = fullName.substring(0, fullName.lastIndexOf(""."") + 1);          return context.deserialize(element, Class.forName(packageText + type));     } catch (ClassNotFoundException cnfe) {         throw new JsonParseException(""Unknown element type: "" + type, cnfe);     }   } }"
"JSONObject jSONObject = new JSONObject(jsonString); String str_type=jSONObject.getString(""type"");  // using JSONArray JSONArray featuresArr = jSONObject.getJSONArray(""features"");   for (int i=0; i&lt;featuresArr.length; i++){     JSONObject anotherjsonObject = featuresArr.getJSONObject(i);     //access the fields of that json object     String str_type_one=anotherjsonObject.getString(""type"");    JSONArray featuresArr_properties = anotherjsonObject.getJSONArray(""properties"");     JSONObject propertiesjsonObject = featuresArr_properties.getJSONObject(0);    String str_type=propertiesjsonObject.getString(""type"");    String str_type=propertiesjsonObject.getString(""thumb"");    String str_type=propertiesjsonObject.getString(""name_pl"");    String str_type=propertiesjsonObject.getString(""name_en"");  ////parse all items ...........   }"
"import javax.servlet.http.HttpServletRequest;  import org.springframework.util.Assert; import org.springframework.web.context.request.RequestAttributes; import org.springframework.web.context.request.RequestContextHolder; import org.springframework.web.context.request.ServletRequestAttributes;  public class RequestFetcher {     public static HttpServletRequest getCurrentRequest() {         RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();         Assert.state(requestAttributes != null, ""Could not find current request via RequestContextHolder"");         Assert.isInstanceOf(ServletRequestAttributes.class, requestAttributes);         HttpServletRequest servletRequest = ((ServletRequestAttributes) requestAttributes).getRequest();         Assert.state(servletRequest != null, ""Could not find current HttpServletRequest"");         return servletRequest;     } }"
