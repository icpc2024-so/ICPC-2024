code
"Document doc = Jsoup.parseBodyFragment(aText); Elements el = doc.getAllElements(); for (Element e : el) {     List&lt;String&gt;  attToRemove = new ArrayList&lt;&gt;();     Attributes at = e.attributes();     for (Attribute a : at) {         // transfer it into a list -         // to be sure ALL data-attributes will be removed!!!         attToRemove.add(a.getKey());     }      for(String att : attToRemove) {         e.removeAttr(att);    } }   return Jsoup.isValid(doc.body().html(), theLegalWhitelist);"
PDDocument document = null;  document = PDDocument.load(inFile);  List pages = document.getDocumentCatalog().getAllPages(); Iterator iter = pages.iterator();  while (iter.hasNext()) {             PDPage page = (PDPage) iter.next();             PDResources resources = page.getResources();             Map pageImages = resources.getImages();             if (pageImages != null) {                  Iterator imageIter = pageImages.keySet().iterator();                 while (imageIter.hasNext()) {                     String key = (String) imageIter.next();                     PDXObjectImage image = (PDXObjectImage) pageImages.get(key);                     image.write2OutputStream(/* some output stream */);                 }             } }
"public static void eliminateCommon(String file1, String file2) throws IOException {     List&lt;String&gt; lines1 = readLines(file1);     List&lt;String&gt; lines2 = readLines(file2);      Iterator&lt;String&gt; linesItr = lines1.iterator();     while (linesItr.hasNext()) {         String checkLine = linesItr.next();         if (lines2.contains(checkLine)) {             linesItr.remove();             lines2.remove(checkLine);         }     }      //now lines1 will contain string that are not present in lines2     //now lines2 will contain string that are not present in lines1     System.out.println(lines1);     System.out.println(lines2);  }  public static List&lt;String&gt; readLines(String fileName) throws IOException {     List&lt;String&gt; lines = new ArrayList&lt;String&gt;();     FileInputStream fs = new FileInputStream(fileName);     BufferedReader br = new BufferedReader(new InputStreamReader(fs));     String line = null;     while ((line = br.readLine()) != null) {         String account = line.substring(0, 10);         lines.add(account);     }     return lines; }"
"public static String setExternalLinkTargets(String html) {     final NodeVisitor linkVisitor = new NodeVisitor() {          @Override         public void visitTag(Tag tag) {             // Process any tag/node in your HTML              String name = tag.getTagName();              // Set the Link's target to _blank if the href is external             if (""a"".equalsIgnoreCase(name)) {                 if(isExternalLink(url.getHost()) {                     tag.setAttribute(""target"", ""_blank"");                 }             }         }     };      Parser parser = Parser.createParser(html, null);     NodeList list;     try {         list = parser.parse(null);         list.visitAllNodesWith(linkVisitor);         return list.toHtml();     } catch (ParserException e) {         // Could not parse HTML, return original HTML         return html;     } }"
"else if (mChoice.startsWith(""4"")) {     System.out.println(""What do you want to delete?"");      mChoice = in.nextLine();     Player deleted;     if (mChoice.contains(""first"")) {        deleted = rBook.mHead.getData();        rBook.removeFirst();        System.out.println(""Removed first player "" + deleted);     }      else if (mChoice.contains(""last"")) {        deleted = rBook.mHead.mPrev.getData();        rBook.removeLast();        System.out.println(""Removed last player "" + deleted );      }      else {        deleted = rBook.searchByName(mChoice);        rBook.remove(searchByName(mChoice));        System.out.println(deleted + "" removed."");      }"
class BASE64HTMLEditorKit extends HTMLEditorKit {      private static HTMLFactory factory = null;      @Override     public ViewFactory getViewFactory() {         if (factory == null) {             factory = new HTMLFactory() {                  @Override                 public View create(Element elem) {                     AttributeSet attrs = elem.getAttributes();                     Object elementName = attrs.getAttribute(AbstractDocument.ElementNameAttribute);                     Object o = (elementName != null) ? null : attrs.getAttribute(StyleConstants.NameAttribute);                     if (o instanceof HTML.Tag) {                         HTML.Tag kind = (HTML.Tag) o;                         if (kind == HTML.Tag.IMG) {                             // HERE is the call to the special class...                             return new BASE64ImageView(elem);                         }                     }                     return super.create(elem);                 }             };         }         return factory;     }  }
"case ""/subscription"":          var notify = function(ids)         {             response.writeHead(200, {""Content-Type"": ""text/html"", ""Access-Control-Allow-Origin"": ""*""});             response.write(JSON.stringify(ids));             response.end();         }          emitter.once(""event:notify"", notify);          //event will be removed when connection is closed         request.on(""close"", function()         {             emitter.removeListener(""event:notify"", notify);         });         break;"
"while ((line = bufferReader.readLine()) != null)   {         bufferdata+=  System.getProperty(""line.separator"") + line;        if(startSaving)       {            modifieddata += System.getProperty(""line.separator"") + line;       }       else         {           originaldata += System.getProperty(""line.separator"") + line;       }        if(line.isEmpty())       {            startSaving = true;        }   }    if(modifieddata.isEmpty())   {       modifieddata = originaldata.trim();   }   else   {       modifieddata = modifieddata.trim();   }    String[] array = new String[]{modifieddata, originaldata};    //Close the buffer reader   bufferReader.close();    // return array;"
"PlainDocument doc = new PlainDocument(); doc.setDocumentFilter(new DocumentFilter() {     @Override     public void insertString(FilterBypass fb, int off, String str, AttributeSet attr)          throws BadLocationException      {         fb.insertString(off, str.replaceAll(""\\D++"", """"), attr);  // remove non-digits     }      @Override     public void replace(FilterBypass fb, int off, int len, String str, AttributeSet attr)          throws BadLocationException      {         fb.replace(off, len, str.replaceAll(""\\D++"", """"), attr);  // remove non-digits     } });  JTextField field = new JTextField(); field.setDocument(doc);"
"Document newDocument = Jsoup.parse(htmlString, StringUtils.EMPTY, Parser.htmlParser()); newDocument.outputSettings().escapeMode(EscapeMode.base); /**  * Need CharEncoding.US_ASCII and not UTF-8 so the special characters will be encoded properly,  * but representation of such will change. For instance: &amp;mdash; will be encoded as &amp;#8212;  */ newDocument.outputSettings().charset(CharEncoding.US_ASCII); newDocument.outputSettings().prettyPrint(false); // this will make sure that it will not add line breaks"
"String location = ""url-of-webpage-A"" boolean wasRedirected = false String pageContent = null  while( location ) {   new URL( location ).openConnection().with { con -&gt;     // We'll do redirects ourselves     con.instanceFollowRedirects = false      // Get the response code, and the location to jump to (in case of a redirect)     location = con.getHeaderField( ""Location"" )     if( !wasRedirected &amp;&amp; location ) {       wasRedirected = true     }      // Read the HTML and close the inputstream     pageContent = con.inputStream.withReader { it.text }   } }  println ""wasRedirected:$wasRedirected contentLength:${pageContent.length()}"""
"public void handleSuccess(String result) {     result = result.trim();     log.info(""Result after trimming: '"" + result + ""'"");      result = result.substring(result.indexOf('\n') + 1);     log.info(""Result after substring: '"" + result + ""'"");      String returns = getReturns();     log.info(""Returns: '"" + returns + ""'"");      String action = getAction();     log.info(""Action: '"" + action + ""'"");      // It's not clear what this is meant to do. I suggest you remove it and     // use logging instead.     MessageBox.alert(""Information"", ""The selected action is "" + action, null);                   String finalResult = result + returns + action;     log.info(""Final result: '"" + finalResult + ""'"");"
"import java.net.URL; import java.net.MalformedURLException;  // Replaces URLs with html hrefs codes public class URLInString {     public static void main(String[] args) {         String s = args[0];         // separete input by spaces ( URLs don't have spaces )         String [] parts = s.split(""\\s"");          // Attempt to convert each item into an URL.            for( String item : parts ) try {             URL url = new URL(item);             // If possible then replace with anchor...             System.out.print(""&lt;a href=\"""" + url + ""\""&gt;""+ url + ""&lt;/a&gt; "" );             } catch (MalformedURLException e) {             // If there was an URL that was not it!...             System.out.print( item + "" "" );         }          System.out.println();     } }"
"if (activityName != null) {     // create the main activity Java file      String activityJava = activityName + AdtConstants.DOT_JAVA;      // Get the path of the package      IPath path = ((IPackageFragment) firstElement).getPath();     String pkgpath = path.toString();                                     String projname = """";      // Remove the project name from the beginning of the path     String temp[] = pkgpath.split(""/"");     pkgpath = """";     for (int i = 1; i &lt; temp.length; i++) {         if (i==1) {             pkgpath = ""/"";             projname = temp[i];         } else {             pkgpath = pkgpath + ""/"" + temp[i];         }     }      // Get the project                     IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projname);        IFile file = project.getFile(pkgpath+""/""+activityJava);     if (!file.exists()) {         try {             copyFile(""java_file.template"", file, java_activity_parameters);         } catch (CoreException e) {             AltBridge.log(e, ""Couldn't copy the text file"", pkgpath);             e.printStackTrace();         } catch (IOException e) {             AltBridge.log(e, ""Couldn't copy the text file"", pkgpath);             e.printStackTrace();         }     } }"
"if (imageCache.get(url) != null) {         //#debug         System.out.println(""Get cached image from: "" + url);          asyncImage.setImage((Image) imageCache.get(url));         asyncImage.setQueued(false);     } else {         //#debug         System.out.println(""Start download image from:"" + url);          map.put(url, asyncImage);          ImageDownloadService d = new ImageDownloadService(url, new ActionListener() {              public void actionPerformed(ActionEvent evt) {                  NetworkEvent n = (NetworkEvent) evt;                 Image image = (Image) n.getMetaData();                 String url = n.getConnectionRequest().getUrl();                 AsyncImage asyncImage = (AsyncImage) ImageManager.this.map.get(url);                 map.put(url, asyncImage);                 asyncImage.setImage(image);                 map.remove(url);                 imageCache.put(url, asyncImage.getImage());                 asyncImage.setQueued(false);                 if (Display.getInstance().getCurrent() instanceof AsyncLoadable) {                     ((AsyncLoadable) Display.getInstance().getCurrent()).asyncLoaded();                 } else {                     Display.getInstance().getCurrent().repaint();                 }                 //#debug                 System.out.println(""Retrieved image from:"" + url);             }         });         d.addResponseCodeListener(new ActionListener() {              public void actionPerformed(ActionEvent evt) {                 NetworkEvent n = (NetworkEvent) evt;                 String url = n.getConnectionRequest().getUrl();                 AsyncImage asyncImage = (AsyncImage) ImageManager.this.map.get(url);                 asyncImage.setQueued(false);                 map.remove(n.getConnectionRequest().getUrl());                 //#debug                 System.out.println(""Failed image from:"" + url);             }         });          NetworkManager.getInstance().addToQueue(d);"
"public void walkdir(File dir) {          File[] listFile;         listFile = dir.listFiles();          if (listFile != null) {             for (int i = 0; i &lt; listFile.length; i++) {                 if (listFile[i].isDirectory()) {                     walkdir(listFile[i]);                 } else {                   if (listFile[i].getName().toLowerCase().endsWith("".pdf"")){                       files_list.add(listFile[i]);                   }                 }             }         }         }"
"ModifiedHTMLDocument doc = (ModifiedHTMLDocument) editor.getDocument(); int offset = editor.getSelectionStart(); //insert our special tag (if the tag is not bounded with non-whitespace character, nothing happens) doc.insertHTML(offset, ""-&lt;specialTag /&gt;-""); //remove leading and trailing minuses doc.remove(offset, 1); //at the current position is the minus before tag inserted doc.remove(offset + 1, 1); //the next sign is minus after new tag (the tag is nowhere) //Note: no, you really cannot do that: doc.remove(offset, 2), because then the tag is deleted"
"import org.w3c.dom.*; import org.w3c.dom.bootstrap.DOMImplementationRegistry; import org.w3c.dom.ls.*;  public class DOMExample3 {      public static void main(String[] args) throws Exception {         DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();             DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(""XML 3.0 LS 3.0"");         if (impl == null) {             System.out.println(""No DOMImplementation found !"");             System.exit(0);         }          System.out.printf(""DOMImplementationLS: %s\n"", impl.getClass().getName());          LSParser parser = impl.createLSParser(                 DOMImplementationLS.MODE_SYNCHRONOUS,                 ""http://www.w3.org/TR/REC-xml"");         // http://www.w3.org/2001/XMLSchema         System.out.printf(""LSParser: %s\n"", parser.getClass().getName());          if (args.length == 0) {             System.exit(0);         }          Document doc = parser.parseURI(args[0]);          LSSerializer serializer = impl.createLSSerializer();         LSOutput output = impl.createLSOutput();         output.setEncoding(""UTF-8"");         output.setByteStream(System.out);         serializer.write(doc, output);         System.out.println();     } }"
"public static void main(final String... args) {     final Map&lt;String, String&gt; map = new HashMap&lt;&gt;();     map.put(""hello"", ""world"");     map.put(""foo"", ""bar"");      // Create a map entry     final Map.Entry&lt;String, String&gt; entry         = new AbstractMap.SimpleEntry&lt;&gt;(""foo"", ""bar"");      // Remove it from the set     map.entrySet().remove(entry);     System.out.println(""after removing entry: "" + map);      // Remove a key     map.keySet().remove(""hello"");     System.out.println(""after removing key: "" + map); }"
"public static void main(String[] args) {      LinkedList list = new LinkedList();     list.insertFront(1);     list.insertFront(2);     list.insertFront(3);     System.out.println(list.toString()); }  String toString() {             String result = """";             LinkedListNode current = head;             while(current.getNext() != null){                 result += current.getData();                 if(current.getNext() != null){                      result += "", "";                 }                 current = current.getNext();             }             return ""List: "" + result; }"
"import java.io.StringReader; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.xml.sax.InputSource;   protected void onPostExecute(String results) {         if (results != null) {         try {              DocumentBuilderFactory dbFactory = DocumentBuilderFactory                     .newInstance();             DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();             InputSource s = new InputSource(new StringReader(result));             Document doc = dBuilder.parse(s);             doc.getDocumentElement().normalize();                             //EditText et = (EditText) findViewById(R.id.my_edit);                             TextView tv = (TextView) findViewById(R.id.Date);                             tv.setText(""sunrise at ""+doc.getElementsByTagName(""sunrise"").item(0).getTextContent() + "" sunset at ""+doc.getElementsByTagName(""sunset"").item(0).getTextContent());                 }             }         } catch (Exception e) {             e.printStackTrace();         }     }     Button b = (Button) findViewById(R.id.my_button);     b.setClickable(true);     }"
"Arrays.sort(filenames, new Comparator&lt;String&gt;() {     @Override     public int compare(String s1, String s2) {         // the +1 is to avoid including the '.' in the extension and to avoid exceptions         // EDIT:         // We first need to make sure that either both files or neither file         // has an extension (otherwise we'll end up comparing the extension of one         // to the start of the other, or else throwing an exception)         final int s1Dot = s1.lastIndexOf('.');         final int s2Dot = s2.lastIndexOf('.');         if ((s1Dot == -1) == (s2Dot == -1)) { // both or neither             s1 = s1.substring(s1Dot + 1);             s2 = s2.substring(s2Dot + 1);             return s1.compareTo(s2);         } else if (s1Dot == -1) { // only s2 has an extension, so s1 goes first             return -1;         } else { // only s1 has an extension, so s1 goes second             return 1;         }     } });"
"import java.util.regex.*; class Test {     public static void main(String[] args) {         char[] special = Character.toChars(0x1F4F1);         String text = ""Hi\n\nyo keep this here\n\n"" + new String(special) + ""Unicode b4 keep all from here\n\nyo\ncut me:\n\nThis should be deleted"";         Pattern PATTERN = Pattern.compile(""^(.+?)\\nyo(?:(?!cut me:|\\nyo).)*cut me:"",                 Pattern.DOTALL);         Matcher m = PATTERN.matcher(text);         if (m.find()) {             text = m.group(1);             System.out.println(text);         }     } }"
"final String html = ""&lt;th style=\""text-align:right\""&gt;4389&lt;/th&gt;"";  Document doc = Jsoup.parse(html, """", Parser.xmlParser()); // Using the default html parser may remove the style attribute Element th = doc.select(""th[style]"").first();   String style = th.attr(""style""); // You can put those two lines into one String styleValue = style.split("":"")[1]; // TODO: Insert a check if a value is set  // Output the results System.out.println(th); System.out.println(style); System.out.println(styleValue);"
protected Entities entities; @JsonIgnoreProperties(ignoreUnknown = true) protected class Entities {     public Entities() {}     @JsonDeserialize(contentAs=Tag.class)     protected List&lt;Tag&gt; tags;      @JsonIgnoreProperties(ignoreUnknown = true)     protected class Tag {         public Tag() {}          protected String text;          public String getText() {             return text;         }          public void setText(String text) {             this.text = text;         }     };      public Tags getTags() {         return tags;     }     public void setTags(Tags tags) {         this.tags = tags;     } };
"public class TagListViewer  extends ListActivity {     // Make adapter a class variable     private ArrayAdapter&lt;String&gt; adapter;      private Button clickBtn;     EditText textInput;      // You cannot add items to a primitive String array, we'll convert this to an ArrayList     String[] resultStr = {""a"", ""b"", ""c""};      List&lt;String&gt; list = new ArrayList&lt;String&gt;();      @Override     public void onCreate(Bundle savedInstanceState) {         super.onCreate(savedInstanceState);         setContentView(R.layout.tagselection);          // Add contents of resultStr to the dynamic List         Collections.addAll(list, resultStr);          clickBtn = (Button) findViewById(R.id.CreatePL);         clickBtn.setText(""Search"");         textInput = (EditText) findViewById(R.id.textInput);          // Reflect class variable change and use list instead of resultStr         adapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_list_item_1, list);         setListAdapter(adapter);          clickBtn.setOnClickListener(new OnClickListener() {             public void onClick(View v) {                 // This will add the one phrase ""ABC""                 //adapter.add(""ABC"");                  // This will add the contents of textInput                 adapter.add(textInput.getText().toString());             }         });     } }"
"File file = null;     FileInputStream fis = null;     HWPFDocument document = null;     Range commentRange = null;     try {         file = new File(fileName);         fis = new FileInputStream(file);         document = new HWPFDocument(fis);         commentRange = document.getCommentsRange();         int numComments = commentRange.numParagraphs();         for (int i = 0; i &lt; numComments; i++) {             String comments = commentRange.getParagraph(i).text();             comments = comments.replaceAll(""\\cM?\r?\n"", """").trim();             if (!comments.equals("""")) {                 System.out.println(""comment :-  "" + comments);             }         }     } catch (Exception e) {         e.printStackTrace();     }"
"JFileChooser fc = new JFileChooser(){          @Override         public void approveSelection(){             File f = getSelectedFile();             if(!f.exists() ){                                    JOptionPane.showMessageDialog(null, ""Error"");                                }         }                };      fc.setFileSelectionMode(JFileChooser.FILES_ONLY);     fc.setDialogTitle(""Open test"");     fc.removeChoosableFileFilter(fc.getFileFilter());  //remove the default file filter     FileFilter filter = new FileNameExtensionFilter(""XML file"", ""xml"");      fc.addChoosableFileFilter(filter); //add XML file filter      //show dialog     int returnVal = fc.showOpenDialog(appFrame);       if(returnVal == JFileChooser.APPROVE_OPTION){/* ...  */}"
"JFileChooser chooser = new JFileChooser(); chooser.setMultiSelectionEnabled(false); chooser.setAcceptAllFileFilterUsed(false);  FileNameExtensionFilter filter = new FileNameExtensionFilter(""HTML Documents"", ""htm"", ""html""); chooser.setFileFilter(filter);  int option = chooser.showSaveDialog(ChatGUI.this); if (option == JFileChooser.APPROVE_OPTION) {     // Set up document to be parsed as HTML     StyledDocument doc = (StyledDocument)textPaneHistory.getDocument();     HTMLEditorKit kit = new HTMLEditorKit();      BufferedOutputStream out;      try {         System.out.println(chooser.getFileFilter());          if (chooser.getFileFilter() == filter)             System.out.println(""ha ha"");     } }"
"public void onClick(DialogInterface dialog,                                 int id) {                              //This is the input I can't get text from                             EditText inputTemp = (EditText) view.findViewById(R.id.search_input_text);                             //query is of the String type                             query = inputTemp.getText().toString();                             newQuery();                             getJSON newData = new getJSON();                             newData.execute(""Test"");                         }"
