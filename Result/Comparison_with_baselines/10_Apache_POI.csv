code
"import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream;  import org.apache.poi.hssf.usermodel.HSSFWorkbook; import org.apache.poi.openxml4j.exceptions.InvalidFormatException; import org.apache.poi.ss.usermodel.Cell; import org.apache.poi.ss.usermodel.CellStyle;    import org.apache.poi.ss.usermodel.CreationHelper; import org.apache.poi.ss.usermodel.Font; import org.apache.poi.ss.usermodel.Row; import org.apache.poi.ss.usermodel.Sheet; import org.apache.poi.ss.usermodel.Workbook; import org.apache.poi.ss.usermodel.WorkbookFactory;  public class PoiWriteExcelFile {  public void methodOne() {      System.out.println(""Into method one!"");      Workbook wb = new HSSFWorkbook();     Font f = wb.createFont();     f.setBoldweight(Font.BOLDWEIGHT_BOLD);     CellStyle cs = wb.createCellStyle();     cs.setFont(f);      CreationHelper createHelper = wb.getCreationHelper();     Sheet sheet = wb.createSheet(""First Sheet"");     Row row = sheet.createRow((short) 0);      Cell c = null;      c = row.createCell(0);     c.setCellStyle(cs);     c.setCellValue(createHelper.createRichTextString(""First Column""));      c = row.createCell(1);     c.setCellStyle(cs);     c.setCellValue(createHelper.createRichTextString(""Second Column""));      c = row.createCell(2);     c.setCellStyle(cs);     c.setCellValue(createHelper.createRichTextString(""Third Column""));      // Write the output to a file     FileOutputStream fileOut;     try {         fileOut = new FileOutputStream(""C:\\TestData\\POI\\poi-test.xls"");         wb.write(fileOut);         fileOut.close();     } catch (FileNotFoundException e) {         e.printStackTrace();     } catch (IOException e) {         e.printStackTrace();     }      System.out.println(""Out of method one!"");  }  public void methodTwo() {      System.out.println(""Into method two!"");     InputStream inp;     try {         inp = new FileInputStream(""C:\\TestData\\POI\\poi-test.xls"");         Workbook wb = WorkbookFactory.create(inp);         Sheet sheet = wb.getSheetAt(0);         Row row = sheet.createRow((short) (sheet.getLastRowNum() + 1));          Cell c = null;         CreationHelper createHelper = wb.getCreationHelper();          c = row.createCell(0);         c.setCellValue(createHelper.createRichTextString(""First Row First value""));          c = row.createCell(1);         c.setCellValue(createHelper.createRichTextString(""First Row Second value""));          c = row.createCell(2);         c.setCellValue(createHelper.createRichTextString(""First Row Third value""));          FileOutputStream fileOut = new FileOutputStream(""C:\\TestData\\POI\\poi-test.xls"");         wb.write(fileOut);         fileOut.close();      } catch (FileNotFoundException e) {         e.printStackTrace();     } catch (InvalidFormatException e) {         e.printStackTrace();     } catch (IOException e) {         e.printStackTrace();     }       System.out.println(""Out of method two!""); }  public void methodThree() {      System.out.println(""Into method three!"");     InputStream inp;     try {         inp = new FileInputStream(""C:\\TestData\\POI\\poi-test.xls"");         Workbook wb = WorkbookFactory.create(inp);         Sheet sheet = wb.getSheetAt(0);         Row row = sheet.createRow((short) (sheet.getLastRowNum() + 1));          Cell c = null;         CreationHelper createHelper = wb.getCreationHelper();          c = row.createCell(0);         c.setCellValue(createHelper.createRichTextString(""Second Row First value""));          c = row.createCell(1);         c.setCellValue(createHelper.createRichTextString(""Second Row Second value""));          c = row.createCell(2);         c.setCellValue(createHelper.createRichTextString(""Second Row Third value""));          FileOutputStream fileOut = new FileOutputStream(""C:\\TestData\\POI\\poi-test.xls"");         wb.write(fileOut);         fileOut.close();      } catch (FileNotFoundException e) {         e.printStackTrace();     } catch (InvalidFormatException e) {         e.printStackTrace();     } catch (IOException e) {         e.printStackTrace();     }      System.out.println(""Out of method three!"");  }  public void methodFour() {      System.out.println(""Into method four!"");     File file = new File(""C:\\TestData\\POI\\poi-test.xls"");     // file.deleteOnExit();     System.out.println(""Out of method four!"");  }  public static void main(final String[] args) {      PoiWriteExcelFile myObj = new PoiWriteExcelFile();     myObj.methodOne();     myObj.methodTwo();     myObj.methodThree();     myObj.methodFour();  }  }"
"try this   import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.util.Iterator;  import org.apache.poi.hssf.usermodel.HSSFSheet; import org.apache.poi.hssf.usermodel.HSSFWorkbook; import org.apache.poi.ss.usermodel.Cell; import org.apache.poi.ss.usermodel.Row; import org.apache.poi.ss.usermodel.Sheet; import org.apache.poi.ss.usermodel.Workbook; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  public class ExcelExample {      public static void main(String[] args) throws IOException {          try {              FileInputStream file = new FileInputStream(new File(""C:\\test.xls""));              HSSFWorkbook workbook = new HSSFWorkbook(file);             HSSFSheet sheet = workbook.getSheetAt(0);             Cell cell = null;              //Update the value of cell             cell = sheet.getRow(1).getCell(2);             cell.setCellValue(cell.getNumericCellValue() * 2);             cell = sheet.getRow(2).getCell(2);             cell.setCellValue(cell.getNumericCellValue() * 2);             Row row = sheet.getRow(0);             row.createCell(3).setCellValue(""Value 2"");              file.close();              FileOutputStream outFile =new FileOutputStream(new File(""C:\\update.xls""));             workbook.write(outFile);             outFile.close();          } catch (FileNotFoundException e) {             e.printStackTrace();         } catch (IOException e) {             e.printStackTrace();         }     } }"
"import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import org.apache.poi.ss.usermodel.Cell; import org.apache.poi.ss.usermodel.DateUtil; import org.apache.poi.ss.usermodel.FormulaEvaluator; import org.apache.poi.ss.usermodel.Row; import org.apache.poi.ss.usermodel.Sheet; import org.apache.poi.ss.usermodel.Workbook; import org.apache.poi.xssf.usermodel.XSSFWorkbook;  public class XlsxReader {      public static void main(String[] args) throws IOException {         InputStream myxls = new FileInputStream(""test.xlsx"");         Workbook book = new XSSFWorkbook(myxls);         FormulaEvaluator eval =             book.getCreationHelper().createFormulaEvaluator();         Sheet sheet = book.getSheetAt(0);         for (Row row : sheet) {             for (Cell cell : row) {                 printCell(cell, eval);                 System.out.print(""; "");             }             System.out.println();         }         myxls.close();     }      private static void printCell(Cell cell, FormulaEvaluator eval) {         switch (cell.getCellType()) {             case Cell.CELL_TYPE_BLANK:                 System.out.print(""EMPTY"");                 break;             case Cell.CELL_TYPE_STRING:                 System.out.print(cell.getStringCellValue());                 break;             case Cell.CELL_TYPE_NUMERIC:                 if (DateUtil.isCellDateFormatted(cell)) {                     System.out.print(cell.getDateCellValue());                 } else {                     System.out.print(cell.getNumericCellValue());                 }                 break;             case Cell.CELL_TYPE_BOOLEAN:                 System.out.print(cell.getBooleanCellValue());                 break;             case Cell.CELL_TYPE_FORMULA:                 System.out.print(cell.getCellFormula());                 break;             default:                 System.out.print(""DEFAULT"");         }     } }"
"import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import org.apache.poi.hwpf.HWPFDocument; import org.apache.poi.hwpf.usermodel.CharacterRun; import org.apache.poi.hwpf.usermodel.Paragraph; import org.apache.poi.hwpf.usermodel.Range; import org.apache.poi.hwpf.usermodel.Section; import org.apache.poi.poifs.filesystem.POIFSFileSystem;  public class HWPFTest {     public static void main(String[] args){         String filePath = ""F:\\Sample.doc"";         POIFSFileSystem fs = null;                 try {                         fs = new POIFSFileSystem(new FileInputStream(filePath));                         HWPFDocument doc = new HWPFDocument(fs);             doc = replaceText(doc, ""$VAR"", ""MyValue1"");             saveWord(filePath, doc);         }         catch(FileNotFoundException e){             e.printStackTrace();         }         catch(IOException e){             e.printStackTrace();         }     }      private static HWPFDocument replaceText(HWPFDocument doc, String findText, String replaceText){         Range r1 = doc.getRange();           for (int i = 0; i &lt; r1.numSections(); ++i ) {              Section s = r1.getSection(i);              for (int x = 0; x &lt; s.numParagraphs(); x++) {                  Paragraph p = s.getParagraph(x);                  for (int z = 0; z &lt; p.numCharacterRuns(); z++) {                      CharacterRun run = p.getCharacterRun(z);                      String text = run.text();                     if(text.contains(findText)) {                         run.replaceText(findText, replaceText);                     }                  }             }         }          return doc;     }      private static void saveWord(String filePath, HWPFDocument doc) throws FileNotFoundException, IOException{         FileOutputStream out = null;         try{             out = new FileOutputStream(filePath);             doc.write(out);         }         finally{             out.close();         }     } }"
"import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream;  import javax.servlet.ServletException; import javax.servlet.http.HttpServlet;  import javax.servlet.http.HttpServletRequest;  import javax.servlet.http.HttpServletResponse;  import org.apache.commons.fileupload.FileItemIterator;  import org.apache.commons.fileupload.FileItemStream;  import org.apache.commons.fileupload.servlet.ServletFileUpload;   public class FileUpload extends HttpServlet{     public void doPost(HttpServletRequest request, HttpServletResponse response)  throws ServletException, IOException {         ServletFileUpload upload = new ServletFileUpload();          try{             FileItemIterator iter = upload.getItemIterator(request);              while (iter.hasNext()) {                 FileItemStream item = iter.next();                  String name = item.getFieldName();                 InputStream stream = item.openStream();                   // Process the input stream                 ByteArrayOutputStream out = new ByteArrayOutputStream();                 int len;                 byte[] buffer = new byte[8192];                 while ((len = stream.read(buffer, 0, buffer.length)) != -1) {                     out.write(buffer, 0, len);                 }                  int maxFileSize = 10*(1024*1024); //10 megs max                  if (out.size() &gt; maxFileSize) {                      throw new RuntimeException(""File is &gt; than "" + maxFileSize);                 }             }         }         catch(Exception e){             throw new RuntimeException(e);         }      } }"
"import java.io.BufferedReader; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.util.logging.Level; import java.util.logging.Logger;  import org.apache.xmlrpc.XmlRpcException; import org.apache.xmlrpc.client.XmlRpcClient; import org.apache.xmlrpc.client.XmlRpcStreamTransport; import org.apache.xmlrpc.client.XmlRpcSunHttpTransport; import org.apache.xmlrpc.common.XmlRpcStreamRequestConfig; import org.xml.sax.SAXException;   /**  * This is a custom XML-RPC transport which logs the outgoing and incoming  * XML-RPC messages.  */ public class MessageLoggingTransport extends XmlRpcSunHttpTransport {     private static final Logger log = Logger.getLogger(MessageLoggingTransport.class.getName());       /**      * Default constructor      *       * @see XmlRpcSunHttpTransport#XmlRpcSunHttpTransport(XmlRpcClient)      * @param pClient      */     public CookieHandlingTransport(final XmlRpcClient pClient)     {         super(pClient);     }       /**      * Dumps outgoing XML-RPC requests to the log      */     @Override     protected void writeRequest(final XmlRpcStreamTransport.ReqWriter pWriter) throws IOException, XmlRpcException, SAXException     {         final ByteArrayOutputStream baos = new ByteArrayOutputStream();         pWriter.write(baos);         log.info(baos.toString());         super.writeRequest(pWriter);     }       /**      * Dumps incoming XML-RPC responses to the log      */     @Override     protected Object readResponse(XmlRpcStreamRequestConfig pConfig, InputStream pStream) throws XmlRpcException     {         final StringBuffer sb = new StringBuffer();          try         {             final BufferedReader reader = new BufferedReader(new InputStreamReader(pStream));             String line = reader.readLine();             while(line != null)             {                 sb.append(line);                 line = reader.readLine();             }         }         catch(final IOException e)         {             log.log(Level.SEVERE, ""While reading server response"", e);         }          log.info(sb.toString());          final ByteArrayInputStream bais = new ByteArrayInputStream(sb.toString().getBytes());         return super.readResponse(pConfig, bais);     } }"
"import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.File; import java.util.logging.Level; import java.util.logging.Logger; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JProgressBar; import org.apache.http.HttpEntity; import org.apache.http.HttpResponse; import org.apache.http.HttpVersion; import org.apache.http.client.HttpClient; import org.apache.http.client.methods.HttpPut; import org.apache.http.impl.client.DefaultHttpClient; import org.apache.http.params.BasicHttpParams; import org.apache.http.params.HttpParams; import org.apache.http.params.HttpProtocolParams; import org.apache.http.util.EntityUtils;  public class ApplicationView implements ActionListener {    File file = new File(""C:/Temp/my-upload.avi"");   JProgressBar progressBar = null;    public ApplicationView()   {     super();   }    public void createView()   {     JFrame frame = new JFrame(""File Upload with progress bar - Example"");     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     frame.setBounds(0, 0, 300, 200);     frame.setVisible(true);      progressBar = new JProgressBar(0, 100);     progressBar.setBounds(20, 20, 200, 30);     progressBar.setStringPainted(true);     progressBar.setVisible(true);      JButton button = new JButton(""upload"");     button.setBounds(progressBar.getX(),             progressBar.getY() + progressBar.getHeight() + 20,             100,             40);     button.addActionListener(this);      JPanel panel = (JPanel) frame.getContentPane();     panel.setLayout(null);     panel.add(progressBar);     panel.add(button);     panel.setVisible(true);   }    public void actionPerformed(ActionEvent e)   {     try     {       sendFile(this.file, this.progressBar);     }     catch (Exception ex)     {       System.out.println(ex.getLocalizedMessage());     }   }    private void sendFile(File file, JProgressBar progressBar) throws Exception   {     String serverResponse = null;     HttpParams params = new BasicHttpParams();     params.setParameter(HttpProtocolParams.USE_EXPECT_CONTINUE, true);     HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);     HttpClient client = new DefaultHttpClient(params);     HttpPut put = new HttpPut(""http://localhost:8080/"" + file.getName());      ProgressBarListener listener = new ProgressBarListener(progressBar);     FileEntityWithProgressBar fileEntity = new FileEntityWithProgressBar(file, ""binary/octet-stream"", listener);     put.setEntity(fileEntity);      HttpResponse response = client.execute(put);     HttpEntity entity = response.getEntity();     if (entity != null)     {       serverResponse = EntityUtils.toString(entity);       System.out.println(serverResponse);     }   } }"
"import org.apache.commons.lang.SerializationUtils; import org.springframework.stereotype.Component;  import javax.ws.rs.core.MediaType; import javax.ws.rs.core.MultivaluedMap; import javax.ws.rs.ext.MessageBodyReader; import javax.ws.rs.ext.MessageBodyWriter; import javax.ws.rs.ext.Provider; import java.io.InputStream; import java.io.OutputStream; import java.io.Serializable; import java.lang.annotation.Annotation; import java.lang.reflect.Type;  /**  * Created with IntelliJ IDEA.  * User: ryan  * Date: 2/25/13  * Time: 2:07 PM  */ @Component @Provider public class SerializationMessageBodyReaderAndWriter         implements MessageBodyReader&lt;Serializable&gt;, MessageBodyWriter&lt;Serializable&gt; {     public static final String APPLICATION_JAVA_SERIALIZED_OBJECT =             ""application/x-java-serialized-object"";     public static final MediaType APPLICATION_JAVA_SERIALIZED_OBJECT_TYPE =             MediaType.valueOf(APPLICATION_JAVA_SERIALIZED_OBJECT);      @Override     public boolean isReadable(Class&lt;?&gt; type,                               Type genericType,                               Annotation[] annotations,                               MediaType mediaType) {         return mediaType.isCompatible(APPLICATION_JAVA_SERIALIZED_OBJECT_TYPE)                 &amp;&amp; Serializable.class.isAssignableFrom(type);     }      @Override     public Serializable readFrom(Class&lt;Serializable&gt; type,                                  Type genericType,                                  Annotation[] annotations,                                  MediaType mediaType,                                  MultivaluedMap&lt;String, String&gt; httpHeaders,                                  InputStream entityStream) {         return (Serializable) SerializationUtils.deserialize(entityStream);     }      @Override     public boolean isWriteable(Class&lt;?&gt; type,                                Type genericType,                                Annotation[] annotations,                                MediaType mediaType) {         return mediaType.isCompatible(APPLICATION_JAVA_SERIALIZED_OBJECT_TYPE)                 &amp;&amp; Serializable.class.isAssignableFrom(type);     }      @Override     public long getSize(Serializable o,                         Class&lt;?&gt; type,                         Type genericType,                         Annotation[] annotations,                         MediaType mediaType) {         return -1;     }      @Override     public void writeTo(Serializable o,                         Class&lt;?&gt; type,                         Type genericType,                         Annotation[] annotations,                         MediaType mediaType,                         MultivaluedMap&lt;String, Object&gt; httpHeaders,                         OutputStream entityStream) {         SerializationUtils.serialize(o, entityStream);     } }"
"import org.apache.poi.xwpf.usermodel.ParagraphAlignment; import org.apache.poi.xwpf.usermodel.XWPFDocument; import org.apache.poi.xwpf.usermodel.XWPFParagraph; import org.apache.poi.xwpf.usermodel.XWPFRun; import org.apache.poi.xwpf.usermodel.VerticalAlign;  import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException;  public class ApachePOI {         public static void main(String[] args) {      XWPFDocument document = new XWPFDocument();      XWPFParagraph paragraphOne = document.createParagraph();      paragraphOne.setAlignment(ParagraphAlignment.CENTER);      XWPFRun paragraphOneRunOne = paragraphOne.createRun();     paragraphOneRunOne.setFontSize(25);     paragraphOneRunOne.setBold(true);     paragraphOneRunOne.setText(""Oxygene - O"");      XWPFRun paragraphOneRunTwo = paragraphOne.createRun();     paragraphOneRunTwo.setFontSize(17);     paragraphOneRunTwo.setBold(true);     paragraphOneRunTwo.setSubscript(VerticalAlign.SUBSCRIPT);     paragraphOneRunTwo.setText(""2"");      try {         FileOutputStream fos = new FileOutputStream(""C://test.docx"");         document.write(fos);         fos.close();         } catch (FileNotFoundException e) {             e.printStackTrace();         } catch (IOException e) {             e.printStackTrace();         }     } }"
"package com.jimtough;  import java.io.BufferedOutputStream; import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.util.Collections; import java.util.List; import java.util.zip.ZipEntry; import java.util.zip.ZipOutputStream;  import org.apache.commons.io.IOUtils; import org.apache.commons.lang.Validate; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import de.micromata.opengis.kml.v_2_2_0.Kml;  /**  * Uses the classes in java.util.zip to package a KML file and its  * supplementary files as a ZIP-compressed KMZ file.  *   * @author JTOUGH  */ public final class KMZPackager {      private final static Logger logger =         LoggerFactory.getLogger(KMZPackager.class);      /**      * Container for data that represents a single entry that will be added      * to a compressed archive.      * @author JTOUGH      */     public static abstract class DataSource {         protected String archivedFileName;          /**          * Write the contents of this data source to the supplied          * zip output stream.          *           * @param zipOutputStream          * @throws IOException          */         public abstract void writeToStream(ZipOutputStream zipOutputStream)              throws IOException;      }      /**      * Container for data that represents a single file that will be added      * to a compressed archive.      * @author JTOUGH      */     public static final class FileDataSource extends DataSource {         private File sourceFile;          /**          * Constructor          *           * @param sourceFile Actual file that will be added to the           *  compressed archive.           * @param archivedFileName Name that will be assigned to the compressed          *  file within the archive. Caller must ensure that this value is          *  unique within the archive otherwise an exception will be thrown          *  when a name clash occurs during creation of the archive.          *  This string must be non-null and non-empty. Any forward-slash          *  characters in the string will be treated as directory separators          *  when the KMZ/ZIP archive is created.          * @throws IllegalArgumentException If either of these parameters          *  is a null reference          */         public FileDataSource(                 File sourceFile,                 String archivedFileName)                  throws IllegalArgumentException {             Validate.notNull(sourceFile);             Validate.notEmpty(archivedFileName);             this.sourceFile = sourceFile;             this.archivedFileName = archivedFileName;         }          @Override         public void writeToStream(ZipOutputStream zipOutputStream)                 throws IOException {             Validate.notNull(zipOutputStream);              // Check that the file exists, and throw an appropriate exception             // before reading it             if (!sourceFile.exists()) {                 throw new IllegalArgumentException(                     ""File referenced in parameter ["" +                     sourceFile.getAbsolutePath() + ""] does not exist"");             }              FileInputStream fis = new FileInputStream(sourceFile);              if (logger.isDebugEnabled()) {                 logger.debug(""Adding file to KMZ archive"" +                     "" | archive name: "" + archivedFileName +                     "" | original name: "" +                      sourceFile.getCanonicalPath());             }              // Mark the start of this new file in the ZIP stream             ZipEntry entry = new ZipEntry(archivedFileName);             zipOutputStream.putNextEntry(entry);              // Use the Apache commons-io library to do a buffered             // stream-to-stream copy             try {                 IOUtils.copy(fis, zipOutputStream);             } finally {                 fis.close();             }         }     }      /**      * Container for a single JAK Kml object that will be marshalled      * directly to a compressed KMZ archive as it is created      * @author JTOUGH      */     public static final class KMLDataSource extends DataSource {         private Kml kml;          /**          * Constructor          *           * @param kml JAK Kml object that will be marshalled directly to the           *  compressed archive.           * @param archivedFileName Name that will be assigned to the compressed          *  file within the archive. Caller must ensure that this value is          *  unique within the archive otherwise an exception will be thrown          *  when a name clash occurs during creation of the archive.          *  This string must be non-null and non-empty. Any forward-slash          *  characters in the string will be treated as directory separators          *  when the KMZ/ZIP archive is created.          * @throws IllegalArgumentException If either of these parameters          *  is a null reference          */         public KMLDataSource(                 Kml kml,                 String archivedFileName)                  throws IllegalArgumentException {             Validate.notNull(kml);             Validate.notEmpty(archivedFileName);             this.kml = kml;             this.archivedFileName = archivedFileName;         }          @Override         public void writeToStream(ZipOutputStream zipOutputStream) throws IOException {             Validate.notNull(zipOutputStream);             // Mark the start of this new file in the ZIP stream             ZipEntry entry = new ZipEntry(archivedFileName);             zipOutputStream.putNextEntry(entry);              // Marshal the Kml object directly to the ZipOutputStream             if (logger.isDebugEnabled()) {                 logger.debug(""Marshalling KML to KMZ archive"" +                     "" | archive name: "" + archivedFileName);             }             kml.marshal(zipOutputStream);            }     }      /**      * Container for a stream holding a Kml document. This will be written      * directly to a compressed KMZ archive as it is created.      */     public static final class StreamDataSource extends DataSource {          private InputStream inputStream;          /**          * Constructor          *           * @param inputStream the inputStream holding the KML text          * @param archivedFileName Name that will be assigned to the compressed          *  file within the archive. Caller must ensure that this value is          *  unique within the archive otherwise an exception will be thrown          *  when a name clash occurs during creation of the archive.          *  This string must be non-null and non-empty. Any forward-slash          *  characters in the string will be treated as directory separators          *  when the KMZ/ZIP archive is created.          * @throws IllegalArgumentException If either of these parameters          *  is a null reference          */         public StreamDataSource(                 InputStream inputStream,                 String archivedFileName)                  throws IllegalArgumentException {             Validate.notNull(inputStream);             Validate.notEmpty(archivedFileName);             this.inputStream = inputStream;             this.archivedFileName = archivedFileName;         }          @Override         public void writeToStream(ZipOutputStream zipOutputStream) throws IOException {             Validate.notNull(zipOutputStream);             // Mark the start of this new file in the ZIP stream             ZipEntry entry = new ZipEntry(archivedFileName);             zipOutputStream.putNextEntry(entry);              // Use the Apache commons-io library to do a buffered             // stream-to-stream copy             if (logger.isDebugEnabled()) {                 logger.debug(""Copying KML from stream to KMZ archive"" +                     "" | archive name: "" + archivedFileName);             }             try {                 IOUtils.copy(inputStream, zipOutputStream);             } finally {                 inputStream.close();             }         }     }      /**      * Use ZIP compression to package a KML file and its supplementary files      * as a KMZ archive.  The compressed archive will be written to the       * supplied output stream.      *       * @param os OutputStream to which the compressed archive will be written.      *  This parameter must be a non-null reference to an OutputStream that      *  is open for write operations.      * @param kmlDataSource KML to be added to the compressed archive.       *  This parameter must not be null. The archivedFileName attribute must      *  end with the .kml extension. The file is added to the compressed       *  archive. The KMZ specification states that a KMZ archive must only      *  contain a single KML file.      * @param supplementaryFileList List of file locations for supplementary      *  files that will be included in the KMZ archive. A common example      *  would be icons or image overlays that are referenced in the KML file.      *  This parameter can be null or an empty list if there are no       *  supplementary files to include in the KMZ. Each source that is included      *  in the list must refer to an existing file that does NOT have the      *  file extension '.kml'.      * @throws RuntimeException Thrown if anything unexpected occurs      *  that prevents execution from continuing or if any of the stated      *  conditions for the input parameters are violated      */     public void packageAsKMZ(             OutputStream os,             DataSource kmlDataSource,             List&lt;FileDataSource&gt; supplementaryFileList)              throws RuntimeException {         ZipOutputStream zipOutputStream = null;         boolean isExceptionThrown = false;         Exception caughtException = null;         List&lt;FileDataSource&gt; supplFileList = supplementaryFileList;          try {             Validate.notNull(os, ""os parameter cannot be null"");             Validate.notNull(kmlDataSource,                  ""kmlFileDataSource parameter cannot be null"");              // Treat a null parameter just like an empty list (which is OK)             if (supplFileList == null) {                 supplFileList = Collections.emptyList();             }              if (logger.isDebugEnabled()) {                 logger.debug(                     ""Creating KMZ archive"" +                     "" | supplementary files: "" + supplFileList.size());             }              // Create a buffered output stream for the new KMZ file             zipOutputStream = new ZipOutputStream(new BufferedOutputStream(os));             Validate.isTrue(                 kmlDataSource.archivedFileName.endsWith("".kml""),                 ""KML archived file name must end with .kml"");             kmlDataSource.writeToStream(zipOutputStream);              // Now process the list of supplementary files             if (logger.isDebugEnabled()) {                 logger.debug(""Adding supplementary files to KMZ archive"" +                     "" | archive name: "");             }             for (FileDataSource ds : supplFileList) {                 Validate.isTrue(                     !ds.archivedFileName.endsWith("".kml""),                     ""Not legal to include .kml files in supplementary list"");                 ds.writeToStream(zipOutputStream);             }              // Close the output stream to complete the ZIP creation             zipOutputStream.flush();             zipOutputStream.close();              logger.info(""KMZ archive created successfully"");          } catch (IOException e) {             isExceptionThrown = true;             caughtException = e;             logger.error(""IOException while creating ZIP stream"");         } catch (IllegalArgumentException e) {             isExceptionThrown = true;             caughtException = e;         } catch (RuntimeException e) {             isExceptionThrown = true;             caughtException = e;         } finally {             if (isExceptionThrown) {                 try {                     if (zipOutputStream != null) {                         zipOutputStream.close();                     }                 } catch (IOException ioe) {                     // Don't care                 }                 throw new RuntimeException(caughtException);             }         }     } }"
"package com.displaytag.export.views;   import java.io.IOException; import java.io.OutputStream; import java.util.Iterator; import javax.servlet.jsp.JspException; import org.apache.commons.lang.ObjectUtils; import org.apache.commons.lang.StringUtils; import org.displaytag.export.BinaryExportView; import org.displaytag.model.Column; import org.displaytag.model.ColumnIterator; import org.displaytag.model.HeaderCell; import org.displaytag.model.RowIterator; import org.displaytag.model.TableModel; import org.apache.poi.ss.usermodel.Cell; import org.apache.poi.ss.usermodel.CellStyle; import org.apache.poi.ss.usermodel.IndexedColors; import org.apache.poi.ss.usermodel.Row; import org.apache.poi.ss.util.CellRangeAddress; import org.apache.poi.xssf.usermodel.XSSFFont; import org.apache.poi.xssf.usermodel.XSSFSheet; import org.apache.poi.xssf.usermodel.XSSFWorkbook; import com.lowagie.text.BadElementException;  public class myExcel2007ExportView implements BinaryExportView{   //private static Log log = LogFactory.getLog(myExcel2007ExportView.class); private TableModel model; private boolean exportFull; private boolean header; private boolean decorated; private XSSFWorkbook workbook; private XSSFSheet sheet; private int rowCount=0; private CellStyle normalstyle=null; private CellStyle headerstyle=null; private CellStyle captionstyle=null;  private XSSFFont defaultFont; private XSSFFont headerFont; private XSSFFont captionFont;  public String getMimeType() {      return &quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;; }  public void setParameters(TableModel tableModel, boolean exportFullList, boolean includeHeader,        boolean decorateValues) {    this.model = tableModel;    this.exportFull = true;    this.header = includeHeader;    this.decorated = decorateValues; }  public boolean outputPage() {     return false; }  protected void initTable() throws BadElementException {     //Blank workbook     workbook = new XSSFWorkbook();           //Create a blank sheet     sheet = workbook.createSheet(&quot;Server Management System&quot;);               defaultFont= workbook.createFont();     defaultFont.setFontHeightInPoints((short)10);     defaultFont.setFontName(&quot;Arial&quot;);     defaultFont.setColor(IndexedColors.BLACK.getIndex());     defaultFont.setBold(false);     defaultFont.setItalic(false);      headerFont= workbook.createFont();     headerFont.setFontHeightInPoints((short)10);     headerFont.setFontName(&quot;Arial&quot;);     headerFont.setColor(IndexedColors.WHITE.getIndex());     headerFont.setBold(true);     headerFont.setItalic(false);          captionFont= workbook.createFont();     captionFont.setFontHeightInPoints((short)15);     captionFont.setFontName(&quot;Arial&quot;);     captionFont.setColor(IndexedColors.BLACK.getIndex());     captionFont.setBold(true);     captionFont.setItalic(false);               normalstyle= workbook.createCellStyle();      normalstyle.setFillBackgroundColor(IndexedColors.WHITE.getIndex());     normalstyle.setFillPattern(CellStyle.BIG_SPOTS);     normalstyle.setAlignment(CellStyle.ALIGN_CENTER);     normalstyle.setFont(defaultFont);          headerstyle= workbook.createCellStyle();      headerstyle.setFillBackgroundColor(IndexedColors.GREY_25_PERCENT.getIndex());     headerstyle.setFillPattern(CellStyle.BIG_SPOTS);     headerstyle.setAlignment(CellStyle.ALIGN_CENTER);     headerstyle.setFont(headerFont);          captionstyle= workbook.createCellStyle();      captionstyle.setFillBackgroundColor(IndexedColors.GREY_25_PERCENT.getIndex());     captionstyle.setFillPattern(CellStyle.BIG_SPOTS);     captionstyle.setAlignment(CellStyle.ALIGN_CENTER);     captionstyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);     captionstyle.setFont(captionFont);      }  protected void generateXLSXTable() throws JspException, BadElementException {     //adding caption     if(this.model.getCaption()!=null &amp;&amp; this.model.getCaption()!=&quot;&quot;)     {      Row blankrow = sheet.createRow(rowCount++);      Row row = sheet.createRow(rowCount++);            row.setHeight((short)5000);      int columnCount=0;      Cell captionCell = row.createCell(columnCount++);      captionCell.setCellValue(this.model.getCaption());      captionCell.setCellStyle(captionstyle);      sheet.addMergedRegion(new CellRangeAddress(              rowCount-1, //first row (0-based)              rowCount-1, //last row  (0-based)              columnCount-1, //first column (0-based)              columnCount+5  //last column  (0-based)      ));      Row blankrow2 = sheet.createRow(rowCount++);     }          if (this.header)     {         generateHeaders();     }          generateRows();          //adding footer     if(this.model.getFooter()!=null &amp;&amp; this.model.getFooter()!=&quot;&quot;)     {      Row blankrow = sheet.createRow(rowCount++);      Row blankrow2 = sheet.createRow(rowCount++);      Row row = sheet.createRow(rowCount++);            row.setHeight((short)1000);      int columnCount=0;      Cell captionCell = row.createCell(columnCount++);      captionCell.setCellValue(this.model.getFooter());      captionCell.setCellStyle(captionstyle);      sheet.addMergedRegion(new CellRangeAddress(              rowCount-1, //first row (0-based)              rowCount-1, //last row  (0-based)              columnCount-1, //first column (0-based)              columnCount+5  //last column  (0-based)      ));     } }  protected void generateHeaders() throws BadElementException {     Iterator&lt;HeaderCell&gt; iterator = this.model.getHeaderCellList().iterator();     Row row = sheet.createRow(rowCount++);          int columnCount=0;     while (iterator.hasNext())     {         sheet.autoSizeColumn(columnCount);         HeaderCell headerCell = iterator.next();          String columnHeader = headerCell.getTitle();          if (columnHeader == null)         {             columnHeader = StringUtils.capitalize(headerCell.getBeanPropertyName());         }          Cell hdrCell = row.createCell(columnCount++);         hdrCell.setCellValue(columnHeader);         hdrCell.setCellStyle(headerstyle);     } }  protected void generateRows() throws JspException, BadElementException {     // get the correct iterator (full or partial list according to the exportFull field)     RowIterator rowIterator = this.model.getRowIterator(this.exportFull);     // iterator on rows     while (rowIterator.hasNext())     {         Row newrow = sheet.createRow(rowCount++);         org.displaytag.model.Row row = rowIterator.next();         // iterator on columns         ColumnIterator columnIterator = row.getColumnIterator(this.model.getHeaderCellList());         int columnCount=0;         while (columnIterator.hasNext())         {             Column column = columnIterator.nextColumn();              // Get the value to be displayed for the column             Object value = column.getValue(this.decorated);              Cell Cell = newrow.createCell(columnCount++);             Cell.setCellValue(ObjectUtils.toString(value));         }     }      }  @Override public void doExport(OutputStream out) throws IOException, JspException {          try {         // Initialize the table with the appropriate number of columns         initTable();                  generateXLSXTable();              } catch (BadElementException e) {         // TODO Auto-generated catch block         e.printStackTrace();     }                 workbook.write(out);     out.close(); } }"
"package de.pdark.epen.editor;  import java.io.File; import java.lang.reflect.Constructor; import java.lang.reflect.Method; import java.net.URL; import java.net.URLClassLoader;  import org.apache.commons.lang.SystemUtils; import org.apache.commons.lang.exception.ExceptionUtils; import org.slf4j.Logger; import org.slf4j.LoggerFactory;  import ch.qos.logback.classic.LoggerContext; import ch.qos.logback.core.util.StatusPrinter; import de.pdark.epen.exceptions.WikiException;  public class Main {     public final static String VERSION = ""V0.9 (13.05.2010)""; //$NON-NLS-1$     private final static Logger log = LoggerFactory.getLogger (Main.class);      private static final String ORG_ECLIPSE_SWT_WIDGETS_SHELL = ""org.eclipse.swt.widgets.Shell""; //$NON-NLS-1$      /**     * @param args     */     @SuppressWarnings({""nls"", ""PMD.SystemPrintln""})     public static void main (String[] args)     {         String msg = ""Starting ePen ""+VERSION;         System.out.println (msg);         log.info (msg);          LoggerContext lc = (LoggerContext)LoggerFactory.getILoggerFactory ();         StatusPrinter.print (lc);          int rc = 1;         try         {             Main main = new Main ();             main.run (args);             rc = 0;         }         catch (Throwable t) //NOPMD         {             ExceptionUtils.printRootCauseStackTrace (t);         }         finally         {             System.out.println (""Done."");             log.info (""Exit {}"", rc);             System.exit (rc); //NOPMD         }     }      @SuppressWarnings({""nls"", ""PMD.SystemPrintln"", ""PMD.SignatureDeclareThrowsException""})     private void run (String[] args) throws Exception     {         if (!SystemUtils.isJavaVersionAtLeast (150))         {             System.out.println (""Version=""+SystemUtils.JAVA_VERSION_INT);             throw new WikiException (""Need at least Java 5 but this Java is only ""+SystemUtils.JAVA_VERSION);         }          loadSwtJar ();          URLClassLoader cl = (URLClassLoader) getClass().getClassLoader(); //NOPMD         Class&lt;?&gt; c = cl.loadClass (""de.pdark.epen.editor.EPenEditor"");         Class&lt;?&gt; shellClass = cl.loadClass (ORG_ECLIPSE_SWT_WIDGETS_SHELL);          Constructor&lt;?&gt; ctor = c.getConstructor (shellClass);         Object obj = ctor.newInstance (new Object[] { null });         Method run = c.getMethod (""run"", args.getClass ()); //$NON-NLS-1$         run.invoke (obj, new Object[] { args });     }      @SuppressWarnings({""nls"", ""PMD""})     private void loadSwtJar ()     {         try {             Class.forName (ORG_ECLIPSE_SWT_WIDGETS_SHELL);             // Already on classpath             return;         } catch (ClassNotFoundException e) {             // Add the JAR         }          String osName = SystemUtils.OS_NAME.toLowerCase ();         String osArch = SystemUtils.OS_ARCH.toLowerCase ();          String swtFileNameOsPart =              osName.contains(""win"") ? ""win32"" :             osName.contains(""mac"") ? ""macosx"" :             osName.contains(""linux"") || osName.contains(""nix"") ? ""linux"" :             null;         String swtFileNameUiPart =              osName.contains(""win"") ? ""win32"" :             osName.contains(""mac"") ? ""cocoa"" :             osName.contains(""linux"") || osName.contains(""nix"") ? ""gtk"" :             null;          if (null == swtFileNameOsPart)         {             throw new RuntimeException (""Can't determine name of SWT Jar from os.name=["" + osName + ""] and os.arch=[""                     + osArch + ""]"");         }          String swtFileNameArchPart = osArch.contains (""64"") ? "".x86_64"" : "".x86"";         if("".x86"".equals(swtFileNameArchPart) &amp;&amp; ""macosx"".equals(swtFileNameOsPart)) {             swtFileNameArchPart = """";         }          String swtFileName = ""org.eclipse.swt."" + swtFileNameUiPart + ""."" + swtFileNameOsPart + swtFileNameArchPart + ""-3.6.0.jar"";         File file = new File (""swt"", swtFileName);         if (!file.exists ())         {             throw new RuntimeException (""Can't locate SWT Jar "" + file.getAbsolutePath ());         }         try         {             URLClassLoader classLoader = (URLClassLoader) getClass ().getClassLoader ();             Method addUrlMethod = URLClassLoader.class.getDeclaredMethod (""addURL"", URL.class);             addUrlMethod.setAccessible (true);              URL swtFileUrl = file.toURI ().toURL ();             log.info (""Adding {} to the classpath"", swtFileUrl);             addUrlMethod.invoke (classLoader, swtFileUrl);         }         catch (Exception e)         {             throw new RuntimeException (""Unable to add the swt jar to the class path: "" + file.getAbsoluteFile (), e);         }     } }"
"import java.io.*; import java.util.logging.Level; import java.util.logging.Logger; import javax.xml.transform.Transformer; import javax.xml.transform.TransformerFactory; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; import org.apache.batik.apps.rasterizer.DestinationType; import org.apache.batik.apps.rasterizer.SVGConverter; import org.apache.batik.dom.svg.SAXSVGDocumentFactory; import org.apache.batik.util.XMLResourceDescriptor; import org.w3c.dom.Document;   public class DOMRasterizer {  public Document createDocument(InputStream in) {     Document doc = null ;     try {         // Create a new svg document.         String parser = XMLResourceDescriptor.getXMLParserClassName();         SAXSVGDocumentFactory f = new SAXSVGDocumentFactory(parser);         doc = f.createSVGDocument(null, in);      } catch (IOException ex) {         Logger.getLogger(DOMRasterizer.class.getName()).log(Level.SEVERE, null, ex);     }     return doc; }  public static void main(String[] args) throws Exception {      DOMRasterizer rasterizer = new DOMRasterizer();     InputStream in = new FileInputStream(new File(""your svg path""));     Document svgXmlDoc = rasterizer.createDocument(in);      // Save this SVG into a file (required by SVG -&gt; PNG transformation process)     File svgFile = File.createTempFile(""graphic-"", "".svg"");     Transformer transformer = TransformerFactory.newInstance().newTransformer();     DOMSource source = new DOMSource(svgXmlDoc);     FileOutputStream fos = new FileOutputStream(svgFile);     try {         transformer.transform(source, new StreamResult(fos));     } finally {         fos.close();     }     // Convert the SVG into PNG     File outputFile =new File(""output path"");     SVGConverter converter = new SVGConverter();     converter.setDestinationType(DestinationType.PNG);     converter.setSources(new String[]{svgFile.toString()});     converter.setDst(outputFile);     converter.execute(); } }"
"import java.net.URI; import java.util.List;  import javax.ws.rs.core.MediaType; import javax.ws.rs.core.UriBuilder;  import com.sun.jersey.api.client.GenericType; import com.sun.jersey.api.client.WebResource; import com.sun.jersey.client.apache.ApacheHttpClient; import com.sun.jersey.client.apache.config.ApacheHttpClientConfig; import com.sun.jersey.client.apache.config.DefaultApacheHttpClientConfig;  public Client {      private final URI fServerURI;     private final ApacheHttpClient fClient;     private final MediaType fMediaType= MediaType.APPLICATION_XML_TYPE;      public Client() {             final String apiEndpoint= ""..."";             final DefaultApacheHttpClientConfig clientConfig;             fServerURI= UriBuilder.fromUri(apiEndpoint).build();             clientConfig= new DefaultApacheHttpClientConfig();             clientConfig.getProperties().put(ApacheHttpClientConfig.PROPERTY_HANDLE_COOKIES, true);             fClient= ApacheHttpClient.create(clientConfig);     }      private &lt;T&gt; T call(WebResource resource, RequestType requestType, Object requestEntity, GenericType&lt;T&gt; acceptType, String taskMessage) {             return acceptCall(resource, requestType, acceptType, requestEntity);     }      private &lt;T&gt; T acceptCall(WebResource resource, RequestType requestType, GenericType&lt;T&gt; acceptType, Object requestEntity) {            switch (requestType) {            case POST:                 return resource.accept(fMediaType).post(acceptType, requestEntity);            case PUT:                 return resource.accept(fMediaType).put(acceptType, requestEntity);            case DELETE:                 resource.accept(fMediaType).delete();                 return null;            default:                 return resource.accept(fMediaType).get(acceptType);     }      public MyArrayList sendArrayList(MyArrayList list) {            WebResource resource= createResource();            resource= resource.path(""webservice"").path(""sendarraylist"");            resource= resource.queryParam(""arraylist"", list);            return call(resource, RequestType.POST, null, new GenericType&lt;MyArrayList&gt;() {     }, ""Send my array list"");     }      public static void main(String ... args) {            Client c= new Client();            MyArrayList result= c.sendArrayList(new MyArrayList(/*whatevs goes inside*/));     }  }"
"import java.util.ArrayList; import java.util.Iterator; import java.util.List; import java.util.concurrent.Callable; import java.util.concurrent.Executor; import java.util.concurrent.FutureTask; import org.apache.http.client.methods.HttpGet; import org.apache.http.impl.client.BasicResponseHandler; import org.apache.http.impl.client.DefaultHttpClient; import org.springframework.stereotype.Controller; import org.springframework.ui.Model; import org.springframework.web.bind.annotation.RequestMapping;  @Controller public class MyController {     //inject this     private Executor executor;      @RequestMapping(""/your/path/here"")     public String myMVCControllerGETdataMethod(Model model) {         //define all async requests and give them to injected Executor         List&lt;GetRequestTask&gt; tasks = new ArrayList&lt;GetRequestTask&gt;();         tasks.add(new GetRequestTask(""http://api/data?type=1"", this.executor));         tasks.add(new GetRequestTask(""http://api/data?type=2"", this.executor));         //...         //do other work here         //...         //now wait for all async tasks to complete         while(!tasks.isEmpty()) {             for(Iterator&lt;GetRequestTask&gt; it = tasks.iterator(); it.hasNext();) {                 GetRequestTask task = it.next();                 if(task.isDone()) {                     String request = task.getRequest();                     String response = task.getResponse();                     //PUT YOUR CODE HERE                     //possibly aggregate request and response in Map&lt;String,String&gt;                     //or do something else with request and response                     it.remove();                 }             }             //avoid tight loop in ""main"" thread             if(!tasks.isEmpty()) Thread.sleep(100);         }         //now you have all responses for all async requests          //the following from your original code         //note: you should probably pass the responses from above         //to this next method (to keep your controller stateless)         String results = doWorkwithMultipleDataReturned();         model.addAttribute(results, results);         return ""index"";     }      //abstraction to wrap Callable and Future     class GetRequestTask {         private GetRequestWork work;         private FutureTask&lt;String&gt; task;         public GetRequestTask(String url, Executor executor) {             this.work = new GetRequestWork(url);             this.task = new FutureTask&lt;String&gt;(work);             executor.execute(this.task);         }         public String getRequest() {             return this.work.getUrl();         }         public boolean isDone() {             return this.task.isDone();         }         public String getResponse() {             try {                 return this.task.get();             } catch(Exception e) {                 throw new RuntimeException(e);             }         }     }      //Callable representing actual HTTP GET request     class GetRequestWork implements Callable&lt;String&gt; {         private final String url;         public GetRequestWork(String url) {             this.url = url;         }         public String getUrl() {             return this.url;         }         public String call() throws Exception {             return new DefaultHttpClient().execute(new HttpGet(getUrl()), new BasicResponseHandler());         }     } }"
"import java.io.IOException; import java.io.Reader; import java.util.ArrayList; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map;  import org.apache.lucene.analysis.Analyzer; import org.apache.lucene.analysis.ISOLatin1AccentFilter; import org.apache.lucene.analysis.LowerCaseFilter; import org.apache.lucene.analysis.StopFilter; import org.apache.lucene.analysis.TokenStream; import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter; import org.apache.lucene.analysis.ngram.EdgeNGramTokenFilter.Side; import org.apache.lucene.analysis.standard.StandardFilter; import org.apache.lucene.analysis.standard.StandardTokenizer; import org.apache.lucene.document.Document; import org.apache.lucene.document.Field; import org.apache.lucene.index.CorruptIndexException; import org.apache.lucene.index.IndexReader; import org.apache.lucene.index.IndexWriter; import org.apache.lucene.index.Term; import org.apache.lucene.search.IndexSearcher; import org.apache.lucene.search.Query; import org.apache.lucene.search.ScoreDoc; import org.apache.lucene.search.Sort; import org.apache.lucene.search.TermQuery; import org.apache.lucene.search.TopDocs; import org.apache.lucene.search.spell.LuceneDictionary; import org.apache.lucene.store.Directory; import org.apache.lucene.store.FSDirectory;  /**  * Search term auto-completer, works for single terms (so use on the last term  * of the query).  * &lt;p&gt;  * Returns more popular terms first.  *   * @author Mat Mannion, M.Mannion@warwick.ac.uk  */ public final class Autocompleter {      private static final String GRAMMED_WORDS_FIELD = ""words"";      private static final String SOURCE_WORD_FIELD = ""sourceWord"";      private static final String COUNT_FIELD = ""count"";      private static final String[] ENGLISH_STOP_WORDS = {     ""a"", ""an"", ""and"", ""are"", ""as"", ""at"", ""be"", ""but"", ""by"",     ""for"", ""i"", ""if"", ""in"", ""into"", ""is"",     ""no"", ""not"", ""of"", ""on"", ""or"", ""s"", ""such"",     ""t"", ""that"", ""the"", ""their"", ""then"", ""there"", ""these"",     ""they"", ""this"", ""to"", ""was"", ""will"", ""with""     };      private final Directory autoCompleteDirectory;      private IndexReader autoCompleteReader;      private IndexSearcher autoCompleteSearcher;      public Autocompleter(String autoCompleteDir) throws IOException {         this.autoCompleteDirectory = FSDirectory.getDirectory(autoCompleteDir,                 null);          reOpenReader();     }      public List&lt;String&gt; suggestTermsFor(String term) throws IOException {         // get the top 5 terms for query         Query query = new TermQuery(new Term(GRAMMED_WORDS_FIELD, term));         Sort sort = new Sort(COUNT_FIELD, true);          TopDocs docs = autoCompleteSearcher.search(query, null, 5, sort);         List&lt;String&gt; suggestions = new ArrayList&lt;String&gt;();         for (ScoreDoc doc : docs.scoreDocs) {             suggestions.add(autoCompleteReader.document(doc.doc).get(                     SOURCE_WORD_FIELD));         }          return suggestions;     }      @SuppressWarnings(""unchecked"")     public void reIndex(Directory sourceDirectory, String fieldToAutocomplete)             throws CorruptIndexException, IOException {         // build a dictionary (from the spell package)         IndexReader sourceReader = IndexReader.open(sourceDirectory);          LuceneDictionary dict = new LuceneDictionary(sourceReader,                 fieldToAutocomplete);          // code from         // org.apache.lucene.search.spell.SpellChecker.indexDictionary(         // Dictionary)         IndexReader.unlock(autoCompleteDirectory);          // use a custom analyzer so we can do EdgeNGramFiltering         IndexWriter writer = new IndexWriter(autoCompleteDirectory,         new Analyzer() {             public TokenStream tokenStream(String fieldName,                     Reader reader) {                 TokenStream result = new StandardTokenizer(reader);                  result = new StandardFilter(result);                 result = new LowerCaseFilter(result);                 result = new ISOLatin1AccentFilter(result);                 result = new StopFilter(result,                     ENGLISH_STOP_WORDS);                 result = new EdgeNGramTokenFilter(                     result, Side.FRONT,1, 20);                  return result;             }         }, true);          writer.setMergeFactor(300);         writer.setMaxBufferedDocs(150);          // go through every word, storing the original word (incl. n-grams)          // and the number of times it occurs         Map&lt;String, Integer&gt; wordsMap = new HashMap&lt;String, Integer&gt;();          Iterator&lt;String&gt; iter = (Iterator&lt;String&gt;) dict.getWordsIterator();         while (iter.hasNext()) {             String word = iter.next();              int len = word.length();             if (len &lt; 3) {                 continue; // too short we bail but ""too long"" is fine...             }              if (wordsMap.containsKey(word)) {                 throw new IllegalStateException(                         ""This should never happen in Lucene 2.3.2"");                 // wordsMap.put(word, wordsMap.get(word) + 1);             } else {                 // use the number of documents this word appears in                 wordsMap.put(word, sourceReader.docFreq(new Term(                         fieldToAutocomplete, word)));             }         }          for (String word : wordsMap.keySet()) {             // ok index the word             Document doc = new Document();             doc.add(new Field(SOURCE_WORD_FIELD, word, Field.Store.YES,                     Field.Index.UN_TOKENIZED)); // orig term             doc.add(new Field(GRAMMED_WORDS_FIELD, word, Field.Store.YES,                     Field.Index.TOKENIZED)); // grammed             doc.add(new Field(COUNT_FIELD,                     Integer.toString(wordsMap.get(word)), Field.Store.NO,                     Field.Index.UN_TOKENIZED)); // count              writer.addDocument(doc);         }          sourceReader.close();          // close writer         writer.optimize();         writer.close();          // re-open our reader         reOpenReader();     }      private void reOpenReader() throws CorruptIndexException, IOException {         if (autoCompleteReader == null) {             autoCompleteReader = IndexReader.open(autoCompleteDirectory);         } else {             autoCompleteReader.reopen();         }          autoCompleteSearcher = new IndexSearcher(autoCompleteReader);     }      public static void main(String[] args) throws Exception {         Autocompleter autocomplete = new Autocompleter(""/index/autocomplete"");          // run this to re-index from the current index, shouldn't need to do         // this very often         // autocomplete.reIndex(FSDirectory.getDirectory(""/index/live"", null),         // ""content"");          String term = ""steve"";          System.out.println(autocomplete.suggestTermsFor(term));         // prints [steve, steven, stevens, stevenson, stevenage]     }  }"
"import java.io.IOException;  import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletContext; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse;  import org.apache.catalina.Container; import org.apache.catalina.connector.Connector; import org.apache.catalina.core.StandardContext; import org.apache.catalina.core.StandardEngine; import org.apache.commons.lang3.reflect.FieldUtils;  public class TestFilter implements Filter {      @Override     public void destroy() {         // TODO Auto-generated method stub      }      @Override     public void doFilter(ServletRequest arg0, ServletResponse arg1,             FilterChain arg2) throws IOException, ServletException {         arg2.doFilter(arg0, arg1);      }      @Override     public void init(FilterConfig arg0) throws ServletException {         ServletContext ctx = arg0.getServletContext();          try {             Object o = FieldUtils.readField(ctx, ""context"", true);             StandardContext sCtx = (StandardContext) FieldUtils.readField(o, ""context"", true);             Container container = (Container) sCtx;              Container c = container.getParent();         while (c != null &amp;&amp; !(c instanceof StandardEngine)) {             c = c.getParent();         }          if (c != null) {             StandardEngine engine = (StandardEngine) c;             for (Connector connector : engine.getService().findConnectors()) {                 // Get port for each connector. Store it in the ServletContext or whatever                 System.out.println(connector.getPort());             }         }         } catch (Exception e) {             e.printStackTrace();         }       }  }"
"import java.awt.Color; import java.awt.Component; import java.awt.Container; import java.awt.FlowLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.FileNotFoundException;  import java.io.File;   import javax.swing.*;  import org.mozilla.xpcom.*;  import org.mozilla.interfaces.*;  /* Websites ref http://groups.google.com/group/mozilla.dev.tech.java/browse_thread/thread/898ba6751d0c57f7  http://skrul.com/blog/code/ http://wirestorm.net/blog/?cat=9  */   public class BrowserTest  implements nsIWebProgressListener,nsIWeakReference, nsIInterfaceRequestor, nsIWebBrowserChrome, nsISHistoryListener{      static {         try {             System.loadLibrary(""NativeWindow"");         } catch (UnsatisfiedLinkError e) {             System.err.println(""can't find your library"");         }     }     private static final String frameTitle=""GRE Embedded"";     public static void main(String[] args) {         BrowserConroller controler=new BrowserConroller();         controler.run();         new BrowserTest().start();     }       public void start(){           JFrame f = new JFrame( frameTitle );         f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         f.setSize(400, 150);         Container content = f.getContentPane();         content.setBackground(Color.white);         content.setLayout(new FlowLayout());          content.add(new JLabel(""Initializing ... ""));         f.setVisible(true);          File grePath = null;          LocationProvider locProvider;          Mozilla mozilla = Mozilla.getInstance();           GREVersionRange[] range = new GREVersionRange[1];          range[0] = new GREVersionRange(""1.8.0"", true, ""1.9"", false);           try {              grePath = Mozilla.getGREPathWithProperties(range, null);             mozilla.initialize(grePath);             locProvider = new LocationProvider(grePath);              mozilla.initEmbedding(grePath, grePath, locProvider);          }           catch (FileNotFoundException e) {              System.out.println(""Error: FileNotFoundException"");          }          catch (XPCOMException e) {              System.out.println(""Error: XPCOMException"");          }            //---------- END GRE INITIALIZATION------------           nsIServiceManager serviceManager = mozilla.getServiceManager();           nsIAppStartup appStartup = (nsIAppStartup)serviceManager.getServiceByContractID(""@mozilla.org/toolkit/app-startup;1"", nsIAppStartup.NS_IAPPSTARTUP_IID);          nsIWindowCreator windowCreator = (nsIWindowCreator)appStartup.queryInterface(nsIWindowCreator.NS_IWINDOWCREATOR_IID);           nsIWindowWatcher windowWatcher =(nsIWindowWatcher)serviceManager.getServiceByContractID(""@mozilla.org/embedcomp/window-watcher;1"",nsIWindowWatcher.NS_IWINDOWWATCHER_IID);           windowWatcher.setWindowCreator(windowCreator);           nsIDOMWindow win = windowWatcher.openWindow(null, ""http://google.com"", ""MAIN_WIN"",""chrome,resizable,centerscreen"", null);         windowWatcher.setActiveWindow( win );           nsIComponentManager componentManager = mozilla.getComponentManager();         String NS_IWEBBROWSER_CID = ""F1EAC761-87E9-11d3-AF80-00A024FFC08C""; //$NON-NLS-1$         nsIWebBrowser webBrowser = (nsIWebBrowser) componentManager.createInstance(NS_IWEBBROWSER_CID, null, nsIWebBrowser.NS_IWEBBROWSER_IID);         webBrowser.setContainerWindow(this);         webBrowser.addWebBrowserListener(this, nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID);   //      nsIWebNavigation webNavigation=(nsIWebNavigation)webBrowser.queryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID); //      webNavigation.loadURI(""http://www.zdnet.com"", nsIWebNavigation.LOAD_FLAGS_NONE, null, null, null); //                nsIBaseWindow baseWindow = (nsIBaseWindow) webBrowser.queryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID);                      long handle=FindWindow.getHWND( frameTitle );          baseWindow.initWindow(handle, 0, 0, 0,350,350);         baseWindow.create();         baseWindow.setVisibility(true);     //       //      nsIDOMWindow domWin=webBrowser.getContentDOMWindow(); //      nsIDOMEventTarget domEventTarget= (nsIDOMEventTarget)domWin.queryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID); //      domEventTarget.addEventListener(""click"", new EventListener(), false); //               //Hide JFrame after it have been initialized         f.setVisible(true); //       //      nsIWebNavigation webNavigation=(nsIWebNavigation)webBrowser.queryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID); //      webNavigation.loadURI(""http://www.zdnet.com"", nsIWebNavigation.LOAD_FLAGS_NONE, null, null, null); //               appStartup.run();          System.out.println(""try termEmbedding"");          try {              System.out.println(""mozilla.termEmbedding(); START"");              mozilla.termEmbedding();              System.out.println(""mozilla.termEmbedding(); FINISHED"");          }          catch (XPCOMException e) {              System.out.println(""Fehler: XPCOMException"");          }          System.out.println(""finished termEmbedding"");          System.out.println(""All done"");      }        public void onLocationChange(nsIWebProgress webProgress, nsIRequest request, nsIURI location) {         c(""onLocationChange"");      }      public void onProgressChange(nsIWebProgress webProgress, nsIRequest request, int curSelfProgress, int maxSelfProgress, int curTotalProgress, int maxTotalProgress) {         c(""onProgressChange"");      }      public void onSecurityChange(nsIWebProgress webProgress, nsIRequest request, long state) {         c(""onSecurityChange"");      }      public void onStateChange(nsIWebProgress webProgress, nsIRequest request, long stateFlags, long status) {         c(""onStateChange"");      }      public void onStatusChange(nsIWebProgress webProgress, nsIRequest request, long status, String message) {         c(""onStatusChange"");      }      public nsISupports queryInterface(String uuid) {         c(""queryInterface"");         return null;     }        public nsISupports queryReferent(String uuid) {         c(""queryReferent"");         return null;     }      public nsISupports getInterface(String uuid) {         c(""getInterface"");         return null;     }     private void c(Object o){         System.out.println(o);     }      public void destroyBrowserWindow() {         c(""destroyBrowserWindow"");      }      public void exitModalEventLoop(long status) {         c(""exitModalEventLoop"");      }      public long getChromeFlags() {         c(""getChromeFlags"");         return 0;     }      public nsIWebBrowser getWebBrowser() {         c(""getWebBrowser"");              return null;     }      public boolean isWindowModal() {         c(""isWindowModal"");              return false;     }      public void setChromeFlags(long chromeFlags) {         c(""setChromeFlags"");          }      public void setStatus(long statusType, String status) {         c(""setStatus"");       }      public void setWebBrowser(nsIWebBrowser webBrowser) {         c(""setWebBrowser"");              }      public void showAsModal() {         c(""showAsModal"");         }      public void sizeBrowserTo(int acx, int acy) {         c(""sizeBrowserTo"");       }      public boolean onHistoryGoBack(nsIURI backURI) {         c(""onHistoryGoBack"");         return false;     }      public boolean onHistoryGoForward(nsIURI forwardURI) {         c(""onHistoryGoForward"");         return false;     }      public boolean onHistoryGotoIndex(int index, nsIURI gotoURI) {         c("" onHistoryGotoIndex"");         return false;     }      public void onHistoryNewEntry(nsIURI newURI) {         c("" onHistoryNewEntry"");     }      public boolean onHistoryPurge(int numEntries) {         c("" onHistoryPurge"");         return false;     }      public boolean onHistoryReload(nsIURI reloadURI, long reloadFlags) {         c("" onHistoryReload"");         return false;     }   } //public class JavaXPCOM_test1[/code]"
"package ebay;  import java.io.ByteArrayInputStream; import java.io.InputStream; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.xpath.XPath; import javax.xml.xpath.XPathConstants; import javax.xml.xpath.XPathExpression; import javax.xml.xpath.XPathFactory; import org.w3c.dom.Document; import org.w3c.dom.Node; import org.w3c.dom.NodeList;  import ebay.URLReader;  /**  *  * @author rajeev jha (xxx@yyy.com)  *  */ public class EbayDriver {      public final static String EBAY_APP_ID = ""xxxxxxxxxxxxxxxxxxxxxxxxxxxx"";     public final static String EBAY_FINDING_SERVICE_URI = ""http://svcs.ebay.com/services/search/FindingService/v1?OPERATION-NAME=""             + ""{operation}&amp;SERVICE-VERSION={version}&amp;SECURITY-APPNAME=""             + ""{applicationId}&amp;GLOBAL-ID={globalId}&amp;keywords={keywords}""             + ""&amp;paginationInput.entriesPerPage={maxresults}"";     public static final String SERVICE_VERSION = ""1.0.0"";     public static final String OPERATION_NAME = ""findItemsByKeywords"";     public static final String GLOBAL_ID = ""EBAY-US"";     public final static int REQUEST_DELAY = 3000;     public final static int MAX_RESULTS = 10;     private int maxResults;      public EbayDriver() {         this.maxResults = MAX_RESULTS;      }      public EbayDriver(int maxResults) {         this.maxResults = maxResults;     }      public String getName() {         return IDriver.EBAY_DRIVER;     }      public void run(String tag) throws Exception {          String address = createAddress(tag);         print(""sending request to :: "", address);         String response = URLReader.read(address);         print(""response :: "", response);         //process xml dump returned from EBAY         processResponse(response);         //Honor rate limits - wait between results         Thread.sleep(REQUEST_DELAY);       }      private String createAddress(String tag) {          //substitute token         String address = EbayDriver.EBAY_FINDING_SERVICE_URI;         address = address.replace(""{version}"", EbayDriver.SERVICE_VERSION);         address = address.replace(""{operation}"", EbayDriver.OPERATION_NAME);         address = address.replace(""{globalId}"", EbayDriver.GLOBAL_ID);         address = address.replace(""{applicationId}"", EbayDriver.EBAY_APP_ID);         address = address.replace(""{keywords}"", tag);         address = address.replace(""{maxresults}"", """" + this.maxResults);          return address;      }      private void processResponse(String response) throws Exception {           XPath xpath = XPathFactory.newInstance().newXPath();         InputStream is = new ByteArrayInputStream(response.getBytes(""UTF-8""));         DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();         DocumentBuilder builder = domFactory.newDocumentBuilder();           Document doc = builder.parse(is);         XPathExpression ackExpression = xpath.compile(""//findItemsByKeywordsResponse/ack"");         XPathExpression itemExpression = xpath.compile(""//findItemsByKeywordsResponse/searchResult/item"");          String ackToken = (String) ackExpression.evaluate(doc, XPathConstants.STRING);         print(""ACK from ebay API :: "", ackToken);         if (!ackToken.equals(""Success"")) {             throw new Exception("" service returned an error"");         }          NodeList nodes = (NodeList) itemExpression.evaluate(doc, XPathConstants.NODESET);          for (int i = 0; i &lt; nodes.getLength(); i++) {              Node node = nodes.item(i);              String itemId = (String) xpath.evaluate(""itemId"", node, XPathConstants.STRING);             String title = (String) xpath.evaluate(""title"", node, XPathConstants.STRING);             String itemUrl = (String) xpath.evaluate(""viewItemURL"", node, XPathConstants.STRING);             String galleryUrl = (String) xpath.evaluate(""galleryURL"", node, XPathConstants.STRING);              String currentPrice = (String) xpath.evaluate(""sellingStatus/currentPrice"", node, XPathConstants.STRING);              print(""currentPrice"", currentPrice);             print(""itemId"", itemId);             print(""title"", title);             print(""galleryUrl"", galleryUrl);          }          is.close();      }      private void print(String name, String value) {         System.out.println(name + ""::"" + value);     }      public static void main(String[] args) throws Exception {         EbayDriver driver = new EbayDriver();         String tag = ""Velo binding machine"";         driver.run(java.net.URLEncoder.encode(tag, ""UTF-8""));      } }"
"import javax.jms.Connection; import javax.jms.Destination; import javax.jms.JMSException; import javax.jms.MessageProducer; import javax.jms.Session; import javax.servlet.ServletContext; import javax.servlet.ServletContextEvent; import javax.servlet.ServletContextListener;  import org.apache.activemq.ActiveMQConnectionFactory; import org.apache.log4j.Logger;  public class MyContextListener implements ServletContextListener {     public final static String ACTIVE_MQ_SESSION = ""ActiveMQSession"";     public final static String ACTIVE_MQ_PRODUCER = ""ActiveMQProducer"";      Logger logger = Logger.getLogger(this.getClass());     private static final int ackMode = Session.AUTO_ACKNOWLEDGE;     private static final boolean transacted = false;      private static final String brokerUrl = ""vm://localhost:61616"";      private Connection connection;     private Session session;     private MessageProducer producer;      @Override     public void contextDestroyed(ServletContextEvent sce) {         try {             this.producer.close();             this.session.close();             this.connection.close();         } catch (JMSException e) {             logger.warn(""tearDown()"", e);         }      }      @Override     public void contextInitialized(ServletContextEvent sce) {         ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(                 brokerUrl);          try {             connection = connectionFactory.createConnection();             connection.start();             session = connection.createSession(transacted, ackMode);             Destination destination = session.createQueue(""queue"");             producer = session.createProducer(destination);              ServletContext sc = sce.getServletContext();             sc.setAttribute(ACTIVE_MQ_SESSION, session);             sc.setAttribute(ACTIVE_MQ_PRODUCER, producer);         } catch (JMSException e) {             logger.warn(""setup() failed to setup connection brokerUrl=""                     + brokerUrl);         }     }  }"
"import java.io.*; import java.lang.annotation.Annotation; import java.lang.reflect.Type; import java.util.Collection; import javax.xml.transform.stream.StreamSource;  import javax.ws.rs.*; import javax.ws.rs.core.*; import javax.ws.rs.ext.*; import javax.xml.bind.*;  @Provider @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) public class MOXyJSONProvider implements      MessageBodyReader&lt;Object&gt;, MessageBodyWriter&lt;Object&gt;{      @Context     protected Providers providers;      public boolean isReadable(Class&lt;?&gt; type, Type genericType,         Annotation[] annotations, MediaType mediaType) {         return true;     }      public Object readFrom(Class&lt;Object&gt; type, Type genericType,         Annotation[] annotations, MediaType mediaType,         MultivaluedMap&lt;String, String&gt; httpHeaders, InputStream entityStream)         throws IOException, WebApplicationException {         try {             Unmarshaller u = getJAXBContext(type, mediaType).createUnmarshaller();             u.setProperty(""eclipselink.media-type"", mediaType.toString());             u.setProperty(""eclipselink.json.include-root"", false);//tiny fix             return u.unmarshal(new StreamSource(entityStream), (Class) genericType);         } catch(JAXBException jaxbException) {             throw new WebApplicationException(jaxbException);         }     }      public boolean isWriteable(Class&lt;?&gt; type, Type genericType,         Annotation[] annotations, MediaType mediaType) {         return true;     }      public void writeTo(Object object, Class&lt;?&gt; type, Type genericType,         Annotation[] annotations, MediaType mediaType,         MultivaluedMap&lt;String, Object&gt; httpHeaders,         OutputStream entityStream) throws IOException,         WebApplicationException {         try {             Marshaller m = getJAXBContext(Customer.class, mediaType).createMarshaller();             m.setProperty(""eclipselink.media-type"", mediaType.toString());             m.setProperty(""eclipselink.json.include-root"", false);             m.marshal(object, entityStream);         } catch(JAXBException jaxbException) {             throw new WebApplicationException(jaxbException);         }     }      public long getSize(Object t, Class&lt;?&gt; type, Type genericType,         Annotation[] annotations, MediaType mediaType) {         return -1;     }      private JAXBContext getJAXBContext(Class&lt;?&gt; type, MediaType mediaType)          throws JAXBException {         ContextResolver&lt;JAXBContext&gt; resolver              = providers.getContextResolver(JAXBContext.class, mediaType);         JAXBContext jaxbContext;         if(null == resolver || null == (jaxbContext = resolver.getContext(type))) {             return JAXBContext.newInstance(type);         } else {             return jaxbContext;         }     }  }"
"import org.w3c.dom.Document; import org.w3c.dom.Node; import javax.xml.parsers.DocumentBuilder; import javax.xml.parsers.DocumentBuilderFactory; import javax.xml.xpath.XPath; import javax.xml.xpath.XPathConstants; import javax.xml.xpath.XPathFactory; import java.io.ByteArrayInputStream; import java.io.InputStream; import java.nio.charset.Charset;  ...    String xml = ""&lt;...&gt;"";   String expression = ""/Enrollment/FirstName"";    DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();   builderFactory.setNamespaceAware(true);   DocumentBuilder builder = builderFactory.newDocumentBuilder();   InputStream in = new ByteArrayInputStream(xml.getBytes(Charset.forName(""UTF-8"")));   Document document = builder.parse(in);    XPath xpath = XPathFactory.newInstance().newXPath();   Node firstNameNode = (Node) xpath.evaluate(expression, document, XPathConstants.NODE);   String firstName = firstNameNode.getTextContent();"
"package com.app.test;  import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.net.MalformedURLException; import java.util.ArrayList; import java.util.List;  import org.apache.http.NameValuePair; import org.apache.http.client.methods.CloseableHttpResponse; import org.apache.http.client.methods.HttpPost; import org.apache.http.entity.StringEntity; import org.apache.http.impl.client.CloseableHttpClient; import org.apache.http.impl.client.HttpClients; import org.apache.http.message.BasicNameValuePair;  public class RestClientTest {      /**      * @param args      */     public static void main(String[] args) {         CloseableHttpClient httpClient = null;         HttpPost httpPost = null;         CloseableHttpResponse response = null;          try {              httpClient = HttpClients.createDefault();             httpPost = new HttpPost(""https://api.kii.com/api/oauth2/token"");              List&lt;NameValuePair&gt; nvps = new ArrayList&lt;NameValuePair&gt;();             nvps.add(new BasicNameValuePair(""content-type"", ""application/json""));             nvps.add(new BasicNameValuePair(""x-kii-appid"", ""xxxxx""));             nvps.add(new BasicNameValuePair(""x-kii-appkey"", ""xxxxxxxxxxxxxx""));               StringEntity input = new StringEntity(""{\""username\"": \""dummyuser\"",\""password\"": \""dummypassword\""}"");              input.setContentType(""application/json"");              httpPost.setEntity(input);              for (NameValuePair h : nvps)             {                 httpPost.addHeader(h.getName(), h.getValue());             }              response = httpClient.execute(httpPost);              if (response.getStatusLine().getStatusCode() != 200) {                 throw new RuntimeException(""Failed : HTTP error code : ""                         + response.getStatusLine().getStatusCode());             }              BufferedReader br = new BufferedReader(new InputStreamReader(                     (response.getEntity().getContent())));              String output;             System.out.println(""Output from Server .... \n"");             while ((output = br.readLine()) != null) {                 System.out.println(output);             }         } catch (MalformedURLException e) {              e.printStackTrace();          } catch (IOException e) {              e.printStackTrace();          } finally {             try{                 response.close();                 httpClient.close();             }catch(Exception ex) {                 ex.printStackTrace();             }         }      } }"
"package main;  import java.io.File; import java.io.FileOutputStream; import java.io.OutputStream;  import javax.xml.stream.XMLOutputFactory; import javax.xml.stream.XMLStreamWriter;  import node.xom.WrappedDocument; import nu.xom.Builder; import nu.xom.Document; import nu.xom.Element; import reorder.xsom.UncheckedXMLStreamWriter; import reorder.xsom.XSVisitorWriteOrdered;  import com.sun.xml.xsom.XSElementDecl; import com.sun.xml.xsom.XSSchemaSet; import com.sun.xml.xsom.parser.XSOMParser;  public class ReorderXmlToXsd {   public static void main(String[] args) throws Exception {     File unorderedXml = new File(""unordered.xml"");     File xsd = new File(""your.xsd"");     File orderedXml = new File(""ordered.xml"");      XSOMParser p = new XSOMParser();     p.parse(xsd);     XSSchemaSet parsed = p.getResult();      Builder xom = new Builder();     Document unorderedDoc = xom.build(unorderedXml);     Element unorderedRoot = unorderedDoc.getRootElement();      XSElementDecl root = parsed.getElementDecl(         unorderedRoot.getNamespaceURI(),         unorderedRoot.getLocalName());      XMLOutputFactory stax = XMLOutputFactory.newInstance();      try (OutputStream to = new FileOutputStream(orderedXml)) {       XMLStreamWriter using = stax.createXMLStreamWriter(to, ""UTF-8"");        root.visit(           new XSVisitorWriteOrdered(               new WrappedDocument(unorderedDoc),               new UncheckedXMLStreamWriter(using)));     }   } }"
"import java.io.IOException; import java.io.InputStream; import java.lang.annotation.Annotation; import java.lang.reflect.Type; import java.net.URL;  import javax.ws.rs.Consumes; import javax.ws.rs.WebApplicationException; import javax.ws.rs.core.Context; import javax.ws.rs.core.MediaType; import javax.ws.rs.core.MultivaluedMap; import javax.ws.rs.ext.ContextResolver; import javax.ws.rs.ext.MessageBodyReader; import javax.ws.rs.ext.Provider; import javax.ws.rs.ext.Providers; import javax.xml.XMLConstants; import javax.xml.bind.JAXBContext; import javax.xml.bind.JAXBException; import javax.xml.bind.Unmarshaller; import javax.xml.validation.Schema; import javax.xml.validation.SchemaFactory;  @Provider @Consumes(""application/xml"") public class ValidatingReader implements MessageBodyReader&lt;Customer&gt; {      @Context     protected Providers providers;      private Schema schema;      public ValidatingReader() {         try {             SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);             URL schemaURL = null;             schema = sf.newSchema(schemaURL);         } catch(Exception e) {             throw new RuntimeException(e);         }     }      public boolean isReadable(Class&lt;?&gt; arg0, Type arg1, Annotation[] arg2, MediaType arg3) {         return arg0 == Customer.class;     }      public Customer readFrom(Class&lt;Customer&gt; arg0, Type arg1, Annotation[] arg2, MediaType arg3, MultivaluedMap&lt;String, String&gt; arg4, InputStream arg5)             throws IOException, WebApplicationException {         try {             JAXBContext jaxbContext = null;             ContextResolver&lt;JAXBContext&gt; resolver = providers.getContextResolver(JAXBContext.class, arg3);             if(null != resolver) {                 jaxbContext = resolver.getContext(arg0);             }             if(null == jaxbContext) {                 jaxbContext = JAXBContext.newInstance(arg0);             }             Unmarshaller unmarshaller = jaxbContext.createUnmarshaller();             unmarshaller.setSchema(schema);             return (Customer) unmarshaller.unmarshal(arg5);         } catch(JAXBException e) {             throw new RuntimeException(e);         }     }  }"
"import java.awt.BorderLayout; import java.awt.EventQueue; import java.awt.event.KeyAdapter; import java.awt.event.KeyEvent; import java.io.IOException; import java.io.InputStream; import java.lang.reflect.InvocationTargetException; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JScrollPane; import javax.swing.JTextArea; import javax.swing.SwingUtilities; import javax.swing.UIManager; import javax.swing.UnsupportedLookAndFeelException; import javax.swing.text.BadLocationException; import org.w3c.dom.ls.LSException;  public class QuickTerminal {      public static void main(String[] args) {         new QuickTerminal();     }      public QuickTerminal() {         EventQueue.invokeLater(new Runnable() {             @Override             public void run() {                 try {                     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());                 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {                 }                  JFrame frame = new JFrame(""Testing"");                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                 frame.setLayout(new BorderLayout());                 frame.add(new ConsolePane());                 frame.pack();                 frame.setLocationRelativeTo(null);                 frame.setVisible(true);             }          });     }      public interface CommandListener {          public void commandOutput(String text);          public void commandCompleted(String cmd, int result);          public void commandFailed(Exception exp);      }      public class ConsolePane extends JPanel implements CommandListener {          private JTextArea textArea;         private int userInputStart = 0;         private Command cmd;          public ConsolePane() {              cmd = new Command(this);              setLayout(new BorderLayout());             textArea = new JTextArea(20, 30);             add(new JScrollPane(textArea));              textArea.addKeyListener(new KeyAdapter() {                 @Override                 public void keyPressed(KeyEvent e) {                     if (e.getKeyCode() == KeyEvent.VK_ENTER) {                         int range = textArea.getCaretPosition() - userInputStart;                         try {                             String text = textArea.getText(userInputStart, range).trim();                             System.out.println(""["" + text + ""]"");                             userInputStart += range;                             if (!cmd.isRunning()) {                                 cmd.execute(text);                             } else {                             }                         } catch (BadLocationException ex) {                             Logger.getLogger(QuickTerminal.class.getName()).log(Level.SEVERE, null, ex);                         }                     } else { //                        if (!cmd.isRunning()) { //                            cmd.send(...); //                        }                     }                 }              });         }          @Override         public void commandOutput(String text) {             SwingUtilities.invokeLater(new AppendTask(textArea, text));         }          @Override         public void commandFailed(Exception exp) {             SwingUtilities.invokeLater(new AppendTask(textArea, ""Command failed - "" + exp.getMessage()));         }          @Override         public void commandCompleted(String cmd, int result) {             SwingUtilities.invokeLater(new Runnable() {                 @Override                 public void run() {                     int pos = textArea.getCaretPosition();                      System.out.println(""pos = "" + pos + ""; length = "" + textArea.getText().length());                      textArea.setCaretPosition(textArea.getText().length());                     userInputStart = pos;                 }             });         }      }      public class AppendTask implements Runnable {          private JTextArea textArea;         private String text;          public AppendTask(JTextArea textArea, String text) {             this.textArea = textArea;             this.text = text;         }          @Override         public void run() {             textArea.append(text);         }      }      public class Command {          private CommandListener listener;          private ProcessRunner runner;          public Command(CommandListener listener) {             this.listener = listener;         }          public boolean isRunning() {              return runner != null &amp;&amp; runner.isAlive();          }          public void execute(String cmd) {              if (!cmd.trim().isEmpty()) {                   List&lt;String&gt; values = new ArrayList&lt;&gt;(25);                 if (cmd.contains(""\"""")) {                      while (cmd.contains(""\"""")) {                          String start = cmd.substring(0, cmd.indexOf(""\""""));                         cmd = cmd.substring(start.length());                         String quote = cmd.substring(cmd.indexOf(""\"""") + 1);                         cmd = cmd.substring(cmd.indexOf(""\"""") + 1);                         quote = quote.substring(0, cmd.indexOf(""\""""));                         cmd = cmd.substring(cmd.indexOf(""\"""") + 1);                          if (!start.trim().isEmpty()) {                             String parts[] = start.trim().split("" "");                             values.addAll(Arrays.asList(parts));                         }                         values.add(quote.trim());                      }                      if (!cmd.trim().isEmpty()) {                         String parts[] = cmd.trim().split("" "");                         values.addAll(Arrays.asList(parts));                     }                      for (String value : values) {                         System.out.println(""["" + value + ""]"");                     }                  } else {                      if (!cmd.trim().isEmpty()) {                         String parts[] = cmd.trim().split("" "");                         values.addAll(Arrays.asList(parts));                     }                  }                  runner = new ProcessRunner(listener, values);              }          }          public void send(String cmd) {             // Send user input to the running process...         }      }      public class ProcessRunner extends Thread {          private List&lt;String&gt; cmds;         private CommandListener listener;          public ProcessRunner(CommandListener listener, List&lt;String&gt; cmds) {             this.cmds = cmds;             this.listener = listener;             start();         }          @Override         public void run() {             try {                 System.out.println(""cmds = "" + cmds);                 ProcessBuilder pb = new ProcessBuilder(cmds);                 pb.redirectErrorStream();                 Process p = pb.start();                 StreamReader reader = new StreamReader(listener, p.getInputStream());                 // Need a stream writer...                  int result = p.waitFor();                  // Terminate the stream writer                 reader.join();                  listener.commandCompleted(null, result);             } catch (Exception exp) {                 exp.printStackTrace();             }         }      }      public class StreamReader extends Thread {          private InputStream is;         private CommandListener listener;          public StreamReader(CommandListener listener, InputStream is) {             this.is = is;             this.listener = listener;             start();         }          @Override         public void run() {             try {                 int value = -1;                 while ((value = is.read()) != -1) {                     listener.commandOutput(Character.toString((char) value));                 }             } catch (IOException exp) {                 exp.printStackTrace();             }         }      }  }"
"import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.InputStreamReader;  import javax.xml.xpath.XPath; import javax.xml.xpath.XPathConstants; import javax.xml.xpath.XPathExpression; import javax.xml.xpath.XPathExpressionException; import javax.xml.xpath.XPathFactory;  import org.w3c.dom.NodeList; import org.xml.sax.InputSource;   public class XMLParser {      /**      * @param args      */     public static void main(String[] args)     {         try {          XPathFactory xPathFactory = XPathFactory.newInstance();         XPath xPath = xPathFactory.newXPath();          InputSource doc = new InputSource(new InputStreamReader(new FileInputStream(new File(""file.xml""))));          String expression = ""//Home/ListOfCustomers"";         XPathExpression xPathExpression = xPath.compile(expression);          NodeList elem1List = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);         xPathExpression = xPath.compile(""@type"");          for (int i = 0; i &lt; elem1List.getLength(); i++)         {             System.out.println(xPathExpression.evaluate(elem1List.item(i), XPathConstants.STRING));          }           }         catch (XPathExpressionException e)         {             // TODO Auto-generated catch block             e.printStackTrace();         } catch (FileNotFoundException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }     } }"
"import java.awt.Desktop; import java.awt.EventQueue; import java.awt.GridBagLayout; import java.awt.event.ActionEvent; import java.io.IOException; import java.net.MalformedURLException; import java.net.URISyntaxException; import java.net.URL; import java.util.logging.Level; import java.util.logging.Logger; import javax.swing.AbstractAction; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.UIManager; import javax.swing.UnsupportedLookAndFeelException;  public class LinkButtonExample {      public static void main(String[] args) {         new LinkButtonExample();     }      public LinkButtonExample() {         EventQueue.invokeLater(new Runnable() {             @Override             public void run() {                 try {                     try {                         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());                     } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {                     }                      JFrame frame = new JFrame(""Testing"");                     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                     frame.setLayout(new GridBagLayout());                     frame.add(new JButton(new OpenURLAction(new URL(""http://stackoverflow.com/""))));                     frame.pack();                     frame.setLocationRelativeTo(null);                     frame.setVisible(true);                 } catch (MalformedURLException ex) {                     ex.printStackTrace();                 }             }         });     }      public class OpenURLAction extends AbstractAction {          private URL url;          public OpenURLAction(URL url) {              this(""&lt;HTML&gt;Click the &lt;FONT color=\\\""#000099\\\""&gt;&lt;U&gt;link&lt;/U&gt;&lt;/FONT&gt; to go to the website.&lt;/HTML&gt;"", url);          }          public OpenURLAction(String text, URL url) {              putValue(NAME, text);             setURL(url);          }          public void setURL(URL url) {             this.url = url;             setEnabled(                             url != null                             &amp;&amp; Desktop.isDesktopSupported()                             &amp;&amp; Desktop.getDesktop().isSupported(Desktop.Action.BROWSE));             putValue(SHORT_DESCRIPTION, url == null ? null : url.toString());         }          public URL getURL() {             return url;         }          @Override         public void actionPerformed(ActionEvent e) {              if (isEnabled()) {                  URL url = getURL();                 if (url != null &amp;&amp; Desktop.isDesktopSupported()                                 &amp;&amp; Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {                     try {                         Desktop.getDesktop().browse(url.toURI());                     } catch (    IOException | URISyntaxException ex) {                         ex.printStackTrace();                     }                 }              }          }     } }"
"package client;  import java.net.InetSocketAddress; import java.nio.charset.CharacterCodingException; import java.nio.charset.Charset; import java.util.logging.Level; import org.apache.mina.core.buffer.IoBuffer; import org.apache.mina.core.future.ConnectFuture; import org.apache.mina.core.future.IoFutureListener; import org.apache.mina.core.future.ReadFuture; import org.apache.mina.core.service.IoConnector; import org.apache.mina.core.service.IoHandlerAdapter; import org.apache.mina.core.session.IdleStatus; import org.apache.mina.core.session.IoSession; import org.apache.mina.example.udp.client.MemMonClient; import org.apache.mina.transport.socket.nio.NioDatagramConnector;  /**  *  * @author az  */ public class CustomClient extends IoHandlerAdapter{      private IoSession session;     private IoConnector connector;     private ConnectFuture connFuture;      public CustomClient() throws InterruptedException{         connector = new NioDatagramConnector();         connector.setHandler(this);         connFuture = connector.connect(new InetSocketAddress(""192.168.3.22"",6502));           connFuture.addListener(new IoFutureListener&lt;ConnectFuture&gt;() {             public void operationComplete(ConnectFuture future) {                 if (future.isConnected()) {                                         session = future.getSession();                     try {                         try {                             sendData();                           //  connFuture.await();                          } catch (CharacterCodingException ex) {                             java.util.logging.Logger.getLogger(MemMonClient.class.getName()).log(Level.SEVERE, null, ex);                         }                     } catch (InterruptedException e) {                         e.printStackTrace();                     }                 }              }         });      }     private void sendData() throws InterruptedException, CharacterCodingException {               IoBuffer buffer = IoBuffer.allocate(8);             buffer.setAutoExpand(true);             buffer.putString(""any"", Charset.forName(""UTF-8"").newEncoder());             buffer.flip();             session.write(buffer);     }       @Override     public void exceptionCaught(IoSession session, Throwable cause)             throws Exception {         cause.printStackTrace();     }     @Override     public void messageReceived(IoSession session, Object message)             throws Exception {         connFuture.getSession().getConfig().setUseReadOperation(true);          ReadFuture r = connFuture.getSession().read();         connFuture.await();         connFuture.getSession().getConfig().setUseReadOperation(true);           Object obj = r.getMessage();         System.out.println(""r.getMessage(); ""+obj);         IoBuffer buffer = IoBuffer.allocate(2048);                         buffer.setAutoExpand(true);                                              Object objReceived = buffer.getObject();                         System.out.println(objReceived.toString());          System.out.println(""reveived Session recv..."");     }      @Override     public void messageSent(IoSession session, Object message) throws Exception {         System.out.println(""Message sent..."");     }      @Override     public void sessionClosed(IoSession session) throws Exception {         System.out.println(""Session closed..."");     }      @Override     public void sessionCreated(IoSession session) throws Exception {         System.out.println(""Session created..."");     }      @Override     public void sessionIdle(IoSession session, IdleStatus status)             throws Exception {         System.out.println(""Session idle..."");     }      @Override     public void sessionOpened(IoSession session) throws Exception {         System.out.println(""Session opened..."");     }     public static void main (String are[]){         try{         new CustomClient();         }catch(Exception ex){ex.printStackTrace();}     } }  POJO Java package pojo;  import java.io.Serializable;  /**  *  * @author az  */ public class kojo implements Serializable{     private String name = ""null"";     private String address = ""null"";      /**      * @return the name      */     public String getName() {         return name;     }      /**      * @param name the name to set      */     public void setName(String name) {         this.name = name;     }      /**      * @return the address      */     public String getAddress() {         return address;     }      /**      * @param address the address to set      */     public void setAddress(String address) {         this.address = address;     }  }  Custom Server Java package server;  import java.io.IOException; import java.net.InetSocketAddress; import org.apache.mina.transport.socket.DatagramSessionConfig; import org.apache.mina.transport.socket.nio.NioDatagramAcceptor;  /**  *  * @author az  */ public class CustomServer {      public CustomServer(){         try {             NioDatagramAcceptor acceptor = new NioDatagramAcceptor();             acceptor.setHandler(new ServerHandler(this));             //DefaultIoFilterChainBuilder filter = acceptor.getFilterChain();             DatagramSessionConfig dcfg = acceptor.getSessionConfig();             dcfg.setReuseAddress(true);             acceptor.bind(new InetSocketAddress(6501));         } catch (IOException ex) {             ex.printStackTrace();         }     }      public void receiveUpdate(){      }     public static void main(String are[]){         new CustomServer();     } }  Server Handler package server;  import java.nio.charset.Charset; import org.apache.mina.core.buffer.IoBuffer; import org.apache.mina.core.future.WriteFuture; import org.apache.mina.core.service.IoHandlerAdapter; import org.apache.mina.core.session.IdleStatus; import org.apache.mina.core.session.IoSession;  /**  *  * @author az  */ public class ServerHandler extends IoHandlerAdapter {      private CustomServer server;      public ServerHandler(CustomServer server) {         this.server = server;     }      @Override     public void messageReceived(IoSession session, Object message)             throws Exception {          if (message instanceof IoBuffer) {             //decode POJO and send to client             IoBuffer buffer = (IoBuffer) message;             System.out.println(buffer.getString(Charset.forName(""UTF-8"").newDecoder()));             buffer.setAutoExpand(true);             buffer.putObject(new pojo.POJO());             buffer.flip();             session.write(buffer);              System.out.print(""Object Attached and Sent"");          }     }      @Override     public void messageSent(IoSession session, Object message) {         System.out.println(""Message sent"");     }      @Override     public void sessionClosed(IoSession session) throws Exception {         System.out.println(""Session closed..."");     }      @Override     public void sessionCreated(IoSession session) throws Exception {         System.out.println(""Session created..."");     }      @Override     public void sessionIdle(IoSession session, IdleStatus status)             throws Exception {         System.out.println(""Session idle..."");     }      @Override     public void sessionOpened(IoSession session) throws Exception {         System.out.println(""Session Opened..."");     } }"
"import java.io.File; import org.apache.avro.Schema; import org.apache.avro.file.DataFileWriter; import org.apache.avro.file.DataFileReader; import org.apache.avro.file.CodecFactory; import org.apache.avro.io.DatumWriter; import org.apache.avro.io.DatumReader; import org.apache.avro.reflect.ReflectData; import org.apache.avro.reflect.ReflectDatumWriter; import org.apache.avro.reflect.ReflectDatumReader; import org.apache.avro.reflect.Nullable;  public class Reflect {    public static class Packet {     int cost;     @Nullable TimeStamp stamp;     public Packet() {}                        // required to read     public Packet(int cost, TimeStamp stamp){       this.cost = cost;       this.stamp = stamp;     }   }    public static class TimeStamp {     int hour = 0;     int second = 0;     public TimeStamp() {}                     // required to read     public TimeStamp(int hour, int second){       this.hour = hour;       this.second = second;     }   }    public static void main(String[] args) throws Exception {     // one argument: a file name     File file = new File(args[0]);      // get the reflected schema for packets     Schema schema = ReflectData.get().getSchema(Packet.class);      // create a file of packets     DatumWriter&lt;Packet&gt; writer = new ReflectDatumWriter&lt;Packet&gt;(Packet.class);     DataFileWriter&lt;Packet&gt; out = new DataFileWriter&lt;Packet&gt;(writer)       .setCodec(CodecFactory.deflateCodec(9))       .create(schema, file);      // write 100 packets to the file, odds with null timestamp     for (int i = 0; i &lt; 100; i++) {       out.append(new Packet(i, (i%2==0) ? new TimeStamp(12, i) : null));     }      // close the output file     out.close();      // open a file of packets     DatumReader&lt;Packet&gt; reader = new ReflectDatumReader&lt;Packet&gt;(Packet.class);     DataFileReader&lt;Packet&gt; in = new DataFileReader&lt;Packet&gt;(file, reader);      // read 100 packets from the file &amp; print them as JSON     for (Packet packet : in) {       System.out.println(ReflectData.get().toString(packet));     }      // close the input file     in.close();   }  }"
