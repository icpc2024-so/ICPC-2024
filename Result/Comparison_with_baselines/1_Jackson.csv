code
"import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.annotation.JsonProperty; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.PropertyNamingStrategy; import com.fasterxml.jackson.databind.cfg.MapperConfig; import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;  public class Foo {     public static void main(final String[] args) throws JsonProcessingException {         final SomeObject someObject = new SomeObject();         someObject.setZxy(""foobar"");          final ObjectMapper mapper = new ObjectMapper();         mapper.setPropertyNamingStrategy(new PropertyNamingStrategy.PascalCaseStrategy() {             @Override             public String nameForGetterMethod(final MapperConfig&lt;?&gt; config, final AnnotatedMethod method, final String defaultName) {                 final JsonProperty annotation = method.getAnnotation(JsonProperty.class);                 if (annotation != null) {                     return annotation.value();                 }                 return super.nameForGetterMethod(config, method, defaultName);             }         });         mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);          System.out.println(mapper.writeValueAsString(someObject));     }      private static class SomeObject {          private String zxy;          @JsonProperty(""abcDef"")         public String getZxy() {             return this.zxy;         }          public void setZxy(final String zxy) {             this.zxy = zxy;         }     } }"
"package api.core.jasper;  import java.io.IOException; import java.util.List;  import org.junit.Test;  import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.annotation.JsonDeserialize; import com.fasterxml.jackson.databind.deser.std.StdDeserializer; import com.fasterxml.jackson.dataformat.xml.XmlMapper; import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper; import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty; import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement; import com.google.common.base.Objects; import com.google.common.base.Optional; import com.google.common.collect.Lists;  public class UnitTest {    @Test   public void test() throws Exception {     final ObjectMapper mapper = new XmlMapper();      final XmlTest before =         new XmlTest(""0"", Lists.newArrayList(new XmlTest(""0.1"", null),             new XmlTest(""0.2"", Lists.newArrayList(new XmlTest(""0.2.1"", null)))));     System.out.println(before);     final String xml = mapper.writeValueAsString(before);     System.out.println(xml);     final XmlTest after = mapper.readValue(xml, XmlTest.class);     System.out.println(after);   }    @JsonDeserialize(using = XmlTestDeserializer.class)   @JacksonXmlRootElement(localName = ""test"")   public static class XmlTest {     @JacksonXmlProperty(localName = ""id"", isAttribute = true)     public String id;      @JacksonXmlElementWrapper(useWrapping = false)     @JacksonXmlProperty(localName = ""test"")     public List&lt;XmlTest&gt; children;      public XmlTest(final String id, final List&lt;XmlTest&gt; children) {       this.id = id;       this.children = Optional.fromNullable(children).or(Lists.&lt;XmlTest&gt;newArrayList());     }      @Override     public String toString() {       return Objects.toStringHelper(this)           .add(""id"", id)           .add(""children"", children)           .toString();     }   }    public static class XmlTestDeserializer extends StdDeserializer&lt;XmlTest&gt; {      protected XmlTestDeserializer() {       super(XmlTest.class);     }      @Override     public XmlTest deserialize(final JsonParser jp, final DeserializationContext ctxt) throws IOException,         JsonProcessingException {       if (jp.getCurrentToken() != JsonToken.START_OBJECT) {         throw new IOException(""Invalid token, expected START_OBJECT"");       }        String id = null;       final List&lt;XmlTest&gt; children = Lists.newArrayList();        while (jp.nextToken() != JsonToken.END_OBJECT) {         final String key = jp.getCurrentName();         jp.nextToken();          if (""id"".equals(key)) {           id = jp.readValueAs(String.class);         } else if (""test"".equals(key)) {           final XmlTest child = jp.readValueAs(XmlTest.class);           if (child != null) {             children.add(child);           }         }       }        jp.close();        return new XmlTest(id, children);     }   } }"
"import java.io.IOException;  import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.JsonSerializer; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.module.SimpleModule;  public class JacksonProgram {      public static void main(String[] args) throws Exception {         SimpleModule module = new SimpleModule();         module.addSerializer(Error.class, new ErrorJsonSerializer());          ObjectMapper mapper = new ObjectMapper();         mapper.registerModule(module);          System.out.println(mapper.writeValueAsString(Error.NOT_FOUND));     } }"
"import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.node.ArrayNode; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.node.ValueNode; import java.io.IOException; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import org.junit.Test;  public class FlattenJson {   String json = ""{\n"" +       ""   \""Port\"":\n"" +       ""   {\n"" +       ""       \""@alias\"": \""defaultHttp\"",\n"" +       ""       \""Enabled\"": \""true\"",\n"" +       ""       \""Number\"": \""10092\"",\n"" +       ""       \""Protocol\"": \""http\"",\n"" +       ""       \""KeepAliveTimeout\"": \""20000\"",\n"" +       ""       \""ThreadPool\"":\n"" +       ""       {\n"" +       ""           \""@enabled\"": \""false\"",\n"" +       ""           \""Max\"": \""150\"",\n"" +       ""           \""ThreadPriority\"": \""5\""\n"" +       ""       },\n"" +       ""       \""ExtendedProperties\"":\n"" +       ""       {\n"" +       ""           \""Property\"":\n"" +       ""           [                         \n"" +       ""               {\n"" +       ""                   \""@name\"": \""connectionTimeout\"",\n"" +       ""                   \""$\"": \""20000\""\n"" +       ""               }\n"" +       ""           ]\n"" +       ""       }\n"" +       ""   }\n"" +       ""}"";    @Test   public void testCreatingKeyValues() {     Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();     try {       addKeys("""", new ObjectMapper().readTree(json), map);     } catch (IOException e) {       e.printStackTrace();     }     System.out.println(map);   }    private void addKeys(String currentPath, JsonNode jsonNode, Map&lt;String, String&gt; map) {     if (jsonNode.isObject()) {       ObjectNode objectNode = (ObjectNode) jsonNode;       Iterator&lt;Map.Entry&lt;String, JsonNode&gt;&gt; iter = objectNode.fields();       String pathPrefix = currentPath.isEmpty() ? """" : currentPath + ""."";        while (iter.hasNext()) {         Map.Entry&lt;String, JsonNode&gt; entry = iter.next();         addKeys(pathPrefix + entry.getKey(), entry.getValue(), map);       }     } else if (jsonNode.isArray()) {       ArrayNode arrayNode = (ArrayNode) jsonNode;       for (int i = 0; i &lt; arrayNode.size(); i++) {         addKeys(currentPath + ""["" + i + ""]"", arrayNode.get(i), map);       }     } else if (jsonNode.isValueNode()) {       ValueNode valueNode = (ValueNode) jsonNode;       map.put(currentPath, valueNode.asText());     }   } }"
"package com.recruitinghop.swagger;  import javax.ws.rs.Produces; import javax.ws.rs.core.MediaType; import javax.ws.rs.ext.Provider;  import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.SerializationFeature; import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider; import com.fasterxml.jackson.module.scala.DefaultScalaModule;  @Provider @Produces(MediaType.APPLICATION_JSON) public class JacksonJsonProvider extends JacksonJaxbJsonProvider {      public JacksonJsonProvider() {           ObjectMapper mapper = new ObjectMapper();           mapper.registerModule(new DefaultScalaModule());           mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);           mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);           mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);           mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);           super.setMapper(mapper);     }  }"
"import com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility; import com.fasterxml.jackson.annotation.JsonUnwrapped; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.databind.ObjectMapper;  public class JacksonFoo {   public static void main(String[] args) throws Exception   {     // {""var1"":""some_value"", ""var2"":""some_other_value""}     String jsonInput = ""{\""var1\"":\""some_value\"", \""var2\"":\""some_other_value\""}"";      ObjectMapper mapper = new ObjectMapper().setVisibility(PropertyAccessor.FIELD, Visibility.ANY);      A a = new A(new Foo(""some_value""), ""some_other_value"");     System.out.println(mapper.writeValueAsString(a));     // output: {""var1"":""some_value"",""var2"":""some_other_value""}      A aCopy = mapper.readValue(jsonInput, A.class);     System.out.println(mapper.writeValueAsString(aCopy));     // output: {""var1"":""some_value"",""var2"":""some_other_value""}   } }  class Foo {   private final String var1;    Foo(String var1) {this.var1 = var1;}    private Foo() {this.var1 = null;} }  class A {   @JsonUnwrapped   private final Foo foo;   private final String var2;    A(Foo foo, String var2)   {     this.foo = foo;     this.var2 = var2;   }    private A()   {     this.foo = null;     this.var2 = null;   } }"
"import com.fasterxml.jackson.annotation.JsonSetter; import com.fasterxml.jackson.databind.ObjectMapper;  public class JacksonProgram {      public static void main(String[] args) throws Exception {         ObjectMapper mapper = new ObjectMapper();         System.out.println(mapper.readValue(""{\""Cep\"":\""value\""}"", Entity.class));         System.out.println(mapper.readValue(""{\""CEP\"":\""value\""}"", Entity.class));     } }  class Entity {      private String cep;      public String getCep() {         return cep;     }      @JsonSetter(""Cep"")     public void setCep(String cep) {         this.cep = cep;     }      @JsonSetter(""CEP"")     public void setCepCapitalized(String cep) {         this.cep = cep;     }      @Override     public String toString() {         return ""Entity [cep="" + cep + ""]"";     } }"
"import java.io.File; import java.io.IOException; import java.util.List; import java.util.Map;  import com.fasterxml.jackson.databind.MappingIterator; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.dataformat.csv.CsvMapper; import com.fasterxml.jackson.dataformat.csv.CsvSchema;  public class JacksonProgram {      public static void main(String[] args) throws Exception {         File input = new File(""/x/data.csv"");         File output = new File(""/x/data.json"");          List&lt;Map&lt;?, ?&gt;&gt; data = readObjectsFromCsv(input);         writeAsJson(data, output);     }      public static List&lt;Map&lt;?, ?&gt;&gt; readObjectsFromCsv(File file) throws IOException {         CsvSchema bootstrap = CsvSchema.emptySchema().withHeader();         CsvMapper csvMapper = new CsvMapper();         MappingIterator&lt;Map&lt;?, ?&gt;&gt; mappingIterator = csvMapper.reader(Map.class).with(bootstrap).readValues(file);          return mappingIterator.readAll();     }      public static void writeAsJson(List&lt;Map&lt;?, ?&gt;&gt; data, File file) throws IOException {         ObjectMapper mapper = new ObjectMapper();         mapper.writeValue(file, data);     } }"
"import com.fasterxml.jackson.annotation.JsonAnySetter; import com.fasterxml.jackson.databind.ObjectMapper;  public class JacksonProgram {      public static void main(String[] args) throws Exception {         C1 c1 = new C1();         c1.setProp1(""a"");         c1.setProp3(""c"");          User user = new User();         user.setName(""Tom"");         user.setSurname(""Irg"");          ObjectMapper mapper = new ObjectMapper();         System.out.println(mapper.convertValue(c1, UriFormat.class));         System.out.println(mapper.convertValue(user, UriFormat.class));     } }  class UriFormat {      private StringBuilder builder = new StringBuilder();      @JsonAnySetter     public void addToUri(String name, Object property) {         if (builder.length() &gt; 0) {             builder.append(""&amp;"");         }         builder.append(name).append(""="").append(property);     }      @Override     public String toString() {         return builder.toString();     } }"
"import java.io.IOException;  import org.codehaus.jackson.JsonNode; import org.codehaus.jackson.JsonParser; import org.codehaus.jackson.JsonProcessingException; import org.codehaus.jackson.Version; import org.codehaus.jackson.annotate.JsonAutoDetect.Visibility; import org.codehaus.jackson.annotate.JsonMethod; import org.codehaus.jackson.map.DeserializationContext; import org.codehaus.jackson.map.JsonDeserializer; import org.codehaus.jackson.map.ObjectMapper; import org.codehaus.jackson.map.module.SimpleModule;  public class JacksonFoo {   public static void main(String[] args) throws Exception   {     // {""property1"":{""property2"":42}}     String json1 = ""{\""property1\"":{\""property2\"":42}}"";      // {""property1"":[]}     String json2 = ""{\""property1\"":[]}"";      SimpleModule module = new SimpleModule("""", Version.unknownVersion());     module.addDeserializer(Thing2.class, new ArrayAsNullDeserializer());      ObjectMapper mapper = new ObjectMapper().setVisibility(JsonMethod.FIELD, Visibility.ANY).withModule(module);      Thing1 firstThing = mapper.readValue(json1, Thing1.class);     System.out.println(firstThing);     // output:     // Thing1: property1=Thing2: property2=42      Thing1 secondThing = mapper.readValue(json2, Thing1.class);     System.out.println(secondThing);     // output:      // Thing1: property1=null   } }  class Thing1 {   Thing2 property1;    @Override   public String toString()   {     return String.format(""Thing1: property1=%s"", property1);   } }  class Thing2 {   int property2;    @Override   public String toString()   {     return String.format(""Thing2: property2=%d"", property2);   } }  class ArrayAsNullDeserializer extends JsonDeserializer&lt;Thing2&gt; {   @Override   public Thing2 deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException   {     JsonNode node = jp.readValueAsTree();     if (node.isObject())       return new ObjectMapper().setVisibility(JsonMethod.FIELD, Visibility.ANY).readValue(node, Thing2.class);     return null;   } }"
"static LoadingCache&lt;Class&lt;? extends Resource&lt;?&gt;&gt;, ResourceType&lt;? extends Resource&lt;?&gt;&gt;&gt; cache = CacheBuilder.newBuilder().build(       new CacheLoader&lt;Class&lt;? extends Resource&lt;?&gt;&gt;, ResourceType&lt;? extends Resource&lt;?&gt;&gt;&gt;() {         @SuppressWarnings({ ""rawtypes"", ""unchecked"" })         @Override public ResourceType&lt;? extends Resource&lt;?&gt;&gt; load(Class&lt;? extends Resource&lt;?&gt;&gt; key) throws Exception {           return new ResourceType(key);         }     });"
"package fibonacci.bench;  import fibonacci.mdl.ExplicitLocking; import fibonacci.mdl.FibonacciGenerator; import fibonacci.mdl.IntrinsicLocking; import fibonacci.mdl.LockFree; import fibonacci.mdl.STM; import org.openjdk.jmh.annotations.BenchmarkMode; import org.openjdk.jmh.annotations.GenerateMicroBenchmark; import org.openjdk.jmh.annotations.Level; import org.openjdk.jmh.annotations.Measurement; import org.openjdk.jmh.annotations.Mode; import org.openjdk.jmh.annotations.Scope; import org.openjdk.jmh.annotations.Setup; import org.openjdk.jmh.annotations.State; import org.openjdk.jmh.annotations.Warmup;  import java.math.BigInteger;  /*    Implementation notes:     * This benchmark does not exhibit a steady state, which means      we can not do timed runs. Instead, we have to time single      invocations; therefore preset benchmark mode.     * Each iteration should start from the pristine state,      therefore we reinitialize in @Setup(Iteration).     * Since we are interested in performance beyond the first      invocation, we have to call several times and aggregate      the time; this is why we have batchSize &gt; 1. Note the      performance might be different depending on given batch      size.     * Since we have to provide warmup, we do many iterations.     * The performance is different run to run, because we are       measuring sometimes undeterministic thread allocations.      JMH does it for us, hence multiple forks.     * We don't want the profiles for difference FibonacciGenerator      to mix up. JMH already takes care of that for us by forking      each test.      */  @BenchmarkMode(Mode.SingleShotTime) @Warmup(iterations = 100, batchSize = JmhBench.BATCH_SIZE) @Measurement(iterations = 100, batchSize = JmhBench.BATCH_SIZE) @State(Scope.Benchmark) public class JmhBench {      public static final int BATCH_SIZE = 50000;      private FibonacciGenerator explicitLock;     private IntrinsicLocking intrinsicLock;     private LockFree lockFree;     private STM stm;      @Setup(Level.Iteration)     public void setup() {         explicitLock = new ExplicitLocking();         intrinsicLock = new IntrinsicLocking();         lockFree = new LockFree();         stm = new STM();     }      @GenerateMicroBenchmark     public BigInteger stm() {         return stm.next();     }      @GenerateMicroBenchmark     public BigInteger explicitLock() {         return explicitLock.next();     }      @GenerateMicroBenchmark     public BigInteger intrinsicLock() {         return intrinsicLock.next();     }      @GenerateMicroBenchmark     public BigInteger lockFree() {         return lockFree.next();     }  }"
"CreateVolumeRequest createVolumeRequest = new CreateVolumeRequest()     .withAvailabilityZone(""my instance's AZ"") // The AZ in which to create the volume.     .withSize(2); // The size of the volume, in gigabytes.  CreateVolumeResult createVolumeResult = ec2.createVolume(createVolumeRequest);  AttachVolumeRequest attachRequest = new AttachVolumeRequest()     .withInstanceId(""my instance id"");     .withVolumeId(createVolumeResult.getVolume().getVolumeId());  AttachVolumeResult attachResult = ec2.attachVolume(attachRequest);"
"import java.io.IOException;  import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.databind.ObjectMapper; import com.fasterxml.jackson.databind.ObjectReader;  public class User {      public static void main(String[] args) throws JsonProcessingException, IOException {          String json = ""{\""User\"":{\""firstname\"":\""john\"",\""gender\"":\""female\"",\""verified\"":\""no\""}}"";         ObjectMapper mapper = new ObjectMapper();         ObjectReader reader = mapper.reader(User.class).withRootName(""User"");         User user = reader.readValue(json);          System.out.println(user.getFirstname());     }      private String firstname;     private String lastname;     private String verified;     private String gender;      public String getFirstname() {         return firstname;     }      public void setFirstname(String firstname) {         this.firstname = firstname;     }      public String getLastname() {         return lastname;     }      public void setLastname(String lastname) {         this.lastname = lastname;     }      public String getVerified() {         return verified;     }      public void setVerified(String verified) {         this.verified = verified;     }      public String getGender() {         return gender;     }      public void setGender(String gender) {         this.gender = gender;     }  }"
"public static List&lt;Product&gt; getCartList() {      JSONObject responseDetailsJson = new JSONObject();     JSONArray jsonArray = new JSONArray();      List&lt;Product&gt; cartList = new Vector&lt;Product&gt;(cartMap.keySet().size());     for(Product p : cartMap.keySet()) {         cartList.add(p);         JSONObject formDetailsJson = new JSONObject();         formDetailsJson.put(""id"", ""1"");         formDetailsJson.put(""name"", ""name1"");        jsonArray.add(formDetailsJson);     }     responseDetailsJson.put(""forms"", jsonArray);//Here you can see the data in json format      return cartList;  }"
package namepackage;  import com.panayotis.gnuplot.JavaPlot; import com.panayotis.gnuplot.plot.DataSetPlot; import com.panayotis.gnuplot.style.PlotStyle; import com.panayotis.gnuplot.style.Style;  /**  * on NetBeans add library -&gt; jar -&gt;   * package namepackage;  *  * import com.panayotis.gnuplot.JavaPlot;  * import com.panayotis.gnuplot.plot.DataSetPlot;  * import com.panayotis.gnuplot.style.PlotStyle;  * import com.panayotis.gnuplot.style.Style;  * @author mkwest  *  */ public class Main {      /**      * @param args the command line arguments      */     public static void main(String[] args) {         // TODO code application logic here         JavaPlot p = new JavaPlot();         double tab[][];          tab = new double[2][2];         tab[0][0] = 0.0000;         tab[0][1] = 2.0000;         tab[1][0] = 1.0000;         tab[1][1] = 6.0000;         PlotStyle myPlotStyle = new PlotStyle();         myPlotStyle.setStyle(Style.LINES);         DataSetPlot s = new DataSetPlot(tab);         myPlotStyle.setLineWidth(1);         DataSetPlot testDataSetPlot = new DataSetPlot(tab);         //DataSetPlot.setPlotStyle(myPlotStyle);         s.setPlotStyle(myPlotStyle);         //p.newGraph();         p.addPlot(s);         p.newGraph();         p.plot();     } }
"import java.lang.annotation.Annotation;  import org.codehaus.jackson.Version; import org.codehaus.jackson.Versioned; import org.codehaus.jackson.map.AnnotationIntrospector; import org.codehaus.jackson.map.JsonDeserializer; import org.codehaus.jackson.map.KeyDeserializer; import org.codehaus.jackson.map.annotate.JsonSerialize.Typing; import org.codehaus.jackson.map.introspect.Annotated; import org.codehaus.jackson.map.introspect.AnnotatedClass; import org.codehaus.jackson.map.introspect.AnnotatedConstructor; import org.codehaus.jackson.map.introspect.AnnotatedField; import org.codehaus.jackson.map.introspect.AnnotatedMethod; import org.codehaus.jackson.map.introspect.AnnotatedParameter; import org.codehaus.jackson.type.JavaType; import org.codehaus.jackson.util.VersionUtil;  public class ApiAnnotationIntrospector extends AnnotationIntrospector implements         Versioned {      @Override     public Version version() {         return VersionUtil.versionFor(getClass());     }      @Override     public boolean isHandled(Annotation ann) {         Class&lt;?&gt; cls = ann.annotationType();         if (ApiField.class == cls) {             return true;         }         return false;     }      @Override     public String findRootName(AnnotatedClass ac) {         return null;     }      @Override     public String[] findPropertiesToIgnore(AnnotatedClass ac) {         return null;     }      @Override     public Boolean findIgnoreUnknownProperties(AnnotatedClass ac) {         return null;     }      @Override     public boolean isIgnorableMethod(AnnotatedMethod m) {         return false;     }      @Override     public boolean isIgnorableConstructor(AnnotatedConstructor c) {         return false;     }      @Override     public boolean isIgnorableField(AnnotatedField f) {         return false;     }      @Override     public Object findSerializer(Annotated am) {         return null;     }      @Override     public Class&lt;?&gt; findSerializationType(Annotated a) {         return null;     }      @Override     public Typing findSerializationTyping(Annotated a) {         return null;     }      @Override     public Class&lt;?&gt;[] findSerializationViews(Annotated a) {         return null;     }      @Override     public String[] findSerializationPropertyOrder(AnnotatedClass ac) {         return null;     }      @Override     public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) {         return null;     }      @Override     public String findGettablePropertyName(AnnotatedMethod am) {         return null;     }      @Override     public boolean hasAsValueAnnotation(AnnotatedMethod am) {         return false;     }      @Override     public String findEnumValue(Enum&lt;?&gt; value) {         return null;     }      @Override     public String findSerializablePropertyName(AnnotatedField af) {         return getPropertyName(af);     }      @Override     public Object findDeserializer(Annotated am) {         return null;     }      @Override     public Class&lt;? extends KeyDeserializer&gt; findKeyDeserializer(Annotated am) {         return null;     }      @Override     public Class&lt;? extends JsonDeserializer&lt;?&gt;&gt; findContentDeserializer(             Annotated am) {         return null;     }      @Override     public Class&lt;?&gt; findDeserializationType(Annotated am, JavaType baseType,             String propName) {         return null;     }      @Override     public Class&lt;?&gt; findDeserializationKeyType(Annotated am,             JavaType baseKeyType, String propName) {         return null;     }      @Override     public Class&lt;?&gt; findDeserializationContentType(Annotated am,             JavaType baseContentType, String propName) {         return null;     }      @Override     public String findSettablePropertyName(AnnotatedMethod am) {         return null;     }      @Override     public String findDeserializablePropertyName(AnnotatedField af) {         return getPropertyName(af);     }      @Override     public String findPropertyNameForParam(AnnotatedParameter param) {         return null;     }      private String getPropertyName(AnnotatedField af) {         ApiField annotation = af.getAnnotation(ApiField.class);         if (annotation != null &amp;&amp; annotation.value() != """") {             return annotation.value();         }         return null;     }  }"
"public class CustomDeserializer extends JsonDeserializer&lt;Map&lt;String, Info&gt;&gt; {     @Override     public Map&lt;String, Info&gt; deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {         List&lt;Info&gt; raw = jp.readValueAs(new TypeReference&lt;List&lt;Info&gt;&gt;() {         });         Map&lt;String, Info&gt; result = new HashMap&lt;&gt;();         for (Info info : raw) {             result.put(info.getInfo(), info);         }          return result;     } }"
"import org.apache.commons.net.io.Util; import org.apache.commons.net.io.CopyStreamListener;  private void copy(FileObject sourceFile, FileObject destinationFile, CopyStreamListener progressMonitor) throws IOException {     InputStream sourceFileIn = sourceFile.getContent().getInputStream();     try {         OutputStream destinationFileOut = destinationFile.getContent().getOutputStream();         try {             Util.copyStream(sourceFileIn, destinationFileOut, Util.DEFAULT_COPY_BUFFER_SIZE, sourceFile.getContent().getSize(), progressMonitor);         } finally {             destinationFileOut.close();         }     } finally {         sourceFileIn.close();     } }"
"import groovy.xml.StreamingMarkupBuilder  def xml = """"""&lt;rows&gt;   &lt;row&gt;     &lt;name&gt;Abhishek&lt;/name&gt;     &lt;host&gt;abhishek123@cjb.net&lt;/host&gt;   &lt;/row&gt;   &lt;row&gt;     &lt;name&gt;Simon&lt;/name&gt;     &lt;host&gt;a@a.com&lt;/host&gt;   &lt;/row&gt; &lt;/rows&gt;""""""  def root = new XmlSlurper().parseText( xml ) root.appendNode {   row {     name( 'tim' )     host( 'a@woo.com' )   } }  def outputBuilder = new StreamingMarkupBuilder() String result = outputBuilder.bind{ mkp.yield root }"
public class BulkSMSContactsDataModel extends ListDataModel&lt;BulkSMSContacts&gt; implements SelectableDataModel&lt;BulkSMSContacts&gt; {      public BulkSMSContactsDataModel() {   }    public BulkSMSContactsDataModel(List&lt;BulkSMSContacts&gt; data) {       super(data);   }    @Override   public BulkSMSContacts getRowData(String rowKey) {             List&lt;BulkSMSContacts&gt; contacts = (List&lt;BulkSMSContacts&gt;) new yourDao.getListOfBulkSMSContacts(); //yourDAO :BulkSMSContactsSelector i guess     for(BulkSMSContacts c : contacts) {           if(String.valueOf(c.getContactId()).equals(rowKey))               return c;       }        return null;   }    @Override   public Object getRowKey(BulkSMSContacts obj) {       return String.valueOf(obj.getContactId());   }
"AreaAveragingScaleFilter scaleFilter =     new AreaAveragingScaleFilter(                 Math.round(originalWidth / factorX),                 Math.round(originalHeight / factorY)); ImageProducer producer = new FilteredImageSource(original.getSource(), scaleFilter); ImageGenerator generator = new ImageGenerator(); producer.startProduction(generator); BufferedImage scaled = generator.getImage();  for(int x = 0; x &lt; scaled.getWidth(); x++) {     for(int y = 0; y &lt; scaled.getHeight(); y++) {         int rgb = scaled.getRGB(x, y);         int alpha = (rgb &gt;&gt; 24) &amp; 0xff;         if(alpha != 255) {             scaled.setRGB(x, y,-1); //set white         }     } }   JPEGImageWriteParam param = new JPEGImageWriteParam(null); param.setCompressionMode(JPEGImageWriteParam.MODE_EXPLICIT); param.setCompressionQuality((float) 0.85); java.util.Iterator&lt;ImageWriter&gt; it = ImageIO.getImageWritersBySuffix(""jpg""); ImageWriter writer = it.next(); dest.getParentFile().mkdirs(); writer.setOutput(new FileImageOutputStream(dest)); writer.write(null, new IIOImage(scaled, null, null), param); writer.dispose();"
"default-dispatcher {     type = ""Dispatcher""     executor = ""fork-join-executor""      fork-join-executor {         parallelism-min = 8         parallelism-factor = 3.0         parallelism-max = 64     }      thread-pool-executor {         keep-alive-time = 60s         core-pool-size-min = 8         core-pool-size-factor = 3.0         core-pool-size-max = 64         max-pool-size-min = 8         max-pool-size-factor  = 3.0         max-pool-size-max = 64         task-queue-size = -1         task-queue-type = ""linked""          allow-core-timeout = on     } }"
"public class OrderedRunner extends BlockJUnit4ClassRunner {      public OrderedRunner(Class klass) throws InitializationError {         super(klass);     }      @Override     protected List computeTestMethods() {         List list = super.computeTestMethods();         List copy = new ArrayList(list);         Collections.sort(copy, new Comparator() {             public int compare(FrameworkMethod o1, FrameworkMethod o2) {                 return o2.getName().compareTo(o1.getName());             }         });         return copy;     } }"
"LoadingCache&lt;Key, Handle&gt; graphs = CacheBuilder.newBuilder()    .maximumSize(100) // sensible value for open handles?    .expireAfterAccess(5, TimeUnit.MINUTES)    .removalListener(removalListener)    .build(        new CacheLoader&lt;Key, Handle&gt;() {          public Handle load(Key key) throws AnyException {            return openHandle(key);          }        });  RemovalListener&lt;Key, Handle&gt; removalListener =    new RemovalListener&lt;Key, Handle&gt;() {     public void onRemoval(RemovalNotification&lt;Key, Handle&gt; removal) {       Handle h = removal.getValue();       h.close(); // tear down properly     }   };"
"try {      String shopName = jComboBox1.getSelectedItem().toString();     String actionCode = jComboBox2.getSelectedItem().toString();      HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();     map.put(""storeName"", shopName);     map.put(""actionCode"", actionCode);      URL reportFileURL = getClass().getResource(""../ireps/AccessCounter.jrxml"");     File reportFile = new File(reportFileURL.toURI());     JasperDesign jasperDesign = JRXmlLoader.load(reportFile);     JasperReport jasperReport = JasperCompileManager.compileReport(jasperDesign);     JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, map, con);      JasperViewer jv = new JasperViewer(jasperPrint);     JDialog viewer = new JDialog(this, ""Batch Report"", true);     viewer.setBounds(jv.getBounds());     viewer.getContentPane().add(jv.getContentPane());     viewer.setResizable(true);     viewer.setIconImage(jv.getIconImage());     viewer.setVisible(true);  } catch (JRException exc) {    System.out.println(exc.getMessage()); } catch (URISyntaxException exs) {    System.out.println(exs.getMessage()); }"
"import com.sun.star.beans.PropertyValue; import com.sun.star.beans.XPropertySet; import com.sun.star.comp.helper.Bootstrap; import com.sun.star.comp.helper.BootstrapException; import com.sun.star.container.XNameAccess; import com.sun.star.frame.XComponentLoader; import com.sun.star.graphic.XGraphic; import com.sun.star.graphic.XGraphicProvider; import com.sun.star.io.IOException; import com.sun.star.lang.IllegalArgumentException; import com.sun.star.lang.XComponent; import com.sun.star.lang.XMultiComponentFactory; import com.sun.star.lang.XServiceInfo; import com.sun.star.text.XTextDocument; import com.sun.star.text.XTextGraphicObjectsSupplier; import com.sun.star.uno.Exception; import com.sun.star.uno.UnoRuntime; import com.sun.star.uno.XComponentContext; import com.sun.star.util.XCloseable;  public class Program {      public static void exportGraphicObject(XGraphicProvider xGraphicProvider, XGraphic xGraphic, String fileName) throws Exception {         if (xGraphicProvider == null){             throw new Exception(""XGraphicProvider is null."");         }          if (xGraphic == null){             throw new Exception(""XGraphic is null."");         }          PropertyValue[] properties = new PropertyValue[2];         properties[0] = new PropertyValue();         properties[0].Name = ""URL"";         properties[0].Value = fileName;         properties[1] = new PropertyValue();         properties[1].Name = ""MimeType"";         properties[1].Value = ""image/"" + fileName.trim().substring(fileName.length() - 3);          xGraphicProvider.storeGraphic(xGraphic, properties);     }      public static void exportAllEmbeddedGraphics(XGraphicProvider xGraphicProvider, XTextDocument xTextDocument, String outDir) throws Exception {         if (xGraphicProvider == null){             throw new Exception(""XGraphicProvider is null."");         }          if (xTextDocument == null){             throw new Exception(""XTextDocument is null."");         }          XTextGraphicObjectsSupplier xTextGraphicObjectsSupplier = (XTextGraphicObjectsSupplier) UnoRuntime.queryInterface(                 XTextGraphicObjectsSupplier.class, xTextDocument);          XNameAccess xNameAccess = xTextGraphicObjectsSupplier.getGraphicObjects();         if (xNameAccess != null &amp;&amp; xNameAccess.hasElements()) {             String[] names = xNameAccess.getElementNames();              for (int i = 0; i &lt; names.length; i++) {                 Object oGraphics = xNameAccess.getByName(names[i]);                  XServiceInfo xServiceInfo = (XServiceInfo)UnoRuntime.queryInterface(                         XServiceInfo.class, oGraphics);                 if (xServiceInfo != null                         &amp;&amp; xServiceInfo.supportsService(""com.sun.star.text.TextContent"")                         &amp;&amp; xServiceInfo.supportsService(""com.sun.star.text.TextGraphicObject"")) {                      XPropertySet xPropertySet = (XPropertySet)UnoRuntime.queryInterface(                             XPropertySet.class, oGraphics);                     String url = (String) xPropertySet.getPropertyValue(""GraphicURL"");                      PropertyValue[] properties = new PropertyValue[1];                     properties[0] = new PropertyValue();                     properties[0].Name = ""URL"";                     properties[0].Value = url;                      XGraphic xGraphic = xGraphicProvider.queryGraphic(properties);                     if (xGraphic != null){                         //String fileName = UUID.randomUUID() + "".png"";                         String fileName = names[i] + "".png"";                         System.out.println(""Export: "" + names[i]);                         System.out.println(""Filename: "" + outDir + fileName);                          exportGraphicObject(xGraphicProvider, xGraphic, outDir + fileName);                          xGraphic = null;                     }                      xServiceInfo = null;                 }                  oGraphics = null;             }              names = null;             xNameAccess = null;         }          if (xTextGraphicObjectsSupplier != null)             xTextGraphicObjectsSupplier = null;     }      public static void main(String[] args) throws Exception {         String fileName = ""file:///C:/code/_other/java-OOo/test.odt"";         String outDir = ""file:///C:/code/_other/java-OOo/out/"";          XComponentContext xContext = null;         XMultiComponentFactory xMultiComponentFactory = null;         Object oDesktop = null;         XComponentLoader xComponentLoader = null;         XGraphicProvider xGraphicProvider = null;          System.out.println(""Starting OOo."");         try {             xContext = Bootstrap.bootstrap();         } catch (BootstrapException e) {             System.out.println(""Boostrap failed! Failed to start OpenOffice."");             return;         }          xMultiComponentFactory  = (XMultiComponentFactory) xContext.getServiceManager();         oDesktop = xMultiComponentFactory.createInstanceWithContext(                 ""com.sun.star.frame.Desktop"", xContext);         xComponentLoader = (XComponentLoader)UnoRuntime.queryInterface(                 com.sun.star.frame.XComponentLoader.class, oDesktop);         if (xComponentLoader == null) {             System.out.println(""Failed to create XComponentLoader"");             return;         }          try {             Object oGraphicProvider = xMultiComponentFactory.createInstanceWithContext(                     ""com.sun.star.graphic.GraphicProvider"", xContext);             xGraphicProvider = (XGraphicProvider) UnoRuntime.queryInterface(                     XGraphicProvider.class, oGraphicProvider);          } catch (Exception e) {             System.out.println(""Failed to create XGraphicProvider!"");             return;         }          PropertyValue[] properties = new PropertyValue[2];         properties[0] = new PropertyValue();         properties[0].Name = ""Hidden"";         properties[0].Value = false; // put true to hide OpenOffice window         properties[1] = new PropertyValue();         properties[1].Name = ""CharacterSet"";         properties[1].Value = ""Unicode (UTF-8)"";          XComponent document = null;         try {             document = xComponentLoader.loadComponentFromURL(fileName, ""_blank"", 0, properties);         } catch (IOException e) {             e.printStackTrace();         } catch (IllegalArgumentException e) {             e.printStackTrace();         }          XTextDocument xTextDocument = (XTextDocument) UnoRuntime.queryInterface(                 XTextDocument.class, document);         exportAllEmbeddedGraphics(xGraphicProvider, xTextDocument, outDir);          XCloseable xCloseable = (XCloseable)UnoRuntime.queryInterface(                 XCloseable.class, xContext);         if(xCloseable != null)         {             xCloseable.close(true);             xCloseable = null;         }           xGraphicProvider = null;         xComponentLoader = null;         oDesktop = null;         xMultiComponentFactory = null;         xContext = null;          try {             Runtime.getRuntime().exec(""tskill soffice"");         } catch (java.io.IOException e) {             e.printStackTrace();         }           System.out.println(""Done."");     } }"
"log4j.rootLogger=TRACE, stdout  log4j.appender.stdout=org.apache.log4j.ConsoleAppender log4j.appender.stdout.layout=org.apache.log4j.PatternLayout log4j.appender.stdout.layout.ConversionPattern=%d [%24F:%t:%L] - %m%n  log4j.appender.debugLog=org.apache.log4j.FileAppender log4j.appender.debugLog.File=logs/debug.log log4j.appender.debugLog.layout=org.apache.log4j.PatternLayout log4j.appender.debugLog.layout.ConversionPattern=%d [%24F:%t:%L] - %m%n  log4j.appender.reportsLog=org.apache.log4j.FileAppender log4j.appender.reportsLog.File=logs/reports.log log4j.appender.reportsLog.layout=org.apache.log4j.PatternLayout log4j.appender.reportsLog.layout.ConversionPattern=%d [%24F:%t:%L] - %m%n  log4j.category.debugLogger=TRACE, debugLog log4j.additivity.debugLogger=false  log4j.category.reportsLogger=DEBUG, reportsLog log4j.additivity.reportsLogger=false"
"public BufferedImage getScaledInstance(BufferedImage img,                                        int targetWidth,                                        int targetHeight,                                        Object hint,                                        boolean higherQuality) {     int type = (img.getTransparency() == Transparency.OPAQUE) ?         BufferedImage.TYPE_INT_RGB : BufferedImage.TYPE_INT_ARGB;     BufferedImage ret = (BufferedImage)img;     int w, h;     if (higherQuality) {         // Use multi-step technique: start with original size, then         // scale down in multiple passes with drawImage()         // until the target size is reached         w = img.getWidth();         h = img.getHeight();     } else {         // Use one-step technique: scale directly from original         // size to target size with a single drawImage() call         w = targetWidth;         h = targetHeight;     }      do {         if (higherQuality &amp;&amp; w &gt; targetWidth) {             w /= 2;             if (w &lt; targetWidth) {                 w = targetWidth;             }         }          if (higherQuality &amp;&amp; h &gt; targetHeight) {             h /= 2;             if (h &lt; targetHeight) {                 h = targetHeight;             }         }          BufferedImage tmp = new BufferedImage(w, h, type);         Graphics2D g2 = tmp.createGraphics();         g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, hint);         g2.drawImage(ret, 0, 0, w, h, null);         g2.dispose();          ret = tmp;     } while (w != targetWidth || h != targetHeight);      return ret; }"
"log4j.rootCategory=INFO, base log4j.appender.base=org.apache.log4j.rolling.RollingFileAppender log4j.appender.base.File=/tmp/logger.log log4j.appender.base.rollingPolicy=org.apache.log4j.rolling.FixedWindowRollingPolicy log4j.appender.base.rollingPolicy.maxIndex=5 log4j.appender.base.triggeringPolicy=org.apache.log4j.rolling.SizeBasedTriggeringPolicy log4j.appender.base.triggeringPolicy.maxFileSize=100 log4j.appender.base.rollingPolicy.ActiveFileName=/tmp/logger-%i.log log4j.appender.base.rollingPolicy.FileNamePattern=/tmp/test/logger-%i.log.gz log4j.appender.base.layout = org.apache.log4j.PatternLayout log4j.appender.base.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n"
