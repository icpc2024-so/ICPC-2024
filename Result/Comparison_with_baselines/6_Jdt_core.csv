code
"import java.awt.Color; import java.awt.Component; import java.awt.Container; import java.awt.FlowLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.io.FileNotFoundException;  import java.io.File;   import javax.swing.*;  import org.mozilla.xpcom.*;  import org.mozilla.interfaces.*;  /* Websites ref http://groups.google.com/group/mozilla.dev.tech.java/browse_thread/thread/898ba6751d0c57f7  http://skrul.com/blog/code/ http://wirestorm.net/blog/?cat=9  */   public class BrowserTest  implements nsIWebProgressListener,nsIWeakReference, nsIInterfaceRequestor, nsIWebBrowserChrome, nsISHistoryListener{      static {         try {             System.loadLibrary(""NativeWindow"");         } catch (UnsatisfiedLinkError e) {             System.err.println(""can't find your library"");         }     }     private static final String frameTitle=""GRE Embedded"";     public static void main(String[] args) {         BrowserConroller controler=new BrowserConroller();         controler.run();         new BrowserTest().start();     }       public void start(){           JFrame f = new JFrame( frameTitle );         f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         f.setSize(400, 150);         Container content = f.getContentPane();         content.setBackground(Color.white);         content.setLayout(new FlowLayout());          content.add(new JLabel(""Initializing ... ""));         f.setVisible(true);          File grePath = null;          LocationProvider locProvider;          Mozilla mozilla = Mozilla.getInstance();           GREVersionRange[] range = new GREVersionRange[1];          range[0] = new GREVersionRange(""1.8.0"", true, ""1.9"", false);           try {              grePath = Mozilla.getGREPathWithProperties(range, null);             mozilla.initialize(grePath);             locProvider = new LocationProvider(grePath);              mozilla.initEmbedding(grePath, grePath, locProvider);          }           catch (FileNotFoundException e) {              System.out.println(""Error: FileNotFoundException"");          }          catch (XPCOMException e) {              System.out.println(""Error: XPCOMException"");          }            //---------- END GRE INITIALIZATION------------           nsIServiceManager serviceManager = mozilla.getServiceManager();           nsIAppStartup appStartup = (nsIAppStartup)serviceManager.getServiceByContractID(""@mozilla.org/toolkit/app-startup;1"", nsIAppStartup.NS_IAPPSTARTUP_IID);          nsIWindowCreator windowCreator = (nsIWindowCreator)appStartup.queryInterface(nsIWindowCreator.NS_IWINDOWCREATOR_IID);           nsIWindowWatcher windowWatcher =(nsIWindowWatcher)serviceManager.getServiceByContractID(""@mozilla.org/embedcomp/window-watcher;1"",nsIWindowWatcher.NS_IWINDOWWATCHER_IID);           windowWatcher.setWindowCreator(windowCreator);           nsIDOMWindow win = windowWatcher.openWindow(null, ""http://google.com"", ""MAIN_WIN"",""chrome,resizable,centerscreen"", null);         windowWatcher.setActiveWindow( win );           nsIComponentManager componentManager = mozilla.getComponentManager();         String NS_IWEBBROWSER_CID = ""F1EAC761-87E9-11d3-AF80-00A024FFC08C""; //$NON-NLS-1$         nsIWebBrowser webBrowser = (nsIWebBrowser) componentManager.createInstance(NS_IWEBBROWSER_CID, null, nsIWebBrowser.NS_IWEBBROWSER_IID);         webBrowser.setContainerWindow(this);         webBrowser.addWebBrowserListener(this, nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID);   //      nsIWebNavigation webNavigation=(nsIWebNavigation)webBrowser.queryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID); //      webNavigation.loadURI(""http://www.zdnet.com"", nsIWebNavigation.LOAD_FLAGS_NONE, null, null, null); //                nsIBaseWindow baseWindow = (nsIBaseWindow) webBrowser.queryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID);                      long handle=FindWindow.getHWND( frameTitle );          baseWindow.initWindow(handle, 0, 0, 0,350,350);         baseWindow.create();         baseWindow.setVisibility(true);     //       //      nsIDOMWindow domWin=webBrowser.getContentDOMWindow(); //      nsIDOMEventTarget domEventTarget= (nsIDOMEventTarget)domWin.queryInterface(nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID); //      domEventTarget.addEventListener(""click"", new EventListener(), false); //               //Hide JFrame after it have been initialized         f.setVisible(true); //       //      nsIWebNavigation webNavigation=(nsIWebNavigation)webBrowser.queryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID); //      webNavigation.loadURI(""http://www.zdnet.com"", nsIWebNavigation.LOAD_FLAGS_NONE, null, null, null); //               appStartup.run();          System.out.println(""try termEmbedding"");          try {              System.out.println(""mozilla.termEmbedding(); START"");              mozilla.termEmbedding();              System.out.println(""mozilla.termEmbedding(); FINISHED"");          }          catch (XPCOMException e) {              System.out.println(""Fehler: XPCOMException"");          }          System.out.println(""finished termEmbedding"");          System.out.println(""All done"");      }        public void onLocationChange(nsIWebProgress webProgress, nsIRequest request, nsIURI location) {         c(""onLocationChange"");      }      public void onProgressChange(nsIWebProgress webProgress, nsIRequest request, int curSelfProgress, int maxSelfProgress, int curTotalProgress, int maxTotalProgress) {         c(""onProgressChange"");      }      public void onSecurityChange(nsIWebProgress webProgress, nsIRequest request, long state) {         c(""onSecurityChange"");      }      public void onStateChange(nsIWebProgress webProgress, nsIRequest request, long stateFlags, long status) {         c(""onStateChange"");      }      public void onStatusChange(nsIWebProgress webProgress, nsIRequest request, long status, String message) {         c(""onStatusChange"");      }      public nsISupports queryInterface(String uuid) {         c(""queryInterface"");         return null;     }        public nsISupports queryReferent(String uuid) {         c(""queryReferent"");         return null;     }      public nsISupports getInterface(String uuid) {         c(""getInterface"");         return null;     }     private void c(Object o){         System.out.println(o);     }      public void destroyBrowserWindow() {         c(""destroyBrowserWindow"");      }      public void exitModalEventLoop(long status) {         c(""exitModalEventLoop"");      }      public long getChromeFlags() {         c(""getChromeFlags"");         return 0;     }      public nsIWebBrowser getWebBrowser() {         c(""getWebBrowser"");              return null;     }      public boolean isWindowModal() {         c(""isWindowModal"");              return false;     }      public void setChromeFlags(long chromeFlags) {         c(""setChromeFlags"");          }      public void setStatus(long statusType, String status) {         c(""setStatus"");       }      public void setWebBrowser(nsIWebBrowser webBrowser) {         c(""setWebBrowser"");              }      public void showAsModal() {         c(""showAsModal"");         }      public void sizeBrowserTo(int acx, int acy) {         c(""sizeBrowserTo"");       }      public boolean onHistoryGoBack(nsIURI backURI) {         c(""onHistoryGoBack"");         return false;     }      public boolean onHistoryGoForward(nsIURI forwardURI) {         c(""onHistoryGoForward"");         return false;     }      public boolean onHistoryGotoIndex(int index, nsIURI gotoURI) {         c("" onHistoryGotoIndex"");         return false;     }      public void onHistoryNewEntry(nsIURI newURI) {         c("" onHistoryNewEntry"");     }      public boolean onHistoryPurge(int numEntries) {         c("" onHistoryPurge"");         return false;     }      public boolean onHistoryReload(nsIURI reloadURI, long reloadFlags) {         c("" onHistoryReload"");         return false;     }   } //public class JavaXPCOM_test1[/code]"
"import java.io.ByteArrayOutputStream; import java.util.Collection; import java.util.Iterator; import org.eclipse.birt.core.framework.Platform; import org.eclipse.birt.report.engine.api.EngineConfig; import org.eclipse.birt.report.engine.api.EngineException; import org.eclipse.birt.report.engine.api.HTMLRenderOption; import org.eclipse.birt.report.engine.api.IGetParameterDefinitionTask; import org.eclipse.birt.report.engine.api.IParameterDefnBase; import org.eclipse.birt.report.engine.api.IParameterGroupDefn; import org.eclipse.birt.report.engine.api.IParameterSelectionChoice; import org.eclipse.birt.report.engine.api.IReportEngine; import org.eclipse.birt.report.engine.api.IReportEngineFactory; import org.eclipse.birt.report.engine.api.IReportRunnable; import org.eclipse.birt.report.engine.api.IRunAndRenderTask; import org.eclipse.birt.report.engine.api.IScalarParameterDefn; import org.eclipse.birt.report.engine.api.PDFRenderOption;  public class BirtEngine {      IReportEngine engine = null;     EngineConfig config = null;      public BirtEngine()     {         try {             config = new EngineConfig( );             config.setBIRTHome(""C:\\birtruntime\\ReportEngine"");             Platform.startup( config );             IReportEngineFactory factory = (IReportEngineFactory) Platform.createFactoryObject( IReportEngineFactory.EXTENSION_REPORT_ENGINE_FACTORY );             engine = factory.createReportEngine( config );         }catch(Exception e){             e.printStackTrace();         }     }      public void openReport(String report)     {         try {       IReportRunnable design = null;             design = engine.openReportDesign(report);         }catch(Exception ex){             ex.printStackTrace();         }     }      public void renderReport(String report)     {         try {       IReportRunnable design = null;             design = engine.openReportDesign(report);             IRunAndRenderTask task = engine.createRunAndRenderTask(design);             HTMLRenderOption options = new HTMLRenderOption();             ByteArrayOutputStream bos = new ByteArrayOutputStream();             options.setOutputStream(bos);             options.setOutputFormat(""html"");             options.setEmbeddable(true);             task.setRenderOption(options);             task.run();             task.close();             //TreeBirtFrameView.jEditorPane1.setContentType(""text/html"");             //TreeBirtFrameView.jEditorPane1.setText(bos.toString());         }catch(Exception ex){             ex.printStackTrace();         }     }      public void printReport(String report)     {         try {       IReportRunnable design = null;             design = engine.openReportDesign(report);             IRunAndRenderTask task = engine.createRunAndRenderTask(design);             PDFRenderOption options = new PDFRenderOption();             ByteArrayOutputStream bos = new ByteArrayOutputStream();             options.setOutputStream(bos);             options.setOutputFormat(""pdf"");             task.setRenderOption(options);             task.run();             task.close();       //Runtime.getRuntime().exec(""\\\\myServer\\pgms$\\Adobe\\Reader 9.0\\Reader\\acrord32.exe report.pdf"");         }catch(Exception ex){             ex.printStackTrace();         }     }      public void stopPlatform()     {         engine.destroy();         Platform.shutdown();     } }"
"package WildWezyrListRemovalTesting;  import com.google.common.base.Predicate; import com.google.common.collect.Iterables; import java.util.ArrayList; import java.util.Iterator; import java.util.LinkedList; import java.util.List;  public class RemoveManyFromList {      public static abstract class BaseRemoveManyPerformer {          protected String performerName() {             return getClass().getSimpleName();         }          protected void info(String msg) {             System.out.println(performerName() + "": "" + msg);         }          protected void populateList(List&lt;Integer&gt; items, int itemCnt) {             for (int i = 0; i &lt; itemCnt; i++) {                 items.add(i);             }         }          protected boolean mustRemoveItem(Integer itemVal, int itemIdx, int removeFactor) {             if (removeFactor == 0) {                 return false;             }             return itemIdx % removeFactor == 0;         }          protected abstract List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor);          protected abstract List&lt;Integer&gt; createInitialList();          public void testMe(int itemCnt, int removeFactor) {             List&lt;Integer&gt; items = createInitialList();             populateList(items, itemCnt);             long startMillis = System.currentTimeMillis();             items = removeItems(items, removeFactor);             long endMillis = System.currentTimeMillis();             int chksum = 0;             for (Integer item : items) {                 chksum += item;             }             info(""removing took "" + (endMillis - startMillis)                     + "" milli(s), itemCnt="" + itemCnt                     + "", removed items: "" + (itemCnt - items.size())                     + "", remaining items: "" + items.size()                     + "", checksum: "" + chksum);         }     }     private List&lt;BaseRemoveManyPerformer&gt; rmps =             new ArrayList&lt;BaseRemoveManyPerformer&gt;();      public void addPerformer(BaseRemoveManyPerformer rmp) {         rmps.add(rmp);     }     private Runtime runtime = Runtime.getRuntime();      private void runGc() {         for (int i = 0; i &lt; 5; i++) {             runtime.gc();         }     }      public void testAll(int itemCnt, int removeFactor) {         runGc();         for (BaseRemoveManyPerformer rmp : rmps) {             rmp.testMe(itemCnt, removeFactor);         }         runGc();         System.out.println(""\n--------------------------\n"");     }      public static class NaiveRemoveManyPerformer             extends BaseRemoveManyPerformer {          @Override         public List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor) {             if (items.size() &gt; 300000 &amp;&amp; items instanceof ArrayList) {                 info(""this removeItems is too slow, returning without processing"");                 return items;             }             int i = 0;             Iterator&lt;Integer&gt; iter = items.iterator();             while (iter.hasNext()) {                 Integer item = iter.next();                 if (mustRemoveItem(item, i, removeFactor)) {                     iter.remove();                 }                 i++;             }             return items;         }          @Override         public List&lt;Integer&gt; createInitialList() {             return new ArrayList&lt;Integer&gt;();         }     }      public static class BetterNaiveRemoveManyPerformer             extends NaiveRemoveManyPerformer {          @Override         public List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor) { //            if (items.size() &gt; 300000 &amp;&amp; items instanceof ArrayList) { //                info(""this removeItems is too slow, returning without processing""); //                return items; //            }              for (int i = items.size(); --i &gt;= 0;) {                 Integer item = items.get(i);                 if (mustRemoveItem(item, i, removeFactor)) {                     items.remove(i);                 }             }             return items;         }     }      public static class LinkedRemoveManyPerformer             extends NaiveRemoveManyPerformer {          @Override         public List&lt;Integer&gt; createInitialList() {             return new LinkedList&lt;Integer&gt;();         }     }      public static class CreateNewRemoveManyPerformer             extends NaiveRemoveManyPerformer {          @Override         public List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor) {             List&lt;Integer&gt; res = createResultList(items, removeFactor);             int i = 0;              for (Integer item : items) {                 if (mustRemoveItem(item, i, removeFactor)) {                     // no-op                 } else {                     res.add(item);                 }                 i++;             }              return res;         }          protected List&lt;Integer&gt; createResultList(List&lt;Integer&gt; items, int removeFactor) {             return new ArrayList&lt;Integer&gt;();         }     }      public static class SmartCreateNewRemoveManyPerformer             extends CreateNewRemoveManyPerformer {          @Override         protected List&lt;Integer&gt; createResultList(List&lt;Integer&gt; items, int removeFactor) {             int newCapacity = removeFactor == 0 ? items.size()                     : (int) (items.size() * (removeFactor - 1L) / removeFactor + 1);             //System.out.println(""newCapacity="" + newCapacity);             return new ArrayList&lt;Integer&gt;(newCapacity);         }     }      public static class FasterSmartCreateNewRemoveManyPerformer             extends SmartCreateNewRemoveManyPerformer {          @Override         public List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor) {             List&lt;Integer&gt; res = createResultList(items, removeFactor);              for (int i = 0; i &lt; items.size(); i++) {                 Integer item = items.get(i);                 if (mustRemoveItem(item, i, removeFactor)) {                     // no-op                 } else {                     res.add(item);                 }             }              return res;         }     }      public static class ForwardInPlaceRemoveManyPerformer             extends NaiveRemoveManyPerformer {          @Override         public List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor) {             int j = 0; // destination idx             for (int i = 0; i &lt; items.size(); i++) {                 Integer item = items.get(i);                 if (mustRemoveItem(item, i, removeFactor)) {                     // no-op                 } else {                     if (j &lt; i) {                         items.set(j, item);                     }                     j++;                 }             }              return items.subList(0, j);         }     }      public static class MagicRemoveManyPerformer             extends NaiveRemoveManyPerformer {          @Override         public List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, int removeFactor) {             for (int i = 0; i &lt; items.size(); i++) {                 if (mustRemoveItem(items.get(i), i, removeFactor)) {                     Integer retainedItem = removeSomeFromEnd(items, removeFactor, i);                     if (retainedItem == null) {                         items.remove(i);                         break;                     }                     items.set(i, retainedItem);                 }             }              return items;         }          private Integer removeSomeFromEnd(List&lt;Integer&gt; items, int removeFactor, int lowerBound) {             for (int i = items.size(); --i &gt; lowerBound;) {                 Integer item = items.get(i);                 items.remove(i);                 if (!mustRemoveItem(item, i, removeFactor)) {                     return item;                 }             }             return null;         }     }      public static class GuavaArrayListRemoveManyPerformer             extends BaseRemoveManyPerformer {          @Override         protected List&lt;Integer&gt; removeItems(List&lt;Integer&gt; items, final int removeFactor) {             Iterables.removeIf(items, new Predicate&lt;Integer&gt;() {                  public boolean apply(Integer input) {                     return mustRemoveItem(input, input, removeFactor);                 }             });              return items;         }          @Override         protected List&lt;Integer&gt; createInitialList() {             return new ArrayList&lt;Integer&gt;();         }     }      public void testForOneItemCnt(int itemCnt) {         testAll(itemCnt, 0);         testAll(itemCnt, itemCnt);         testAll(itemCnt, itemCnt - 1);         testAll(itemCnt, 3);         testAll(itemCnt, 2);         testAll(itemCnt, 1);     }      public static void main(String[] args) {         RemoveManyFromList t = new RemoveManyFromList();         t.addPerformer(new NaiveRemoveManyPerformer());         t.addPerformer(new BetterNaiveRemoveManyPerformer());         t.addPerformer(new LinkedRemoveManyPerformer());         t.addPerformer(new CreateNewRemoveManyPerformer());         t.addPerformer(new SmartCreateNewRemoveManyPerformer());         t.addPerformer(new FasterSmartCreateNewRemoveManyPerformer());         t.addPerformer(new MagicRemoveManyPerformer());         t.addPerformer(new ForwardInPlaceRemoveManyPerformer());         t.addPerformer(new GuavaArrayListRemoveManyPerformer());          t.testForOneItemCnt(1000);         t.testForOneItemCnt(10000);         t.testForOneItemCnt(100000);         t.testForOneItemCnt(200000);         t.testForOneItemCnt(300000);         t.testForOneItemCnt(500000);         t.testForOneItemCnt(1000000);         t.testForOneItemCnt(10000000);     } }"
"package timerdemo;  import java.awt.BorderLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.ImageIcon; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.Timer;  /**  *  * @author ottp  * @version 1.0  */ public class Gui extends JFrame {      private JLabel jLabel;     private Timer timer;     private boolean chromeShown;      public Gui() {         this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         this.setSize(800, 600);         JPanel panel = new JPanel(new BorderLayout());         jLabel = new JLabel(new ImageIcon(""/home/ottp/Downloads/chrome.png""));         chromeShown = true;          panel.add(jLabel);         timer = new Timer(5000, new ActionListener() {              @Override             public void actionPerformed(ActionEvent e) {                 if(chromeShown) {                     jLabel.setIcon(new ImageIcon(""/home/ottp/Downloads/ok.png""));                     chromeShown = false;                 } else {                     jLabel.setIcon(new ImageIcon(""/home/ottp/Downloads/chrome.png""));                     chromeShown = true;                 }             }         });         timer.start();          this.getContentPane().add(panel);         this.setVisible(true);     } }"
"package test.eclipse.compiler;  import java.lang.reflect.Method; import java.util.ArrayList; import java.util.HashMap; import java.util.Map;  import org.eclipse.jdt.internal.compiler.ClassFile; import org.eclipse.jdt.internal.compiler.CompilationResult; import org.eclipse.jdt.internal.compiler.Compiler; import org.eclipse.jdt.internal.compiler.DefaultErrorHandlingPolicies; import org.eclipse.jdt.internal.compiler.ICompilerRequestor; import org.eclipse.jdt.internal.compiler.batch.CompilationUnit; import org.eclipse.jdt.internal.compiler.batch.FileSystem; import org.eclipse.jdt.internal.compiler.batch.FileSystem.Classpath; import org.eclipse.jdt.internal.compiler.env.ICompilationUnit; import org.eclipse.jdt.internal.compiler.env.INameEnvironment; import org.eclipse.jdt.internal.compiler.impl.CompilerOptions; import org.eclipse.jdt.internal.compiler.problem.DefaultProblemFactory; import org.eclipse.jdt.internal.compiler.util.Util;   public class TestCompile {     static class ByteClassLoader extends ClassLoader {         private Map&lt;String, byte[]&gt; classMap;           public ByteClassLoader(Map&lt;String, byte[]&gt; classMap) {             super();             this.classMap = classMap;         }          protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException {             byte[] bytes = classMap.get(name);             if (bytes == null) {                 return super.findClass(name);             } else {                 return defineClass(name, bytes, 0, bytes.length);             }         }     }       public static void compile(String code, String filename) {         ArrayList&lt;Classpath&gt; cp = new ArrayList&lt;FileSystem.Classpath&gt;();         Util.collectRunningVMBootclasspath(cp);         INameEnvironment env = new NameEnv(cp.toArray(new FileSystem.Classpath[cp.size()]), null);         ICompilerRequestor requestor = new ICompilerRequestor() {             @Override             public void acceptResult(CompilationResult result) {                 ClassFile[] cf = result.getClassFiles();                 HashMap&lt;String, byte[]&gt; classMap = new HashMap&lt;String, byte[]&gt;();                 classMap.put(""Test"", cf[0].getBytes());                 ByteClassLoader cl = new ByteClassLoader(classMap);                 try {                     Class&lt;?&gt; c = cl.loadClass(""Test"");                     Method m = c.getMethod(""test"");                     m.invoke(null);                 } catch (Exception e) {                     e.printStackTrace();                 }             }         };         Compiler compiler = new Compiler(env, DefaultErrorHandlingPolicies.exitAfterAllProblems(),                 new CompilerOptions(), requestor, new DefaultProblemFactory());          ICompilationUnit[] units = new ICompilationUnit[] { new CompilationUnit(code.toCharArray(), filename, null) };         compiler.compile(units);     }      public static void main(String[] args) {         compile(""public class Test { public static void test() { System.out.println(\""Hello, world.\""); }}"",                 ""Test.java"");     } }"
"package test.myapp;  import java.util.LinkedList; import java.util.List;  import org.eclipse.core.resources.IProject; import org.eclipse.core.resources.IProjectDescription; import org.eclipse.core.resources.IncrementalProjectBuilder; import org.eclipse.core.resources.ResourcesPlugin; import org.eclipse.core.runtime.NullProgressMonitor; import org.eclipse.core.runtime.Path; import org.eclipse.equinox.app.IApplication; import org.eclipse.equinox.app.IApplicationContext;  public class Application implements IApplication {      public Object start(IApplicationContext context) throws Exception {          String[] args = (String[]) context.getArguments().get(IApplicationContext.APPLICATION_ARGS);          boolean build = false;          // Determine projects to import         List&lt;String&gt; projects = new LinkedList&lt;String&gt;();         for (int i = 0; i &lt; args.length; ++i) {             if (""-import"".equals(args[i]) &amp;&amp; i + 1 &lt; args.length) {                 projects.add(args[++i]);             } else if (""-build"".equals(args[i])) {                 build = true;             }         }          if (projects.size() == 0) {             System.out.println(""No projects to import!"");         } else {             for (String projectPath : projects) {                 System.out.println(""Importing project from: "" + projectPath);                  // Import project description:                 IProjectDescription description = ResourcesPlugin.getWorkspace().loadProjectDescription(                         new Path(projectPath).append("".project""));                 IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(description.getName());                 project.create(description, null);                 project.open(null);             }              // Build all projects after importing             if (build) {                 System.out.println(""Re-building workspace"");                 ResourcesPlugin.getWorkspace().build(IncrementalProjectBuilder.CLEAN_BUILD, new NullProgressMonitor());                 ResourcesPlugin.getWorkspace().build(IncrementalProjectBuilder.FULL_BUILD, new NullProgressMonitor());             }         }         return null;     }      public void stop() {     } }"
"import java.util.ArrayList; import java.util.Arrays;  import org.eclipse.swt.SWT; import org.eclipse.swt.layout.GridLayout; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.Event; import org.eclipse.swt.widgets.List; import org.eclipse.swt.widgets.Listener; import org.eclipse.swt.widgets.Shell;  public class MiniExample {      public static void main(String[] args) {         Display display = Display.getDefault();         final Shell shell = new Shell(display);         shell.setLayout(new GridLayout(1, false));          // Fill your ArrayList with its content         ArrayList&lt;String&gt; printer = new ArrayList&lt;String&gt;();         printer.add(""Epson"");         printer.add(""Canon"");         printer.add(""HP"");          final List printerList = new List(shell, SWT.MULTI | SWT.BORDER);          // Fill the ArrayList into the SWT List         for(String print : printer)             printerList.add(print);          // Print selection         printerList.addListener(SWT.Selection, new Listener() {             @Override             public void handleEvent(Event arg0) {                 if(printerList.getSelectionCount() &gt; 0)                     System.out.println(Arrays.toString(printerList.getSelection()));             }         });          shell.pack();         shell.open();         while (!shell.isDisposed()) {             if (!display.readAndDispatch())                 display.sleep();         }     } }"
"import java.awt.geom.AffineTransform; import java.awt.image.AffineTransformOp; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.MalformedURLException; import java.net.URL;  import javax.imageio.ImageIO; import javax.swing.ImageIcon; import javax.swing.JLabel; import javax.swing.JOptionPane;  public class RotateImage {    public static final String IMAGE_PATH = ""http://duke.kenai.com/""          + ""models/Duke3DprogressionSmall.jpg"";     public static void main(String[] args) {       try {          URL imageUrl = new URL(IMAGE_PATH);          BufferedImage img0 = ImageIO.read(imageUrl);          ImageIcon icon0 = new ImageIcon(img0);           int numquadrants = 1;          BufferedImage img1 = transform(img0, numquadrants );          ImageIcon icon1 = new ImageIcon(img1);           JOptionPane.showMessageDialog(null, new JLabel(icon0));          JOptionPane.showMessageDialog(null, new JLabel(icon1));        } catch (MalformedURLException e) {          e.printStackTrace();       } catch (IOException e) {          e.printStackTrace();       }    }     public static BufferedImage transform(BufferedImage image, int numquadrants) {       int w0 = image.getWidth();       int h0 = image.getHeight();       int w1 = w0;       int h1 = h0;        int centerX = w0 / 2;       int centerY = h0 / 2;        if (numquadrants % 2 == 1) {          w1 = h0;          h1 = w0;       }        if (numquadrants % 4 == 1) {          if (w0 &gt; h0) {             centerX = h0 / 2;             centerY = h0 / 2;          } else if (h0 &gt; w0) {             centerX = w0 / 2;             centerY = w0 / 2;          }          // if h0 == w0, then use default       } else if (numquadrants % 4 == 3) {          if (w0 &gt; h0) {             centerX = w0 / 2;             centerY = w0 / 2;          } else if (h0 &gt; w0) {             centerX = h0 / 2;             centerY = h0 / 2;          }          // if h0 == w0, then use default       }        AffineTransform affineTransform = new AffineTransform();       affineTransform.setToQuadrantRotation(numquadrants, centerX, centerY);        AffineTransformOp opRotated = new AffineTransformOp(affineTransform,             AffineTransformOp.TYPE_BILINEAR);        BufferedImage transformedImage = new BufferedImage(w1, h1,             image.getType());        transformedImage = opRotated.filter(image, transformedImage);       return transformedImage;    } }"
"import java.awt.*; import java.awt.event.*; import java.awt.image.BufferedImage; import java.awt.Graphics;  import javax.imageio.ImageIO; import javax.swing.*;  import java.io.IOException; import java.lang.Object; import java.net.MalformedURLException; import java.net.URL; import java.lang.String; import java.awt.Font;  public class Spaceship extends JPanel {    private static final String BACKGROUND_PATH = ""http://www.thatsreallypossible.com/""          + ""wp-content/uploads/2012/12/Space-Colonialisation.jpg"";    private static final String SPRITE_PATH = ""http://www.pd4pic.com/""          + ""images250_/ufo-flying-saucer-spacecraft-spaceship-alien.png"";     private Font font1;    int myX = 100;    int myY = 400;    int count = 0;    private BufferedImage background;    private BufferedImage sprite;     public Spaceship() throws IOException {       URL backgroundUrl = new URL(BACKGROUND_PATH);       URL spriteUrl = new URL(SPRITE_PATH);       background = ImageIO.read(backgroundUrl);       sprite = ImageIO.read(spriteUrl);        MouseAdapter myMouseAdapter = new MouseAdapter() {          public void mousePressed(MouseEvent evt) {             moveIt(evt);             count = count + 1;          }           @Override          public void mouseDragged(MouseEvent evt) {             moveIt(evt);          }       };       addMouseListener(myMouseAdapter);       addMouseMotionListener(myMouseAdapter);    }     @Override    public Dimension getPreferredSize() {       if (background != null) {          return new Dimension(background.getWidth(), background.getHeight());       }       return super.getPreferredSize();    }     public void moveIt(MouseEvent evt) {       myY = evt.getY() - sprite.getHeight() / 2;       myX = evt.getX() - sprite.getWidth() / 2;       repaint();    }      @Override    protected void paintComponent(Graphics g) {       super.paintComponent(g);       font1 = new Font(""Serif"", Font.BOLD, 36);       g.drawImage(background, 0, 0, this);       g.drawImage(sprite, myX, myY, this);       g.setColor(Color.yellow);       int rectCount = 10;       //g.drawImage(img1, myX, myY, this);       int height = getHeight() / rectCount;       int width = 272;       int x = getWidth() - width;       for (int i = 0; i &lt; rectCount; i++) {          int y = i * height;          g.drawRect(x, y, width, height);       }       g.setFont(font1);       g.drawString(Integer.toString(count), 500, 100);    }     public static void main(String[] args) {       JFrame frame = new JFrame(""Basic Game"");       frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);       Spaceship ex;       try {          ex = new Spaceship();          frame.getContentPane().add(ex);          frame.pack();          frame.setResizable(false);          frame.setVisible(true);          ex.requestFocus();       } catch (IOException e) {          e.printStackTrace();       }    } }"
"import javax.swing.*; import java.awt.*; import java.awt.event.MouseAdapter; import java.awt.event.MouseEvent; import java.awt.geom.Area; import java.awt.geom.Ellipse2D; import java.awt.geom.RoundRectangle2D;  /**  * @author Mikle Garin  * @see http://stackoverflow.com/a/18589264/909085  */  public class CustomListRenderer extends DefaultListCellRenderer {     private static final ImageIcon crossIcon = new ImageIcon ( CustomListRenderer.class.getResource ( ""cross.png"" ) );     private static final ImageIcon tipIcon = new ImageIcon ( CustomListRenderer.class.getResource ( ""tip.png"" ) );      /**      * Sample frame with list.      *      * @param args arguments      */     public static void main ( String[] args )     {         JFrame frame = new JFrame ( ""Custom list renderer"" );          DefaultListModel model = new DefaultListModel ();         model.addElement ( new CustomData ( new Color ( 209, 52, 23 ), 1, ""Anna Williams"" ) );         model.addElement ( new CustomData ( new Color ( 135, 163, 14 ), 0, ""Lucy Frank"" ) );         model.addElement ( new CustomData ( new Color ( 204, 204, 204 ), 0, ""Joe Fritz"" ) );         model.addElement ( new CustomData ( new Color ( 90, 90, 90 ), 3, ""Mikle Garin"" ) );          JList list = new JList ( model );         list.setCellRenderer ( new CustomListRenderer ( list ) );         list.setBorder ( BorderFactory.createEmptyBorder ( 5, 5, 5, 5 ) );         frame.add ( list );          frame.pack ();         frame.setLocationRelativeTo ( null );         frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE );         frame.setVisible ( true );     }      /**      * Actual renderer.      */     private CustomLabel renderer;      /**      * Custom renderer constructor.      * We will use it to create actual renderer component instance.      * We will also add a custom mouse listener to process close button.      *      * @param list our JList instance      */     public CustomListRenderer ( final JList list )     {         super ();         renderer = new CustomLabel ();          list.addMouseListener ( new MouseAdapter ()         {             @Override             public void mouseReleased ( MouseEvent e )             {                 if ( SwingUtilities.isLeftMouseButton ( e ) )                 {                     int index = list.locationToIndex ( e.getPoint () );                     if ( index != -1 &amp;&amp; list.isSelectedIndex ( index ) )                     {                         Rectangle rect = list.getCellBounds ( index, index );                         Point pointWithinCell = new Point ( e.getX () - rect.x, e.getY () - rect.y );                         Rectangle crossRect = new Rectangle ( rect.width - 9 - 5 - crossIcon.getIconWidth () / 2,                                 rect.height / 2 - crossIcon.getIconHeight () / 2, crossIcon.getIconWidth (), crossIcon.getIconHeight () );                         if ( crossRect.contains ( pointWithinCell ) )                         {                             DefaultListModel model = ( DefaultListModel ) list.getModel ();                             model.remove ( index );                         }                     }                 }             }         } );     }      /**      * Returns custom renderer for each cell of the list.      *      * @param list         list to process      * @param value        cell value (CustomData object in our case)      * @param index        cell index      * @param isSelected   whether cell is selected or not      * @param cellHasFocus whether cell has focus or not      * @return custom renderer for each cell of the list      */     @Override     public Component getListCellRendererComponent ( JList list, Object value, int index, boolean isSelected, boolean cellHasFocus )     {         renderer.setSelected ( isSelected );         renderer.setData ( ( CustomData ) value );         return renderer;     }      /**      * Label that has some custom decorations.      */     private static class CustomLabel extends JLabel     {         private static final Color selectionColor = new Color ( 82, 158, 202 );          private boolean selected;         private CustomData data;          public CustomLabel ()         {             super ();             setOpaque ( false );             setBorder ( BorderFactory.createEmptyBorder ( 0, 36 + 5, 0, 40 ) );         }          private void setSelected ( boolean selected )         {             this.selected = selected;             setForeground ( selected ? Color.WHITE : Color.BLACK );         }          private void setData ( CustomData data )         {             this.data = data;             setText ( data.getName () );         }          @Override         protected void paintComponent ( Graphics g )         {             Graphics2D g2d = ( Graphics2D ) g;             g2d.setRenderingHint ( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );              if ( selected )             {                 Area area = new Area ( new Ellipse2D.Double ( 0, 0, 36, 36 ) );                 area.add ( new Area ( new RoundRectangle2D.Double ( 18, 3, getWidth () - 18, 29, 6, 6 ) ) );                 g2d.setPaint ( selectionColor );                 g2d.fill ( area );                  g2d.setPaint ( Color.WHITE );                 g2d.fill ( new Ellipse2D.Double ( 2, 2, 32, 32 ) );             }              g2d.setPaint ( data.getCircleColor () );             g2d.fill ( new Ellipse2D.Double ( 5, 5, 26, 26 ) );             g2d.drawImage ( tipIcon.getImage (), 5 + 13 - tipIcon.getIconWidth () / 2, 5 + 13 - tipIcon.getIconHeight () / 2, null );              if ( selected )             {                 g2d.drawImage ( crossIcon.getImage (), getWidth () - 9 - 5 - crossIcon.getIconWidth () / 2,                         getHeight () / 2 - crossIcon.getIconHeight () / 2, null );             }             else if ( data.getNewMessages () &gt; 0 )             {                 g2d.setPaint ( selectionColor );                 g2d.fill ( new Ellipse2D.Double ( getWidth () - 18 - 5, getHeight () / 2 - 9, 18, 18 ) );                  final String text = """" + data.getNewMessages ();                 final Font oldFont = g2d.getFont ();                 g2d.setFont ( oldFont.deriveFont ( oldFont.getSize () - 1f ) );                 final FontMetrics fm = g2d.getFontMetrics ();                 g2d.setPaint ( Color.WHITE );                 g2d.drawString ( text, getWidth () - 9 - 5 - fm.stringWidth ( text ) / 2,                         getHeight () / 2 + ( fm.getAscent () - fm.getLeading () - fm.getDescent () ) / 2 );                 g2d.setFont ( oldFont );             }              super.paintComponent ( g );         }          @Override         public Dimension getPreferredSize ()         {             final Dimension ps = super.getPreferredSize ();             ps.height = 36;             return ps;         }     }      /**      * Custom data for our list.      */     private static class CustomData     {         private Color circleColor;         private int newMessages;         private String name;          public CustomData ( Color circleColor, int newMessages, String name )         {             super ();             this.circleColor = circleColor;             this.newMessages = newMessages;             this.name = name;         }          private Color getCircleColor ()         {             return circleColor;         }          private int getNewMessages ()         {             return newMessages;         }          private String getName ()         {             return name;         }     } }"
"import java.awt.Dimension; import java.awt.FlowLayout; import java.awt.Graphics; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.MalformedURLException; import java.net.URL;  import javax.imageio.ImageIO; import javax.swing.*; import javax.swing.UIManager.LookAndFeelInfo;  public class MyImageTest extends JPanel {    // public static final String SPEC = ""https://duke.kenai.com/SunRIP/.Midsize/SunRIP.jpg.png"";    public static final String SPEC = ""http://upload.wikimedia.org/wikipedia/commons/3/37/""          + ""Mandel_zoom_14_satellite_julia_island.jpg"";    private static final int PREF_H = 786;    private static final int GAP = 100;    private BufferedImage img;     public MyImageTest() {       try {          URL imgUrl = new URL(SPEC);          img = ImageIO.read(imgUrl);       } catch (MalformedURLException e) {          e.printStackTrace();       } catch (IOException e) {          e.printStackTrace();       }       setLayout(new FlowLayout(FlowLayout.LEADING));       setBorder(BorderFactory.createEmptyBorder(GAP, GAP, GAP, GAP));       JButton b = new JButton();       b.setPreferredSize(new Dimension(GAP, GAP));       add(b);    }     @Override    protected void paintComponent(Graphics g) {       super.paintComponent(g);       if (img != null) {          g.drawImage(img, 0, 0, getWidth(), getHeight(), this);       }    }     @Override    public Dimension getPreferredSize() {       if (img == null) {          return super.getPreferredSize();       } else {          int width = (img.getWidth() * PREF_H) / img.getHeight();          return new Dimension(width, PREF_H);          // return new Dimension(img.getWidth(), img.getHeight());       }    }     private static void createAndShowGui() {       try {          for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {             if (""Nimbus"".equals(info.getName())) {                UIManager.setLookAndFeel(info.getClassName());                break;             }          }       } catch (Exception e) {          e.printStackTrace();       }       MyImageTest mainPanel = new MyImageTest();        JFrame frame = new JFrame(""MyImageTest"");       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       frame.getContentPane().add(mainPanel);       frame.pack();       frame.setLocationByPlatform(true);       frame.setVisible(true);    }     public static void main(String[] args) {       SwingUtilities.invokeLater(new Runnable() {          public void run() {             createAndShowGui();          }       });    } }"
"import com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel;  import javax.swing.*; import javax.swing.plaf.metal.MetalLookAndFeel; import java.awt.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.net.MalformedURLException; import java.net.URL; import java.util.HashMap; import java.util.Map;  /**  * @see http://stackoverflow.com/a/12301173/909085  */  public class LafIcon implements Icon {     private Map&lt;String, Icon&gt; lafIcons;      public LafIcon ()     {         super ();         lafIcons = new HashMap&lt;String, Icon&gt; ();     }      public void addIcon ( String laf, Icon icon )     {         lafIcons.put ( laf, icon );     }      private String getLaf ()     {         return UIManager.getLookAndFeel ().getClass ().getCanonicalName ();     }      private Icon getCurrentIcon ()     {         return lafIcons.get ( getLaf () );     }      public void paintIcon ( Component c, Graphics g, int x, int y )     {         Icon icon = getCurrentIcon ();         if ( icon != null )         {             icon.paintIcon ( c, g, x, y );         }     }      public int getIconWidth ()     {         Icon icon = getCurrentIcon ();         return icon != null ? icon.getIconWidth () : 0;     }      public int getIconHeight ()     {         Icon icon = getCurrentIcon ();         return icon != null ? icon.getIconHeight () : 0;     }      public static void main ( String[] args )     {         installMetalLookAndFeel ();          JFrame frame = new JFrame ();         frame.setLayout ( new FlowLayout ( FlowLayout.CENTER, 5, 5 ) );          frame.add ( new JButton ( ""Test button"", createIcon () ) );          String[] laf = { ""Metal Look and Feel"", ""Nimbus Look and Feel"" };         final JComboBox lafType = new JComboBox ( laf );         lafType.addActionListener ( new ActionListener ()         {             public void actionPerformed ( ActionEvent e )             {                 if ( lafType.getSelectedIndex () == 0 )                 {                     installMetalLookAndFeel ();                 }                 else                 {                     installNimbusLookAndFeel ();                 }             }         } );         frame.add ( lafType );          frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE );         frame.pack ();         frame.setLocationRelativeTo ( null );         frame.setVisible ( true );     }      private static LafIcon createIcon ()     {         LafIcon icon = new LafIcon ();             try         {             icon.addIcon ( MetalLookAndFeel.class.getCanonicalName (), new ImageIcon (                     new URL (""http://cdn3.iconfinder.com/data/icons/fatcow/32x32_0020/application_form.png"") ) );             icon.addIcon ( NimbusLookAndFeel.class.getCanonicalName (), new ImageIcon (                     new URL (""http://cdn3.iconfinder.com/data/icons/fatcow/32x32_0040/application_view_gallery.png"") ) );         }         catch ( MalformedURLException e )         {             e.printStackTrace ();         }             return icon;     }      private static void installMetalLookAndFeel ()     {         installLookAndFeel ( MetalLookAndFeel.class.getCanonicalName () );     }      private static void installNimbusLookAndFeel ()     {         installLookAndFeel ( NimbusLookAndFeel.class.getCanonicalName () );     }      private static void installLookAndFeel ( String name )     {         try         {             UIManager.setLookAndFeel ( name );              Window[] windows = Window.getWindows ();             if ( windows.length &gt; 0 )             {                 for ( Window window : windows )                 {                     SwingUtilities.updateComponentTreeUI ( window );                     window.pack ();                 }             }         }         catch ( ClassNotFoundException e )         {             e.printStackTrace ();         }         catch ( InstantiationException e )         {             e.printStackTrace ();         }         catch ( IllegalAccessException e )         {             e.printStackTrace ();         }         catch ( UnsupportedLookAndFeelException e )         {             e.printStackTrace ();         }     } }"
"import java.awt.image.BufferedImage; import java.io.BufferedReader; import java.io.InputStreamReader; import java.net.URL; import java.net.URLConnection;  import javax.imageio.ImageIO; import javax.swing.ImageIcon; import javax.swing.JOptionPane;  public class TestImage {      public static void main(String[] args) {         try{             URL url = new URL(""https://ajax.googleapis.com/ajax/services/search/images?v=1.0&amp;q=Godfather"");             URLConnection connection = url.openConnection();              String line;             StringBuilder builder = new StringBuilder();             BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));             while((line = reader.readLine()) != null) {                 builder.append(line);             }              JSONObject json = new JSONObject(builder.toString());             String imageUrl = json.getJSONObject(""responseData"").getJSONArray(""results"").getJSONObject(0).getString(""url"");              BufferedImage image = ImageIO.read(new URL(imageUrl));             JOptionPane.showMessageDialog(null, """", """", JOptionPane.INFORMATION_MESSAGE, new ImageIcon(image));         } catch(Exception e){             JOptionPane.showMessageDialog(null, e.getMessage(), ""Failure"", JOptionPane.ERROR_MESSAGE);             e.printStackTrace();         }     } }"
"import java.awt.Container; import java.awt.BorderLayout; import java.awt.Graphics; import java.awt.event.ActionListener; import java.awt.event.ActionEvent; import javax.swing.JFrame; import javax.swing.JComboBox; import javax.swing.JPanel; import javax.swing.SwingUtilities;  class MyFrame extends JFrame implements ActionListener {     private JComboBox jcbShape;     private WGraph jpGraph;     public MyFrame()     {         super(""GridFrame"");     }     public void prepareGUI()     {         Object[] items= {""Line"",""Rectangle"",""Circle""};         jcbShape = new JComboBox(items);         jpGraph = new WGraph();         Container container = getContentPane();         container.add(jpGraph);         container.add(jcbShape,BorderLayout.NORTH);         jcbShape.addActionListener(this);         setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         setSize(300,400);     }     @Override     public void actionPerformed(ActionEvent evt)     {         String sShape = (String)jcbShape.getSelectedItem();         jpGraph.setShape(sShape);     }     public static void main(String[] st)     {         SwingUtilities.invokeLater( new Runnable()         {             @Override             public void run()             {                 MyFrame myFrame = new MyFrame();                 myFrame.prepareGUI();                 myFrame.setVisible(true);             }         });     } } class WGraph extends JPanel {     private String sShape = ""Line"";     public void setShape(String shape)     {         sShape = shape;         repaint();     }     @Override     public void paintComponent(Graphics g)     {         super.paintComponent(g);         if (""Line"".equalsIgnoreCase(sShape))         {             g.drawLine(10, 20, 100, 200);         }         else if (""Circle"".equalsIgnoreCase(sShape))         {             g.drawOval(50, 100 , 200, 200);         }         else if (""Rectangle"".equalsIgnoreCase(sShape))         {             g.drawRect(10, 20, 150, 200);         }     } }"
"import javax.swing.DefaultDesktopManager; import javax.swing.DesktopManager; import javax.swing.JDesktopPane; import javax.swing.JFrame; import javax.swing.JInternalFrame; import javax.swing.SwingUtilities; import java.awt.BorderLayout; import java.awt.Dimension;  public class CustomDesktopManager extends DefaultDesktopManager {     @Override     public void iconifyFrame(JInternalFrame f) {         super.iconifyFrame(f);          JInternalFrame.JDesktopIcon icon = f.getDesktopIcon();         Dimension prefSize = icon.getPreferredSize();         icon.setBounds(f.getX(), f.getY(), prefSize.width, prefSize.height);     }      public static void main(String args[]) {         SwingUtilities.invokeLater(new Runnable() {             public void run() {                 JFrame frame = new JFrame();                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                  JDesktopPane desktopPane = new JDesktopPane();                 DesktopManager dm = new CustomDesktopManager();                 desktopPane.setDesktopManager(dm);                 JInternalFrame internalFrame = new JInternalFrame(""Test Internal Frame"", true, false, true, true);                 internalFrame.setSize(200, 150);                 internalFrame.setVisible(true);                 desktopPane.add(internalFrame);                  frame.add(desktopPane, BorderLayout.CENTER);                 frame.setSize(800, 600);                 frame.setVisible(true);             }         });     } }"
"import java.awt.Dimension; import java.awt.EventQueue; import java.awt.Graphics; import java.awt.image.BufferedImage; import java.io.File; import java.io.FileNotFoundException; import java.io.IOException; import javax.imageio.ImageIO; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel;  public class Imager {      public static void main(String[] args) {         EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 JFrame frame = new JFrame();                 frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                 frame.add(new ImagePanel(""image.jpg""));                 frame.pack();                 frame.setVisible(true);             }         });     }      private static class ImagePanel extends JPanel {          BufferedImage img;          ImagePanel(String name) {             this.setToolTipText(name);             this.add(new JLabel(name));             try {                 img = ImageIO.read(new File(name));                 this.setPreferredSize(new Dimension(                     img.getWidth(), img.getHeight()));             } catch (FileNotFoundException e) {                 e.printStackTrace();             } catch (IOException e) {                 e.printStackTrace();             }         }          @Override         protected void paintComponent(Graphics g) {             // super.paintComponent(g);             g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), null);         }     } }"
"import java.awt.Canvas; import java.io.File;  import javax.swing.JFrame;  import org.eclipse.swt.SWT; import org.eclipse.swt.SWTError; import org.eclipse.swt.awt.SWT_AWT; import org.eclipse.swt.browser.Browser; import org.eclipse.swt.events.SelectionAdapter; import org.eclipse.swt.events.SelectionEvent; import org.eclipse.swt.layout.FillLayout; import org.eclipse.swt.layout.GridData; import org.eclipse.swt.ole.win32.OLE; import org.eclipse.swt.ole.win32.OleClientSite; import org.eclipse.swt.ole.win32.OleFrame; import org.eclipse.swt.widgets.Display; import org.eclipse.swt.widgets.FileDialog; import org.eclipse.swt.widgets.Menu; import org.eclipse.swt.widgets.MenuItem; import org.eclipse.swt.widgets.Shell;   public class AbrirWordJFrame {     static OleClientSite clientSite;     static OleFrame frame;      public static void main(String[] args) {         final Display display = new Display();         final Shell shell = new Shell(display);          JFrame jframe=new JFrame(""Mi jframe"");         final Canvas canvas=new Canvas();         jframe.getContentPane().add(canvas);         jframe.setSize(800, 600);         jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         jframe.setVisible(true);          display.asyncExec(new Runnable() {             public void run() {                 Shell shell = SWT_AWT.new_Shell(display, canvas);                 shell.setSize(800, 600);                  //abrimos un word                 shell.setText(""Word Example"");                 shell.setLayout(new FillLayout());                 try {                     frame = new OleFrame(shell, SWT.NONE);                     //esto abre un documento existente                     clientSite = new OleClientSite(frame, SWT.NULL, new File(""prueba.doc""));                     //esto abre un documento en blanco //                  clientSite = new OleClientSite(frame, SWT.NONE, ""Word.Document"");                     addFileMenu(frame);                 } catch (SWTError e) {                     System.out.println(""Unable to open activeX control"");                     display.dispose();                     return;                 }                 //fin abrimos un word                 //abrimos un navegador //              Browser browser = new Browser(shell, SWT.NONE); //              browser.setLayoutData(new GridData(GridData.FILL_BOTH)); //              browser.setSize(800, 600); //              browser.setUrl(""http://www.google.com"");                 //fin abrimos un navegador                 shell.open();              }         });          //el titulo //      shell.setText(""Word Example""); //      shell.setLayout(new FillLayout()); //      try { //          frame = new OleFrame(shell, SWT.NONE); //          //esto abre un documento existente //          clientSite = new OleClientSite(frame, SWT.NULL, new File(""prueba.doc"")); //          //esto abre un documento en blanco ////            clientSite = new OleClientSite(frame, SWT.NONE, ""Word.Document""); //          addFileMenu(frame); //      } catch (SWTError e) { //          System.out.println(""Unable to open activeX control""); //          display.dispose(); //          return; //      } //      shell.setSize(800, 600); //      shell.open(); //               while (!shell.isDisposed()) {             if (!display.readAndDispatch())                 display.sleep();         }         display.dispose();     }      static void addFileMenu(OleFrame frame) {         final Shell shell = frame.getShell();         Menu menuBar = shell.getMenuBar();         if (menuBar == null) {             menuBar = new Menu(shell, SWT.BAR);             shell.setMenuBar(menuBar);         }         MenuItem fileMenu = new MenuItem(menuBar, SWT.CASCADE);         fileMenu.setText(""&amp;File"");         Menu menuFile = new Menu(fileMenu);         fileMenu.setMenu(menuFile);         frame.setFileMenus(new MenuItem[] { fileMenu });          MenuItem menuFileOpen = new MenuItem(menuFile, SWT.CASCADE);         menuFileOpen.setText(""Open..."");         menuFileOpen.addSelectionListener(new SelectionAdapter() {             public void widgetSelected(SelectionEvent e) {                 fileOpen();             }         });         MenuItem menuFileExit = new MenuItem(menuFile, SWT.CASCADE);         menuFileExit.setText(""Exit"");         menuFileExit.addSelectionListener(new SelectionAdapter() {             public void widgetSelected(SelectionEvent e) {                 shell.dispose();             }         });     }      static void fileOpen() {         FileDialog dialog = new FileDialog(clientSite.getShell(), SWT.OPEN);         dialog.setFilterExtensions(new String[] { ""*.doc"" });         String fileName = dialog.open();         if (fileName != null) {             clientSite.dispose();             clientSite = new OleClientSite(frame, SWT.NONE, ""Word.Document"", new File(fileName));             clientSite.doVerb(OLE.OLEIVERB_INPLACEACTIVATE);         }     } }"
"package gui;  import java.awt.EventQueue; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.util.ArrayList; import java.util.List; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JPanel;  /**  * @see http://stackoverflow.com/questions/7702697  */ public class GridButtonPanel {      private static final int N = 5;     private final List&lt;JButton&gt; list = new ArrayList&lt;JButton&gt;();      private JButton getGridButton(int r, int c) {         int index = r * N + c;         return list.get(index);     }      private JButton createGridButton(final int row, final int col) {         final JButton b = new JButton(""r"" + row + "",c"" + col);         b.addActionListener(new ActionListener() {              @Override             public void actionPerformed(ActionEvent e) {                 JButton gb = GridButtonPanel.this.getGridButton(row, col);                 System.out.println(""r"" + row + "",c"" + col                     + "" "" + (b == gb)                     + "" "" + (b.equals(gb)));             }         });         return b;     }      private JPanel createGridPanel() {         JPanel p = new JPanel(new GridLayout(N, N));         for (int i = 0; i &lt; N * N; i++) {             int row = i / N;             int col = i % N;             JButton gb = createGridButton(row, col);             list.add(gb);             p.add(gb);         }         return p;     }      private void display() {         JFrame f = new JFrame(""GridButton"");         f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         f.add(createGridPanel());         f.pack();         f.setLocationRelativeTo(null);         f.setVisible(true);     }      public static void main(String[] args) {         EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 new GridButtonPanel().display();             }         });     } }"
"import java.awt.Color; import java.awt.EventQueue; import java.awt.Graphics; import java.awt.Point; import java.util.ArrayList; import java.util.List; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.UIManager; import javax.swing.UnsupportedLookAndFeelException;  public class CoreControl {      public static class Grid extends JPanel {          private List&lt;Point&gt; fillCells;          public Grid() {             fillCells = new ArrayList&lt;&gt;(25);         }          @Override         protected void paintComponent(Graphics g) {             super.paintComponent(g);             for (Point fillCell : fillCells) {                 int cellX = 10 + (fillCell.x * 10);                 int cellY = 10 + (fillCell.y * 10);                 g.setColor(Color.RED);                 g.fillRect(cellX, cellY, 10, 10);             }             g.setColor(Color.BLACK);             g.drawRect(10, 10, 800, 500);              for (int i = 10; i &lt;= 800; i += 10) {                 g.drawLine(i, 10, i, 510);             }              for (int i = 10; i &lt;= 500; i += 10) {                 g.drawLine(10, i, 810, i);             }         }          public void fillCell(int x, int y) {             fillCells.add(new Point(x, y));             repaint();         }      }      public static void main(String[] a) {         EventQueue.invokeLater(new Runnable() {             @Override             public void run() {                 try {                     UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());                 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {                 }                  Grid grid = new Grid();                 JFrame window = new JFrame();                 window.setSize(840, 560);                 window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                 window.add(grid);                 window.setVisible(true);                 grid.fillCell(0, 0);                 grid.fillCell(79, 0);                 grid.fillCell(0, 49);                 grid.fillCell(79, 49);                 grid.fillCell(39, 24);             }         });     } }"
import java.util.*; import javax.ws.rs.core.Application; import org.eclipse.persistence.jaxb.rs.MOXyJsonProvider;  public class MyApplication  extends Application {      @Override     public Set&lt;Class&lt;?&gt;&gt; getClasses() {         HashSet&lt;Class&lt;?&gt;&gt; set = new HashSet&lt;Class&lt;?&gt;&gt;(1);         set.add(SubscriptionResource.class);         return set;     }      @Override     public Set&lt;Object&gt; getSingletons() {         MOXyJsonProvider moxyJsonProvider = new MOXyJsonProvider();         moxyJsonProvider.setIncludeRoot(true);          HashSet&lt;Object&gt; set = new HashSet&lt;Object&gt;(1);         set.add(moxyJsonProvider);         return set;     }  }
"import java.awt.Color; import java.awt.Desktop; import java.awt.Graphics2D; import java.awt.RenderingHints; import java.awt.image.BufferedImage; import java.io.File; import java.io.FileOutputStream; import java.io.IOException;  import javax.imageio.ImageIO; import javax.swing.JLabel; import javax.swing.SwingUtilities;  class TestPaint {      protected void initUI() {         StringBuilder sb = new StringBuilder(""&lt;html&gt;"");         sb.append(""&lt;table&gt;"");         for (int i = 0; i &lt; 5; i++) {             sb.append(""&lt;tr&gt;"");             for (int j = 0; j &lt; 5; j++) {                 sb.append(""&lt;td&gt;"");                 sb.append(""Cell "").append(i + 1).append(' ').append(j + 1);                 sb.append(""&lt;/td&gt;"");             }             sb.append(""&lt;/tr&gt;"");         }         sb.append(""&lt;/table&gt;"");         JLabel label = new JLabel(sb.toString());         label.setSize(label.getPreferredSize());         BufferedImage image = new BufferedImage(label.getWidth(), label.getHeight(), BufferedImage.TYPE_INT_ARGB);         Graphics2D g2d = (Graphics2D) image.getGraphics();         g2d.setColor(Color.WHITE);         g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);         label.paint(g2d);         g2d.dispose();         File file = new File(""/tmp/test.png"");         if (!file.getParentFile().exists()) {             file.getParentFile().mkdirs();         }         FileOutputStream baos = null;         try {             baos = new FileOutputStream(file);             ImageIO.write(image, ""png"", baos);           Desktop.getDesktop().open(file);         } catch (IOException e) {             e.printStackTrace();         } finally {             if (baos != null) {                 try {                     baos.close();                 } catch (IOException e) {                     e.printStackTrace();                 }             }         }      }      public static void main(String[] args) {         SwingUtilities.invokeLater(new Runnable() {             @Override             public void run() {                 new TestPaint().initUI();             }          });     } }"
"import java.awt.EventQueue; import java.awt.GridLayout; import java.awt.event.ActionEvent; import java.awt.event.WindowAdapter; import java.awt.event.WindowEvent; import javax.swing.AbstractAction; import javax.swing.JButton; import javax.swing.JDialog; import javax.swing.JLabel;  /**  * @see https://stackoverflow.com/questions/8336161  * @see https://stackoverflow.com/questions/6163606  */ public class DialogEventTest extends JDialog {      public DialogEventTest() {         this.setLayout(new GridLayout(0, 1));         this.add(new JLabel(""Dialog event test."", JLabel.CENTER));         this.add(new JButton(new AbstractAction(""Close"") {              @Override             public void actionPerformed(ActionEvent e) {                 DialogEventTest.this.setVisible(false);                 DialogEventTest.this.dispatchEvent(new WindowEvent(                     DialogEventTest.this, WindowEvent.WINDOW_CLOSING));             }         }));         this.addWindowListener(new WindowAdapter() {              @Override             public void windowClosing(WindowEvent e) {                 System.out.println(e.paramString());             }         });     }      private void display() {         this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);         this.pack();         this.setLocationRelativeTo(null);         this.setVisible(true);     }      public static void main(String[] args) {         EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 new DialogEventTest().display();             }         });         new Thread(new Runnable() {              @Override             public void run() {                 System.out.println(""Starting…"");                 for (int i = 0; i &lt; 5; i++) {                     try {                         Thread.sleep(1000);                         System.out.println((i + 1) + ""s. elapsed."");                     } catch (InterruptedException e) {                         e.printStackTrace(System.err);                     }                 }                 System.out.println(""Finished."");             }         }).start();     } }"
"import java.awt.Component; import java.awt.Container; import java.awt.Dimension; import java.awt.LayoutManager2; import java.util.Random; import java.util.Set; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import com.google.common.collect.Sets;   public class VerticalFlowLayout implements LayoutManager2 {     final private Set&lt;Component&gt; components = Sets.newLinkedHashSet();     private int hgap = 0;     private int vgap = 0;      public void setHGap(int hgap) { this.hgap = hgap; }     public void setVGap(int vgap) { this.vgap = vgap; }      @Override public void addLayoutComponent(Component comp, Object constraints) {         this.components.add(comp);     }      /* these 3 methods need to be overridden properly */     @Override public float getLayoutAlignmentX(Container target) {         // TODO Auto-generated method stub         return 0;     }      @Override public float getLayoutAlignmentY(Container target) {         // TODO Auto-generated method stub         return 0;     }      @Override public void invalidateLayout(Container target) {         // TODO Auto-generated method stub      }       @Override public void addLayoutComponent(String name, Component comp) {         this.components.add(comp);     }      @Override public void layoutContainer(Container parent) {         int x = 0;         int y = 0;         int columnWidth = 0;         for (Component c : this.components)         {             if (c.isVisible())             {                 Dimension d = c.getPreferredSize();                 columnWidth = Math.max(columnWidth, d.width);                 if (y+d.height &gt; parent.getHeight())                 {                     x += columnWidth + this.hgap;                     y = 0;                 }                 c.setBounds(x, y, d.width, d.height);                 y += d.height + this.vgap;                           }         }            }      /* these 3 methods need to be overridden properly */     @Override public Dimension minimumLayoutSize(Container parent) {         return new Dimension(0,0);     }      @Override public Dimension preferredLayoutSize(Container parent) {         return new Dimension(200,200);     }      @Override public Dimension maximumLayoutSize(Container target) {         return new Dimension(600,600);     }       @Override public void removeLayoutComponent(Component comp) {         this.components.remove(comp);     }      public static void main(String[] args) {         JFrame frame = new JFrame(""VerticalFlowLayoutTest"");             VerticalFlowLayout vfl = new VerticalFlowLayout();         JPanel panel = new JPanel(vfl);         vfl.setHGap(20);         vfl.setVGap(2);         int n = 19;         Random r = new Random(12345);         for (int i = 0; i &lt; n; ++i)         {             JLabel label = new JLabel(labelName(i,r));             panel.add(label);         }          frame.setContentPane(panel);         frame.pack();         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setVisible(true);     }      private static String labelName(int i, Random r) {         StringBuilder sb = new StringBuilder();         sb.append(""label #"");         sb.append(i);         sb.append("" "");         int n = r.nextInt(26);         for (int j = 0; j &lt; n; ++j)             sb.append(""_"");         return sb.toString();     } }"
"package gui;  import java.awt.BorderLayout; import java.awt.EventQueue; import java.awt.event.ActionEvent; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import javax.swing.AbstractAction; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.JLabel;  /**  * @see http://stackoverflow.com/a/20116944/230513  */ public class PrevNext {      private final List&lt;String&gt; list = new ArrayList&lt;&gt;(         Arrays.asList(""Alpher"", ""Bethe"", ""Gamow"", ""Dirac"", ""Einstein""));     private int index = list.indexOf(""Einstein"");     private final JLabel label = new JLabel(list.get(index), JLabel.CENTER);      private void display() {         JFrame f = new JFrame(""PrevNext"");         f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         f.add(new JButton(new AbstractAction(""&lt;Prev"") {              @Override             public void actionPerformed(ActionEvent e) {                 if (--index &lt; 0) {                     index = list.size() - 1;                 }                 update();             }         }), BorderLayout.LINE_START);         f.add(label);         f.add(new JButton(new AbstractAction(""Next&gt;"") {              @Override             public void actionPerformed(ActionEvent e) {                 if (++index == list.size()) {                     index = 0;                 }                 update();             }         }), BorderLayout.LINE_END);         f.pack();         f.setLocationRelativeTo(null);         f.setVisible(true);     }      private void update() {         label.setText(list.get(index));     }      public static void main(String[] args) {         EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 new PrevNext().display();             }         });     } }"
"import java.awt.Dimension; import java.awt.EventQueue; import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.Point; import java.awt.event.MouseEvent; import java.awt.event.MouseMotionListener; import java.awt.image.BufferedImage; import javax.swing.Icon; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.UIManager;  /** @see http://stackoverflow.com/questions/2900801 */ public class Grid extends JPanel implements MouseMotionListener {      private final BufferedImage img;     private int imgW, imgH, paneW, paneH;      public Grid(String name) {         super(true);         Icon icon = UIManager.getIcon(name);         imgW = icon.getIconWidth();         imgH = icon.getIconHeight();         this.setPreferredSize(new Dimension(imgW * 10, imgH * 10));         img = new BufferedImage(imgW, imgH, BufferedImage.TYPE_INT_ARGB);         Graphics2D g2d = (Graphics2D) img.getGraphics();         icon.paintIcon(null, g2d, 0, 0);         g2d.dispose();         this.addMouseMotionListener(this);     }      @Override     protected void paintComponent(Graphics g) {         paneW = this.getWidth();         paneH = this.getHeight();         g.drawImage(img, 0, 0, paneW, paneH, null);     }      @Override     public void mouseMoved(MouseEvent e) {         Point p = e.getPoint();         int x = p.x * imgW / paneW;         int y = p.y * imgH / paneH;         int c = img.getRGB(x, y);         this.setToolTipText(x + "","" + y + "": ""             + String.format(""%08X"", c));     }      @Override     public void mouseDragged(MouseEvent e) {     }      private static void create() {         JFrame f = new JFrame();         f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         f.add(new Grid(""Tree.closedIcon""));         f.pack();         f.setVisible(true);     }      public static void main(String[] args) {         EventQueue.invokeLater(new Runnable() {              @Override             public void run() {                 create();             }         });     } }"
"import java.util.HashMap; import java.util.Map; import javax.xml.bind.annotation.*; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import org.eclipse.persistence.oxm.annotations.XmlPath;  @XmlRootElement @XmlAccessorType(XmlAccessType.FIELD) public class Foo {     @XmlJavaTypeAdapter(MyMapAdapter.class)     @XmlPath(""."")     Map&lt;Integer, String&gt; map = new HashMap&lt;Integer, String&gt;();      public Map&lt;Integer, String&gt; getMap() {         return map;     }      public void setMap(Map&lt;Integer, String&gt; map) {         this.map = map;     } }"
"import java.awt.Desktop; import java.awt.EventQueue; import java.awt.GridBagLayout; import java.awt.event.ActionEvent; import java.io.IOException; import java.net.MalformedURLException; import java.net.URISyntaxException; import java.net.URL; import java.util.logging.Level; import java.util.logging.Logger; import javax.swing.AbstractAction; import javax.swing.JButton; import javax.swing.JFrame; import javax.swing.UIManager; import javax.swing.UnsupportedLookAndFeelException;  public class LinkButtonExample {      public static void main(String[] args) {         new LinkButtonExample();     }      public LinkButtonExample() {         EventQueue.invokeLater(new Runnable() {             @Override             public void run() {                 try {                     try {                         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());                     } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {                     }                      JFrame frame = new JFrame(""Testing"");                     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                     frame.setLayout(new GridBagLayout());                     frame.add(new JButton(new OpenURLAction(new URL(""http://stackoverflow.com/""))));                     frame.pack();                     frame.setLocationRelativeTo(null);                     frame.setVisible(true);                 } catch (MalformedURLException ex) {                     ex.printStackTrace();                 }             }         });     }      public class OpenURLAction extends AbstractAction {          private URL url;          public OpenURLAction(URL url) {              this(""&lt;HTML&gt;Click the &lt;FONT color=\\\""#000099\\\""&gt;&lt;U&gt;link&lt;/U&gt;&lt;/FONT&gt; to go to the website.&lt;/HTML&gt;"", url);          }          public OpenURLAction(String text, URL url) {              putValue(NAME, text);             setURL(url);          }          public void setURL(URL url) {             this.url = url;             setEnabled(                             url != null                             &amp;&amp; Desktop.isDesktopSupported()                             &amp;&amp; Desktop.getDesktop().isSupported(Desktop.Action.BROWSE));             putValue(SHORT_DESCRIPTION, url == null ? null : url.toString());         }          public URL getURL() {             return url;         }          @Override         public void actionPerformed(ActionEvent e) {              if (isEnabled()) {                  URL url = getURL();                 if (url != null &amp;&amp; Desktop.isDesktopSupported()                                 &amp;&amp; Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {                     try {                         Desktop.getDesktop().browse(url.toURI());                     } catch (    IOException | URISyntaxException ex) {                         ex.printStackTrace();                     }                 }              }          }     } }"
"package name.seller.rich.classwizard.actions;  import java.util.Collections;  import org.eclipse.core.commands.AbstractHandler; import org.eclipse.core.commands.ExecutionEvent; import org.eclipse.core.commands.ExecutionException; import org.eclipse.core.expressions.EvaluationContext; import org.eclipse.core.resources.IFile; import org.eclipse.core.resources.IResource; import org.eclipse.core.runtime.CoreException; import org.eclipse.core.runtime.NullProgressMonitor; import org.eclipse.jdt.core.ICompilationUnit; import org.eclipse.jdt.core.IJavaElement; import org.eclipse.jdt.core.IType; import org.eclipse.jdt.core.JavaModelException; import org.eclipse.jdt.internal.ui.JavaPlugin; import org.eclipse.jdt.internal.ui.actions.SelectionConverter; import org.eclipse.jdt.ui.wizards.NewClassWizardPage; import org.eclipse.jface.viewers.IStructuredSelection; import org.eclipse.swt.widgets.Display; import org.eclipse.ui.IWorkbenchPage; import org.eclipse.ui.IWorkbenchPart; import org.eclipse.ui.IWorkbenchWindow; import org.eclipse.ui.PartInitException; import org.eclipse.ui.handlers.HandlerUtil; import org.eclipse.ui.ide.IDE; import org.eclipse.ui.wizards.newresource.BasicNewResourceWizard;  public class GenerateClassHandler extends AbstractHandler {      public GenerateClassHandler() {     }      public Object execute(ExecutionEvent event) throws ExecutionException {         NewClassWizardPage page = new NewClassWizardPage();          EvaluationContext evaluationContext = (EvaluationContext) event                 .getApplicationContext();          IWorkbenchPart activePart = (IWorkbenchPart) evaluationContext                 .getVariable(""activePart"");         try {             IStructuredSelection selection = SelectionConverter                     .getStructuredSelection(activePart);              IType type = getFirstType(selection);              if (type != null &amp;&amp; type.exists() &amp;&amp; type.isInterface()) {                 page.init(selection);                  String typeName = type.getElementName() + ""Impl"";                 // TODO handle existing type                 page.setTypeName(typeName, true);                  // generate constructors and methods, allow modification                 page.setMethodStubSelection(false, true, true, true);                  page.setSuperInterfaces(Collections.singletonList(type                         .getFullyQualifiedName()), true);                 try {                     page.createType(new NullProgressMonitor());                      IResource resource = page.getModifiedResource();                     if (resource != null) {                         IWorkbenchWindow window = HandlerUtil                                 .getActiveWorkbenchWindowChecked(event);                         BasicNewResourceWizard                                 .selectAndReveal(resource, window);                         openResource((IFile) resource, window);                     }                 } catch (CoreException e) {                     // TODO if we get this the type already exists, open a                     // dialogue to allow the type name to be modified or give                     // up?                     logException(e);                 }              }         } catch (JavaModelException e) {             logException(e);         } catch (InterruptedException e) {             logException(e);         }         return null;     }      protected void openResource(final IFile resource,              IWorkbenchWindow window) {         final IWorkbenchPage activePage = window.getActivePage();         if (activePage != null) {             final Display display = window.getShell().getDisplay();             if (display != null) {                 display.asyncExec(new Runnable() {                     public void run() {                         try {                             IDE.openEditor(activePage, resource, true);                         } catch (PartInitException e) {                             logException(e);                         }                     }                 });             }         }     }      @Override     public void setEnabled(Object context) {         if (context != null &amp;&amp; context instanceof EvaluationContext) {             EvaluationContext evaluationContext = (EvaluationContext) context;              IWorkbenchPart activePart = (IWorkbenchPart) evaluationContext                     .getVariable(""activePart"");              try {                 IStructuredSelection selection = SelectionConverter                         .getStructuredSelection(activePart);                  IType type = getFirstType(selection);                  if (type != null) {                     setBaseEnabled(type.isInterface());                     return;                 }             } catch (JavaModelException e) {                 logException(e);             }         }          setBaseEnabled(false);     }      private IType getFirstType(IStructuredSelection selection) {         IJavaElement[] elements = SelectionConverter.getElements(selection);          if (elements != null &amp;&amp; elements.length &gt; 0) {             if (elements[0] != null &amp;&amp; elements[0] instanceof IType) {                 return (IType) elements[0];             }              try {                 if (elements[0] != null                         &amp;&amp; elements[0] instanceof ICompilationUnit) {                     IType[] types = ((ICompilationUnit) elements[0])                             .getAllTypes();                      if (types != null &amp;&amp; types.length &gt; 0) {                         return types[0];                     }                 }             } catch (JavaModelException e) {                 logException(e);             }         }         return null;     }      protected void logException(Exception e) {         JavaPlugin.log(e);     } }"
"import java.awt.*; import java.awt.geom.*; import java.awt.image.*; import java.io.*; import java.net.*; import javax.imageio.*; import javax.swing.*;  public class RotateImage {     public static void main(String[] args) throws IOException {         URL url = new URL(""http://www.oracle.com/us/assets/im04t0-java-logo-1862786.jpg"");         BufferedImage original = ImageIO.read(url);         GraphicsConfiguration gc = getDefaultConfiguration();         BufferedImage rotated1 = tilt(original, -Math.PI/2, gc);         BufferedImage rotated2 = tilt(original, +Math.PI/4, gc);         BufferedImage rotated3 = tilt(original, Math.PI, gc);         display(original, rotated1, rotated2, rotated3);     }      public static BufferedImage tilt(BufferedImage image, double angle, GraphicsConfiguration gc) {         double sin = Math.abs(Math.sin(angle)), cos = Math.abs(Math.cos(angle));         int w = image.getWidth(), h = image.getHeight();         int neww = (int)Math.floor(w*cos+h*sin), newh = (int)Math.floor(h*cos+w*sin);         int transparency = image.getColorModel().getTransparency();         BufferedImage result = gc.createCompatibleImage(neww, newh, transparency);         Graphics2D g = result.createGraphics();         g.translate((neww-w)/2, (newh-h)/2);         g.rotate(angle, w/2, h/2);         g.drawRenderedImage(image, null);         return result;     }      public static GraphicsConfiguration getDefaultConfiguration() {         GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();         GraphicsDevice gd = ge.getDefaultScreenDevice();         return gd.getDefaultConfiguration();     }      public static void display(BufferedImage im1, BufferedImage im2, BufferedImage im3, BufferedImage im4) {         JPanel cp = new JPanel(new GridLayout(2,2));         addImage(cp, im1, ""original"");         addImage(cp, im2, ""rotate -PI/2"");         addImage(cp, im3, ""rotate +PI/4"");         addImage(cp, im4, ""rotate PI"");          JFrame f = new JFrame(""RotateImage"");         f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         f.setContentPane(cp);         f.pack();         f.setLocationRelativeTo(null);         f.setVisible(true);     }      static void addImage(Container cp, BufferedImage im, String title) {         JLabel lbl = new JLabel(new ImageIcon(im));         lbl.setBorder(BorderFactory.createTitledBorder(title));         cp.add(lbl);     } }"
"import java.awt.Image; import java.awt.Rectangle; import java.awt.image.BufferedImage; import java.io.IOException; import java.io.InputStream; import java.net.URL;  import javax.imageio.ImageIO; import javax.imageio.ImageReadParam; import javax.imageio.ImageReader; import javax.imageio.stream.ImageInputStream; import javax.swing.*;  public class TestImageChunks {     private static void createAndShowUI() {         try {             URL url = new URL(                     ""http://duke.kenai.com/wave/.Midsize/Wave.png.png"");             Image chunk = readFragment(url.openStream(), new Rectangle(150,                     150, 300, 250));             JOptionPane.showMessageDialog(null, new ImageIcon(chunk), ""Duke"",                      JOptionPane.INFORMATION_MESSAGE);         } catch (IOException e) {             JOptionPane.showMessageDialog(null, e.getMessage(), ""Failure"",                     JOptionPane.ERROR_MESSAGE);             e.printStackTrace();         }     }      public static BufferedImage readFragment(InputStream stream, Rectangle rect)             throws IOException {         ImageInputStream imageStream = ImageIO.createImageInputStream(stream);         ImageReader reader = ImageIO.getImageReaders(imageStream).next();         ImageReadParam param = reader.getDefaultReadParam();          param.setSourceRegion(rect);         reader.setInput(imageStream, true, true);         BufferedImage image = reader.read(0, param);          reader.dispose();         imageStream.close();          return image;     }      public static void main(String[] args) {         SwingUtilities.invokeLater(new Runnable() {             public void run() {                 createAndShowUI();             }         });     } }"
