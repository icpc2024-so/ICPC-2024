code
"import org.apache.camel.builder.RouteBuilder; import org.apache.camel.impl.DefaultCamelContext;  public class WorkflowManager {      DefaultCamelContext camelContext;      public WorkflowManager() {         camelContext = new DefaultCamelContext();         RouteBuilder routeBuilder = new RouteBuilder() {              @Override             public void configure() throws Exception {                 from(""timer:schedule?period=1s&amp;daemon=true"").process(new ProcessOne()).process(new ProcessTwo());             }         };         try {             camelContext.addRoutes(routeBuilder);         } catch (Exception e) {             e.printStackTrace();         }     }      public void start() throws Exception {         camelContext.start();     }      public void stop() throws Exception {         camelContext.stop();     }      public static void main(String[] args) {         WorkflowManager workflowManager = new WorkflowManager();         try {             workflowManager.start();             while(true) {              }         } catch (Exception e) {             e.printStackTrace();         }     } }"
"public class CamelProxy {  /**  * @param args  */ public static void main(String[] args) throws Exception {     CamelContext context = new DefaultCamelContext();      final Endpoint jettyEndpoint = configureJetty(context);      final Endpoint https4Endpoint = configureHttpClient(context);      context.addRoutes(new RouteBuilder() {          @Override         public void configure() {             from(jettyEndpoint).to(""log:com.smithforge.request?showAll=true"").to(https4Endpoint);         }     });      context.start();      context.stop(); }  private static Endpoint configureHttpClient(CamelContext context) throws Exception {     KeyStore keystore = KeyStore.getInstance(""PKCS12"");     keystore.load(new FileInputStream(new File(""/home/brian/User2.p12"")), ""Password1234!"".toCharArray());      KeyStore truststore = KeyStore.getInstance(""JKS"");     truststore.load(new FileInputStream(new File(""/home/brian/jboss.truststore"")), ""changeit"".toCharArray());      KeyManagerFactory keyFactory = KeyManagerFactory.getInstance(""SunX509"");     keyFactory.init(keystore, ""Password1234!"".toCharArray());      TrustManagerFactory trustFactory = TrustManagerFactory.getInstance(""SunX509"");     trustFactory.init(truststore);      SSLContext sslcontext = SSLContext.getInstance(""TLSv1"");     sslcontext.init(keyFactory.getKeyManagers(), trustFactory.getTrustManagers(), null);      SSLSocketFactory factory = new SSLSocketFactory(sslcontext, SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);      SchemeRegistry registry = new SchemeRegistry();     final Scheme scheme = new Scheme(""https4"", 443, factory);     registry.register(scheme);      HttpComponent http4 = context.getComponent(""http4"", HttpComponent.class);     http4.setHttpClientConfigurer(new HttpClientConfigurer() {          @Override         public void configureHttpClient(HttpClient client) {             client.getConnectionManager().getSchemeRegistry().register(scheme);         }      });     http4.setClientConnectionManager(new ThreadSafeClientConnManager());     return http4             .createEndpoint(""https4://soafa-lite-staging:443/axis2/services/SigActService?bridgeEndpoint=true&amp;throwExceptionOnFailure=false""); }  private static Endpoint configureJetty(CamelContext context) throws Exception {     JettyHttpComponent jetty = context.getComponent(""jetty"", JettyHttpComponent.class);      SslSelectChannelConnector sslConnector = new SslSelectChannelConnector();     sslConnector.setPort(4443);     sslConnector.setKeystore(""/home/brian/jboss.keystore"");     sslConnector.setKeyPassword(""changeit"");     sslConnector.setTruststore(""/home/brian/jboss.truststore"");     sslConnector.setTrustPassword(""changeit"");     sslConnector.setPassword(""changeit"");     sslConnector.setNeedClientAuth(true);     sslConnector.setAllowRenegotiate(true);      Map&lt;Integer, SslSelectChannelConnector&gt; connectors = new HashMap&lt;Integer, SslSelectChannelConnector&gt;();     connectors.put(4443, sslConnector);      jetty.setSslSocketConnectors(connectors);     return jetty.createEndpoint(""jetty:https://localhost:4443/service""); }  // .to(""log:com.smithforge.response?showHeaders=true""); }"
"public static void main(String[] args) throws InterruptedException {     final List&lt;Integer&gt; list = new CopyOnWriteArrayList&lt;Integer&gt;();     list.addAll(Arrays.asList(1, 2, 3));     new Thread(new Runnable() {          @Override         public void run() {             for (Integer i : list) {                 System.out.println(""Iterator 1 - "" + i);                 try {                     Thread.sleep(10);                 } catch (InterruptedException e) {}             }         }     }).start();     Thread.sleep(10);     list.add(4);     System.out.println(""4 has been added"");     for (Integer i : list) {         System.out.println(""Iterator 2 - "" + i);     }  }"
"public class MyApp_ServiceManagement {     static boolean isMsgToDisplay = false;      /////////////////////////////     public static boolean serviceInit()     {         (new Thread()         {             public void run()             {                 for(int i=0;i &lt; 6;i++)                 {                      try { sleep(5*1000); }                      catch(Exception ex) {}                       isMsgToDisplay = true;                 }             }         }).start();          return true;     }      /// is Data ready to be send to the UI ?     public static boolean serviceIsDataForUI()     {         return isMsgToDisplay;     }      /// Data to be send to the UI     public static Serializable serviceDataForUI()     {         isMsgToDisplay = false;         return ""hello, I am an interactive Service"";     } }"
public void open() throws InterruptedException {     Display display = Display.getDefault();     createContents();     shell.open();      Thread updateThread = new Thread() {         public void run() {             while (true) {                 final ArrayList&lt;Request&gt; pendingRequests = getPendingRequests();                 Display.getDefault().syncExec(new Runnable() {                      @Override                     public void run() {                         populateList(pendingRequests);                     }                 });                  try {                     Thread.sleep(1000);                 } catch (InterruptedException e) {                     e.printStackTrace();                 }             }         }     };     // background thread     updateThread.setDaemon(true);     updateThread.start();      while (!shell.isDisposed()) {         if (!display.readAndDispatch()) {             display.sleep();         }     } }
"import java.awt.*; import java.awt.event.*; import javax.swing.*;  public class AppletEg extends JApplet {    private static final int MAX_LOOP = 30;    private static final long SLEEP_TIME = 500;    private JFrame console;    private JTextArea consoleText;    private Thread gameThread;     @Override    public void init() {       console = new JFrame();       console.setSize(500, 300);       console.addWindowListener(new WindowAdapter() {          public void windowClosing(WindowEvent e) {             console.setVisible(false);          }       });        consoleText = new JTextArea();       consoleText.setPreferredSize(new Dimension(500, 300));        console.add(new JScrollPane(consoleText));        console.setVisible(true);        gameThread = new Thread() {          public void run() {             mainLoop();          }       };       gameThread.start();    }     private void mainLoop() {       for (int i = 0; i &lt; MAX_LOOP; i++) {          System.out.println(""I: "" + i);          try {             Thread.sleep(SLEEP_TIME);          } catch (InterruptedException e) {          }       }    } }"
"public class TestMain {     public static void main(String a[]) throws InterruptedException {          List&lt;String&gt; commands = new ArrayList&lt;String&gt;();         commands.add(""telnet"");         commands.add(""www.google.com"");         commands.add(""80"");         ProcessBuilder pb = new ProcessBuilder(commands);         pb.redirectErrorStream(true);         try {              Process prs = pb.start();             Thread inThread = new Thread(new In(prs.getInputStream()));             inThread.start();             Thread.sleep(2000);             OutputStream writeTo = prs.getOutputStream();             writeTo.write(""oops\n"".getBytes());             writeTo.flush();             writeTo.close();          } catch (IOException e) {             e.printStackTrace();         }     } }  class In implements Runnable {     private InputStream is;      public In(InputStream is) {         this.is = is;     }      @Override     public void run() {         byte[] b = new byte[1024];         int size = 0;         try {             while ((size = is.read(b)) != -1) {                 System.err.println(new String(b));             }             is.close();         } catch (IOException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }      } }"
"public class MapSerializationTest {     private static class Foo implements Serializable {     }      public static void main(String[] args) throws Exception {         Foo foo = new Foo();          Map&lt;String, Foo&gt; map1 = new HashMap&lt;String, Foo&gt;();         map1.put(""foo"", foo);         Map&lt;String, Foo&gt; map2 = new HashMap&lt;String, Foo&gt;();         map2.put(""foo"", foo);          ByteArrayOutputStream baos = new ByteArrayOutputStream();         ObjectOutputStream oos = new ObjectOutputStream(baos);         oos.writeObject(map1);         oos.writeObject(map2);         oos.close();          byte[] bytes = baos.toByteArray();          ByteArrayInputStream bais = new ByteArrayInputStream(bytes);         ObjectInputStream ois = new ObjectInputStream(bais);         map1 = (Map&lt;String, Foo&gt;) ois.readObject();         map2 = (Map&lt;String, Foo&gt;) ois.readObject();         System.out.println(map1.get(""foo"") == map2.get(""foo"")); // prints true     } }"
"public static void main(String[] args) {     final int SIZE = 1024*1024; //1 MiB      //simulates downloading a 1 MiB file     final InputStream in = new InputStream() {         int read = 0;         public int read() throws IOException {             if ( read == SIZE ) {                 return -1;             } else {                 if ( read % 200 == 0 ) {                     try { Thread.sleep(1); } catch ( InterruptedException e ) {}                 }                 read++;                 return 5;             }         }     };      final JProgressBar progress = new JProgressBar(0, SIZE);      final JButton button = new JButton(""Start"");     button.addActionListener(new ActionListener() {         @Override         public void actionPerformed(ActionEvent e) {             button.setText(""Working..."");             SwingWorker&lt;byte[], Integer&gt; worker = new SwingWorker&lt;byte[], Integer&gt;() {                 @Override                 protected byte[] doInBackground() throws Exception {                     ByteArrayOutputStream baos = new ByteArrayOutputStream();                     byte[] buff = new byte[1024];                     for ( int read = -1; (read = in.read(buff)) != -1; ) {                         baos.write(buff, 0, read);                         publish(read);                     }                     return baos.toByteArray();                 }                  @Override                 protected void process(List&lt;Integer&gt; chunks) {                     int total = 0;                     for ( Integer amtRead : chunks ) {                         total += amtRead;                     }                     progress.setValue(progress.getValue() + total);                 }                  @Override                 protected void done() {                     try {                         byte[] data = get();                         button.setText(""Read "" + data.length + "" bytes"");                     } catch (Exception e) {                         e.printStackTrace();                     }                 }             };             worker.execute();         }     });      JFrame frame = new JFrame();     frame.setLayout(new BorderLayout());     frame.add(button, BorderLayout.NORTH);     frame.add(progress, BorderLayout.SOUTH);     frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);     frame.pack(); frame.setVisible(true); }"
"public static void main(String[] arguments) {     JFrame frame = new JFrame();     frame.setDefaultCloseOperation(EXIT_ON_CLOSE);      final JProgressBar bar = new JProgressBar(0, 100);      Thread t = new Thread(){         public void run(){             for(int i = 0 ; i &lt; 100 ; i++){                 final int percent = i;                 SwingUtilities.invokeLater(new Runnable() {                     public void run() {                         bar.setValue(percent);                     }                   });                  try {                     Thread.sleep(100);                 } catch (InterruptedException e) {}             }         }     };     frame.add(bar);     frame.pack();     frame.setVisible(true);     t.start(); }"
"private static void runProfile() {     try {         final int noSeconds = 100;         final int sleepMillis = 50;         final int noSamples = noSeconds * 1000 / sleepMillis;          ThreadMXBean thb = ManagementFactory.getThreadMXBean();         Map&lt;String,Integer&gt; blockCounts = new HashMap&lt;String, Integer&gt;(50);         for (int i = 0; i &lt; noSamples ; i++) {             long[] ids = thb.getAllThreadIds();             ThreadInfo[] infs = thb.getThreadInfo(ids, 0);             for (ThreadInfo ti : infs) {                 LockInfo lockInf = ti.getLockInfo();                 if (lockInf != null) {                     String key = lockInf.toString();                     Integer cnt = blockCounts.get(key);                     blockCounts.put(key, cnt == null ? 1 : cnt+1);                 }             }              Thread.sleep(sleepMillis);         }          System.out.println(""Locks:"");         for (String lockName : blockCounts.keySet()) {             System.out.println(lockName + "" : "" + blockCounts.get(lockName));         }     } catch (InterruptedException iex) {         Thread.currentThread().interrupt();     } }"
"import java.awt.*; import java.awt.geom.*; import java.awt.image.BufferedImage; import java.io.*; import org.apache.poi.xslf.usermodel.*;  public class UnicodePPT {     public static void main(String[] args) throws Exception {         // create a sample pptx         XMLSlideShow ss = new XMLSlideShow();         Dimension pgsize = ss.getPageSize();                       XSLFSlide slide = ss.createSlide();         XSLFTextBox tb = slide.createTextBox();         tb.setShapeType(XSLFShapeType.HEART);         int shapeSize = 150;         tb.setAnchor(new Rectangle2D.Double(pgsize.getWidth()/2-shapeSize/2, pgsize.getHeight()/2-shapeSize/2, shapeSize, shapeSize));         tb.setLineWidth(2);         tb.setLineColor(Color.BLACK);         XSLFTextParagraph par = tb.addNewTextParagraph();         tb.setVerticalAlignment(VerticalAlignment.DISTRIBUTED);         par.setTextAlign(TextAlign.CENTER);         XSLFTextRun run = par.addNewTextRun();         run.setText(""/\u02CCin\u0259\u02C8v\u0101SH\u0259n/"");         run.setFontFamily(""DejaVu Serif"");         run.setFontSize(12);         par.addLineBreak();         run = par.addNewTextRun();         run.setText(""/\u02CCin\u0259\u02C8v\u0101SH\u0259n/"");         run.setFontFamily(""GE Inspira"");         run.setFontSize(12);          // set the font         GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();         InputStream is = new FileInputStream(""src/main/resources/GEInspRg.TTF"");         Font font = Font.createFont(Font.TRUETYPE_FONT, is);         is.close();         ge.registerFont(font);            is = new FileInputStream(""src/main/resources/DejaVuSerif.ttf"");         font = Font.createFont(Font.TRUETYPE_FONT, is);         is.close();         ge.registerFont(font);            // render it         double zoom = 2; // magnify it by 2         AffineTransform at = new AffineTransform();         at.setToScale(zoom, zoom);          BufferedImage img = new BufferedImage((int)Math.ceil(pgsize.width*zoom), (int)Math.ceil(pgsize.height*zoom), BufferedImage.TYPE_INT_RGB);         Graphics2D graphics = img.createGraphics();         graphics.setTransform(at);                         graphics.setPaint(Color.white);         graphics.fill(new Rectangle2D.Float(0, 0, pgsize.width, pgsize.height));         slide.draw(graphics);                       FileOutputStream fos = new FileOutputStream(""unicodeppt.png"");         javax.imageio.ImageIO.write(img, ""png"", fos);                fos.close();     } }"
"import java.util.*; import java.lang.*;  class Main {     private static void test (String regex, String replace, int repetitions)     {         long startTime = System.currentTimeMillis();         for (int i = 0; i &lt; repetitions; i++)         {             String str = ""30-Nov-2012 United Kingdom, 31-Oct-2012 31-Oct-2012 United Arab Emirates, 29-Oct-2012 31-Oct-2012 India, "";             str.replaceAll(regex, replace);         }         long endTime = System.currentTimeMillis();         System.out.println(""Execution time: "" + Long.toString(endTime - startTime));     }      public static void main (String[] args) throws java.lang.Exception     {         test(""(\\d{4})\\s"", ""$1@"", 10000);         test(""(?&lt;=\\d{4})\\s"", ""@"", 10000);         test(""(\\d{4})\\s"", ""$1@"", 10000);         test(""(?&lt;=\\d{4})\\s"", ""@"", 10000);         test(""(\\d{4})\\s"", ""$1@"", 10000);         test(""(?&lt;=\\d{4})\\s"", ""@"", 10000);         test(""(\\d{4})\\s"", ""$1@"", 10000);         test(""(?&lt;=\\d{4})\\s"", ""@"", 10000);     } }"
"import java.awt.*; import javax.swing.*; import javax.swing.border.*;  /**  * @author dah01  */ public class T {     public static void main(String[] args) {         JFrame f= new JFrame();              f.setSize(500,500);         f.add(new NotesPanel());         f.setVisible(true);     } } class NotesPanel extends JPanel{     public NotesPanel(){         // -- Setup the layout manager.         setBackground(new Color(199, 187, 192));         setLayout(new GridLayout());           // -- Setup the border for the notes pane.         this.setBorder(new EmptyBorder(8, 3, 8, 3));           // -- Setup the border for the notes pane.         JPanel panel = new JPanel();         panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));         panel.setAlignmentX(JPanel.LEFT_ALIGNMENT);         panel.setBorder(new BevelBorder(BevelBorder.RAISED));             // -- Setup the creator section.         JLabel creatorLabel = new JLabel(""Note by ""+ "" @ "");         creatorLabel.setAlignmentX(JLabel.LEFT_ALIGNMENT);           // -- Setup the notes area.         JTextArea notesContentsArea = new JTextArea(""Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet."");         notesContentsArea.setEditable(false);         notesContentsArea.setLineWrap(true);         notesContentsArea.setWrapStyleWord(true);          JScrollPane scrollPane = new JScrollPane(notesContentsArea);         scrollPane.setAlignmentX(JScrollPane.LEFT_ALIGNMENT);          // -- Setup the edited by label.         JLabel editorLabel = new JLabel("" -- Last edited by ""+"" at "");         editorLabel.setAlignmentX(Component.LEFT_ALIGNMENT);          // -- Add everything to the view.         panel.add(creatorLabel);         panel.add(scrollPane);         panel.add(editorLabel);         this.add(panel);     }     //&lt;/editor-fold&gt;  }"
"import java.awt.*; import java.awt.event.*; import java.awt.geom.RoundRectangle2D; import javax.swing.*;  public class CustomPainting {      private RectangleComponent life;     private RectangleComponent death;      private void createAndDisplayGUI() {         JFrame frame = new JFrame(""Custom Painting"");         frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);          JPanel centerPanel = new JPanel();         centerPanel.setLayout(new GridLayout(0, 2, 5, 5));         // Specifying the WIDTH, HEIGHT and Colour for this JComponent.         life = new RectangleComponent(Color.GREEN.darker(), 20, 20);         death = new RectangleComponent(Color.RED.darker(), 20, 20);         centerPanel.add(life);         centerPanel.add(death);          JPanel buttonPanel = new JPanel();         buttonPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));         JButton incLifeButton = new JButton(""INCREASE LIFE"");         incLifeButton.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 life.addLife(1);             }         });          JButton decLifeButton = new JButton(""DECREASE LIFE"");         decLifeButton.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 life.subtractLife(1);             }         });          JButton incDeathButton = new JButton(""INCREASE DEATH"");         incDeathButton.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 death.addLife(1);             }         });          JButton decDeathButton = new JButton(""DECREASE DEATH"");         decDeathButton.addActionListener(new ActionListener() {             @Override             public void actionPerformed(ActionEvent ae) {                 death.subtractLife(1);             }         });           buttonPanel.add(incLifeButton);         buttonPanel.add(decLifeButton);         buttonPanel.add(incDeathButton);         buttonPanel.add(decDeathButton);          frame.getContentPane().add(centerPanel, BorderLayout.CENTER);         frame.getContentPane().add(buttonPanel, BorderLayout.PAGE_END);         frame.pack();         frame.setLocationByPlatform(true);         frame.setVisible(true);     }      public static void main(String\u005B\u005D args) {         SwingUtilities.invokeLater(new Runnable() {             @Override             public void run() {                 new CustomPainting().createAndDisplayGUI();             }         });     } }  class RectangleComponent extends JComponent {      private Color colour;     private static final int MARGIN = 10;     private int width;     private int height;     private int originalWidth;     private RoundRectangle2D roundedRectangle;      public RectangleComponent(Color c, int w, int h) {         colour = c;         width = w;         height = h;         originalWidth = width;     }      /*      * Overriding this method, so that      * the size of the JComponent      * can be determined, on the screen      * or by the LayoutManager concern.      */     @Override      public Dimension getPreferredSize() {         return (new Dimension(width, height));     }      @Override     protected void paintComponent(Graphics g) {         super.paintComponent(g);         Graphics2D g2d = (Graphics2D) g;         roundedRectangle = new RoundRectangle2D.Float(MARGIN, MARGIN,                                         width, height, MARGIN, MARGIN);         g2d.setPaint(colour);         g2d.draw(roundedRectangle);         g2d.fill(roundedRectangle);     }      public void subtractLife(int amount) {         width -= amount;         System.out.println(""ORIGINAL Width : "" + originalWidth);         System.out.println(""Width : "" + width);         if (width &gt; 0) {             roundedRectangle.setRoundRect(MARGIN, MARGIN, width, height,                                             MARGIN, MARGIN);             /*              * This repaint() will call the paintComponent(...)              * by itself, so nothing else to be done.              */             repaint();         } else {             width += amount;         }     }      public void addLife(int amount) {         width += amount;         System.out.println(""ORIGINAL Width : "" + originalWidth);         System.out.println(""Width : "" + width);         if (width &lt; originalWidth) {             roundedRectangle.setRoundRect(MARGIN, MARGIN, width, height,                                             MARGIN, MARGIN);             repaint();         } else {             width -= amount;         }     } }"
"public class ThreadDemo {    public static void main(String args[]) {         System.out.println(Thread.currentThread());         Runnable r = new MyRunnable();         new Thread(new ThreadGroup(""my group""), r).start();         try {             for (int i = 1; i &lt;= 5; i++) {                 Thread.sleep(1000);             }          } catch (InterruptedException e) {             // TODO Auto-generated catch block             e.printStackTrace();         }     } }  class MyRunnable implements Runnable {      public void run() {         Thread.currentThread().setName(""mythread"");         System.out.println(Thread.currentThread());         for (int i = 1; i &lt;= 5; i++) {             try {                 Thread.sleep(500);                 //System.out.println(""MyThread i value ""+i);              } catch (InterruptedException e) {                 // TODO Auto-generated catch block                 e.printStackTrace();             }         }     } }"
"import java.lang.reflect.Field; import java.lang.reflect.Method; import java.util.ArrayList; import java.util.List;  public class Main {     public static void main(String[] args) throws Exception {         Runnable myRunnable = new Runnable() {             @Override             public void run() {                 try {                     System.out.println(""Start: "" + Thread.currentThread().getName());                     Thread.sleep(100);                 } catch (InterruptedException e) {                     throw new RuntimeException(e);                 }             }         };         Thread one = new Thread(myRunnable);         Thread two = new Thread(myRunnable);         one.start();         two.start();          List&lt;Thread&gt; threads = getThreadsFor(myRunnable);         for (Thread thread : threads)             System.out.println(""Found: "" + thread.getName());     }      private static List&lt;Thread&gt; getThreadsFor(Runnable myRunnable) throws Exception {         Method getThreads = Thread.class.getDeclaredMethod(""getThreads"");         Field target = Thread.class.getDeclaredField(""target"");         target.setAccessible(true);         getThreads.setAccessible(true);         Thread[] threads = (Thread[]) getThreads.invoke(null);         List&lt;Thread&gt; result = new ArrayList&lt;Thread&gt;();         for (Thread thread : threads) {             Object runnable = target.get(thread);             if (runnable == myRunnable)                 result.add(thread);         }         return result;     } }"
"import java.util.*;  public class Frequency {     static void increment(Map&lt;String,Integer&gt; map, String key) {         Integer count = map.get(key);         map.put(key, (count == null ? 0 : count) + 1);     }     public static void main(String[] args) {         String table[][] = new String[][] {             {""127.0.0.9"", ""60"", ""75000"",""UDP"", ""Good""},             {""127.0.0.8"", ""75"", ""75000"",""TCP"", ""Bad""},             {""127.0.0.9"", ""75"", ""70000"",""UDP"", ""Good""},             {""127.0.0.1"", """", ""70000"",""UDP"", ""Good""},             {""127.0.0.1"", ""75"", ""75000"",""TCP"", ""Bad""}         };         final int M = table.length;         final int N = table[0].length;         List&lt;Map&lt;String,Integer&gt;&gt; maps = new ArrayList&lt;Map&lt;String,Integer&gt;&gt;();         for (int i = 0; i &lt; N; i++) {             maps.add(new HashMap&lt;String,Integer&gt;());         }         for (String[] row : table) {             for (int i = 0; i &lt; N; i++) {                                increment(maps.get(i), row[i]);             }         }         for (Map&lt;String,Integer&gt; map : maps) {             System.out.println(map);         }         System.out.println(maps.get(0).get(""127.0.0.9""));     } }"
"import javax.swing.*; import java.awt.event.ActionEvent; import java.awt.event.ActionListener;  /**  * @author Mikle Garin  * @see http://stackoverflow.com/a/18590057/909085  */  public class ButtonSleep {     public static void main ( String[] args )     {         JFrame frame = new JFrame ( ""Custom list renderer"" );          final JButton button = new JButton ( ""Make me sleep 5 seconds"" );         button.addActionListener ( new ActionListener ()         {             @Override             public void actionPerformed ( ActionEvent e )             {                 button.setEnabled ( false );                 new Thread ( new Runnable ()                 {                     @Override                     public void run ()                     {                         try                         {                             Thread.sleep ( 5000 );                         }                         catch ( InterruptedException e1 )                         {                             //                         }                         SwingUtilities.invokeLater ( new Runnable ()                         {                             @Override                             public void run ()                             {                                 button.setEnabled ( true );                             }                         } );                     }                 } ).start ();             }         } );         frame.add ( button );          frame.pack ();         frame.setLocationRelativeTo ( null );         frame.setDefaultCloseOperation ( JFrame.EXIT_ON_CLOSE );         frame.setVisible ( true );     } }"
"SwingWorker&lt;Void, Integer&gt; testTask = new SwingWorker&lt;Void, Integer&gt;() {      private int k;      private void inc() {         this.k++;     }      private void innerLoop(int i) {         for (int j=0; j&lt;100000; j++) {             if (i==j &amp;&amp; i%10000 == 0)                 this.inc();         }     }      @Override     protected Void doInBackground()     throws Exception {         System.out.println(""Started"");         for (int i=0; i&lt;200000; i++) {             this.innerLoop(i);         }         System.out.println(k+"" ""+(System.currentTimeMillis()-start));         return null;     } };"
"import javax.swing.JFrame;  public class TestBackgroudMethod {      public static void main(final String[] args) {          MyBackgroudMethod thread = new MyBackgroudMethod();         thread.setDaemon(true);         thread.start();          java.awt.EventQueue.invokeLater(new Runnable() {             public void run() {                 JFrame jFrame = new JFrame();                 jFrame.setSize(200, 200);                 jFrame.setVisible(true);             }         });     }      public static class MyBackgroudMethod extends Thread {          @Override         public void run() {             while (true) {                 System.out.println(""Executed!"");                 try {                     Thread.sleep(1000);                 } catch (InterruptedException e) {                     e.printStackTrace();                 }             }         }      }  }"
"import javax.swing.*;  class WhereToPutTheGui {      public static void initGui() {         for (int ii=1; ii&lt;4; ii++) {             JFrame f = new JFrame(""Frame "" + ii);             f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);             String s =                 ""os.name: "" + System.getProperty(""os.name"") +                 ""\nos.version: "" + System.getProperty(""os.version"");             f.add(new JTextArea(s,3,28));  // suggest a size             f.pack();             // Let the OS handle the positioning!             f.setLocationByPlatform(true);             f.setVisible(true);         }     }      public static void main(String[] args) {         SwingUtilities.invokeLater( new Runnable() {             public void run() {                 try {                     UIManager.setLookAndFeel(                         UIManager.getSystemLookAndFeelClassName());                 } catch (Exception useDefault) {}                 initGui();             }         });     } }"
"public class AsyncClass extends AsyncTask&lt;Void, String, Void&gt; {     private Context context;     ProgressDialog dialog;          public AsyncClass(Context cxt) {             context = cxt;             dialog = new ProgressDialog(context);         }          @Override         protected void onPreExecute() {             dialog.setTitle(""Please wait"");             dialog.show();         }          @Override         protected Void doInBackground(Void... unused) {             SystemClock.sleep(2000);             return (null);         }          @Override         protected void onPostExecute(Void unused) {             dialog.dismiss();         }     }"
"import java.awt.Dimension; import java.awt.event.*; import javax.swing.*;  @SuppressWarnings(""serial"") public class Convert extends AbstractAction {    private static final long SLEEP_TIME = 3000; // 3 seconds    private String enabledText;    private String disabledText;     public Convert(String enabledText, String disabledText) {       super(enabledText);       this.enabledText = enabledText;       this.disabledText = disabledText;    }     public void actionPerformed(ActionEvent e) {       Object source = e.getSource();       if (!(source instanceof JButton)) {          return;       }       final JButton button = (JButton) source;       setButtonEnabled(button, false);       new SwingWorker&lt;Void, Void&gt;() {          @Override          protected Void doInBackground() throws Exception {             // TODO: long-running code goes here.              // Emulated by Thread.sleep(...)              Thread.sleep(SLEEP_TIME);             return null;          }           @Override          protected void done() {             setButtonEnabled(button, true);          }       }.execute();    }     public void setButtonEnabled(JButton button, boolean enabled) {       if (enabled) {          button.setText(enabledText);          button.setEnabled(true);       } else {          button.setText(disabledText);          button.setEnabled(false);       }    }     private static void createAndShowUI() {       JFrame frame = new JFrame(""Convert"");       frame.getContentPane().add(new ConvertGui());       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       frame.pack();       frame.setLocationRelativeTo(null);       frame.setVisible(true);    }     public static void main(String[] args) {       java.awt.EventQueue.invokeLater(new Runnable() {          public void run() {             createAndShowUI();          }       });    } }  @SuppressWarnings(""serial"") class ConvertGui extends JPanel {    public ConvertGui() {       add(new JButton(new Convert(""GO"", ""Working..."")));    }     @Override    public Dimension getPreferredSize() {       return new Dimension(300, 200);    } }"
"import java.applet.Applet; import java.awt.Color; import java.awt.Graphics; import java.awt.Graphics2D;  public class circles extends Applet implements Runnable {      int x = 0, y = 0;      public void start() {         setSize(500, 500);         setBackground(Color.BLACK);         new Thread(this).start();     }      public void run() {         while (true) {             try {                 update();                 Thread.sleep(50);              } catch (InterruptedException ex) {              }         }     }      public void update() {         x += 5;         y += 6;         repaint();     }      public void paint(Graphics e) {         super.paint(e);         Graphics2D g = (Graphics2D) e;         g.setColor(Color.BLUE);         g.fillOval(x, y, 20, 20);      } }"
"import javax.swing.JFrame; import javax.swing.SwingUtilities;  public class Main {    private static void createAndShowGui() {       int rows = 20;       int cols = 40;       int cellWidth = 20;       ColorGrid mainPanel = new ColorGrid(rows, cols, cellWidth);        JFrame frame = new JFrame(""Color Grid Example"");       frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       frame.getContentPane().add(mainPanel);       frame.pack();       frame.setLocationByPlatform(true);       frame.setVisible(true);    }     public static void main(String[] args) {       SwingUtilities.invokeLater(new Runnable() {          public void run() {             createAndShowGui();          }       });    } }"
"public static void main(String[] args) throws InterruptedException {     List&lt;String&gt; my_words = new LinkedList&lt;String&gt;();     my_words.add(""1153 3494 9509 2 0 0 0 0"");     my_words.add(""1153 3487 9509 2 0 0 0 0"");     my_words.add(""1153 3491 9525 2 0 0 0 0"");     my_words.add(""1153 3464 9513 2 0 0 0 0"");      Random rand = new Random();     while (true) {         int choice = rand.nextInt(my_words.size());         System.out.println(""Choice = "" + my_words.get(choice));         Thread.sleep(1000);         int replaceTo = rand.nextInt(my_words.size());                   System.out.println(""Replace to = "" + my_words.get(replaceTo));         my_words.set(choice, my_words.get(replaceTo));               } }"
"package com.stackoverflow.q14491966;  import java.util.Arrays;  public class Test {      public static void main(String[] args) throws Exception {         QuickRandom qr = new QuickRandom();         int[] frequencies = new int[10];         for (int i = 0; i &lt; 100000; i++) {             frequencies[(int) (qr.random() * 10)]++;         }         printDistribution(""QR"", frequencies);          frequencies = new int[10];         for (int i = 0; i &lt; 100000; i++) {             frequencies[(int) (Math.random() * 10)]++;         }         printDistribution(""MR"", frequencies);     }      public static void printDistribution(String name, int[] frequencies) {         System.out.printf(""%n%s distribution |8000     |9000     |10000    |11000    |12000%n"", name);         for (int i = 0; i &lt; 10; i++) {             char[] bar = ""                                                  "".toCharArray(); // 50 chars.             Arrays.fill(bar, 0, Math.max(0, Math.min(50, frequencies[i] / 100 - 80)), '#');             System.out.printf(""0.%dxxx: %6d  :%s%n"", i, frequencies[i], new String(bar));         }     }  }"
"static class MyWorker extends SwingWorker&lt;String, String&gt; {      private final JTextArea area;      MyWorker(JTextArea area) {         this.area = area;     }      @Override     public String doInBackground() {         for (int i = 0; i &lt; 100; i++) {             try { Thread.sleep(10); } catch (InterruptedException e) {}             publish(""Processing... "" + i);         }         return ""Done"";     }     @Override     protected void process(List&lt;String&gt; chunks) {         for (String c : chunks) area.insert(c + ""\n"", 0);     }     @Override     protected void done() {         try {             area.insert(get() + ""\n"", 0);         } catch (Exception e) {             e.printStackTrace();         }     } }"
"public static void main(String[] args) {         //Create GUI on EDT Thread         SwingUtilities.invokeLater(new Runnable() {             @Override             public void run() {                    JFrame frame = new JFrame(""JScroll Pane Test"");                   frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);                      JTextArea txtNotes = new JTextArea();                   txtNotes.setText(""Hello World"");                   JScrollPane scrollPane = new JScrollPane(txtNotes);                   frame.add(scrollPane);//add components                    frame.pack();                   frame.setVisible(true);//show (after adding components)             }         }); }"
