code
"import twitter4j.Twitter; import twitter4j.TwitterException; import twitter4j.TwitterFactory; import twitter4j.auth.AccessToken; import twitter4j.auth.RequestToken;  public class TwitterUtils {  public static void main(String[] args) {     try {          final String consumerKey = ""**********"";         final String consumerSecret = ""**********"";         Twitter twitter = new TwitterFactory().getInstance();         twitter.setOAuthConsumer(consumerKey, consumerSecret);         RequestToken requestToken = twitter.getOAuthRequestToken();          String token = requestToken.getToken();         String tokenSecret = requestToken.getTokenSecret();         System.out.println(""My token :: "" + token);         System.out.println(""My token Secret :: "" + tokenSecret);          //AccessToken a = new AccessToken(token, tokenSecret);         //twitter.setOAuthAccessToken(a);         twitter.updateStatus(""If you're reading this on Twitter, it worked!"");      } catch (TwitterException e) {         e.printStackTrace();     } }//main }/"
"import java.io.UnsupportedEncodingException; import java.util.regex.Matcher; import java.util.regex.Pattern;  public class UTF8 {     public static void main(String[] args) {         String utf8tweet = """";         try {             byte[] utf8Bytes = ""#Hello twitter ÔÅä How are you?"".getBytes(""UTF-8"");              utf8tweet = new String(utf8Bytes, ""UTF-8"");          } catch (UnsupportedEncodingException e) {             e.printStackTrace();         }         Pattern unicodeOutliers = Pattern.compile(""[^\\x00-\\x7F]"",                 Pattern.UNICODE_CASE | Pattern.CANON_EQ                         | Pattern.CASE_INSENSITIVE);         Matcher unicodeOutlierMatcher = unicodeOutliers.matcher(utf8tweet);          System.out.println(""Before: "" + utf8tweet);         utf8tweet = unicodeOutlierMatcher.replaceAll("" "");         System.out.println(""After: "" + utf8tweet);     } }"
"public static void sendToTwitter(String tweet) {         ConfigurationBuilder cb = new ConfigurationBuilder();         cb.setDebugEnabled(true)           .setOAuthConsumerKey(""---"")           .setOAuthConsumerSecret(""---"")           .setOAuthAccessToken(""---"")           .setOAuthAccessTokenSecret(""---"");          TwitterFactory tf = new TwitterFactory(cb.build());         Twitter t = tf.getInstance();          try {         t.updateStatus(tweet);         } catch (TwitterException te) {             te.printStackTrace();         }     }"
"public static Result social() {     final F.Promise&lt;WS.Response&gt; twitterPromise = WS.url(""http://search.twitter.com/search.json"").setQueryParameter(""q"", ""playframework"").get();     final F.Promise&lt;WS.Response&gt; githubPromise = WS.url(""https://api.github.com/legacy/repos/search/playframework"").get();      return async(             twitterPromise.flatMap(                     new F.Function&lt;WS.Response, F.Promise&lt;Result&gt;&gt;() {                         public F.Promise&lt;Result&gt; apply(final WS.Response twitterResponse) {                             return githubPromise.map(                                     new F.Function&lt;WS.Response, Result&gt;() {                                         public Result apply(final WS.Response githubResponse) {                                             return ok(views.html.social.render(twitterResponse.asJson().findValuesAsText(""text""), githubResponse.asJson().findValuesAsText(""name"")));                                         }                                     }                             );                         }                     }             )     ); }"
"import java.util.*; import javax.mail.*; import javax.mail.internet.*; import javax.activation.*;    class SendAttachment {      public static void main(String [] args)     {             String to=""ABC@gmail.com"";//change accordingly            final String user=""ABC@XYZ.com"";//change accordingly            final String password=""xxxxx"";//change accordingly               //1) get the session object               Properties properties = System.getProperties();           properties.setProperty(""mail.smtp.host"", ""mail.javatpoint.com"");            properties.put(""mail.smtp.auth"", ""true"");              Session session = Session.getDefaultInstance(properties,                    new javax.mail.Authenticator() {                protected PasswordAuthentication getPasswordAuthentication() {                    return new PasswordAuthentication(user,password);    }   });                 //2) compose message               try{                 MimeMessage message = new MimeMessage(session);                 message.setFrom(new InternetAddress(user));                  message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));                 message.setSubject(""Message Aleart"");                       //3) create MimeBodyPart object and set your message text                     BodyPart messageBodyPart1 = new MimeBodyPart();                  messageBodyPart1.setText(""This is message body"");                        //4) create new MimeBodyPart object and set DataHandler object to this object                     MimeBodyPart messageBodyPart2 = new MimeBodyPart();                   String filename = ""SendAttachment.java"";//change accordingly                  DataSource source = new FileDataSource(filename);                 messageBodyPart2.setDataHandler(new DataHandler(source));                 messageBodyPart2.setFileName(filename);                           //5) create Multipart object and add MimeBodyPart objects to this object                     Multipart multipart = new MimeMultipart();                 multipart.addBodyPart(messageBodyPart1);                  multipart.addBodyPart(messageBodyPart2);                    //6) set the multiplart object to the message object                 message.setContent(multipart );                      //7) send message                 Transport.send(message);                   System.out.println(""message sent...."");             }catch (MessagingException ex) {ex.printStackTrace();}       } }"
"package com.mycompany.employee.utils;  import java.io.UnsupportedEncodingException; import java.util.Properties; import javax.mail.Message; import javax.mail.MessagingException; import javax.mail.Session; import javax.mail.Transport; import javax.mail.internet.InternetAddress; import javax.mail.internet.MimeMessage;  /**  * @author Mlungisi  *  */ public class GMail {      public static void sendMail(String senderEmail, String recipientEmail, String subject, String message) throws MessagingException, UnsupportedEncodingException {          // SSL // I USED THIS METHOD                     Properties propsSSL = new Properties();          // EVEN IF YOU SKIP THESE TWO PROP IT WOULD WORK         propsSSL.put(""mail.transport.protocol"", ""smtps"");         propsSSL.put(""mail.smtps.host"", ""smtp.gmail.com"");          // THIS IS THE MOST IMPORTANT PROP --&gt; ""mail.smtps.auth""         propsSSL.put(""mail.smtps.auth"", ""true"");          Session sessionSSL = Session.getInstance(propsSSL);         sessionSSL.setDebug(true);          Message messageSSL = new MimeMessage(sessionSSL);         messageSSL.setFrom(new InternetAddress(""yourgmail@gmail.com"", ""Mlungisi Sincuba""));         messageSSL.setRecipients(Message.RecipientType.TO, InternetAddress.parse(""yourgmail@gmail.com"")); // real recipient         messageSSL.setSubject(""Test mail using SSL"");         messageSSL.setText(""This is test email sent to Your account using SSL."");          Transport transportSSL = sessionSSL.getTransport();         // EVEN IF YOU SKIP PORT NUMBER , IT WOULD WORK         transportSSL.connect(""smtp.gmail.com"", 465, ""yourgmail@gmail.com"", ""yourpassword""); // account used         transportSSL.sendMessage(messageSSL, messageSSL.getAllRecipients());         transportSSL.close();          System.out.println(""SSL done."");     }      public static void main(String[] args) throws MessagingException, UnsupportedEncodingException {         System.out.println(""Hello World!"");         sendMail(null, null, null, null);     } }"
"import java.io.*; import java.net.InetAddress; import java.util.Properties; import java.util.Date;  import javax.mail.*;  import javax.mail.internet.*;  import com.sun.mail.smtp.*;   public class Distribution {      public static void main(String args[]) throws Exception {         Properties props = System.getProperties();         props.put(""mail.smtps.host"",""smtp.gmail.com"");         props.put(""mail.smtps.auth"",""true"");         Session session = Session.getInstance(props, null);         Message msg = new MimeMessage(session);         msg.setFrom(new InternetAddress(""mail@tovare.com""));;         msg.setRecipients(Message.RecipientType.TO,         InternetAddress.parse(""tov.are.jacobsen@iss.no"", false));         msg.setSubject(""Heisann ""+System.currentTimeMillis());         msg.setText(""Med vennlig hilsennTov Are Jacobsen"");         msg.setHeader(""X-Mailer"", ""Tov Are's program"");         msg.setSentDate(new Date());         SMTPTransport t =             (SMTPTransport)session.getTransport(""smtps"");         t.connect(""smtp.gmail.com"", ""admin@tovare.com"", ""&lt;insert password here&gt;"");         t.sendMessage(msg, msg.getAllRecipients());         System.out.println(""Response: "" + t.getLastServerResponse());         t.close();     } }"
"import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.net.HttpURLConnection; import java.net.URL;  public class HttpPost {      /**      * @param args      */     public static void main(String[] args) {         // TODO Auto-generated method stub          String postUrl = ""https://connect.clickatell.com/[AuthenticationToken]"";              try {                 String tStatus = """";                 URL url = new URL(postUrl + ""&amp;XML=&lt;clickatellsdk&gt;&lt;action&gt;get_list_country&lt;/action&gt;&lt;/clickatellsdk&gt;"");                  BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));                  String line;                 while ((line = br.readLine()) != null)                 {                     tStatus = line;                     System.out.println(tStatus);                 }              } catch (Exception e)             {                 //Handle Exception             }      }  }"
"import java.io.*;  import java.util.Arrays;  public class CSVRead{  public static void main(String[] arg) throws Exception {     Map&lt;String, String&gt; emailPasswordMap = new HashMap&lt;String, String&gt; ();     BufferedReader CSVFile =         new BufferedReader(new FileReader(""testa453.csv""));     String dataRow = CSVFile.readLine();     while (dataRow != null){         String[] dataArray = dataRow.split("","");         emailPasswordMap.put (dataArray[0], dataArray[1]);         dataRow = CSVFile.readLine();     }     CSVFile.close();      String email = ""xxx"";     String password = ""yyy"";      if (password.equals (emailPasswordMap.get (email)) {         System.out.println (""Email/password combination is valid"");     }     else {         System.out.println (""Email/password combination is invalid"");     } }"
"public class TwitterActivity extends ListActivity {     List&lt;String&gt; tweets = new LinkedList&lt;String&gt;();      @Override     public void onCreate(Bundle savedInstanceState) {             super.onCreate(savedInstanceState);              setListAdapter(new ArrayAdapter&lt;String&gt;(this, R.layout.layout, tweets));             ListView lv = getListView();             lv.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){                     @Override                     public boolean onItemLongClick(AdapterView&lt;?&gt; av, View v, int pos, long id)                    {                         Toast.makeText(TwitterActivity.this, ""LongClick"", Toast.LENGTH_LONG).show();                   }               });       } }"
"import java.lang.reflect.*; import java.io.*; import java.util.*; import com.google.gson.*; import com.google.gson.reflect.*;  public class tweetfeedreader {   public static void main(String args[]) throws IOException {     Gson gson = new Gson();     BufferedReader bufferedReader = new BufferedReader(new FileReader(             ""jsonfile.json""));     String line;     StringBuilder sb = new StringBuilder();     while ((line = bufferedReader.readLine()) != null) sb.append(line);     Type tweetCollection = new TypeToken&lt;Collection&lt;tweet&gt;&gt;(){}.getType();     Collection&lt;tweet&gt; tweets = gson.fromJson(line, tweetCollection);     for (final tweet t : tweets) System.out.println(t.text);   } }"
"import java.io.IOException; import java.net.MalformedURLException; import java.net.UnknownHostException;  import jcifs.smb.SmbException; import jcifs.smb.SmbFileInputStream;  public class Example {     public static void main(String[] args)     {         SmbFileInputStream fis = null;         try         {             fis = new SmbFileInputStream(""smb://DOMAIN;USERNAME:PASSWORD@SERVER/SHARE/filename.txt"");             // handle as you would a normal input stream... this example prints the contents of the file             int length;             byte[] buffer = new byte[1024];             while ((length = fis.read(buffer)) != -1)             {                 for (int x = 0; x &lt; length; x++)                 {                     System.out.print((char) buffer[x]);                 }             }         }         catch (MalformedURLException e)         {             e.printStackTrace();         }         catch (UnknownHostException e)         {             e.printStackTrace();         }         catch (SmbException e)         {             e.printStackTrace();         }         catch (IOException e)         {             e.printStackTrace();         }         finally         {             if (fis != null)             {                 try                 {                     fis.close();                 }                 catch (Exception ignore)                 {                 }             }         }     } }"
"import javafx.application.Application; import javafx.event.EventHandler; import javafx.scene.Scene; import javafx.scene.input.MouseEvent; import javafx.scene.layout.BorderPane; import javafx.stage.Stage; import javafx.stage.StageStyle;  public class SimpleWindowApplication extends Application {     private double xOffset = 0;     private double yOffset = 0;      public static void main(String[] args) {         launch(args);     }      @Override     public void start(final Stage primaryStage) {         primaryStage.initStyle(StageStyle.UNDECORATED);         BorderPane root = new BorderPane();          root.setOnMousePressed(new EventHandler&lt;MouseEvent&gt;() {             @Override             public void handle(MouseEvent event) {                 xOffset = event.getSceneX();                 yOffset = event.getSceneY();             }         });         root.setOnMouseDragged(new EventHandler&lt;MouseEvent&gt;() {             @Override             public void handle(MouseEvent event) {                 primaryStage.setX(event.getScreenX() - xOffset);                 primaryStage.setY(event.getScreenY() - yOffset);             }         });          Scene scene = new Scene(root, 800, 600);         primaryStage.setScene(scene);         primaryStage.show();     } }"
"public class WelcomFilter implements javax.servlet.Filter {  /** {@inheritDoc} */ @Override public void init(FilterConfig filterConfig) throws ServletException {  }  /** {@inheritDoc} */ @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {     if (request instanceof HttpServletRequest) {         HttpServletRequest r = (HttpServletRequest) request;         if (""/"".equals(r.getPathInfo())) {             r.getRequestDispatcher(""index.html"").forward(request, response);         } else {             chain.doFilter(request, response);         }     } else {         chain.doFilter(request, response);     } }  /** {@inheritDoc} */ @Override public void destroy() {  } }"
"import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer;  import java.io.IOException; import java.io.OutputStream; import java.net.InetSocketAddress;  public class SimpleHttpServer {     public static void main(String[] args) throws IOException {         HttpServer server = HttpServer.create(new InetSocketAddress(8888), 0);         server.createContext(""/foo"", new HttpHandler() {             public void handle(HttpExchange t) throws IOException {                 t.sendResponseHeaders(200, 0);                 OutputStream out = t.getResponseBody();                 out.write(""hello world"".getBytes());                 out.close();             }         });         server.start();     } }"
"import javax.servlet.*; import javax.servlet.http.HttpServletResponse; import java.io.IOException; import java.util.Date;  public class CacheControlFilter implements Filter {      public void doFilter(ServletRequest request, ServletResponse response,                          FilterChain chain) throws IOException, ServletException {          HttpServletResponse resp = (HttpServletResponse) response;         resp.setHeader(""Expires"", ""Tue, 03 Jul 2001 06:00:00 GMT"");         resp.setDateHeader(""Last-Modified"", new Date().getTime());         resp.setHeader(""Cache-Control"", ""no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0"");         resp.setHeader(""Pragma"", ""no-cache"");          chain.doFilter(request, response);     }  }"
"import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Collections; import java.util.Date; import java.util.List;   public class Parse {      /**      * @param args      * @throws ParseException       */     public static void main(String[] args) throws ParseException {         StringBuilder sb = new StringBuilder();         sb.append(""(comment:file_02389.txt,lastmodified:Wed Oct 10 19:10:49)"").append(""\n"");         sb.append(""(comment:file_02342.txt,lastmodified:Wed Oct 10 17:16:08)"").append(""\n"");         sb.append(""(comment:file_02315.txt,lastmodified:Wed Oct 10 18:45:12)"").append(""\n"");         sb.append(""(comment:file_02344.txt,lastmodified:Wed Oct 10 08:31:01)"").append(""\n"");              //create a date format that can parse dates formatted in the file         SimpleDateFormat sdf = new SimpleDateFormat(""EEE MMM dd HH:mm:ss"");              //read the file into an array of lines (or read one line at a time)         String[] lines = sb.toString().split(""\n"");              //create an array of pair objects to hold the line as well as the date         List&lt;Pair&gt; list = new ArrayList&lt;Pair&gt;();           for(int i=0;i&lt;lines.length;i++){                     //get the date component of the line             String dateString = lines[i].substring(lines[i].length()-20, lines[i].length()-1);              Pair pair = new Pair();             pair.date = sdf.parse(dateString);              pair.line = lines[i];             list.add(pair);         }         Collections.sort(list);         System.out.println(list.get(list.size()-1).line);     } } class Pair implements Comparable&lt;Pair&gt;{      public Date date;     public String line;      @Override     public int compareTo(Pair o) {         return date.compareTo(o.date);     }  }"
"package com.jenkov.seo.web;  import java.io.IOException; import javax.servlet.*; import javax.servlet.http.HttpServletRequest;  public class MaintenanceModeFilter     implements Filter {      public MaintenanceModeFilter()     {         mode = 0;         maintenanceUrl = null;         maintenanceGuiUrl = null;         password = null;         comment = null;     }      public void init(FilterConfig filterconfig)         throws ServletException     {         maintenanceUrl = filterconfig.getInitParameter(""maintenanceUrl"");         maintenanceGuiUrl = filterconfig.getInitParameter(""maintenanceGuiUrl"");         password = filterconfig.getInitParameter(""password"");     }      public void doFilter(ServletRequest servletrequest, ServletResponse servletresponse, FilterChain filterchain)         throws IOException, ServletException     {         HttpServletRequest httpservletrequest = (HttpServletRequest)servletrequest;         if(servletrequest.getParameter(""maintenance-mode"") != null)         {             if(password.equals(servletrequest.getParameter(""password"")))             {                 mode = Integer.parseInt(servletrequest.getParameter(""maintenance-mode""));                 comment = servletrequest.getParameter(""aComment"");                 servletrequest.getRequestDispatcher(maintenanceGuiUrl).include(servletrequest, servletresponse);             }             return;         }         if(mode != 0 &amp;&amp; !httpservletrequest.getServletPath().equals(maintenanceGuiUrl))         {             servletrequest.setAttribute(""comment"", comment);             servletrequest.getRequestDispatcher(maintenanceUrl).include(servletrequest, servletresponse);             return;         } else         {             filterchain.doFilter(servletrequest, servletresponse);             return;         }     }      public void destroy()     {     }      public static final int MODE_NORMAL_OPERATION = 0;     protected int mode;     protected String maintenanceUrl;     protected String maintenanceGuiUrl;     protected String password;     protected String comment; }"
"import java.awt.event.*;  import java.awt.*;  import javax.swing.*;  public class Feedback extends JApplet implements ActionListener {     private JTextField login;      private JTextField email;     private JTextField comments;     private final String SUBMIT=""SUBMIT"";     private final String CLEAR=""CLEAR"";     public void actionPerformed(ActionEvent e)     {         String command = e.getActionCommand();         if(CLEAR.equals(command))             {login.setText("" "");             email.setText("" "");             comments.setText("" "");}         else if(SUBMIT.equals(command))            {             login.setText("" "");             email.setText("" "");             comments.setText("" "");            }         }      public void start()     {         Container contentPane = getContentPane();         JScrollPane sPane = new JScrollPane();         JPanel pContPanel = new JPanel();          pContPanel.setLayout(new GridBagLayout());          GridBagConstraints gbc = new GridBagConstraints(3, 4, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(10,10,10,10), 20, 20);          JLabel title = new JLabel(""FEEDBACK"");         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 0;         gbc.gridy = 0;         gbc.gridwidth = 3;         pContPanel.add(title, gbc);          JPanel panel1 = new JPanel();         JLabel prompt = new JLabel(""LOGIN"");         panel1.add(prompt, gbc);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 0;         gbc.gridy = 1;         gbc.gridwidth = 1;         pContPanel.add(panel1, gbc);          login = new JTextField(15);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 1;         gbc.gridy = 1;         gbc.gridwidth = 2;         pContPanel.add(login, gbc);          JPanel panel2=new JPanel();         JLabel print = new JLabel(""EMAIL"");         panel2.add(print);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 0;         gbc.gridy = 2;         gbc.gridwidth = 1;         pContPanel.add(panel2, gbc);          email = new JTextField(30);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 1;         gbc.gridy = 2;         gbc.gridwidth = 2;         pContPanel.add(email, gbc);          JPanel panel3=new JPanel();         JLabel ask = new JLabel(""COMMENTS"");         panel3.add(ask);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 0;         gbc.gridy = 3;         gbc.gridwidth = 1;         pContPanel.add(panel3, gbc);          comments = new JTextField(50);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 1;         gbc.gridy = 3;         gbc.gridwidth = 2;         pContPanel.add(comments, gbc);          JButton bSUBMIT = new JButton(SUBMIT);         bSUBMIT.addActionListener(this);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 0;         gbc.gridy = 4;         gbc.gridwidth = 1;         pContPanel.add(bSUBMIT, gbc);          JButton bCLEAR = new JButton(CLEAR);         bCLEAR.addActionListener(this);         gbc.fill = GridBagConstraints.HORIZONTAL;         gbc.gridx = 1;         gbc.gridy = 4;         pContPanel.add(bCLEAR, gbc);            sPane.setViewportView(pContPanel);          contentPane.add(sPane, BorderLayout.CENTER);         }     }"
"import java.io.BufferedReader; import java.io.FileReader; import java.io.IOException;  import com.google.gson.Gson;  class Rule {    String  element;    boolean skip; }  class ElementParser {    String[] comment;    Rule[]   rules; }  public class JSonDecoder {    public static void main( String[] args ) throws IOException {       try( BufferedReader reader =               new BufferedReader( new FileReader( ""Skip.json"" ))) {          System.out.println(              new Gson().fromJson( reader, ElementParser.class ).toString());       }    } }"
"package forum13652303;  import java.io.File; import java.util.*; import javax.xml.bind.*; import org.eclipse.persistence.jaxb.JAXBContextProperties;  public class Demo {      public static void main(String[] args) throws Exception {         Map&lt;String, Object&gt; properties = new HashMap&lt;String, Object&gt;(1);         properties.put(JAXBContextProperties.MEDIA_TYPE, ""application/json"");         JAXBContext jc = JAXBContext.newInstance(new Class[] {Customer.class}, properties);          Unmarshaller unmarshaller = jc.createUnmarshaller();         File json = new File(""src/forum13652303/input.json"");         Customer customer = (Customer) unmarshaller.unmarshal(json);          Marshaller marshaller = jc.createMarshaller();         marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);         marshaller.marshal(customer, System.out);     }  }"
"package mypackage;  import java.io.IOException;  import javax.servlet.Filter; import javax.servlet.FilterChain; import javax.servlet.FilterConfig; import javax.servlet.ServletException; import javax.servlet.ServletRequest; import javax.servlet.ServletResponse; import javax.servlet.http.HttpServletRequest;  public class MyFilter implements Filter {      private String pattern;      @Override     public void destroy() {         // TODO Auto-generated method stub     }      @Override     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)             throws IOException, ServletException {         // check whether we have a httpServletRequest and a pattern         if (this.pattern != null &amp;&amp; request instanceof HttpServletRequest) {             // resolve the query string from the httpServletRequest             String queryString = ((HttpServletRequest) request).getQueryString();             // check whether a query string exists and matches the given pattern             if (queryString != null &amp;&amp; queryString.matches(pattern)) {                 // TODO do someting special             }         }         chain.doFilter(request, response);     }      @Override     public void init(FilterConfig filterConfig) throws ServletException {         this.pattern = filterConfig.getInitParameter(""pattern"");     }  }"
"import javafx.application.Application; import javafx.beans.*; import javafx.beans.property.*; import javafx.collections.*; import javafx.event.*; import javafx.scene.Scene; import javafx.scene.control.*; import javafx.scene.layout.*; import javafx.stage.Stage; import javafx.util.Callback;  public class ListViewTextHighlighter extends Application {     public static void main(String[] args) throws Exception { launch(args); }      private static final String LOREM = ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent ullamcorper, tellus nec adipiscing luctus, diam urna dignissim justo, et pellentesque tortor turpis non leo. Praesent ut sagittis tellus, et adipiscing metus. Mauris lectus sem, gravida eget leo quis, pretium interdum justo. Cras elit lorem, euismod sed dolor in, vulputate hendrerit felis. Maecenas fermentum vulputate ligula vel sodales. Donec semper risus mattis, scelerisque tortor at, mattis orci. Nunc laoreet at risus nec placerat. Maecenas quis nunc est. Interdum et malesuada fames ac ante ipsum primis in faucibus.\n\nDuis tincidunt, enim eget adipiscing interdum, nulla justo mattis ante, eget hendrerit dolor nulla mattis turpis. Phasellus in enim leo. Donec bibendum nisi odio, eget interdum augue ornare elementum. Nullam eget ipsum nec risus dapibus feugiat. Curabitur gravida nisl eget aliquet ultricies. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc quis scelerisque mi. Fusce venenatis convallis purus eu suscipit. Nullam augue dolor, ultrices ornare elementum ut, lobortis vel erat. Pellentesque molestie massa non ante imperdiet, venenatis ultricies lorem egestas. Nam enim libero, posuere id nisi sit amet, tempus lobortis purus. Nam ut tortor et est lacinia semper vitae vel tortor. Donec rhoncus tellus dignissim volutpat luctus. Mauris sit amet nisi sem.\n\nMaecenas accumsan tincidunt lectus, id vestibulum dui eleifend in. Mauris ac orci lacus. Suspendisse nec nisl tellus. In tincidunt augue et ligula accumsan, a sollicitudin elit venenatis. Nulla in tempus ipsum, eu porttitor ipsum. Nam neque leo, commodo a porta fermentum, mollis vel dolor. Maecenas feugiat eros volutpat erat fringilla aliquam mollis at dui. Fusce vel velit est. Aliquam pretium elit id massa aliquam, ac egestas erat hendrerit.\n\nNunc ut nulla ut lectus bibendum molestie sit amet non sem. Praesent a est quis nulla tempor adipiscing in malesuada libero. Aliquam nec dolor est. Proin elementum lorem vitae nunc convallis, laoreet mattis nisl facilisis. Sed neque leo, aliquet ut ligula ac, placerat vehicula mi. Fusce varius eget enim quis laoreet. Phasellus a porta mauris. Vestibulum feugiat sed enim vel semper. Nullam porttitor in nibh at faucibus. Donec sed nunc vitae erat ornare porttitor. Donec sodales libero id porttitor gravida.\n\nPhasellus feugiat egestas lorem, nec interdum lacus imperdiet id. Sed elementum neque vitae quam faucibus vulputate. Ut risus nisl, tincidunt nec lacinia eu, ultricies at neque. Nulla facilisi. Quisque a odio eget erat pulvinar pellentesque. Suspendisse in odio non nisi tristique pellentesque nec non est. Vivamus scelerisque pulvinar suscipit. Fusce quis eleifend risus, quis sollicitudin libero.\n\nMaecenas facilisis odio urna, at egestas nulla pellentesque eget. Proin ac luctus urna, consequat luctus arcu. Etiam egestas nisl vel metus suscipit, consectetur facilisis nulla varius. Fusce augue lorem, dapibus id mauris vel, feugiat dapibus tellus. Aliquam posuere elit sit amet felis interdum, consequat consectetur nulla adipiscing. Donec viverra pellentesque iaculis. Mauris arcu neque, laoreet a accumsan nec, dignissim id erat. Sed vehicula id nulla eu eleifend.\n\nDonec pretium quam ac rutrum feugiat. Praesent lobortis tellus non odio laoreet cursus. Vivamus porta orci venenatis, faucibus risus eget, aliquam orci. Donec odio ligula, consequat id ultrices sed, cursus auctor nibh. Suspendisse nec dui mauris. Integer interdum commodo nisi vel dictum. Integer a sem tristique, interdum nibh nec, consequat risus. Morbi volutpat nisi sapien, nec porttitor neque convallis in. Vestibulum eleifend, nisi ac malesuada aliquet, lacus elit venenatis dui, sit amet dapibus eros turpis eu mauris. Nunc non feugiat mauris. Pellentesque fermentum purus sed mauris dignissim varius. Proin risus tellus, blandit vel auctor ut, ultrices vitae massa. Duis pharetra odio eu eleifend vestibulum.\n\nNam risus nisl, auctor et mollis nec, commodo eu quam. Nunc nec fermentum dui, non sollicitudin urna. Praesent adipiscing elit magna, a venenatis diam dignissim et. Pellentesque imperdiet vestibulum lobortis. Curabitur ac risus nec dui mollis facilisis. Sed euismod iaculis nulla, sed faucibus neque consectetur sed. Etiam vel accumsan sem. Praesent dictum vestibulum auctor. Integer condimentum sollicitudin ullamcorper. Nulla lacinia ac tortor eu bibendum. Maecenas quis hendrerit augue, ac vulputate lorem. Vestibulum eget ipsum iaculis, sollicitudin turpis vel, interdum metus. Mauris id posuere orci.\n\nAliquam a cursus magna. Fusce luctus, nisi eu mattis accumsan, arcu ante fermentum ipsum, sed lobortis sapien velit non nisi. Proin at lectus imperdiet, suscipit eros sed, commodo tortor. Praesent eget ligula vitae tellus accumsan congue. Mauris ullamcorper risus vel dolor pellentesque, id volutpat nunc posuere. Fusce scelerisque sagittis purus, ut luctus mi eleifend ac. Proin pharetra commodo justo, quis ornare arcu tempor sed. Nullam blandit justo eu elementum eleifend. Nullam elit magna, scelerisque a sem quis, luctus eleifend augue. Ut ultricies tortor ligula, eget elementum lorem iaculis eget. Suspendisse eget libero mattis risus pulvinar sodales. Fusce ut sodales mauris. Aenean ac nibh sem. In non pretium dui. Nam vel mattis orci, ut condimentum sapien.\n\nNulla quis eros felis. Cras blandit accumsan ipsum, ac faucibus massa feugiat sagittis. Duis vitae diam dui. In pretium dapibus urna, a vulputate mi dictum nec. Sed id consequat augue. Integer ut nunc et neque ornare imperdiet vitae non erat. Curabitur non faucibus purus. Praesent velit ante, dictum vitae quam et, tempus ultricies mauris. Ut viverra ligula tellus, ac mattis leo fermentum eu. Praesent lobortis augue quis orci tristique, ac elementum enim aliquam. Ut ac eros consequat, vehicula nibh at, aliquet leo. Donec erat neque, sagittis a turpis ac, dictum consequat felis.\n\nVivamus a libero volutpat nunc molestie dignissim. Maecenas fermentum vulputate tempor. In laoreet eu purus ac commodo. Fusce velit eros, porttitor nec dui vitae, aliquet adipiscing lectus. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. In molestie leo nibh, eget posuere mi accumsan eu. Sed venenatis elit nisi, id mattis dolor eleifend eget. Vivamus sit amet diam quis dolor lobortis tempor. Suspendisse faucibus imperdiet turpis in fringilla. Vestibulum commodo facilisis viverra. Fusce porta risus at leo dictum, a condimentum dolor faucibus. Aenean lobortis tellus purus, at adipiscing leo hendrerit vitae. Sed sed posuere nisi.\n\nUt sit amet dignissim elit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Nulla elit nibh, malesuada non est venenatis, fringilla pharetra velit. Morbi in velit ut arcu lobortis malesuada. Integer et eleifend mauris, eget malesuada velit. Sed posuere vulputate egestas. Sed eleifend sollicitudin purus sit amet vehicula. Nulla odio diam, posuere non enim cursus, consequat cursus enim. Curabitur at ipsum felis. Donec consectetur nunc id urna commodo, at fermentum est blandit. Suspendisse potenti. Sed in semper tortor. Suspendisse in augue eu sapien vehicula malesuada eget nec mauris.\n\nNunc imperdiet ullamcorper metus, ac dapibus quam sodales viverra. Quisque commodo urna diam, ac rhoncus sapien euismod non. Fusce tincidunt diam dui, tempus bibendum purus fermentum in. Ut sed sapien sed nibh tempor aliquam. Pellentesque ullamcorper eros ac mauris interdum vehicula. Pellentesque et metus sit amet mauris blandit egestas eget sit amet ligula. Nunc quis risus semper, tempus nulla sed, viverra ipsum. Donec sed ante imperdiet, ornare quam eu, euismod urna. Morbi quis sollicitudin odio. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque id arcu gravida, adipiscing felis in, tristique orci. Morbi sit amet arcu quis sapien iaculis ultricies. Integer imperdiet auctor enim in elementum. Duis felis leo, congue vel dui nec, porttitor egestas urna.\n\nSuspendisse potenti. Praesent lectus purus, lacinia et porttitor sed, ultrices nec lectus. Cras sollicitudin nulla eget lectus pellentesque pulvinar. Etiam lobortis pulvinar libero adipiscing porttitor. Praesent id urna lectus. Vestibulum quis laoreet orci. Integer in augue et tortor tempus vestibulum in vitae orci. Curabitur eleifend leo quis augue commodo rhoncus. Aenean placerat metus in mattis hendrerit.\n\nProin auctor odio eu congue ultricies. Praesent ultricies, massa sit amet adipiscing tristique, est dui ornare risus, at congue arcu orci at libero. In hac habitasse platea dictumst. Duis ut lectus nibh. Vivamus ut metus id quam malesuada mattis nec viverra dolor. Suspendisse potenti. Nullam ut elit orci.\n\nIn laoreet eleifend ligula, sed dapibus ligula aliquam vitae. Sed mattis fermentum elit vitae placerat. Donec venenatis congue lacinia. Nam convallis vestibulum porttitor. Cras non nunc tellus. Nullam ut convallis orci. Sed sed malesuada urna, quis elementum dolor. Aliquam ullamcorper ornare nisi ut scelerisque. Sed cursus placerat mi ac tempor. Mauris ut mauris nec magna convallis pulvinar id ut lacus. Fusce convallis sollicitudin varius. Praesent molestie pellentesque diam auctor iaculis.\n\nPellentesque pharetra, tellus porta aliquam posuere, neque enim hendrerit turpis, at sagittis arcu mi sed tellus. Maecenas augue ante, porta a iaculis ut, aliquam et dui. Ut adipiscing tortor libero, id sodales enim posuere sed. Pellentesque tellus urna, mollis a bibendum ut, vehicula vel metus. Nunc sodales ante ut bibendum fringilla. Ut nunc mauris, pellentesque eget velit non, rhoncus porta diam. Curabitur eleifend nibh diam, nec tempus arcu facilisis vitae.\n\nNunc posuere nibh nisl, nec ornare ipsum tempor ac. Fusce congue laoreet condimentum. Vivamus gravida risus quam, sit amet mattis diam placerat eu. Quisque dolor lectus, suscipit tempor arcu vel, adipiscing fringilla dolor. Phasellus pulvinar nisi ante, at vehicula velit volutpat iaculis. Etiam ultricies sapien ut mauris condimentum euismod. Integer felis leo, lacinia id libero et, bibendum porttitor tortor. Curabitur adipiscing purus risus, at fringilla eros posuere in. Cras adipiscing velit est, nec commodo risus sollicitudin eget. Vivamus nec adipiscing felis, sit amet tristique nunc. Phasellus vel magna sodales, luctus odio non, ornare elit. Pellentesque ut purus dui. Fusce in mattis purus, a egestas ipsum. Suspendisse fermentum neque vitae tristique adipiscing.\n\nVivamus viverra placerat scelerisque. Phasellus pretium urna id turpis adipiscing malesuada. Ut tincidunt congue neque eget tristique. Sed hendrerit dolor vel lorem gravida, ac laoreet augue condimentum. Nulla facilisi. Donec odio tellus, lacinia sed lobortis eu, aliquet sit amet elit. Ut id aliquam erat. Donec tempor eget velit non pellentesque. Morbi vitae sagittis tortor, vel bibendum lorem.\n\nMorbi consectetur neque non dolor malesuada, non ultrices velit hendrerit. Etiam porttitor erat venenatis tellus faucibus ultricies. In dictum nec quam adipiscing vulputate. Praesent fringilla, eros viverra lacinia aliquam, diam arcu egestas felis, ut consequat neque elit in erat. Etiam placerat tincidunt risus quis varius. Aenean feugiat facilisis erat at pretium. Donec id dignissim libero. Donec mauris sapien, pretium id eleifend non, pellentesque sit amet arcu. Phasellus molestie faucibus magna at gravida. Nam iaculis accumsan quam. Nunc sagittis pharetra nunc quis condimentum. Fusce sed dictum arcu. Phasellus gravida mattis turpis nec vulputate. Nunc eleifend aliquet diam, varius tristique diam pretium ut."";     private static final int    WRAPPING_WIDTH = 80;     private static final int    PREF_TEXT_DISPLAY_WIDTH = 480;      private final StringProperty searchText = new SimpleStringProperty("""");      @Override     public void start(final Stage stage) throws Exception {         VBox layout = new VBox(10);         layout.getChildren().setAll(             createSearchControls(),             createTextDisplay()         );          layout.getStylesheets().add(getClass().getResource(""highlighter.css"").toExternalForm());          stage.setTitle(""Text Highlighter"");         stage.setScene(new Scene(layout));         stage.show();     }      private ListView&lt;String&gt; createTextDisplay() {         ListView&lt;String&gt; textDisplay = new ListView&lt;&gt;(             createLinesFromString(LOREM, WRAPPING_WIDTH)         );         VBox.setVgrow(textDisplay, Priority.ALWAYS);         textDisplay.setPrefWidth(PREF_TEXT_DISPLAY_WIDTH);         textDisplay.setCellFactory(new Callback&lt;ListView&lt;String&gt;, ListCell&lt;String&gt;&gt;() {             @Override             public ListCell&lt;String&gt; call(ListView&lt;String&gt; stringListView) {                 return new SearchHighlightedTextCell(searchText);             }         });         return textDisplay;     }      private HBox createSearchControls() {         final TextField searchField = new TextField();         searchField.setPromptText(""Enter Search Text"");         final Button searchButton = new Button(""Search"");         searchButton.setDefaultButton(true);          searchButton.setOnAction(new EventHandler&lt;ActionEvent&gt;() {             @Override             public void handle(ActionEvent actionEvent) {                 searchText.setValue(searchField.getText());             }         });          HBox controls = new HBox(10);         controls.getChildren().setAll(               searchField,               searchButton         );         HBox.setHgrow(searchField, Priority.ALWAYS);         return controls;     }      private ObservableList&lt;String&gt; createLinesFromString(String lorem, int wrappingWidth) {         String[] parts = lorem.split(""\\n"");         if (wrappingWidth &lt;= 0) {             return FXCollections.observableArrayList(parts);         }          ObservableList&lt;String&gt; lines = FXCollections.observableArrayList();         for (String part: parts) {             if (part.length() == 0) {                 lines.add(part);                 continue;             }              int offset = 0;             String nextLine = getNextLine(part, offset, wrappingWidth);             while (nextLine.length() &gt; 0) {               lines.add(nextLine);               offset += nextLine.length();               nextLine = getNextLine(part, offset, wrappingWidth);             }         }          return lines;     }      private String getNextLine(String part, int offset, int wrappingWidth) {         if ((part.length() - offset) &lt;= wrappingWidth) {             return part.substring(offset);         }          int idx = wrappingWidth;         while (idx &gt;= 0) {             if (part.charAt(offset + idx) == ' ') {                 return part.substring(offset, offset + idx + 1);             }             idx--;         }          return part.substring(offset, Math.min(part.length(), offset + wrappingWidth));     } }  class SearchHighlightedTextCell extends ListCell&lt;String&gt; {     private static final String HIGHLIGHT_CLASS = ""search-highlight"";      private final StringProperty searchText;      SearchHighlightedTextCell(StringProperty searchText) {         this.searchText = searchText;     }      @Override     protected void updateItem(String text, boolean empty) {         super.updateItem(text, empty);          setText(text == null ? """" : text);          updateStyleClass();          searchText.addListener(new InvalidationListener() {             @Override             public void invalidated(Observable observable) {                 updateStyleClass();             }         });     }      private void updateStyleClass() {         if (isEmptyString(searchText.get()) || isEmptyString(getText()) || !getText().contains(searchText.get())) {             getStyleClass().remove(HIGHLIGHT_CLASS);         } else {             getStyleClass().add(HIGHLIGHT_CLASS);         }     }      private boolean isEmptyString(String text) {         return text == null || text.equals("""");     } }"
"import java.util.*; import javax.mail.*; import javax.mail.internet.*; import javax.activation.*;  public class SimpleSendEmail {     public static void main(String[] args) {          String host = ""your smtp host"";         String to = ""bbbb@ddddd.com"";         String from = ""xxxx@yyy.com"";         String subject = ""My First Email"";         String messageText = ""I am sending a message using the""                 + "" JavaMail API.\n"" + ""Here type your message."";         boolean sessionDebug = false;         Properties props = System.getProperties();         props.put(""mail.host"", host);         props.put(""mail.transport.protocol"", ""smtp"");         Session session = Session.getDefaultInstance(props, null);         // Set debug on the Session so we can see what is going on         // Passing false will not echo debug info, and passing true         // will.         session.setDebug(sessionDebug);         try {             Message msg = new MimeMessage(session);             msg.setFrom(new InternetAddress(from));             InternetAddress[] address = { new InternetAddress(to) };             msg.setRecipients(Message.RecipientType.TO, address);             msg.setSubject(subject);             msg.setSentDate(new Date());             msg.setText(messageText);              Transport.send(msg);         } catch (MessagingException mex) {             mex.printStackTrace();         }     } }"
"import java.io.IOException; import java.net.*; import java.rmi.server.*; import java.rmi.registry.LocateRegistry;  public class RestrictedRMIRegistry implements RMIServerSocketFactory {     public static void main(String... args) throws IOException {         int port = (args.length == 0 ? 1099 : Integer.parseInt(args[0], 10));         RMIClientSocketFactory csf = RMISocketFactory.getDefaultSocketFactory();         RMIServerSocketFactory ssf = new RestrictedRMIRegistry();          LocateRegistry.createRegistry(port, csf, ssf);     }      public ServerSocket createServerSocket(int port) throws IOException {         // Tricky bit; make a server socket with bound address         return new ServerSocket(port, 0, InetAddress.getLocalHost());     } }"
"import java.io.IOException; import javax.servlet.*; import javax.servlet.http.*; import javax.ws.rs.core.MediaType;  public class EnsureJsonIsUtf8ResponseFilter implements Filter {     final String APPLICATION_JSON_WITH_UTF8_CHARSET = MediaType.APPLICATION_JSON + "";charset="" + java.nio.charset.StandardCharsets.UTF_8;      @Override     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException     {         HttpServletResponse r = (HttpServletResponse) response;         HttpServletResponse wrappedResponse = new HttpServletResponseWrapper(r)          {             @Override             public ServletOutputStream getOutputStream() throws java.io.IOException             {                 ServletResponse response = this.getResponse();                  String ct = (response != null) ? response.getContentType() : null;                 if (ct != null &amp;&amp; ct.toLowerCase().startsWith(MediaType.APPLICATION_JSON))                 {                     response.setContentType(APPLICATION_JSON_WITH_UTF8_CHARSET);                 }                  return super.getOutputStream();             }         };          chain.doFilter(request, wrappedResponse);      }      @Override     public void init(FilterConfig filterConfig) throws ServletException     {         // This method intentionally left blank     }      @Override     public void destroy()     {         // This method intentionally left blank     } }"
"import java.io.*; import java.awt.event.*; import javax.swing.*; import javax.swing.text.*;  public class Console implements Runnable {     JTextArea displayPane;     BufferedReader reader;      private Console(JTextArea displayPane, PipedOutputStream pos)     {         this.displayPane = displayPane;          try         {             PipedInputStream pis = new PipedInputStream( pos );             reader = new BufferedReader( new InputStreamReader(pis) );         }         catch(IOException e) {}     }      public void run()     {         String line = null;          try         {             while ((line = reader.readLine()) != null)             { //              displayPane.replaceSelection( line + ""\n"" );                 displayPane.append( line + ""\n"" );                 displayPane.setCaretPosition( displayPane.getDocument().getLength() );             }              System.err.println(""im here"");         }         catch (IOException ioe)         {             JOptionPane.showMessageDialog(null,                 ""Error redirecting output : ""+ioe.getMessage());         }     }      public static void redirectOutput(JTextArea displayPane)     {         Console.redirectOut(displayPane);         Console.redirectErr(displayPane);     }      public static void redirectOut(JTextArea displayPane)     {         PipedOutputStream pos = new PipedOutputStream();         System.setOut( new PrintStream(pos, true) );          Console console = new Console(displayPane, pos);         new Thread(console).start();     }      public static void redirectErr(JTextArea displayPane)     {         PipedOutputStream pos = new PipedOutputStream();         System.setErr( new PrintStream(pos, true) );          Console console = new Console(displayPane, pos);         new Thread(console).start();     }      public static void main(String[] args)     {         JTextArea textArea = new JTextArea();         JScrollPane scrollPane = new JScrollPane( textArea );          JFrame frame = new JFrame(""Redirect Output"");         frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );         frame.getContentPane().add( scrollPane );         frame.setSize(200, 100);         frame.setVisible(true);          Console.redirectOutput( textArea );         final int i = 0;          Timer timer = new Timer(1000, new ActionListener()         {             public void actionPerformed(ActionEvent e)             {                 System.out.println( new java.util.Date().toString() );                 System.err.println( System.currentTimeMillis() );             }         });         timer.start();     } }"
"import java.io.*; public class CmdExec {    public static void main(String argv[]) {     try {       String line;       Process p = Runtime.getRuntime().exec         (""psql -U username -d dbname -h serverhost -f scripfile.sql"");       BufferedReader input =         new BufferedReader           (new InputStreamReader(p.getInputStream()));       while ((line = input.readLine()) != null) {         System.out.println(line);       }       input.close();     }     catch (Exception err) {       err.printStackTrace();     }   } }"
"import java.io.BufferedReader; import java.io.InputStreamReader; import java.net.HttpURLConnection; import java.net.URL; import java.net.Proxy; import java.net.InetSocketAddress; import java.io.OutputStreamWriter;  public class Curl {    public static void main(String[] args) {      try {      String url = ""http://127.0.0.1:15672/api/traces/%2f/trololo"";      URL obj = new URL(url);     HttpURLConnection conn = (HttpURLConnection) obj.openConnection();      conn.setRequestProperty(""Content-Type"", ""application/json"");     conn.setDoOutput(true);      conn.setRequestMethod(""PUT"");      String userpass = ""user"" + "":"" + ""pass"";     String basicAuth = ""Basic "" + javax.xml.bind.DatatypeConverter.printBase64Binary(userpass.getBytes(""UTF-8""));     conn.setRequestProperty (""Authorization"", basicAuth);      String data =  ""{\""format\"":\""json\"",\""pattern\"":\""#\""}"";     OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());     out.write(data);     out.close();      new InputStreamReader(conn.getInputStream());         } catch (Exception e) {     e.printStackTrace();     }    }  }"
"import javax.swing.*; import javax.swing.border.Border; import java.awt.*; import java.awt.datatransfer.DataFlavor; import java.awt.datatransfer.Transferable; import java.awt.datatransfer.UnsupportedFlavorException; import java.io.IOException; import java.io.Serializable;  public class ImagePreviewListTest {      public static void main(String[] args) throws Exception {         UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());         JFrame frame = new JFrame(""Image panel"");         frame.setSize(800, 300);         frame.setLocationByPlatform(true);         JList imageList = createImageList();         frame.getContentPane().add(new JScrollPane(imageList));         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);         frame.setVisible(true);     }      private static JList createImageList() {          JList imageList = new JList(createModel());         imageList.setCellRenderer(new ImageCellRenderer());         imageList.setLayoutOrientation(JList.HORIZONTAL_WRAP);         imageList.setVisibleRowCount(-1);         imageList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);         imageList.setFixedCellWidth(240);         imageList.setFixedCellHeight(120);          imageList.setDragEnabled(true);         imageList.setDropMode(DropMode.INSERT);         imageList.setTransferHandler(new ImageTransferHandler(imageList));          return imageList; }      private static DefaultListModel createModel() {         DefaultListModel model = new DefaultListModel();         model.addElement(new ColorIcon(Color.RED));         model.addElement(new ColorIcon(Color.GREEN));         model.addElement(new ColorIcon(Color.BLACK));         model.addElement(new ColorIcon(Color.BLUE));         model.addElement(new ColorIcon(Color.MAGENTA));         model.addElement(new ColorIcon(Color.PINK));         model.addElement(new ColorIcon(Color.YELLOW));         model.addElement(new ColorIcon(Color.ORANGE));         return model;     }      static class ImageTransferHandler extends TransferHandler {          private static final DataFlavor DATA_FLAVOUR = new DataFlavor(ColorIcon.class, ""Images"");          private final JList previewList;         private boolean inDrag;          ImageTransferHandler(JList previewList) {             this.previewList = previewList;         }          public int getSourceActions(JComponent c) {             return TransferHandler.MOVE;         }          protected Transferable createTransferable(JComponent c) {             inDrag = true;             return new Transferable() {                 public DataFlavor[] getTransferDataFlavors() {                     return new DataFlavor[] {DATA_FLAVOUR};                 }                  public boolean isDataFlavorSupported(DataFlavor flavor) {                     return flavor.equals(DATA_FLAVOUR);                 }                  public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {                     return previewList.getSelectedValue();                 }             };         }          public boolean canImport(TransferSupport support) {             if (!inDrag || !support.isDataFlavorSupported(DATA_FLAVOUR)) {                 return false;             }              JList.DropLocation dl = (JList.DropLocation)support.getDropLocation();             if (dl.getIndex() == -1) {                 return false;             } else {                 return true;             }         }          public boolean importData(TransferSupport support) {             if (!canImport(support)) {                 return false;             }              Transferable transferable = support.getTransferable();             try {                 Object draggedImage = transferable.getTransferData(DATA_FLAVOUR);                  JList.DropLocation dl = (JList.DropLocation)support.getDropLocation();                 DefaultListModel model = (DefaultListModel)previewList.getModel();                 int dropIndex = dl.getIndex();                 if (model.indexOf(draggedImage) &lt; dropIndex) {                     dropIndex--;                 }                 model.removeElement(draggedImage);                 model.add(dropIndex, draggedImage);                 return true;             } catch (Exception e) {                 e.printStackTrace();                 return false;             }         }          protected void exportDone(JComponent source, Transferable data, int action) {             super.exportDone(source, data, action);             inDrag = false;         }     }      static class ImageCellRenderer extends JPanel implements ListCellRenderer {          DefaultListCellRenderer defaultListCellRenderer = new DefaultListCellRenderer();         JLabel imageLabel = new JLabel();         JLabel descriptionLabel = new JLabel();          ImageCellRenderer() {             setLayout(new BorderLayout());             Border emptyBorder = BorderFactory.createEmptyBorder(5, 5, 5, 5);             imageLabel.setBorder(emptyBorder);             descriptionLabel.setBorder(emptyBorder);             add(imageLabel, BorderLayout.CENTER);             add(descriptionLabel, BorderLayout.SOUTH);         }          public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {             defaultListCellRenderer.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);             setBorder(defaultListCellRenderer.getBorder());             setBackground(defaultListCellRenderer.getBackground());             imageLabel.setIcon((Icon)value);             descriptionLabel.setText(""Description"");             return this;         }     }      static class ColorIcon implements Icon, Serializable {         private Color color;          ColorIcon(Color color) {             this.color = color;         }          public void paintIcon(Component c, Graphics g, int x, int y) {             g.setColor(color);             g.fillRect(x, y, getIconWidth(), getIconHeight());         }          public int getIconWidth() {             return 200;         }          public int getIconHeight() {             return 100;         }          public boolean equals(Object o) {             if (o == null || getClass() != o.getClass()) {                 return false;             }             return color.equals(((ColorIcon)o).color);         }      } }"
